{
	"id": "7089671c5cc0a191a198c73264f96849",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"ReviveFactory.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"./ReviveMultisig.sol\";\n\n/// @title  MultiSigFactory\n/// @notice A minimal factory that deploys new MultiSigWallets and keeps an on‐chain registry.\n/// @dev    Anyone can call createMultiSig; all addresses are stored in `allMultiSigs`.\ncontract MultiSigFactory {\n    /// @notice Emitted when a new MultiSigWallet is created.\n    /// @param creator    The address that called createMultiSig.\n    /// @param multisig   The newly deployed MultiSigWallet address.\n    /// @param owners     The list of owners for this new multisig.\n    /// @param required   The number of confirmations required.\n    event MultiSigCreated(\n        address indexed creator,\n        address indexed multisig,\n        address[] owners,\n        uint256 required\n    );\n\n    /// @dev All multisig addresses deployed by this factory.\n    address[] public allMultiSigs;\n\n    /// @notice Emitted when an existing MultiSigWallet is registered.\n    /// @param registrant The address that called registerExistingMultisig.\n    /// @param multisig   The multisig address being registered.\n    event MultiSigRegistered(address indexed registrant, address indexed multisig);\n\n    /// @notice Deploy a new MultiSigWallet and register its address.\n    /// @param owners    An array of owner addresses for the multisig.\n    /// @param required  The number of confirmations required (must be >0 and <= owners.length).\n    /// @return multisig The address of the newly deployed MultiSigWallet.\n    function createMultiSig(address[] memory owners, uint256 required)\n        external\n        returns (address multisig)\n    {\n        // Deploy the MultiSigWallet with the given owners and required threshold.\n        // The constructor in MultiSigWallet will revert if `owners` or `required` are invalid.\n        MultiSigWallet wallet = new MultiSigWallet(owners, required);\n        multisig = address(wallet);\n\n        // Register it on‐chain\n        allMultiSigs.push(multisig);\n\n        // Emit for indexing/logs\n        emit MultiSigCreated(msg.sender, multisig, owners, required);\n    }\n\n    /// @notice Register a previously deployed multisig address.\n    /// @param multisig The address of the multisig to register.\n    function registerExistingMultisig(address multisig) external {\n        require(multisig != address(0), \"Invalid multisig address\");\n        // Optionally, check that the address is a contract and supports isOwner(address).\n        // Try to call isOwner(address(this)) to verify.\n        bool success = false;\n        try MultiSigWallet(payable(multisig)).isOwner(address(this)) returns (bool) {\n            success = true;\n        } catch {\n            success = false;\n        }\n        require(success, \"Not a valid MultiSigWallet\");\n        allMultiSigs.push(multisig);\n        emit MultiSigRegistered(msg.sender, multisig);\n    }\n\n    /// @notice Returns the total list of multisig addresses ever created by this factory.\n    /// @return An array of addresses for all multisigs.\n    function getAllMultiSigs() external view returns (address[] memory) {\n        return allMultiSigs;\n    }\n\n    /// @notice Returns only those multisigs where `owner` is in the owners[] array.\n    /// @param owner The address to filter for.\n    /// @return myMultisigs An array of multisig addresses for which `isOwner(owner) == true`.\n    function getMyMultiSigs(address owner)\n        external\n        view\n        returns (address[] memory myMultisigs)\n    {\n        uint256 total = allMultiSigs.length;\n        // First pass: count how many match so we can allocate the result array\n        uint256 count = 0;\n        for (uint256 i = 0; i < total; i++) {\n            // Interface‐call to the deployed MultiSigWallet\n            MultiSigWallet candidate = MultiSigWallet(payable(allMultiSigs[i]));\n            if (candidate.isOwner(owner)) {\n                count++;\n            }\n        }\n\n        // Allocate a fixed‐size array, then populate\n        myMultisigs = new address[](count);\n        uint256 idx = 0;\n        for (uint256 i = 0; i < total; i++) {\n            MultiSigWallet candidate = MultiSigWallet(payable(allMultiSigs[i]));\n            if (candidate.isOwner(owner)) {\n                myMultisigs[idx] = allMultiSigs[i];\n                idx++;\n            }\n        }\n        return myMultisigs;\n    }\n}"
			},
			"ReviveMultisig.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\n/// @author Stefan George - <stefan.george@consensys.net>\ncontract MultiSigWallet {\n\n    /*\n     *  Events\n     */\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    /*\n     *  Constants\n     */\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    /*\n     *  Storage\n     */\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    /*\n     *  Modifiers\n     */\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require(transactions[transactionId].destination != address(0));\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != address(0));\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require(ownerCount <= MAX_OWNER_COUNT\n            && _required <= ownerCount\n            && _required != 0\n            && ownerCount != 0);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    receive() external payable {\n        if (msg.value > 0)\n            emit Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    constructor(address[] memory _owners, uint _required)\n        validRequirement(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != address(0));\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        emit OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.pop();\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        emit OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param newOwner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        emit OwnerRemoval(owner);\n        emit OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return transactionId Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes memory data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId];\n            txn.executed = true;\n            if (external_call(txn.destination, txn.value, txn.data.length, txn.data))\n                emit Execution(transactionId);\n            else {\n                emit ExecutionFailure(transactionId);\n                txn.executed = false;\n            }\n        }\n    }\n\n    // call has been separated into its own function in order to take advantage\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\n    function external_call(address destination, uint value, uint dataLength, bytes memory data) private returns (bool) {\n        bool result;\n        assembly {\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n            result := call(\n                sub(gas(), 34710),   // 34710 is the value that solidity is currently emitting\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n                destination,\n                value,\n                d,\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n                x,\n                0                  // Output is ignored, therefore the output size is zero\n            )\n        }\n        return result;\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        view\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n        return false;\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return transactionId Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes memory data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return count Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        view\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return count Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        view\n        returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        view\n        returns (address[] memory)\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return _confirmations Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        view\n        returns (address[] memory _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return _transactionIds Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        view\n        returns (uint[] memory _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"ReviveFactory.sol": {
				"MultiSigFactory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "creator",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "multisig",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address[]",
									"name": "owners",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "required",
									"type": "uint256"
								}
							],
							"name": "MultiSigCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "registrant",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "multisig",
									"type": "address"
								}
							],
							"name": "MultiSigRegistered",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "allMultiSigs",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "owners",
									"type": "address[]"
								},
								{
									"internalType": "uint256",
									"name": "required",
									"type": "uint256"
								}
							],
							"name": "createMultiSig",
							"outputs": [
								{
									"internalType": "address",
									"name": "multisig",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAllMultiSigs",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "getMyMultiSigs",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "myMultisigs",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "multisig",
									"type": "address"
								}
							],
							"name": "registerExistingMultisig",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"MultiSigCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"name\":\"MultiSigRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMultiSigs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"createMultiSig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMultiSigs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getMyMultiSigs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"myMultisigs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"name\":\"registerExistingMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Anyone can call createMultiSig; all addresses are stored in `allMultiSigs`.\",\"events\":{\"MultiSigCreated(address,address,address[],uint256)\":{\"params\":{\"creator\":\"The address that called createMultiSig.\",\"multisig\":\"The newly deployed MultiSigWallet address.\",\"owners\":\"The list of owners for this new multisig.\",\"required\":\"The number of confirmations required.\"}},\"MultiSigRegistered(address,address)\":{\"params\":{\"multisig\":\"The multisig address being registered.\",\"registrant\":\"The address that called registerExistingMultisig.\"}}},\"kind\":\"dev\",\"methods\":{\"createMultiSig(address[],uint256)\":{\"params\":{\"owners\":\"An array of owner addresses for the multisig.\",\"required\":\"The number of confirmations required (must be >0 and <= owners.length).\"},\"returns\":{\"multisig\":\"The address of the newly deployed MultiSigWallet.\"}},\"getAllMultiSigs()\":{\"returns\":{\"_0\":\"An array of addresses for all multisigs.\"}},\"getMyMultiSigs(address)\":{\"params\":{\"owner\":\"The address to filter for.\"},\"returns\":{\"myMultisigs\":\"An array of multisig addresses for which `isOwner(owner) == true`.\"}},\"registerExistingMultisig(address)\":{\"params\":{\"multisig\":\"The address of the multisig to register.\"}}},\"stateVariables\":{\"allMultiSigs\":{\"details\":\"All multisig addresses deployed by this factory.\"}},\"title\":\"MultiSigFactory\",\"version\":1},\"userdoc\":{\"events\":{\"MultiSigCreated(address,address,address[],uint256)\":{\"notice\":\"Emitted when a new MultiSigWallet is created.\"},\"MultiSigRegistered(address,address)\":{\"notice\":\"Emitted when an existing MultiSigWallet is registered.\"}},\"kind\":\"user\",\"methods\":{\"createMultiSig(address[],uint256)\":{\"notice\":\"Deploy a new MultiSigWallet and register its address.\"},\"getAllMultiSigs()\":{\"notice\":\"Returns the total list of multisig addresses ever created by this factory.\"},\"getMyMultiSigs(address)\":{\"notice\":\"Returns only those multisigs where `owner` is in the owners[] array.\"},\"registerExistingMultisig(address)\":{\"notice\":\"Register a previously deployed multisig address.\"}},\"notice\":\"A minimal factory that deploys new MultiSigWallets and keeps an on\\u2010chain registry.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"ReviveFactory.sol\":\"MultiSigFactory\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"ReviveFactory.sol\":{\"keccak256\":\"0xa6859f62fb32204253503ba9df1a088f92d2776d5d85cb78799020a57b62be9d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6feab881d8828b3e87b43bd7e090edbdeec8aa96437e6f9e0fd816936168d0a9\",\"dweb:/ipfs/QmUzfhaVx56FMZVeS5dyBASuWDcMP6TdcnSLCMFcaWprqw\"]},\"ReviveMultisig.sol\":{\"keccak256\":\"0x0c476d614863f66084f80b06e0439ae86da05a147d956ac65c765c13afb067ec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f115ad5b1bc6ff5a9cc95057bff1f904e67b49cd5640a01e99f0704c412ad3ed\",\"dweb:/ipfs/QmRZ94NnU5dZmh5kf6CwzyEKfCRmLCALRtafcUtn6CK4WN\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"details": "Anyone can call createMultiSig; all addresses are stored in `allMultiSigs`.",
						"events": {
							"MultiSigCreated(address,address,address[],uint256)": {
								"params": {
									"creator": "The address that called createMultiSig.",
									"multisig": "The newly deployed MultiSigWallet address.",
									"owners": "The list of owners for this new multisig.",
									"required": "The number of confirmations required."
								}
							},
							"MultiSigRegistered(address,address)": {
								"params": {
									"multisig": "The multisig address being registered.",
									"registrant": "The address that called registerExistingMultisig."
								}
							}
						},
						"kind": "dev",
						"methods": {
							"createMultiSig(address[],uint256)": {
								"params": {
									"owners": "An array of owner addresses for the multisig.",
									"required": "The number of confirmations required (must be >0 and <= owners.length)."
								},
								"returns": {
									"multisig": "The address of the newly deployed MultiSigWallet."
								}
							},
							"getAllMultiSigs()": {
								"returns": {
									"_0": "An array of addresses for all multisigs."
								}
							},
							"getMyMultiSigs(address)": {
								"params": {
									"owner": "The address to filter for."
								},
								"returns": {
									"myMultisigs": "An array of multisig addresses for which `isOwner(owner) == true`."
								}
							},
							"registerExistingMultisig(address)": {
								"params": {
									"multisig": "The address of the multisig to register."
								}
							}
						},
						"stateVariables": {
							"allMultiSigs": {
								"details": "All multisig addresses deployed by this factory."
							}
						},
						"title": "MultiSigFactory",
						"version": 1
					},
					"userdoc": {
						"events": {
							"MultiSigCreated(address,address,address[],uint256)": {
								"notice": "Emitted when a new MultiSigWallet is created."
							},
							"MultiSigRegistered(address,address)": {
								"notice": "Emitted when an existing MultiSigWallet is registered."
							}
						},
						"kind": "user",
						"methods": {
							"createMultiSig(address[],uint256)": {
								"notice": "Deploy a new MultiSigWallet and register its address."
							},
							"getAllMultiSigs()": {
								"notice": "Returns the total list of multisig addresses ever created by this factory."
							},
							"getMyMultiSigs(address)": {
								"notice": "Returns only those multisigs where `owner` is in the owners[] array."
							},
							"registerExistingMultisig(address)": {
								"notice": "Register a previously deployed multisig address."
							}
						},
						"notice": "A minimal factory that deploys new MultiSigWallets and keeps an on‐chain registry.",
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 19,
								"contract": "ReviveFactory.sol:MultiSigFactory",
								"label": "allMultiSigs",
								"offset": 0,
								"slot": "0",
								"type": "t_array(t_address)dyn_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 64/65616 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 11319\n// Code size = 35898 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20040]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20040] = a1\n    42: a1 = 0x20050\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20050\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 4 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20044] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @28\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffffc0\n   341: u64 [sp + 0x38] = ra\n   344: u64 [sp + 0x30] = s0\n   347: u64 [sp + 0x28] = s1\n   350: s0 = sp + 0x40\n   353: sp = sp & 0xffffffffffffffe0\n   356: a0 = 0x40\n   359: a1 = 0x20\n   362: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   367: u8 [a0 + 31] = 0x80\n   372: u8 [a0 + 30] = 0\n   375: u8 [a0 + 29] = 0\n   378: u8 [a0 + 28] = 0\n   381: u8 [a0 + 27] = 0\n   384: u8 [a0 + 26] = 0\n   387: u8 [a0 + 25] = 0\n   390: u8 [a0 + 24] = 0\n   393: u8 [a0 + 23] = 0\n   396: u8 [a0 + 22] = 0\n   399: u8 [a0 + 21] = 0\n   402: u8 [a0 + 20] = 0\n   405: u8 [a0 + 19] = 0\n   408: u8 [a0 + 18] = 0\n   411: u8 [a0 + 17] = 0\n   414: u8 [a0 + 16] = 0\n   417: u8 [a0 + 15] = 0\n   420: u8 [a0 + 14] = 0\n   423: u8 [a0 + 13] = 0\n   426: u8 [a0 + 12] = 0\n   429: u8 [a0 + 11] = 0\n   432: u8 [a0 + 10] = 0\n   435: u8 [a0 + 9] = 0\n   438: u8 [a0 + 8] = 0\n   441: u8 [a0 + 7] = 0\n   444: u8 [a0 + 6] = 0\n   447: u8 [a0 + 5] = 0\n   450: u8 [a0 + 4] = 0\n   453: u8 [a0 + 3] = 0\n   456: u8 [a0 + 2] = 0\n   459: u8 [a0 + 1] = 0\n   462: u8 [a0 + 0] = 0\n   464: u64 [sp + 24] = 0\n   467: u64 [sp + 0] = 0\n   469: u64 [sp + 8] = 0\n   472: u64 [sp + 16] = 0\n   475: i32 a0 = sp + 0\n   477: ecalli 16 // 'value_transferred'\n   479: fallthrough\n      : @16 (gas: 8)\n   480: a0 = u64 [sp + 0x10]\n   483: a1 = u64 [sp + 0x18]\n   486: a2 = u64 [sp + 0x8]\n   489: a3 = u64 [sp]\n   491: a1 = a1 | a2\n   494: a0 = a0 | a3\n   497: a0 = a0 | a1\n   500: jump @20 if a0 != 0\n      : @17 (gas: 3)\n   504: a0 = 0x40\n   507: a1 = 0x20\n   510: ra = 10, jump @0\n      : @18 [@dyn 5] (gas: 100)\n   515: a1 = u8 [a0 + 0x11]\n   518: a2 = u8 [a0 + 0x10]\n   521: a3 = u8 [a0 + 0x12]\n   524: a4 = u8 [a0 + 0x13]\n   527: a1 = a1 << 0x8\n   530: a1 = a1 | a2\n   533: a3 = a3 << 0x10\n   536: a4 = a4 << 0x18\n   539: a3 = a3 | a4\n   542: a1 = a1 | a3\n   545: a2 = u8 [a0 + 0x15]\n   548: a3 = u8 [a0 + 0x14]\n   551: a4 = u8 [a0 + 0x16]\n   554: a5 = u8 [a0 + 0x17]\n   557: a2 = a2 << 0x8\n   560: a2 = a2 | a3\n   563: a4 = a4 << 0x10\n   566: a5 = a5 << 0x18\n   569: a4 = a4 | a5\n   572: a2 = a2 | a4\n   575: a2 = a2 << 0x20\n   578: t0 = a2 | a1\n   581: a2 = u8 [a0 + 0x1]\n   584: a3 = u8 [a0]\n   586: a4 = u8 [a0 + 0x2]\n   589: a5 = u8 [a0 + 0x3]\n   592: a2 = a2 << 0x8\n   595: a2 = a2 | a3\n   598: a4 = a4 << 0x10\n   601: a5 = a5 << 0x18\n   604: a4 = a4 | a5\n   607: a2 = a2 | a4\n   610: a3 = u8 [a0 + 0x5]\n   613: a4 = u8 [a0 + 0x4]\n   616: a5 = u8 [a0 + 0x6]\n   619: s1 = u8 [a0 + 0x7]\n   622: a3 = a3 << 0x8\n   625: a3 = a3 | a4\n   628: a5 = a5 << 0x10\n   631: s1 = s1 << 0x18\n   634: a5 = a5 | s1\n   637: a3 = a3 | a5\n   640: a3 = a3 << 0x20\n   643: a2 = a2 | a3\n   646: a3 = u8 [a0 + 0x19]\n   649: a4 = u8 [a0 + 0x18]\n   652: a5 = u8 [a0 + 0x1a]\n   655: s1 = u8 [a0 + 0x1b]\n   658: a3 = a3 << 0x8\n   661: a3 = a3 | a4\n   664: a5 = a5 << 0x10\n   667: s1 = s1 << 0x18\n   670: a5 = a5 | s1\n   673: a3 = a3 | a5\n   676: a4 = u8 [a0 + 0x1d]\n   679: a5 = u8 [a0 + 0x1c]\n   682: s1 = u8 [a0 + 0x1e]\n   685: a1 = u8 [a0 + 0x1f]\n   688: a4 = a4 << 0x8\n   691: a4 = a4 | a5\n   694: s1 = s1 << 0x10\n   697: a1 = a1 << 0x18\n   700: a1 = a1 | s1\n   703: a1 = a1 | a4\n   706: a1 = a1 << 0x20\n   709: a3 = a3 | a1\n   712: a1 = u8 [a0 + 0x9]\n   715: a4 = u8 [a0 + 0x8]\n   718: a5 = u8 [a0 + 0xa]\n   721: s1 = u8 [a0 + 0xb]\n   724: a1 = a1 << 0x8\n   727: a1 = a1 | a4\n   730: a5 = a5 << 0x10\n   733: s1 = s1 << 0x18\n   736: a5 = a5 | s1\n   739: a1 = a1 | a5\n   742: a4 = u8 [a0 + 0xd]\n   745: a5 = u8 [a0 + 0xc]\n   748: s1 = u8 [a0 + 0xe]\n   751: a0 = u8 [a0 + 0xf]\n   754: a4 = a4 << 0x8\n   757: a4 = a4 | a5\n   760: s1 = s1 << 0x10\n   763: a0 = a0 << 0x18\n   766: a0 = a0 | s1\n   769: a0 = a0 | a4\n   772: a0 = a0 << 0x20\n   775: a0 = a0 | a1\n   778: a0 = reverse a0\n   780: s1 = reverse a3\n   782: a1 = reverse a2\n   784: a2 = reverse t0\n   786: a1 = a1 | a2\n   789: a2 = s1 | a0\n   792: a2 = a2 | a1\n   795: a2 = a2 >> 0x20\n   798: a0 = a0 | a1\n   801: a0 = a0 << 0x20\n   804: a0 = a0 | a2\n   807: jump @22 if a0 == 0\n      : @19 (gas: 1)\n   810: trap\n      : @20 (gas: 3)\n   811: a0 = 0\n   813: a1 = 0\n   815: ra = 12, jump @0\n      : @21 [@dyn 6] (gas: 5)\n   820: i32 a1 = a0 + 0\n   822: a0 = 0x1\n   825: a2 = 0\n   827: ecalli 13 // 'seal_return'\n   829: fallthrough\n      : @22 (gas: 4)\n   830: i32 s1 = s1 + 0\n   832: a0 = s1\n   834: a1 = 0\n   836: ra = 14, jump @0\n      : @23 [@dyn 7] (gas: 5)\n   841: i32 a0 = a0 + 0\n   843: a1 = 0\n   845: a2 = 0\n   847: ecalli 2 // 'call_data_copy'\n   849: fallthrough\n      : @24 (gas: 2)\n   850: a1 = i32 [0x20048]\n   855: jump @26 if a1 == 0\n      : @25 (gas: 4)\n   858: a0 = 0x30050\n   863: i32 a0 = a0 + 0\n   865: ecalli 14 // 'set_immutable_data'\n   867: fallthrough\n      : @26 (gas: 3)\n   868: a0 = s1\n   870: a1 = 0\n   872: ra = 16, jump @0\n      : @27 [@dyn 8] (gas: 6)\n   877: i32 a1 = a0 + 0\n   879: a0 = 0\n   881: a2 = 0\n   883: ra = 0x12\n   886: ecalli 13 // 'seal_return'\n   888: fallthrough\n      : @28 [@dyn 9] (gas: 8)\n   889: sp = sp + 0xffffffffffffffc0\n   892: u64 [sp + 0x38] = ra\n   895: u64 [sp + 0x30] = s0\n   898: s0 = sp + 0x40\n   901: sp = sp & 0xffffffffffffffe0\n   904: a0 = 0x40\n   907: a1 = 0x20\n   910: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 34)\n   915: u8 [a0 + 31] = 0x80\n   920: u8 [a0 + 30] = 0\n   923: u8 [a0 + 29] = 0\n   926: u8 [a0 + 28] = 0\n   929: u8 [a0 + 27] = 0\n   932: u8 [a0 + 26] = 0\n   935: u8 [a0 + 25] = 0\n   938: u8 [a0 + 24] = 0\n   941: u8 [a0 + 23] = 0\n   944: u8 [a0 + 22] = 0\n   947: u8 [a0 + 21] = 0\n   950: u8 [a0 + 20] = 0\n   953: u8 [a0 + 19] = 0\n   956: u8 [a0 + 18] = 0\n   959: u8 [a0 + 17] = 0\n   962: u8 [a0 + 16] = 0\n   965: u8 [a0 + 15] = 0\n   968: u8 [a0 + 14] = 0\n   971: u8 [a0 + 13] = 0\n   974: u8 [a0 + 12] = 0\n   977: u8 [a0 + 11] = 0\n   980: u8 [a0 + 10] = 0\n   983: u8 [a0 + 9] = 0\n   986: u8 [a0 + 8] = 0\n   989: u8 [a0 + 7] = 0\n   992: u8 [a0 + 3] = 0\n   995: u8 [a0 + 2] = 0\n   998: u8 [a0 + 1] = 0\n  1001: u8 [a0 + 0] = 0\n  1003: a1 = i32 [0x20044]\n  1008: u8 [a0 + 6] = 0\n  1011: u8 [a0 + 5] = 0\n  1014: u8 [a0 + 4] = 0\n  1017: jump @39 if a1 <u 4\n      : @30 (gas: 4)\n  1021: i32 a0 = sp + 0\n  1023: a1 = 0\n  1025: ecalli 3 // 'call_data_load'\n  1027: fallthrough\n      : @31 (gas: 2)\n  1028: a0 = i32 [sp + 0x1c]\n  1031: jump @36 if a0 <=s 229566734\n      : @32 (gas: 1)\n  1038: jump @40 if a0 == 229566735\n      : @33 (gas: 1)\n  1045: jump @41 if a0 == 942338382\n      : @34 (gas: 1)\n  1052: jump @39 if a0 != 1150325448\n      : @35 (gas: 14)\n  1059: ra = 0x16\n  1062: sp = sp + 0xffffffffffffff40\n  1066: u64 [sp + 0xb8] = ra\n  1070: u64 [sp + 0xb0] = s0\n  1074: u64 [sp + 0xa8] = s1\n  1078: s0 = sp + 0xc0\n  1082: sp = sp & 0xffffffffffffffe0\n  1085: u64 [sp + 120] = 0\n  1088: u64 [sp + 112] = 0\n  1091: u64 [sp + 104] = 0\n  1094: u64 [sp + 96] = 0\n  1097: i32 a0 = sp + 0x60\n  1100: ecalli 16 // 'value_transferred'\n  1102: jump @109\n      : @36 [@dyn 11] (gas: 1)\n  1105: jump @42 if a0 == 2188689256\n      : @37 (gas: 1)\n  1112: jump @39 if a0 != 3563719153\n      : @38 (gas: 1)\n  1119: ra = 24, jump @191\n      : @39 [@dyn 12] (gas: 1)\n  1124: ra = 26, jump @138\n      : @40 [@dyn 13] (gas: 13)\n  1129: ra = 0x1c\n  1132: sp = sp + 0xffffffffffffff80\n  1135: u64 [sp + 0x78] = ra\n  1138: u64 [sp + 0x70] = s0\n  1141: s0 = sp + 0x80\n  1145: sp = sp & 0xffffffffffffffe0\n  1148: u64 [sp + 56] = 0\n  1151: u64 [sp + 48] = 0\n  1154: u64 [sp + 40] = 0\n  1157: u64 [sp + 32] = 0\n  1160: i32 a0 = sp + 0x20\n  1163: ecalli 16 // 'value_transferred'\n  1165: jump @45\n      : @41 [@dyn 14] (gas: 14)\n  1168: ra = 0x1e\n  1171: sp = sp + 0xfffffffffffffea0\n  1175: u64 [sp + 0x158] = ra\n  1179: u64 [sp + 0x150] = s0\n  1183: u64 [sp + 0x148] = s1\n  1187: s0 = sp + 0x160\n  1191: sp = sp & 0xffffffffffffffe0\n  1194: u64 [sp + 280] = 0\n  1198: u64 [sp + 272] = 0\n  1202: u64 [sp + 264] = 0\n  1206: u64 [sp + 256] = 0\n  1210: i32 a0 = sp + 0x100\n  1214: ecalli 16 // 'value_transferred'\n  1216: jump @74\n      : @42 [@dyn 15] (gas: 1)\n  1219: ra = 32, jump @124\n      : @43 [@dyn 16] (gas: 7)\n  1224: sp = sp + 0xfffffffffffffff0\n  1227: u64 [sp + 0x8] = ra\n  1230: u64 [sp] = s0\n  1232: s0 = a0\n  1234: a0 = 0x40\n  1237: a1 = 0x20\n  1240: ra = 34, jump @0\n      : @44 [@dyn 17] (gas: 100)\n  1245: a1 = u8 [a0 + 0x1]\n  1248: a2 = u8 [a0]\n  1250: a3 = u8 [a0 + 0x2]\n  1253: a4 = u8 [a0 + 0x3]\n  1256: a1 = a1 << 0x8\n  1259: a1 = a1 | a2\n  1262: a3 = a3 << 0x10\n  1265: a4 = a4 << 0x18\n  1268: a3 = a3 | a4\n  1271: a1 = a1 | a3\n  1274: a2 = u8 [a0 + 0x5]\n  1277: a3 = u8 [a0 + 0x4]\n  1280: a4 = u8 [a0 + 0x6]\n  1283: a5 = u8 [a0 + 0x7]\n  1286: a2 = a2 << 0x8\n  1289: a2 = a2 | a3\n  1292: a4 = a4 << 0x10\n  1295: a5 = a5 << 0x18\n  1298: a4 = a4 | a5\n  1301: a2 = a2 | a4\n  1304: a2 = a2 << 0x20\n  1307: t0 = a2 | a1\n  1310: a2 = u8 [a0 + 0x9]\n  1313: a3 = u8 [a0 + 0x8]\n  1316: a4 = u8 [a0 + 0xa]\n  1319: a5 = u8 [a0 + 0xb]\n  1322: a2 = a2 << 0x8\n  1325: a2 = a2 | a3\n  1328: a4 = a4 << 0x10\n  1331: a5 = a5 << 0x18\n  1334: a4 = a4 | a5\n  1337: a2 = a2 | a4\n  1340: a3 = u8 [a0 + 0xd]\n  1343: a4 = u8 [a0 + 0xc]\n  1346: a5 = u8 [a0 + 0xe]\n  1349: a1 = u8 [a0 + 0xf]\n  1352: a3 = a3 << 0x8\n  1355: a3 = a3 | a4\n  1358: a5 = a5 << 0x10\n  1361: a1 = a1 << 0x18\n  1364: a1 = a1 | a5\n  1367: a1 = a1 | a3\n  1370: a1 = a1 << 0x20\n  1373: t1 = a1 | a2\n  1376: a1 = u8 [a0 + 0x11]\n  1379: a3 = u8 [a0 + 0x10]\n  1382: a4 = u8 [a0 + 0x12]\n  1385: a5 = u8 [a0 + 0x13]\n  1388: a1 = a1 << 0x8\n  1391: a1 = a1 | a3\n  1394: a4 = a4 << 0x10\n  1397: a5 = a5 << 0x18\n  1400: a4 = a4 | a5\n  1403: a1 = a1 | a4\n  1406: a3 = u8 [a0 + 0x15]\n  1409: a4 = u8 [a0 + 0x14]\n  1412: a5 = u8 [a0 + 0x16]\n  1415: a2 = u8 [a0 + 0x17]\n  1418: a3 = a3 << 0x8\n  1421: a3 = a3 | a4\n  1424: a5 = a5 << 0x10\n  1427: a2 = a2 << 0x18\n  1430: a2 = a2 | a5\n  1433: a2 = a2 | a3\n  1436: a2 = a2 << 0x20\n  1439: a3 = a2 | a1\n  1442: a1 = u8 [a0 + 0x19]\n  1445: a2 = u8 [a0 + 0x18]\n  1448: a4 = u8 [a0 + 0x1a]\n  1451: a5 = u8 [a0 + 0x1b]\n  1454: a1 = a1 << 0x8\n  1457: a1 = a1 | a2\n  1460: a4 = a4 << 0x10\n  1463: a5 = a5 << 0x18\n  1466: a4 = a4 | a5\n  1469: a1 = a1 | a4\n  1472: a2 = u8 [a0 + 0x1d]\n  1475: a4 = u8 [a0 + 0x1c]\n  1478: a5 = u8 [a0 + 0x1e]\n  1481: a0 = u8 [a0 + 0x1f]\n  1484: a2 = a2 << 0x8\n  1487: a2 = a2 | a4\n  1490: a5 = a5 << 0x10\n  1493: a0 = a0 << 0x18\n  1496: a0 = a0 | a5\n  1499: a0 = a0 | a2\n  1502: a0 = a0 << 0x20\n  1505: a0 = a0 | a1\n  1508: a0 = reverse a0\n  1510: a1 = reverse a3\n  1512: a2 = reverse t1\n  1514: a3 = reverse t0\n  1516: u64 [s0 + 0x18] = a3\n  1519: u64 [s0 + 0x10] = a2\n  1522: u64 [s0 + 0x8] = a1\n  1525: u64 [s0] = a0\n  1527: ra = u64 [sp + 0x8]\n  1530: s0 = u64 [sp]\n  1532: sp = sp + 0x10\n  1535: ret\n      : @45 (gas: 8)\n  1537: a0 = u64 [sp + 0x30]\n  1540: a1 = u64 [sp + 0x38]\n  1543: a2 = u64 [sp + 0x28]\n  1546: a3 = u64 [sp + 0x20]\n  1549: a1 = a1 | a2\n  1552: a0 = a0 | a3\n  1555: a0 = a0 | a1\n  1558: jump @53 if a0 != 0\n      : @46 (gas: 2)\n  1562: a0 = i32 [0x20044]\n  1567: jump @53 if a0 <=u 35\n      : @47 (gas: 4)\n  1572: i32 a0 = sp + 0x40\n  1575: a1 = 0x4\n  1578: ecalli 3 // 'call_data_load'\n  1580: fallthrough\n      : @48 (gas: 10)\n  1581: a0 = u64 [sp + 0x50]\n  1584: a1 = u64 [sp + 0x58]\n  1587: a2 = 0x100000000\n  1597: a2 = a2 ^ a0\n  1600: a2 = a2 | a1\n  1603: a3 = a0 >> 0x20\n  1606: a3 = a3 <u 0x1\n  1609: a3 = 0 if a1 != 0\n  1611: a3 = 0 if a2 == 0\n  1613: jump @53 if a3 == 0\n      : @49 (gas: 8)\n  1617: a2 = u64 [sp + 0x48]\n  1620: a3 = u64 [sp + 0x40]\n  1623: u64 [sp + 0x8] = a2\n  1626: u64 [sp] = a3\n  1628: u64 [sp + 0x10] = a0\n  1631: a0 = sp\n  1633: u64 [sp + 0x18] = a1\n  1636: ra = 36, jump @244\n      : @50 [@dyn 18] (gas: 3)\n  1641: a0 = 0x40\n  1644: a1 = 0x20\n  1647: ra = 38, jump @0\n      : @51 [@dyn 19] (gas: 100)\n  1652: a1 = u8 [a0 + 0x11]\n  1655: a2 = u8 [a0 + 0x10]\n  1658: a3 = u8 [a0 + 0x12]\n  1661: a4 = u8 [a0 + 0x13]\n  1664: a1 = a1 << 0x8\n  1667: a1 = a1 | a2\n  1670: a3 = a3 << 0x10\n  1673: a4 = a4 << 0x18\n  1676: a3 = a3 | a4\n  1679: a1 = a1 | a3\n  1682: a2 = u8 [a0 + 0x15]\n  1685: a3 = u8 [a0 + 0x14]\n  1688: a4 = u8 [a0 + 0x16]\n  1691: a5 = u8 [a0 + 0x17]\n  1694: a2 = a2 << 0x8\n  1697: a2 = a2 | a3\n  1700: a4 = a4 << 0x10\n  1703: a5 = a5 << 0x18\n  1706: a4 = a4 | a5\n  1709: a2 = a2 | a4\n  1712: a2 = a2 << 0x20\n  1715: t0 = a2 | a1\n  1718: a2 = u8 [a0 + 0x1]\n  1721: a3 = u8 [a0]\n  1723: a4 = u8 [a0 + 0x2]\n  1726: a5 = u8 [a0 + 0x3]\n  1729: a2 = a2 << 0x8\n  1732: a2 = a2 | a3\n  1735: a4 = a4 << 0x10\n  1738: a5 = a5 << 0x18\n  1741: a4 = a4 | a5\n  1744: a2 = a2 | a4\n  1747: a3 = u8 [a0 + 0x5]\n  1750: a4 = u8 [a0 + 0x4]\n  1753: a5 = u8 [a0 + 0x6]\n  1756: a1 = u8 [a0 + 0x7]\n  1759: a3 = a3 << 0x8\n  1762: a3 = a3 | a4\n  1765: a5 = a5 << 0x10\n  1768: a1 = a1 << 0x18\n  1771: a1 = a1 | a5\n  1774: a1 = a1 | a3\n  1777: a1 = a1 << 0x20\n  1780: t1 = a1 | a2\n  1783: a1 = u8 [a0 + 0x19]\n  1786: a3 = u8 [a0 + 0x18]\n  1789: a4 = u8 [a0 + 0x1a]\n  1792: a5 = u8 [a0 + 0x1b]\n  1795: a1 = a1 << 0x8\n  1798: a1 = a1 | a3\n  1801: a4 = a4 << 0x10\n  1804: a5 = a5 << 0x18\n  1807: a4 = a4 | a5\n  1810: a1 = a1 | a4\n  1813: a3 = u8 [a0 + 0x1d]\n  1816: a4 = u8 [a0 + 0x1c]\n  1819: a5 = u8 [a0 + 0x1e]\n  1822: a2 = u8 [a0 + 0x1f]\n  1825: a3 = a3 << 0x8\n  1828: a3 = a3 | a4\n  1831: a5 = a5 << 0x10\n  1834: a2 = a2 << 0x18\n  1837: a2 = a2 | a5\n  1840: a2 = a2 | a3\n  1843: a2 = a2 << 0x20\n  1846: a3 = a2 | a1\n  1849: a1 = u8 [a0 + 0x9]\n  1852: a2 = u8 [a0 + 0x8]\n  1855: a4 = u8 [a0 + 0xa]\n  1858: a5 = u8 [a0 + 0xb]\n  1861: a1 = a1 << 0x8\n  1864: a1 = a1 | a2\n  1867: a4 = a4 << 0x10\n  1870: a5 = a5 << 0x18\n  1873: a4 = a4 | a5\n  1876: a1 = a1 | a4\n  1879: a2 = u8 [a0 + 0xd]\n  1882: a4 = u8 [a0 + 0xc]\n  1885: a5 = u8 [a0 + 0xe]\n  1888: a0 = u8 [a0 + 0xf]\n  1891: a2 = a2 << 0x8\n  1894: a2 = a2 | a4\n  1897: a5 = a5 << 0x10\n  1900: a0 = a0 << 0x18\n  1903: a0 = a0 | a5\n  1906: a0 = a0 | a2\n  1909: a0 = a0 << 0x20\n  1912: a0 = a0 | a1\n  1915: a1 = reverse a0\n  1917: a0 = reverse a3\n  1919: a2 = reverse t1\n  1921: a3 = reverse t0\n  1923: a2 = a2 | a3\n  1926: a3 = a0 | a1\n  1929: a3 = a3 | a2\n  1932: a3 = a3 >> 0x20\n  1935: a1 = a1 | a2\n  1938: a1 = a1 << 0x20\n  1941: a1 = a1 | a3\n  1944: jump @55 if a1 == 0\n      : @52 (gas: 1)\n  1947: trap\n      : @53 (gas: 3)\n  1948: a0 = 0\n  1950: a1 = 0\n  1952: ra = 40, jump @0\n      : @54 [@dyn 20] (gas: 7)\n  1957: i32 a1 = a0 + 0\n  1959: a0 = 0x1\n  1962: a2 = 0\n  1964: ecalli 13 // 'seal_return'\n  1966: i32 a0 = a0 + 0\n  1968: ra = 0x2a\n  1971: jump @0\n      : @55 (gas: 2)\n  1974: i32 a0 = a0 + 0\n  1976: ra = 42, jump @0\n      : @56 [@dyn 21] (gas: 6)\n  1981: i32 a1 = a0 + 0\n  1983: a0 = 0\n  1985: a2 = 0\n  1987: ra = 0x2c\n  1990: ecalli 13 // 'seal_return'\n  1992: fallthrough\n      : @57 [@dyn 22] (gas: 12)\n  1993: a2 = u64 [a1 + 0x10]\n  1996: a3 = u64 [a1 + 0x18]\n  1999: a4 = u64 [a1 + 0x8]\n  2002: a1 = u64 [a1]\n  2004: a3 = a3 | a4\n  2007: a4 = a1 | a2\n  2010: a4 = a4 | a3\n  2013: a4 = a4 >> 0x20\n  2016: a2 = a2 | a3\n  2019: a2 = a2 << 0x20\n  2022: a2 = a2 | a4\n  2025: jump @60 if a2 != 0\n      : @58 (gas: 7)\n  2029: sp = sp + 0xfffffffffffffff0\n  2032: u64 [sp + 0x8] = ra\n  2035: u64 [sp] = s0\n  2037: s0 = a0\n  2039: i32 a0 = a1 + 0\n  2041: a1 = 0x20\n  2044: ra = 46, jump @0\n      : @59 [@dyn 23] (gas: 100)\n  2049: a1 = u8 [a0 + 0x1]\n  2052: a2 = u8 [a0]\n  2054: a3 = u8 [a0 + 0x2]\n  2057: a4 = u8 [a0 + 0x3]\n  2060: a1 = a1 << 0x8\n  2063: a1 = a1 | a2\n  2066: a3 = a3 << 0x10\n  2069: a4 = a4 << 0x18\n  2072: a3 = a3 | a4\n  2075: a1 = a1 | a3\n  2078: a2 = u8 [a0 + 0x5]\n  2081: a3 = u8 [a0 + 0x4]\n  2084: a4 = u8 [a0 + 0x6]\n  2087: a5 = u8 [a0 + 0x7]\n  2090: a2 = a2 << 0x8\n  2093: a2 = a2 | a3\n  2096: a4 = a4 << 0x10\n  2099: a5 = a5 << 0x18\n  2102: a4 = a4 | a5\n  2105: a2 = a2 | a4\n  2108: a2 = a2 << 0x20\n  2111: t0 = a2 | a1\n  2114: a2 = u8 [a0 + 0x9]\n  2117: a3 = u8 [a0 + 0x8]\n  2120: a4 = u8 [a0 + 0xa]\n  2123: a5 = u8 [a0 + 0xb]\n  2126: a2 = a2 << 0x8\n  2129: a2 = a2 | a3\n  2132: a4 = a4 << 0x10\n  2135: a5 = a5 << 0x18\n  2138: a4 = a4 | a5\n  2141: a2 = a2 | a4\n  2144: a3 = u8 [a0 + 0xd]\n  2147: a4 = u8 [a0 + 0xc]\n  2150: a5 = u8 [a0 + 0xe]\n  2153: a1 = u8 [a0 + 0xf]\n  2156: a3 = a3 << 0x8\n  2159: a3 = a3 | a4\n  2162: a5 = a5 << 0x10\n  2165: a1 = a1 << 0x18\n  2168: a1 = a1 | a5\n  2171: a1 = a1 | a3\n  2174: a1 = a1 << 0x20\n  2177: t1 = a1 | a2\n  2180: a1 = u8 [a0 + 0x11]\n  2183: a3 = u8 [a0 + 0x10]\n  2186: a4 = u8 [a0 + 0x12]\n  2189: a5 = u8 [a0 + 0x13]\n  2192: a1 = a1 << 0x8\n  2195: a1 = a1 | a3\n  2198: a4 = a4 << 0x10\n  2201: a5 = a5 << 0x18\n  2204: a4 = a4 | a5\n  2207: a1 = a1 | a4\n  2210: a3 = u8 [a0 + 0x15]\n  2213: a4 = u8 [a0 + 0x14]\n  2216: a5 = u8 [a0 + 0x16]\n  2219: a2 = u8 [a0 + 0x17]\n  2222: a3 = a3 << 0x8\n  2225: a3 = a3 | a4\n  2228: a5 = a5 << 0x10\n  2231: a2 = a2 << 0x18\n  2234: a2 = a2 | a5\n  2237: a2 = a2 | a3\n  2240: a2 = a2 << 0x20\n  2243: a3 = a2 | a1\n  2246: a1 = u8 [a0 + 0x19]\n  2249: a2 = u8 [a0 + 0x18]\n  2252: a4 = u8 [a0 + 0x1a]\n  2255: a5 = u8 [a0 + 0x1b]\n  2258: a1 = a1 << 0x8\n  2261: a1 = a1 | a2\n  2264: a4 = a4 << 0x10\n  2267: a5 = a5 << 0x18\n  2270: a4 = a4 | a5\n  2273: a1 = a1 | a4\n  2276: a2 = u8 [a0 + 0x1d]\n  2279: a4 = u8 [a0 + 0x1c]\n  2282: a5 = u8 [a0 + 0x1e]\n  2285: a0 = u8 [a0 + 0x1f]\n  2288: a2 = a2 << 0x8\n  2291: a2 = a2 | a4\n  2294: a5 = a5 << 0x10\n  2297: a0 = a0 << 0x18\n  2300: a0 = a0 | a5\n  2303: a0 = a0 | a2\n  2306: a0 = a0 << 0x20\n  2309: a0 = a0 | a1\n  2312: a0 = reverse a0\n  2314: a1 = reverse a3\n  2316: a2 = reverse t1\n  2318: a3 = reverse t0\n  2320: u64 [s0 + 0x18] = a3\n  2323: u64 [s0 + 0x10] = a2\n  2326: u64 [s0 + 0x8] = a1\n  2329: u64 [s0] = a0\n  2331: ra = u64 [sp + 0x8]\n  2334: s0 = u64 [sp]\n  2336: sp = sp + 0x10\n  2339: ret\n      : @60 (gas: 1)\n  2341: trap\n      : @61 (gas: 18)\n  2342: sp = sp + 0xfffffffffffffeb0\n  2346: u64 [sp + 0x148] = ra\n  2350: u64 [sp + 0x140] = s0\n  2354: u64 [sp + 0x138] = s1\n  2358: a4 = u64 [a1 + 0x10]\n  2361: a3 = u64 [a1 + 0x18]\n  2364: a5 = u64 [a1 + 0x8]\n  2367: s0 = u64 [a1]\n  2369: u64 [sp + 0xf0] = a5\n  2373: u64 [sp + 0x130] = a3\n  2377: a1 = a5 | a3\n  2380: a3 = s0 | a4\n  2383: a3 = a3 | a1\n  2386: a3 = a3 >> 0x20\n  2389: a1 = a1 | a4\n  2392: a1 = a1 << 0x20\n  2395: a1 = a1 | a3\n  2398: jump @73 if a1 != 0\n      : @62 (gas: 13)\n  2402: u64 [sp + 0xe8] = a4\n  2406: u64 [sp] = a0\n  2408: a0 = u64 [a2 + 0x18]\n  2411: u64 [sp + 0x110] = a0\n  2415: s1 = u64 [a2 + 0x10]\n  2418: a1 = u64 [a2 + 0x8]\n  2421: a0 = u64 [a2]\n  2423: u64 [sp + 0x118] = a0\n  2427: u64 [sp + 0xd8] = s0\n  2431: i32 a0 = s0 + 0\n  2433: s0 = a1\n  2435: a1 = 0x20\n  2438: ra = 48, jump @0\n      : @63 [@dyn 24] (gas: 12)\n  2443: t0 = u64 [sp + 0x118]\n  2447: a1 = t0 | s1\n  2450: u64 [sp + 0x108] = s0\n  2454: a2 = u64 [sp + 0x110]\n  2458: a2 = a2 | s0\n  2461: a1 = a1 | a2\n  2464: a1 = a1 >> 0x20\n  2467: u64 [sp + 0x100] = s1\n  2471: a2 = a2 | s1\n  2474: a2 = a2 << 0x20\n  2477: a1 = a1 | a2\n  2480: jump @73 if a1 != 0\n      : @64 (gas: 93)\n  2484: a1 = u8 [a0 + 0x19]\n  2487: a2 = u8 [a0 + 0x18]\n  2490: a3 = u8 [a0 + 0x1a]\n  2493: a4 = u8 [a0 + 0x1b]\n  2496: a1 = a1 << 0x8\n  2499: a1 = a1 | a2\n  2502: a3 = a3 << 0x10\n  2505: a4 = a4 << 0x18\n  2508: a3 = a3 | a4\n  2511: a1 = a1 | a3\n  2514: a2 = u8 [a0 + 0x1d]\n  2517: a3 = u8 [a0 + 0x1c]\n  2520: a4 = u8 [a0 + 0x1e]\n  2523: a5 = u8 [a0 + 0x1f]\n  2526: a2 = a2 << 0x8\n  2529: a2 = a2 | a3\n  2532: a4 = a4 << 0x10\n  2535: a5 = a5 << 0x18\n  2538: a4 = a4 | a5\n  2541: a2 = a2 | a4\n  2544: a2 = a2 << 0x20\n  2547: a1 = a1 | a2\n  2550: u64 [sp + 0x120] = a1\n  2554: a1 = u8 [a0 + 0x11]\n  2557: a2 = u8 [a0 + 0x10]\n  2560: a3 = u8 [a0 + 0x12]\n  2563: a4 = u8 [a0 + 0x13]\n  2566: a1 = a1 << 0x8\n  2569: a1 = a1 | a2\n  2572: a3 = a3 << 0x10\n  2575: a4 = a4 << 0x18\n  2578: a3 = a3 | a4\n  2581: a1 = a1 | a3\n  2584: a2 = u8 [a0 + 0x15]\n  2587: a3 = u8 [a0 + 0x14]\n  2590: a4 = u8 [a0 + 0x16]\n  2593: a5 = u8 [a0 + 0x17]\n  2596: a2 = a2 << 0x8\n  2599: a2 = a2 | a3\n  2602: a4 = a4 << 0x10\n  2605: a5 = a5 << 0x18\n  2608: a4 = a4 | a5\n  2611: a2 = a2 | a4\n  2614: a2 = a2 << 0x20\n  2617: a1 = a1 | a2\n  2620: u64 [sp + 0x128] = a1\n  2624: a1 = u8 [a0 + 0x9]\n  2627: a2 = u8 [a0 + 0x8]\n  2630: a3 = u8 [a0 + 0xa]\n  2633: a4 = u8 [a0 + 0xb]\n  2636: a1 = a1 << 0x8\n  2639: a1 = a1 | a2\n  2642: a3 = a3 << 0x10\n  2645: a4 = a4 << 0x18\n  2648: a3 = a3 | a4\n  2651: a1 = a1 | a3\n  2654: a2 = u8 [a0 + 0xd]\n  2657: a3 = u8 [a0 + 0xc]\n  2660: a4 = u8 [a0 + 0xe]\n  2663: a5 = u8 [a0 + 0xf]\n  2666: a2 = a2 << 0x8\n  2669: a2 = a2 | a3\n  2672: a4 = a4 << 0x10\n  2675: a5 = a5 << 0x18\n  2678: a4 = a4 | a5\n  2681: a2 = a2 | a4\n  2684: a2 = a2 << 0x20\n  2687: s0 = a2 | a1\n  2690: a1 = u8 [a0 + 0x1]\n  2693: a2 = u8 [a0]\n  2695: a3 = u8 [a0 + 0x2]\n  2698: a4 = u8 [a0 + 0x3]\n  2701: a1 = a1 << 0x8\n  2704: a1 = a1 | a2\n  2707: a3 = a3 << 0x10\n  2710: a4 = a4 << 0x18\n  2713: a3 = a3 | a4\n  2716: a1 = a1 | a3\n  2719: a2 = u8 [a0 + 0x5]\n  2722: a3 = u8 [a0 + 0x4]\n  2725: a4 = u8 [a0 + 0x6]\n  2728: a0 = u8 [a0 + 0x7]\n  2731: a2 = a2 << 0x8\n  2734: a2 = a2 | a3\n  2737: a4 = a4 << 0x10\n  2740: a0 = a0 << 0x18\n  2743: a0 = a0 | a4\n  2746: a0 = a0 | a2\n  2749: a0 = a0 << 0x20\n  2752: s1 = a0 | a1\n  2755: i32 a0 = t0 + 0\n  2757: a1 = 0x20\n  2760: ra = 50, jump @0\n      : @65 [@dyn 25] (gas: 82)\n  2765: a2 = u64 [sp + 0x128]\n  2769: u8 [a0 + 0x10] = a2\n  2772: a1 = s0 >> 0x38\n  2775: u8 [a0 + 0xf] = a1\n  2778: a1 = s0 >> 0x30\n  2781: u8 [a0 + 0xe] = a1\n  2784: a1 = s0 >> 0x28\n  2787: u8 [a0 + 0xd] = a1\n  2790: a1 = s0 >> 0x20\n  2793: u8 [a0 + 0xc] = a1\n  2796: a1 = s0 >> 0x18\n  2799: u8 [a0 + 0xb] = a1\n  2802: a1 = s0 >> 0x10\n  2805: u8 [a0 + 0xa] = a1\n  2808: a1 = s0 >> 0x8\n  2811: u8 [a0 + 0x9] = a1\n  2814: u8 [a0 + 0x8] = s0\n  2817: a1 = s1 >> 0x38\n  2820: u8 [a0 + 0x7] = a1\n  2823: a1 = s1 >> 0x30\n  2826: u8 [a0 + 0x6] = a1\n  2829: a1 = s1 >> 0x28\n  2832: u8 [a0 + 0x5] = a1\n  2835: a1 = s1 >> 0x20\n  2838: u8 [a0 + 0x4] = a1\n  2841: a1 = s1 >> 0x18\n  2844: u8 [a0 + 0x3] = a1\n  2847: a1 = s1 >> 0x10\n  2850: u8 [a0 + 0x2] = a1\n  2853: a1 = s1 >> 0x8\n  2856: u8 [a0 + 0x1] = a1\n  2859: u8 [a0] = s1\n  2861: a3 = u64 [sp + 0x120]\n  2865: u8 [a0 + 0x18] = a3\n  2868: a1 = a2 >> 0x38\n  2871: u8 [a0 + 0x17] = a1\n  2874: a1 = a2 >> 0x30\n  2877: u8 [a0 + 0x16] = a1\n  2880: a1 = a2 >> 0x28\n  2883: u8 [a0 + 0x15] = a1\n  2886: a1 = a2 >> 0x20\n  2889: u8 [a0 + 0x14] = a1\n  2892: a1 = a2 >> 0x18\n  2895: u8 [a0 + 0x13] = a1\n  2898: a1 = a2 >> 0x10\n  2901: u8 [a0 + 0x12] = a1\n  2904: a1 = a2 >> 0x8\n  2907: a4 = a2\n  2909: u8 [a0 + 0x11] = a1\n  2912: a1 = a3 >> 0x38\n  2915: u8 [a0 + 0x1f] = a1\n  2918: a1 = a3 >> 0x30\n  2921: u8 [a0 + 0x1e] = a1\n  2924: a1 = a3 >> 0x28\n  2927: u8 [a0 + 0x1d] = a1\n  2930: a1 = a3 >> 0x20\n  2933: u8 [a0 + 0x1c] = a1\n  2936: a1 = a3 >> 0x18\n  2939: u8 [a0 + 0x1b] = a1\n  2942: a1 = a3 >> 0x10\n  2945: u8 [a0 + 0x1a] = a1\n  2948: a1 = a3 >> 0x8\n  2951: u8 [a0 + 0x19] = a1\n  2954: a0 = u64 [sp + 0x118]\n  2958: t1 = a0 + 0x20\n  2961: a2 = t1 <u a0\n  2964: a0 = a3\n  2966: a3 = u64 [sp + 0x108]\n  2970: t2 = a3 + a2\n  2973: a3 = t2 <u a3\n  2976: a3 = a2 if a2 == 0\n  2979: a5 = u64 [sp + 0x100]\n  2983: ra = a5 + a3\n  2986: a3 = s1 | a4\n  2989: u64 [sp + 0xd0] = s0\n  2993: a4 = s0 | a0\n  2996: a4 = a4 | a3\n  2999: a3 = ra <u a5\n  3002: t0 = u64 [sp + 0x110]\n  3006: a5 = t0 + a3\n  3009: u64 [sp + 0xf8] = a5\n  3013: jump @72 if a4 == 0\n      : @66 (gas: 21)\n  3017: a0 = 0\n  3019: a1 = 0\n  3021: u64 [sp + 224] = 0\n  3025: a2 = 0\n  3027: a3 = reverse s1\n  3029: u64 [sp + 0x20] = a3\n  3032: a3 = u64 [sp + 0xd0]\n  3036: a3 = reverse a3\n  3038: u64 [sp + 0x18] = a3\n  3041: a3 = u64 [sp + 0x128]\n  3045: a3 = reverse a3\n  3047: u64 [sp + 0x10] = a3\n  3050: a3 = u64 [sp + 0x120]\n  3054: a3 = reverse a3\n  3056: u64 [sp + 0x8] = a3\n  3059: a4 = 0xffffffe0\n  3069: u64 [sp + 0x28] = a4\n  3072: t0 = u64 [sp + 0xe8]\n  3076: a3 = u64 [sp + 0xf0]\n  3080: s0 = u64 [sp + 0xd8]\n  3084: fallthrough\n      : @67 (gas: 16)\n  3085: u64 [sp + 0xc8] = a2\n  3089: u64 [sp + 0xd0] = a1\n  3093: u64 [sp + 0xd8] = a0\n  3097: a4 = u64 [sp + 0x130]\n  3101: a4 = t0 | a4\n  3104: s1 = u64 [sp + 0x28]\n  3107: a5 = s0 <u s1\n  3110: u64 [sp + 0xf0] = a3\n  3114: a5 = 0 if a3 != 0\n  3116: a5 = 0 if a4 != 0\n  3118: a0 = u64 [sp + 0xf8]\n  3122: u64 [sp + 0xc0] = a0\n  3126: u64 [sp + 0xb8] = ra\n  3130: u64 [sp + 0xb0] = t2\n  3134: u64 [sp + 0x128] = t1\n  3138: jump @73 if a5 == 0\n      : @68 (gas: 6)\n  3142: u64 [sp + 0xe8] = t0\n  3146: a0 = s0 + 0x20\n  3149: u64 [sp + 0x120] = a0\n  3153: i32 a0 = a0 + 0\n  3155: a1 = 0x20\n  3158: ra = 52, jump @0\n      : @69 [@dyn 26] (gas: 9)\n  3163: a1 = u64 [sp + 0x100]\n  3167: a2 = u64 [sp + 0x110]\n  3171: a1 = a1 | a2\n  3174: a2 = u64 [sp + 0x118]\n  3178: a2 = a2 <u s1\n  3181: a3 = u64 [sp + 0x108]\n  3185: a2 = 0 if a3 != 0\n  3187: a2 = 0 if a1 != 0\n  3189: jump @73 if a2 == 0\n      : @70 (gas: 58)\n  3193: a1 = u64 [sp + 0x120]\n  3197: a2 = a1 <u s0\n  3200: s0 = u64 [sp + 0xf0]\n  3204: a1 = s0 + a2\n  3207: u64 [sp + 0x118] = a1\n  3211: a1 = a1 <u s0\n  3214: a1 = a2 if a2 == 0\n  3217: a2 = u8 [a0 + 0xc]\n  3220: u64 [sp + 0x108] = a2\n  3224: a2 = u8 [a0 + 0xd]\n  3227: u64 [sp + 0x100] = a2\n  3231: a2 = u8 [a0 + 0xe]\n  3234: u64 [sp + 0xf8] = a2\n  3238: a2 = u8 [a0 + 0xf]\n  3241: u64 [sp + 0xf0] = a2\n  3245: a2 = u8 [a0 + 0x10]\n  3248: u64 [sp + 0xa8] = a2\n  3252: a2 = u8 [a0 + 0x11]\n  3255: u64 [sp + 0xa0] = a2\n  3259: a2 = u8 [a0 + 0x12]\n  3262: u64 [sp + 0x98] = a2\n  3266: a2 = u8 [a0 + 0x13]\n  3269: u64 [sp + 0x90] = a2\n  3273: a2 = u8 [a0 + 0x14]\n  3276: u64 [sp + 0x88] = a2\n  3280: a2 = u8 [a0 + 0x15]\n  3283: u64 [sp + 0x80] = a2\n  3287: a2 = u8 [a0 + 0x16]\n  3290: u64 [sp + 0x78] = a2\n  3293: a2 = u8 [a0 + 0x17]\n  3296: u64 [sp + 0x70] = a2\n  3299: a2 = u8 [a0 + 0x18]\n  3302: u64 [sp + 0x68] = a2\n  3305: a2 = u8 [a0 + 0x19]\n  3308: u64 [sp + 0x60] = a2\n  3311: a2 = u8 [a0 + 0x1a]\n  3314: u64 [sp + 0x58] = a2\n  3317: a2 = u8 [a0 + 0x1b]\n  3320: u64 [sp + 0x50] = a2\n  3323: a2 = u8 [a0 + 0x1c]\n  3326: u64 [sp + 0x48] = a2\n  3329: a2 = u8 [a0 + 0x1d]\n  3332: u64 [sp + 0x40] = a2\n  3335: a2 = u8 [a0 + 0x1e]\n  3338: u64 [sp + 0x38] = a2\n  3341: a0 = u8 [a0 + 0x1f]\n  3344: u64 [sp + 0x30] = a0\n  3347: s1 = u64 [sp + 0xe8]\n  3351: a1 = a1 + s1\n  3354: u64 [sp + 0x110] = a1\n  3358: a0 = a1 <u s1\n  3361: a1 = u64 [sp + 0x130]\n  3365: a1 = a1 + a0\n  3368: u64 [sp + 0x130] = a1\n  3372: s0 = u64 [sp + 0x128]\n  3376: i32 a0 = s0 + 0\n  3378: a1 = 0x20\n  3381: ra = 54, jump @0\n      : @71 [@dyn 27] (gas: 110)\n  3386: a1 = u64 [sp + 0x30]\n  3389: u8 [a0 + 0x1f] = a1\n  3392: a1 = u64 [sp + 0x38]\n  3395: u8 [a0 + 0x1e] = a1\n  3398: a1 = u64 [sp + 0x40]\n  3401: u8 [a0 + 0x1d] = a1\n  3404: a1 = u64 [sp + 0x48]\n  3407: u8 [a0 + 0x1c] = a1\n  3410: a1 = u64 [sp + 0x50]\n  3413: u8 [a0 + 0x1b] = a1\n  3416: a1 = u64 [sp + 0x58]\n  3419: u8 [a0 + 0x1a] = a1\n  3422: a1 = u64 [sp + 0x60]\n  3425: u8 [a0 + 0x19] = a1\n  3428: a1 = u64 [sp + 0x68]\n  3431: u8 [a0 + 0x18] = a1\n  3434: a1 = u64 [sp + 0x70]\n  3437: u8 [a0 + 0x17] = a1\n  3440: a1 = u64 [sp + 0x78]\n  3443: u8 [a0 + 0x16] = a1\n  3446: a1 = u64 [sp + 0x80]\n  3450: u8 [a0 + 0x15] = a1\n  3453: a1 = u64 [sp + 0x88]\n  3457: u8 [a0 + 0x14] = a1\n  3460: a1 = u64 [sp + 0x90]\n  3464: u8 [a0 + 0x13] = a1\n  3467: a1 = u64 [sp + 0x98]\n  3471: u8 [a0 + 0x12] = a1\n  3474: a1 = u64 [sp + 0xa0]\n  3478: u8 [a0 + 0x11] = a1\n  3481: a1 = u64 [sp + 0xa8]\n  3485: u8 [a0 + 0x10] = a1\n  3488: a1 = u64 [sp + 0xf0]\n  3492: u8 [a0 + 0xf] = a1\n  3495: a1 = u64 [sp + 0xf8]\n  3499: u8 [a0 + 0xe] = a1\n  3502: a1 = u64 [sp + 0x100]\n  3506: u8 [a0 + 0xd] = a1\n  3509: a1 = u64 [sp + 0x108]\n  3513: u8 [a0 + 0xc] = a1\n  3516: u8 [a0 + 11] = 0\n  3519: u8 [a0 + 10] = 0\n  3522: u8 [a0 + 9] = 0\n  3525: u8 [a0 + 8] = 0\n  3528: u8 [a0 + 7] = 0\n  3531: u8 [a0 + 6] = 0\n  3534: u8 [a0 + 5] = 0\n  3537: u8 [a0 + 4] = 0\n  3540: u8 [a0 + 3] = 0\n  3543: u8 [a0 + 2] = 0\n  3546: u8 [a0 + 1] = 0\n  3549: u8 [a0 + 0] = 0\n  3551: t1 = u64 [sp + 0xd8]\n  3555: t1 = t1 + 0x1\n  3558: a0 = t1 <u 0x1\n  3561: t2 = u64 [sp + 0xd0]\n  3565: t2 = t2 + a0\n  3568: a0 = t1 | t2\n  3571: a4 = a0 <u 0x1\n  3574: a0 = u64 [sp + 0xe0]\n  3578: a4 = a4 + a0\n  3581: a0 = a4 <u a0\n  3584: ra = u64 [sp + 0xc8]\n  3588: ra = ra + a0\n  3591: a0 = u64 [sp + 0x8]\n  3594: a0 = t1 <u a0\n  3597: a2 = u64 [sp + 0x10]\n  3600: a1 = t2 ^ a2\n  3603: a2 = t2 <u a2\n  3606: a2 = a0 if a1 == 0\n  3609: a0 = u64 [sp + 0x18]\n  3612: s1 = a4 <u a0\n  3615: a3 = u64 [sp + 0x20]\n  3618: a1 = ra ^ a3\n  3621: a5 = ra <u a3\n  3624: a5 = s1 if a1 == 0\n  3627: a0 = a0 ^ a4\n  3630: a1 = a1 | a0\n  3633: a0 = s0 + 0x20\n  3636: u64 [sp + 0xf0] = a0\n  3640: a5 = a2 if a1 == 0\n  3643: a2 = a0 <u s0\n  3646: s1 = u64 [sp + 0xb0]\n  3650: a0 = s1 + a2\n  3653: u64 [sp + 0xe8] = a0\n  3657: a3 = a0 <u s1\n  3660: a3 = a2 if a2 == 0\n  3663: a1 = u64 [sp + 0xb8]\n  3667: a3 = a3 + a1\n  3670: u64 [sp + 0xd8] = a3\n  3674: a3 = a3 <u a1\n  3677: a0 = u64 [sp + 0xc0]\n  3681: a3 = a3 + a0\n  3684: u64 [sp + 0xf8] = a3\n  3688: u64 [sp + 0xe0] = a4\n  3692: s0 = u64 [sp + 0x120]\n  3696: a3 = u64 [sp + 0x118]\n  3700: t0 = u64 [sp + 0x110]\n  3704: a2 = u64 [sp + 0x128]\n  3708: u64 [sp + 0x118] = a2\n  3712: u64 [sp + 0x108] = s1\n  3716: u64 [sp + 0x100] = a1\n  3720: u64 [sp + 0x110] = a0\n  3724: a0 = t1\n  3726: t1 = u64 [sp + 0xf0]\n  3730: a1 = t2\n  3732: t2 = u64 [sp + 0xe8]\n  3736: a2 = ra\n  3738: ra = u64 [sp + 0xd8]\n  3742: jump @67 if a5 != 0\n      : @72 (gas: 11)\n  3746: a4 = u64 [sp]\n  3748: u64 [a4] = t1\n  3750: u64 [a4 + 0x8] = t2\n  3753: u64 [a4 + 0x10] = ra\n  3756: a0 = u64 [sp + 0xf8]\n  3760: u64 [a4 + 0x18] = a0\n  3763: ra = u64 [sp + 0x148]\n  3767: s0 = u64 [sp + 0x140]\n  3771: s1 = u64 [sp + 0x138]\n  3775: sp = sp + 0x150\n  3779: ret\n      : @73 (gas: 1)\n  3781: trap\n      : @74 (gas: 8)\n  3782: a0 = u64 [sp + 0x110]\n  3786: a1 = u64 [sp + 0x118]\n  3790: a2 = u64 [sp + 0x108]\n  3794: a3 = u64 [sp + 0x100]\n  3798: a1 = a1 | a2\n  3801: a0 = a0 | a3\n  3804: a0 = a0 | a1\n  3807: jump @85 if a0 != 0\n      : @75 (gas: 2)\n  3811: a0 = i32 [0x20044]\n  3816: jump @85 if a0 <=u 35\n      : @76 (gas: 4)\n  3821: i32 a0 = sp + 0x120\n  3825: a1 = 0x4\n  3828: ecalli 3 // 'call_data_load'\n  3830: fallthrough\n      : @77 (gas: 10)\n  3831: a0 = u64 [sp + 0x130]\n  3835: a2 = u64 [sp + 0x138]\n  3839: a1 = 0x100000000\n  3849: a1 = a1 ^ a0\n  3852: a1 = a1 | a2\n  3855: a3 = a0 >> 0x20\n  3858: a3 = a3 <u 0x1\n  3861: a3 = 0 if a2 != 0\n  3863: a3 = 0 if a1 == 0\n  3865: jump @85 if a3 == 0\n      : @78 (gas: 37)\n  3869: a1 = u64 [sp + 0x128]\n  3873: a3 = u64 [sp + 0x120]\n  3877: u64 [sp + 0xc8] = a1\n  3881: u64 [sp + 0xc0] = a3\n  3885: u64 [sp + 0xd0] = a0\n  3889: a0 = sp + 0xe0\n  3893: a1 = sp + 0xc0\n  3897: u64 [sp + 0xd8] = a2\n  3901: ra = 0x38\n  3904: sp = sp + 0xfffffffffffff8c0\n  3908: u64 [sp + 0x738] = ra\n  3912: u64 [sp + 0x730] = s0\n  3916: u64 [sp + 0x728] = s1\n  3920: s0 = sp + 0x740\n  3924: sp = sp & 0xffffffffffffffe0\n  3927: u64 [sp + 0x20] = a0\n  3930: s1 = u64 [a1 + 0x10]\n  3933: a0 = u64 [a1 + 0x8]\n  3936: u64 [sp + 0x68] = a0\n  3939: a0 = u64 [a1]\n  3941: u64 [sp + 0x78] = a0\n  3944: u64 [sp + 1784] = 0\n  3948: u64 [sp + 1776] = 0\n  3952: u64 [sp + 1768] = 0\n  3956: u64 [sp + 1760] = 0\n  3960: u64 [sp + 1816] = 0\n  3964: u64 [sp + 1808] = 0\n  3968: u64 [sp + 1800] = 0\n  3972: u64 [sp + 1792] = 0\n  3976: u32 [sp + 1824] = 0x20\n  3981: i32 a1 = sp + 0x6e0\n  3985: i32 a3 = sp + 0x700\n  3989: i32 a4 = sp + 0x720\n  3993: a2 = 0xffffffffffffffff\n  3996: a0 = 0\n  3998: ecalli 7 // 'get_storage'\n  4000: jump @328\n      : @79 [@dyn 28] (gas: 11)\n  4003: a0 = u64 [sp + 0xf8]\n  4007: u64 [sp + 0x40] = a0\n  4010: a0 = u64 [sp + 0xf0]\n  4014: u64 [sp + 0x48] = a0\n  4017: a0 = u64 [sp + 0xe8]\n  4021: u64 [sp + 0x50] = a0\n  4024: a0 = u64 [sp + 0xe0]\n  4028: u64 [sp + 0x58] = a0\n  4031: a0 = 0x40\n  4034: a1 = 0x20\n  4037: ra = 58, jump @0\n      : @80 [@dyn 29] (gas: 100)\n  4042: a1 = u8 [a0 + 0x11]\n  4045: a2 = u8 [a0 + 0x10]\n  4048: a3 = u8 [a0 + 0x12]\n  4051: a4 = u8 [a0 + 0x13]\n  4054: a1 = a1 << 0x8\n  4057: a1 = a1 | a2\n  4060: a3 = a3 << 0x10\n  4063: a4 = a4 << 0x18\n  4066: a3 = a3 | a4\n  4069: a1 = a1 | a3\n  4072: a2 = u8 [a0 + 0x15]\n  4075: a3 = u8 [a0 + 0x14]\n  4078: a4 = u8 [a0 + 0x16]\n  4081: a5 = u8 [a0 + 0x17]\n  4084: a2 = a2 << 0x8\n  4087: a2 = a2 | a3\n  4090: a4 = a4 << 0x10\n  4093: a5 = a5 << 0x18\n  4096: a4 = a4 | a5\n  4099: a2 = a2 | a4\n  4102: a2 = a2 << 0x20\n  4105: t0 = a2 | a1\n  4108: a2 = u8 [a0 + 0x1]\n  4111: a3 = u8 [a0]\n  4113: a4 = u8 [a0 + 0x2]\n  4116: a5 = u8 [a0 + 0x3]\n  4119: a2 = a2 << 0x8\n  4122: a2 = a2 | a3\n  4125: a4 = a4 << 0x10\n  4128: a5 = a5 << 0x18\n  4131: a4 = a4 | a5\n  4134: a2 = a2 | a4\n  4137: a3 = u8 [a0 + 0x5]\n  4140: a4 = u8 [a0 + 0x4]\n  4143: a5 = u8 [a0 + 0x6]\n  4146: s1 = u8 [a0 + 0x7]\n  4149: a3 = a3 << 0x8\n  4152: a3 = a3 | a4\n  4155: a5 = a5 << 0x10\n  4158: s1 = s1 << 0x18\n  4161: a5 = a5 | s1\n  4164: a3 = a3 | a5\n  4167: a3 = a3 << 0x20\n  4170: a2 = a2 | a3\n  4173: a3 = u8 [a0 + 0x19]\n  4176: a4 = u8 [a0 + 0x18]\n  4179: a5 = u8 [a0 + 0x1a]\n  4182: s1 = u8 [a0 + 0x1b]\n  4185: a3 = a3 << 0x8\n  4188: a3 = a3 | a4\n  4191: a5 = a5 << 0x10\n  4194: s1 = s1 << 0x18\n  4197: a5 = a5 | s1\n  4200: a3 = a3 | a5\n  4203: a4 = u8 [a0 + 0x1d]\n  4206: a5 = u8 [a0 + 0x1c]\n  4209: s1 = u8 [a0 + 0x1e]\n  4212: a1 = u8 [a0 + 0x1f]\n  4215: a4 = a4 << 0x8\n  4218: a4 = a4 | a5\n  4221: s1 = s1 << 0x10\n  4224: a1 = a1 << 0x18\n  4227: a1 = a1 | s1\n  4230: a1 = a1 | a4\n  4233: a1 = a1 << 0x20\n  4236: a3 = a3 | a1\n  4239: a1 = u8 [a0 + 0x9]\n  4242: a4 = u8 [a0 + 0x8]\n  4245: a5 = u8 [a0 + 0xa]\n  4248: s1 = u8 [a0 + 0xb]\n  4251: a1 = a1 << 0x8\n  4254: a1 = a1 | a4\n  4257: a5 = a5 << 0x10\n  4260: s1 = s1 << 0x18\n  4263: a5 = a5 | s1\n  4266: a1 = a1 | a5\n  4269: a4 = u8 [a0 + 0xd]\n  4272: a5 = u8 [a0 + 0xc]\n  4275: s1 = u8 [a0 + 0xe]\n  4278: a0 = u8 [a0 + 0xf]\n  4281: a4 = a4 << 0x8\n  4284: a4 = a4 | a5\n  4287: s1 = s1 << 0x10\n  4290: a0 = a0 << 0x18\n  4293: a0 = a0 | s1\n  4296: a0 = a0 | a4\n  4299: a0 = a0 << 0x20\n  4302: a0 = a0 | a1\n  4305: s1 = reverse a0\n  4307: a3 = reverse a3\n  4309: a4 = reverse a2\n  4311: a2 = reverse t0\n  4313: a0 = a2 | a4\n  4316: a1 = a3 | s1\n  4319: a1 = a1 | a0\n  4322: a1 = a1 >> 0x20\n  4325: a0 = a0 | s1\n  4328: a0 = a0 << 0x20\n  4331: a0 = a0 | a1\n  4334: jump @84 if a0 != 0\n      : @81 (gas: 19)\n  4338: a0 = a3 + 0x20\n  4341: u64 [sp + 0x18] = a0\n  4344: a0 = a0 <u a3\n  4347: a1 = a2 + a0\n  4350: u64 [sp + 0x8] = a1\n  4353: a1 = a1 <u a2\n  4356: a1 = a0 if a0 == 0\n  4359: a1 = a1 + s1\n  4362: u64 [sp + 0x10] = a1\n  4365: a0 = a1 <u s1\n  4368: a0 = a0 + a4\n  4371: u64 [sp + 0x20] = a0\n  4374: i32 a0 = a3 + 0\n  4376: a1 = 0x20\n  4379: u64 [sp] = a0\n  4381: u64 [sp + 0x30] = a3\n  4384: u64 [sp + 0x28] = a2\n  4387: u64 [sp + 0x38] = a4\n  4390: ra = 60, jump @0\n      : @82 [@dyn 30] (gas: 52)\n  4395: u8 [a0 + 31] = 0x20\n  4399: u8 [a0 + 30] = 0\n  4402: u8 [a0 + 29] = 0\n  4405: u8 [a0 + 28] = 0\n  4408: u8 [a0 + 27] = 0\n  4411: u8 [a0 + 26] = 0\n  4414: u8 [a0 + 25] = 0\n  4417: u8 [a0 + 24] = 0\n  4420: u8 [a0 + 23] = 0\n  4423: u8 [a0 + 22] = 0\n  4426: u8 [a0 + 21] = 0\n  4429: u8 [a0 + 20] = 0\n  4432: u8 [a0 + 19] = 0\n  4435: u8 [a0 + 18] = 0\n  4438: u8 [a0 + 17] = 0\n  4441: u8 [a0 + 16] = 0\n  4444: u8 [a0 + 15] = 0\n  4447: u8 [a0 + 14] = 0\n  4450: u8 [a0 + 13] = 0\n  4453: u8 [a0 + 12] = 0\n  4456: u8 [a0 + 11] = 0\n  4459: u8 [a0 + 10] = 0\n  4462: u8 [a0 + 9] = 0\n  4465: u8 [a0 + 8] = 0\n  4468: u8 [a0 + 7] = 0\n  4471: u8 [a0 + 6] = 0\n  4474: u8 [a0 + 5] = 0\n  4477: u8 [a0 + 4] = 0\n  4480: u8 [a0 + 3] = 0\n  4483: u8 [a0 + 2] = 0\n  4486: u8 [a0 + 1] = 0\n  4489: u8 [a0 + 0] = 0\n  4491: a0 = u64 [sp + 0x8]\n  4494: u64 [sp + 0x68] = a0\n  4497: a0 = u64 [sp + 0x18]\n  4500: u64 [sp + 0x60] = a0\n  4503: a0 = u64 [sp + 0x40]\n  4506: u64 [sp + 0x98] = a0\n  4510: a0 = u64 [sp + 0x48]\n  4513: u64 [sp + 0x90] = a0\n  4517: a0 = u64 [sp + 0x50]\n  4520: u64 [sp + 0x88] = a0\n  4524: a0 = u64 [sp + 0x58]\n  4527: u64 [sp + 0x80] = a0\n  4531: a0 = u64 [sp + 0x10]\n  4534: u64 [sp + 0x70] = a0\n  4537: a0 = sp + 0xa0\n  4541: a1 = sp + 0x80\n  4545: a2 = sp + 0x60\n  4548: a3 = u64 [sp + 0x20]\n  4551: u64 [sp + 0x78] = a3\n  4554: ra = 62, jump @61\n      : @83 [@dyn 31] (gas: 30)\n  4559: a0 = u64 [sp + 0xa8]\n  4563: t0 = u64 [sp + 0xb8]\n  4567: t1 = u64 [sp + 0xa0]\n  4571: a3 = u64 [sp + 0xb0]\n  4575: a1 = u64 [sp + 0x28]\n  4578: a4 = a0 ^ a1\n  4581: a5 = a0 <u a1\n  4584: t2 = a1\n  4586: a2 = u64 [sp + 0x30]\n  4589: a1 = t1 <u a2\n  4592: a5 = a1 if a4 == 0\n  4595: a4 = a3 - s1\n  4598: a3 = a3 <u s1\n  4601: s1 = u64 [sp + 0x38]\n  4604: s1 = t0 - s1\n  4607: s1 = s1 - a3\n  4610: a3 = a4 <u a5\n  4613: s1 = s1 - a3\n  4616: a4 = a4 - a5\n  4619: a0 = a0 - t2\n  4622: a1 = a0 - a1\n  4625: a0 = t1 - a2\n  4628: a1 = a1 | s1\n  4631: a2 = a0 | a4\n  4634: a2 = a2 | a1\n  4637: a1 = a1 | a4\n  4640: a2 = a2 >> 0x20\n  4643: a1 = a1 << 0x20\n  4646: a1 = a1 | a2\n  4649: jump @87 if a1 == 0\n      : @84 (gas: 1)\n  4652: trap\n      : @85 (gas: 3)\n  4653: a0 = 0\n  4655: a1 = 0\n  4657: ra = 64, jump @0\n      : @86 [@dyn 32] (gas: 5)\n  4662: i32 a1 = a0 + 0\n  4664: a0 = 0x1\n  4667: a2 = 0\n  4669: ecalli 13 // 'seal_return'\n  4671: fallthrough\n      : @87 (gas: 4)\n  4672: i32 s1 = a0 + 0\n  4674: a0 = u64 [sp]\n  4676: a1 = s1\n  4678: ra = 66, jump @0\n      : @88 [@dyn 33] (gas: 6)\n  4683: i32 a1 = a0 + 0\n  4685: a0 = 0\n  4687: a2 = s1\n  4689: ra = 0x44\n  4692: ecalli 13 // 'seal_return'\n  4694: fallthrough\n      : @89 [@dyn 34] (gas: 9)\n  4695: a2 = u64 [a1 + 0x18]\n  4698: a3 = u64 [a1 + 0x10]\n  4701: a4 = u64 [a1 + 0x8]\n  4704: a1 = u64 [a1]\n  4706: u64 [a0 + 0x18] = a2\n  4709: u64 [a0 + 0x10] = a3\n  4712: u64 [a0 + 0x8] = a4\n  4715: u64 [a0] = a1\n  4717: ret\n      : @90 (gas: 38)\n  4719: sp = sp + 0xfffffffffffffee0\n  4723: u64 [sp + 0x118] = ra\n  4727: u64 [sp + 0x110] = s0\n  4731: u64 [sp + 0x108] = s1\n  4735: s0 = sp + 0x120\n  4739: sp = sp & 0xffffffffffffffe0\n  4742: u64 [sp + 0x40] = a0\n  4745: a0 = u64 [a2]\n  4747: u64 [sp + 0x48] = a0\n  4750: a0 = u64 [a2 + 0x8]\n  4753: u64 [sp + 0x50] = a0\n  4756: a0 = u64 [a2 + 0x10]\n  4759: u64 [sp + 0x58] = a0\n  4762: s1 = u64 [a2 + 0x18]\n  4765: a4 = u64 [a1 + 0x18]\n  4768: a3 = u64 [a1 + 0x10]\n  4771: a2 = u64 [a1 + 0x8]\n  4774: a0 = u64 [a1]\n  4776: u64 [sp + 0x18] = a4\n  4779: u64 [sp + 0xb8] = a4\n  4783: u64 [sp + 0x20] = a3\n  4786: u64 [sp + 0xb0] = a3\n  4790: u64 [sp + 0x28] = a2\n  4793: u64 [sp + 0xa8] = a2\n  4797: u64 [sp + 0x30] = a0\n  4800: u64 [sp + 0xa0] = a0\n  4804: u64 [sp + 248] = 0\n  4808: u64 [sp + 240] = 0\n  4812: u64 [sp + 232] = 0\n  4816: u64 [sp + 224] = 0\n  4820: u32 [sp + 192] = 0x20\n  4825: i32 a1 = sp + 0xa0\n  4829: i32 a3 = sp + 0xe0\n  4833: i32 a4 = sp + 0xc0\n  4837: a2 = 0xffffffffffffffff\n  4840: a0 = 0\n  4842: ecalli 7 // 'get_storage'\n  4844: fallthrough\n      : @91 (gas: 20)\n  4845: a0 = u64 [sp + 0xf8]\n  4849: t0 = u64 [sp + 0xe0]\n  4853: a2 = u64 [sp + 0xf0]\n  4857: a3 = u64 [sp + 0xe8]\n  4861: a4 = a0 ^ s1\n  4864: u64 [sp + 0x38] = s1\n  4867: a1 = s1 <u a0\n  4870: a0 = u64 [sp + 0x58]\n  4873: a5 = a0 <u a2\n  4876: a5 = a1 if a4 != 0\n  4879: a1 = u64 [sp + 0x50]\n  4882: t1 = a3 ^ a1\n  4885: a3 = a1 <u a3\n  4888: a1 = u64 [sp + 0x48]\n  4891: a1 = a1 <u t0\n  4894: a1 = a3 if t1 != 0\n  4897: a0 = a0 ^ a2\n  4900: a0 = a0 | a4\n  4903: a1 = a5 if a0 != 0\n  4906: jump @95 if a1 == 0\n      : @92 (gas: 3)\n  4910: a1 = 0x20\n  4913: a0 = 0\n  4915: ra = 70, jump @0\n      : @93 [@dyn 35] (gas: 71)\n  4920: a1 = u64 [sp + 0x18]\n  4923: a1 = reverse a1\n  4925: a2 = u64 [sp + 0x20]\n  4928: a2 = reverse a2\n  4930: a3 = u64 [sp + 0x28]\n  4933: a3 = reverse a3\n  4935: a4 = u64 [sp + 0x30]\n  4938: a4 = reverse a4\n  4940: a5 = a4 >> 0x38\n  4943: u8 [a0 + 0x1f] = a5\n  4946: a5 = a4 >> 0x30\n  4949: u8 [a0 + 0x1e] = a5\n  4952: a5 = a4 >> 0x28\n  4955: u8 [a0 + 0x1d] = a5\n  4958: a5 = a4 >> 0x20\n  4961: u8 [a0 + 0x1c] = a5\n  4964: a5 = a4 >> 0x18\n  4967: u8 [a0 + 0x1b] = a5\n  4970: a5 = a4 >> 0x10\n  4973: u8 [a0 + 0x1a] = a5\n  4976: a5 = a4 >> 0x8\n  4979: u8 [a0 + 0x19] = a5\n  4982: u8 [a0 + 0x18] = a4\n  4985: u8 [a0 + 0x10] = a3\n  4988: a4 = a3 >> 0x38\n  4991: u8 [a0 + 0x17] = a4\n  4994: a4 = a3 >> 0x30\n  4997: u8 [a0 + 0x16] = a4\n  5000: a4 = a3 >> 0x28\n  5003: u8 [a0 + 0x15] = a4\n  5006: a4 = a3 >> 0x20\n  5009: u8 [a0 + 0x14] = a4\n  5012: a4 = a3 >> 0x18\n  5015: u8 [a0 + 0x13] = a4\n  5018: a4 = a3 >> 0x10\n  5021: u8 [a0 + 0x12] = a4\n  5024: a3 = a3 >> 0x8\n  5027: u8 [a0 + 0x11] = a3\n  5030: u8 [a0 + 0x8] = a2\n  5033: a3 = a2 >> 0x38\n  5036: u8 [a0 + 0xf] = a3\n  5039: a3 = a2 >> 0x30\n  5042: u8 [a0 + 0xe] = a3\n  5045: a3 = a2 >> 0x28\n  5048: u8 [a0 + 0xd] = a3\n  5051: a3 = a2 >> 0x20\n  5054: u8 [a0 + 0xc] = a3\n  5057: a3 = a2 >> 0x18\n  5060: u8 [a0 + 0xb] = a3\n  5063: a3 = a2 >> 0x10\n  5066: u8 [a0 + 0xa] = a3\n  5069: a2 = a2 >> 0x8\n  5072: u8 [a0 + 0x9] = a2\n  5075: u8 [a0] = a1\n  5077: a2 = a1 >> 0x38\n  5080: u8 [a0 + 0x7] = a2\n  5083: a2 = a1 >> 0x30\n  5086: u8 [a0 + 0x6] = a2\n  5089: a2 = a1 >> 0x28\n  5092: u8 [a0 + 0x5] = a2\n  5095: a2 = a1 >> 0x20\n  5098: u8 [a0 + 0x4] = a2\n  5101: a2 = a1 >> 0x18\n  5104: u8 [a0 + 0x3] = a2\n  5107: a2 = a1 >> 0x10\n  5110: u8 [a0 + 0x2] = a2\n  5113: a1 = a1 >> 0x8\n  5116: u8 [a0 + 0x1] = a1\n  5119: a1 = 0x20\n  5122: a0 = 0\n  5124: ra = 72, jump @0\n      : @94 [@dyn 36] (gas: 45)\n  5129: i32 a0 = a0 + 0\n  5131: i32 a2 = sp + 0xe0\n  5135: a1 = 0x20\n  5138: ecalli 8 // 'hash_keccak_256'\n  5140: a0 = u64 [sp + 0xe0]\n  5144: a1 = u64 [sp + 0xe8]\n  5148: a2 = u64 [sp + 0xf8]\n  5152: a3 = u64 [sp + 0xf0]\n  5156: t0 = reverse a0\n  5158: a1 = reverse a1\n  5160: a2 = reverse a2\n  5162: a3 = reverse a3\n  5164: a4 = u64 [sp + 0x50]\n  5167: a4 = a4 + a3\n  5170: a5 = u64 [sp + 0x48]\n  5173: a5 = a5 + a2\n  5176: a2 = a5 <u a2\n  5179: a4 = a4 + a2\n  5182: s1 = a4 ^ a3\n  5185: a3 = a4 <u a3\n  5188: a3 = a2 if s1 == 0\n  5191: a2 = u64 [sp + 0x58]\n  5194: a2 = a2 + a1\n  5197: a3 = a3 + a2\n  5200: s1 = a3 <u a2\n  5203: a0 = u64 [sp + 0x38]\n  5206: a0 = a0 + t0\n  5209: a1 = a2 <u a1\n  5212: a0 = a0 + a1\n  5215: a0 = a0 + s1\n  5218: a1 = u64 [sp + 0x40]\n  5221: u64 [a1 + 56] = 0\n  5224: u64 [a1 + 48] = 0\n  5227: u64 [a1 + 40] = 0\n  5230: u64 [a1 + 32] = 0\n  5233: u64 [a1] = a5\n  5235: u64 [a1 + 0x8] = a4\n  5238: u64 [a1 + 0x10] = a3\n  5241: u64 [a1 + 0x18] = a0\n  5244: sp = s0 + 0xfffffffffffffee0\n  5248: ra = u64 [sp + 0x118]\n  5252: s0 = u64 [sp + 0x110]\n  5256: s1 = u64 [sp + 0x108]\n  5260: sp = sp + 0x120\n  5264: ret\n      : @95 (gas: 8)\n  5266: u64 [sp + 144] = 0\n  5270: u64 [sp + 136] = 0\n  5274: u64 [sp + 128] = 0\n  5278: a0 = 0x4e487b7100000000\n  5288: a1 = sp + 0x80\n  5292: u64 [sp + 0x98] = a0\n  5296: a0 = 0\n  5298: ra = 74, jump @8\n      : @96 [@dyn 37] (gas: 7)\n  5303: u64 [sp + 120] = 0\n  5306: u64 [sp + 112] = 0\n  5309: u64 [sp + 96] = 0x32\n  5313: a0 = 0x4\n  5316: a1 = sp + 0x60\n  5319: u64 [sp + 104] = 0\n  5322: ra = 76, jump @8\n      : @97 [@dyn 38] (gas: 3)\n  5327: a1 = 0x24\n  5330: a0 = 0\n  5332: ra = 78, jump @0\n      : @98 [@dyn 39] (gas: 6)\n  5337: i32 a1 = a0 + 0\n  5339: a0 = 0x1\n  5342: a2 = 0x24\n  5345: ra = 0x50\n  5348: ecalli 13 // 'seal_return'\n  5350: fallthrough\n      : @99 [@dyn 40] (gas: 236)\n  5351: sp = sp + 0xffffffffffffffa0\n  5354: u64 [sp + 0x58] = ra\n  5357: u64 [sp + 0x50] = s0\n  5360: u64 [sp + 0x48] = s1\n  5363: u64 [sp] = a0\n  5365: t0 = u64 [a1]\n  5367: t1 = u64 [a2]\n  5369: a0 = u64 [a2 + 0x8]\n  5372: a3 = u64 [a2 + 0x10]\n  5375: a4 = u64 [a1 + 0x18]\n  5378: s0 = u64 [a1 + 0x10]\n  5381: a2 = u64 [a2 + 0x18]\n  5384: a1 = u64 [a1 + 0x8]\n  5387: t2 = a4 >u 0\n  5389: s1 = s0 >u 0\n  5391: s1 = t2 if a4 != 0\n  5394: ra = a1 >u 0\n  5396: a5 = t0 <u 0x100\n  5400: t2 = a5 ^ 0x1\n  5403: t2 = ra if a1 != 0\n  5406: a4 = a4 | s0\n  5409: t2 = s1 if a4 != 0\n  5412: u8 [sp + 71] = 0\n  5415: u8 [sp + 70] = 0\n  5418: u8 [sp + 69] = 0\n  5421: u8 [sp + 68] = 0\n  5424: u8 [sp + 67] = 0\n  5427: u8 [sp + 66] = 0\n  5430: u8 [sp + 65] = 0\n  5433: u8 [sp + 64] = 0\n  5436: u8 [sp + 63] = 0\n  5439: u8 [sp + 62] = 0\n  5442: u8 [sp + 61] = 0\n  5445: u8 [sp + 60] = 0\n  5448: u8 [sp + 59] = 0\n  5451: u8 [sp + 58] = 0\n  5454: u8 [sp + 57] = 0\n  5457: u8 [sp + 56] = 0\n  5460: u8 [sp + 55] = 0\n  5463: u8 [sp + 54] = 0\n  5466: u8 [sp + 53] = 0\n  5469: u8 [sp + 52] = 0\n  5472: u8 [sp + 51] = 0\n  5475: u8 [sp + 50] = 0\n  5478: u8 [sp + 49] = 0\n  5481: u8 [sp + 48] = 0\n  5484: u8 [sp + 47] = 0\n  5487: u8 [sp + 46] = 0\n  5490: u8 [sp + 45] = 0\n  5493: u8 [sp + 44] = 0\n  5496: u8 [sp + 43] = 0\n  5499: u8 [sp + 42] = 0\n  5502: u8 [sp + 41] = 0\n  5505: u8 [sp + 40] = 0\n  5508: u8 [sp + 0x20] = a2\n  5511: u8 [sp + 0x18] = a3\n  5514: u8 [sp + 0x10] = a0\n  5517: u8 [sp + 0x8] = t1\n  5520: a1 = a2 >> 0x38\n  5523: u8 [sp + 0x27] = a1\n  5526: a1 = a2 >> 0x30\n  5529: u8 [sp + 0x26] = a1\n  5532: a1 = a2 >> 0x28\n  5535: u8 [sp + 0x25] = a1\n  5538: a1 = a2 >> 0x20\n  5541: u8 [sp + 0x24] = a1\n  5544: a1 = a2 >> 0x18\n  5547: u8 [sp + 0x23] = a1\n  5550: a1 = a2 >> 0x10\n  5553: u8 [sp + 0x22] = a1\n  5556: a2 = a2 >> 0x8\n  5559: u8 [sp + 0x21] = a2\n  5562: a1 = a3 >> 0x38\n  5565: u8 [sp + 0x1f] = a1\n  5568: a1 = a3 >> 0x30\n  5571: u8 [sp + 0x1e] = a1\n  5574: a1 = a3 >> 0x28\n  5577: u8 [sp + 0x1d] = a1\n  5580: a1 = a3 >> 0x20\n  5583: u8 [sp + 0x1c] = a1\n  5586: a1 = a3 >> 0x18\n  5589: u8 [sp + 0x1b] = a1\n  5592: a1 = a3 >> 0x10\n  5595: u8 [sp + 0x1a] = a1\n  5598: a3 = a3 >> 0x8\n  5601: u8 [sp + 0x19] = a3\n  5604: a1 = a0 >> 0x38\n  5607: u8 [sp + 0x17] = a1\n  5610: a1 = a0 >> 0x30\n  5613: u8 [sp + 0x16] = a1\n  5616: a1 = a0 >> 0x28\n  5619: u8 [sp + 0x15] = a1\n  5622: a1 = a0 >> 0x20\n  5625: u8 [sp + 0x14] = a1\n  5628: a1 = a0 >> 0x18\n  5631: u8 [sp + 0x13] = a1\n  5634: a1 = a0 >> 0x10\n  5637: u8 [sp + 0x12] = a1\n  5640: a0 = a0 >> 0x8\n  5643: u8 [sp + 0x11] = a0\n  5646: a0 = t1 >> 0x38\n  5649: u8 [sp + 0xf] = a0\n  5652: a0 = t1 >> 0x30\n  5655: u8 [sp + 0xe] = a0\n  5658: a0 = t1 >> 0x28\n  5661: u8 [sp + 0xd] = a0\n  5664: a0 = t1 >> 0x20\n  5667: u8 [sp + 0xc] = a0\n  5670: a0 = t1 >> 0x18\n  5673: u8 [sp + 0xb] = a0\n  5676: a0 = t1 >> 0x10\n  5679: u8 [sp + 0xa] = a0\n  5682: a0 = t1 >> 0x8\n  5685: u8 [sp + 0x9] = a0\n  5688: a0 = t0 << 0x38\n  5691: a0 = a0 >> 0x3b\n  5694: a2 = sp + 0x8\n  5697: a2 = a2 + a0\n  5700: a0 = u8 [a2 + 0x11]\n  5703: a1 = u8 [a2 + 0x10]\n  5706: a3 = u8 [a2 + 0x12]\n  5709: a4 = u8 [a2 + 0x13]\n  5712: a0 = a0 << 0x8\n  5715: a0 = a0 | a1\n  5718: a3 = a3 << 0x10\n  5721: a4 = a4 << 0x18\n  5724: a3 = a3 | a4\n  5727: a0 = a0 | a3\n  5730: a1 = u8 [a2 + 0x15]\n  5733: a3 = u8 [a2 + 0x14]\n  5736: a4 = u8 [a2 + 0x16]\n  5739: a5 = u8 [a2 + 0x17]\n  5742: a1 = a1 << 0x8\n  5745: a1 = a1 | a3\n  5748: a4 = a4 << 0x10\n  5751: a5 = a5 << 0x18\n  5754: a4 = a4 | a5\n  5757: a1 = a1 | a4\n  5760: a1 = a1 << 0x20\n  5763: ra = a1 | a0\n  5766: a3 = t0 & 0x7\n  5769: a1 = ra >> a3\n  5772: a0 = u8 [a2 + 0x19]\n  5775: a4 = u8 [a2 + 0x18]\n  5778: s1 = u8 [a2 + 0x1a]\n  5781: s0 = u8 [a2 + 0x1b]\n  5784: a0 = a0 << 0x8\n  5787: a0 = a0 | a4\n  5790: s1 = s1 << 0x10\n  5793: s0 = s0 << 0x18\n  5796: s0 = s0 | s1\n  5799: a0 = a0 | s0\n  5802: a4 = u8 [a2 + 0x1d]\n  5805: s1 = u8 [a2 + 0x1c]\n  5808: s0 = u8 [a2 + 0x1e]\n  5811: a5 = u8 [a2 + 0x1f]\n  5814: a4 = a4 << 0x8\n  5817: a4 = a4 | s1\n  5820: s0 = s0 << 0x10\n  5823: a5 = a5 << 0x18\n  5826: a5 = a5 | s0\n  5829: a4 = a4 | a5\n  5832: a4 = a4 << 0x20\n  5835: t0 = a4 | a0\n  5838: a0 = t0 << 0x1\n  5841: t1 = a3 ^ 0x3f\n  5844: a4 = a0 << t1\n  5847: a4 = a4 | a1\n  5850: a0 = u8 [a2 + 0x9]\n  5853: a1 = u8 [a2 + 0x8]\n  5856: a5 = u8 [a2 + 0xa]\n  5859: s0 = u8 [a2 + 0xb]\n  5862: a0 = a0 << 0x8\n  5865: a0 = a0 | a1\n  5868: a5 = a5 << 0x10\n  5871: s0 = s0 << 0x18\n  5874: a5 = a5 | s0\n  5877: a0 = a0 | a5\n  5880: a1 = u8 [a2 + 0xd]\n  5883: a5 = u8 [a2 + 0xc]\n  5886: s0 = u8 [a2 + 0xe]\n  5889: s1 = u8 [a2 + 0xf]\n  5892: a1 = a1 << 0x8\n  5895: a1 = a1 | a5\n  5898: s0 = s0 << 0x10\n  5901: s1 = s1 << 0x18\n  5904: s0 = s0 | s1\n  5907: a1 = a1 | s0\n  5910: a1 = a1 << 0x20\n  5913: a1 = a1 | a0\n  5916: a0 = a1 >> a3\n  5919: ra = ra << 0x1\n  5922: a5 = a3 ^ 0xffffffffffffffff\n  5925: a5 = ra << a5\n  5928: ra = a0 | a5\n  5931: a0 = u8 [a2 + 0x1]\n  5934: s0 = u8 [a2]\n  5936: s1 = u8 [a2 + 0x2]\n  5939: a5 = u8 [a2 + 0x3]\n  5942: a0 = a0 << 0x8\n  5945: a0 = a0 | s0\n  5948: s1 = s1 << 0x10\n  5951: a5 = a5 << 0x18\n  5954: a5 = a5 | s1\n  5957: a0 = a0 | a5\n  5960: a5 = u8 [a2 + 0x5]\n  5963: s0 = u8 [a2 + 0x4]\n  5966: s1 = u8 [a2 + 0x6]\n  5969: a2 = u8 [a2 + 0x7]\n  5972: a5 = a5 << 0x8\n  5975: a5 = a5 | s0\n  5978: s1 = s1 << 0x10\n  5981: a2 = a2 << 0x18\n  5984: a2 = a2 | s1\n  5987: a2 = a2 | a5\n  5990: a2 = a2 << 0x20\n  5993: a0 = a0 | a2\n  5996: a0 = a0 >> a3\n  5999: a1 = a1 << 0x1\n  6002: a1 = a1 << t1\n  6005: a0 = a0 | a1\n  6008: a1 = t0 >> a3\n  6011: a0 = 0 if t2 != 0\n  6013: ra = 0 if t2 != 0\n  6015: a4 = 0 if t2 != 0\n  6017: a1 = 0 if t2 != 0\n  6019: a2 = u64 [sp]\n  6021: u64 [a2 + 0x18] = a1\n  6024: u64 [a2 + 0x10] = a4\n  6027: u64 [a2 + 0x8] = ra\n  6030: u64 [a2] = a0\n  6032: ra = u64 [sp + 0x58]\n  6035: s0 = u64 [sp + 0x50]\n  6038: s1 = u64 [sp + 0x48]\n  6041: sp = sp + 0x60\n  6044: ret\n      : @100 (gas: 19)\n  6046: t1 = u64 [sp + 0x8]\n  6049: t0 = u64 [sp]\n  6051: a0 = u64 [sp + 0x118]\n  6055: a1 = u64 [sp + 0x100]\n  6059: t2 = u64 [sp + 0x110]\n  6063: a3 = u64 [sp + 0x108]\n  6067: a4 = a0 ^ s1\n  6070: a0 = s1 <u a0\n  6073: a2 = u64 [sp + 0x10]\n  6076: a5 = a2 <u t2\n  6079: a5 = a0 if a4 != 0\n  6082: a0 = a3 ^ t0\n  6085: a3 = t0 <u a3\n  6088: a1 = t1 <u a1\n  6091: a1 = a3 if a0 != 0\n  6094: a0 = t2 ^ a2\n  6097: a0 = a0 | a4\n  6100: a1 = a5 if a0 != 0\n  6103: jump @103 if a1 == 0\n      : @101 (gas: 12)\n  6107: u64 [sp + 0x60] = t1\n  6110: u64 [sp + 152] = 0\n  6114: u64 [sp + 144] = 0\n  6118: u64 [sp + 136] = 0\n  6122: u64 [sp + 128] = 0\n  6126: u64 [sp + 0x68] = t0\n  6129: u64 [sp + 0x70] = a2\n  6132: a0 = sp + 0xa0\n  6136: a1 = sp + 0x80\n  6140: a2 = sp + 0x60\n  6143: u64 [sp + 0x78] = s1\n  6146: ra = 82, jump @90\n      : @102 [@dyn 41] (gas: 215)\n  6151: a0 = u64 [sp + 0xd8]\n  6155: u64 [sp + 0x10] = a0\n  6158: a0 = u64 [sp + 0xd0]\n  6162: u64 [sp + 0x8] = a0\n  6165: s1 = u64 [sp + 0xc8]\n  6169: a0 = u64 [sp + 0xc0]\n  6173: u64 [sp] = a0\n  6175: a0 = u64 [sp + 0xb8]\n  6179: a1 = u64 [sp + 0xb0]\n  6183: a2 = u64 [sp + 0xa8]\n  6187: a3 = u64 [sp + 0xa0]\n  6191: u64 [sp + 0xf8] = a0\n  6195: u64 [sp + 0xf0] = a1\n  6199: u64 [sp + 0xe8] = a2\n  6203: u64 [sp + 0xe0] = a3\n  6207: u64 [sp + 280] = 0\n  6211: u64 [sp + 272] = 0\n  6215: u64 [sp + 264] = 0\n  6219: u64 [sp + 256] = 0\n  6223: u32 [sp + 288] = 0x20\n  6228: i32 a1 = sp + 0xe0\n  6232: i32 a3 = sp + 0x100\n  6236: i32 a4 = sp + 0x120\n  6240: a2 = 0xffffffffffffffff\n  6243: a0 = 0\n  6245: ecalli 7 // 'get_storage'\n  6247: a1 = u64 [sp + 0x100]\n  6251: a2 = u64 [sp + 0x108]\n  6255: t1 = u64 [sp]\n  6257: a0 = t1 >> 0x3d\n  6260: a3 = s1 << 0x3\n  6263: a3 = a3 | a0\n  6266: s1 = s1 >> 0x3d\n  6269: a4 = u64 [sp + 0x8]\n  6272: a0 = a4 << 0x3\n  6275: s1 = s1 | a0\n  6278: a0 = a4 >> 0x3d\n  6281: a4 = u64 [sp + 0x10]\n  6284: a4 = a4 << 0x3\n  6287: a4 = a4 | a0\n  6290: a0 = t1 << 0x3\n  6293: a5 = a3 >u 0\n  6295: a0 = a0 <u 0x100\n  6299: t0 = a0 ^ 0x1\n  6302: t0 = a5 if a3 != 0\n  6305: a3 = a4 >u 0\n  6307: a5 = s1 >u 0\n  6309: a5 = a3 if a4 != 0\n  6312: a3 = u64 [sp + 0x110]\n  6316: s1 = s1 | a4\n  6319: a4 = u64 [sp + 0x118]\n  6323: t0 = a5 if s1 != 0\n  6326: u8 [sp + 95] = 0\n  6329: u8 [sp + 94] = 0\n  6332: u8 [sp + 93] = 0\n  6335: u8 [sp + 92] = 0\n  6338: u8 [sp + 91] = 0\n  6341: u8 [sp + 90] = 0\n  6344: u8 [sp + 89] = 0\n  6347: u8 [sp + 88] = 0\n  6350: u8 [sp + 87] = 0\n  6353: u8 [sp + 86] = 0\n  6356: u8 [sp + 85] = 0\n  6359: u8 [sp + 84] = 0\n  6362: u8 [sp + 83] = 0\n  6365: u8 [sp + 82] = 0\n  6368: u8 [sp + 81] = 0\n  6371: u8 [sp + 80] = 0\n  6374: u8 [sp + 79] = 0\n  6377: u8 [sp + 78] = 0\n  6380: u8 [sp + 77] = 0\n  6383: u8 [sp + 76] = 0\n  6386: u8 [sp + 75] = 0\n  6389: u8 [sp + 74] = 0\n  6392: u8 [sp + 73] = 0\n  6395: u8 [sp + 72] = 0\n  6398: u8 [sp + 71] = 0\n  6401: u8 [sp + 70] = 0\n  6404: u8 [sp + 69] = 0\n  6407: u8 [sp + 68] = 0\n  6410: u8 [sp + 67] = 0\n  6413: u8 [sp + 66] = 0\n  6416: u8 [sp + 65] = 0\n  6419: u8 [sp + 64] = 0\n  6422: u8 [sp + 0x38] = a4\n  6425: u8 [sp + 0x30] = a3\n  6428: u8 [sp + 0x28] = a2\n  6431: u8 [sp + 0x20] = a1\n  6434: a5 = a4 >> 0x38\n  6437: u8 [sp + 0x3f] = a5\n  6440: a5 = a4 >> 0x30\n  6443: u8 [sp + 0x3e] = a5\n  6446: a5 = a4 >> 0x28\n  6449: u8 [sp + 0x3d] = a5\n  6452: a5 = a4 >> 0x20\n  6455: u8 [sp + 0x3c] = a5\n  6458: a5 = a4 >> 0x18\n  6461: u8 [sp + 0x3b] = a5\n  6464: a5 = a4 >> 0x10\n  6467: u8 [sp + 0x3a] = a5\n  6470: a4 = a4 >> 0x8\n  6473: u8 [sp + 0x39] = a4\n  6476: a4 = a3 >> 0x38\n  6479: u8 [sp + 0x37] = a4\n  6482: a4 = a3 >> 0x30\n  6485: u8 [sp + 0x36] = a4\n  6488: a4 = a3 >> 0x28\n  6491: u8 [sp + 0x35] = a4\n  6494: a4 = a3 >> 0x20\n  6497: u8 [sp + 0x34] = a4\n  6500: a4 = a3 >> 0x18\n  6503: u8 [sp + 0x33] = a4\n  6506: a4 = a3 >> 0x10\n  6509: u8 [sp + 0x32] = a4\n  6512: a3 = a3 >> 0x8\n  6515: u8 [sp + 0x31] = a3\n  6518: a3 = a2 >> 0x38\n  6521: u8 [sp + 0x2f] = a3\n  6524: a3 = a2 >> 0x30\n  6527: u8 [sp + 0x2e] = a3\n  6530: a3 = a2 >> 0x28\n  6533: u8 [sp + 0x2d] = a3\n  6536: a3 = a2 >> 0x20\n  6539: u8 [sp + 0x2c] = a3\n  6542: a3 = a2 >> 0x18\n  6545: u8 [sp + 0x2b] = a3\n  6548: a3 = a2 >> 0x10\n  6551: u8 [sp + 0x2a] = a3\n  6554: a2 = a2 >> 0x8\n  6557: u8 [sp + 0x29] = a2\n  6560: a2 = a1 >> 0x38\n  6563: u8 [sp + 0x27] = a2\n  6566: a2 = a1 >> 0x30\n  6569: u8 [sp + 0x26] = a2\n  6572: a2 = a1 >> 0x28\n  6575: u8 [sp + 0x25] = a2\n  6578: a2 = a1 >> 0x20\n  6581: u8 [sp + 0x24] = a2\n  6584: a2 = a1 >> 0x18\n  6587: u8 [sp + 0x23] = a2\n  6590: a2 = a1 >> 0x10\n  6593: u8 [sp + 0x22] = a2\n  6596: a1 = a1 >> 0x8\n  6599: u8 [sp + 0x21] = a1\n  6602: a1 = t1 & 0x1f\n  6605: a2 = sp + 0x20\n  6608: a1 = a1 + a2\n  6611: a2 = u8 [a1 + 0x9]\n  6614: a3 = u8 [a1 + 0x8]\n  6617: a4 = u8 [a1 + 0xa]\n  6620: a5 = u8 [a1 + 0xb]\n  6623: a2 = a2 << 0x8\n  6626: a2 = a2 | a3\n  6629: a4 = a4 << 0x10\n  6632: a5 = a5 << 0x18\n  6635: a4 = a4 | a5\n  6638: a2 = a2 | a4\n  6641: a3 = u8 [a1 + 0xd]\n  6644: a4 = u8 [a1 + 0xc]\n  6647: a5 = u8 [a1 + 0xe]\n  6650: s1 = u8 [a1 + 0xf]\n  6653: a3 = a3 << 0x8\n  6656: a3 = a3 | a4\n  6659: a5 = a5 << 0x10\n  6662: s1 = s1 << 0x18\n  6665: a5 = a5 | s1\n  6668: a3 = a3 | a5\n  6671: a3 = a3 << 0x20\n  6674: a2 = a2 | a3\n  6677: a3 = u8 [a1 + 0x1]\n  6680: a4 = u8 [a1]\n  6682: a5 = u8 [a1 + 0x2]\n  6685: s1 = u8 [a1 + 0x3]\n  6688: a3 = a3 << 0x8\n  6691: a3 = a3 | a4\n  6694: a5 = a5 << 0x10\n  6697: s1 = s1 << 0x18\n  6700: a5 = a5 | s1\n  6703: a3 = a3 | a5\n  6706: a4 = u8 [a1 + 0x5]\n  6709: a5 = u8 [a1 + 0x4]\n  6712: s1 = u8 [a1 + 0x6]\n  6715: a0 = u8 [a1 + 0x7]\n  6718: a4 = a4 << 0x8\n  6721: a4 = a4 | a5\n  6724: s1 = s1 << 0x10\n  6727: a0 = a0 << 0x18\n  6730: a0 = a0 | s1\n  6733: a0 = a0 | a4\n  6736: a0 = a0 << 0x20\n  6739: a3 = a3 | a0\n  6742: a0 = u8 [a1 + 0x11]\n  6745: a4 = u8 [a1 + 0x10]\n  6748: a5 = u8 [a1 + 0x12]\n  6751: a1 = u8 [a1 + 0x13]\n  6754: a0 = a0 << 0x8\n  6757: a0 = a0 | a4\n  6760: a5 = a5 << 0x10\n  6763: a1 = a1 << 0x18\n  6766: a1 = a1 | a5\n  6769: a0 = a0 | a1\n  6772: a3 = 0 if t0 != 0\n  6774: a2 = 0 if t0 != 0\n  6776: a0 = 0 if t0 != 0\n  6778: a1 = u64 [sp + 0x18]\n  6781: u64 [a1 + 0x10] = a0\n  6784: u64 [a1 + 0x8] = a2\n  6787: u64 [a1] = a3\n  6789: u64 [a1 + 24] = 0\n  6792: sp = s0 + 0xfffffffffffffec0\n  6796: ra = u64 [sp + 0x138]\n  6800: s0 = u64 [sp + 0x130]\n  6804: s1 = u64 [sp + 0x128]\n  6808: sp = sp + 0x140\n  6812: ret\n      : @103 (gas: 2)\n  6814: a0 = 0\n  6816: ra = 84, jump @0\n      : @104 [@dyn 42] (gas: 6)\n  6821: i32 a1 = a0 + 0\n  6823: a0 = 0x1\n  6826: a2 = 0\n  6828: ra = 0x56\n  6831: ecalli 13 // 'seal_return'\n  6833: fallthrough\n      : @105 [@dyn 43] (gas: 12)\n  6834: a2 = u64 [a1 + 0x10]\n  6837: a3 = u64 [a1 + 0x18]\n  6840: a4 = u64 [a1 + 0x8]\n  6843: a1 = u64 [a1]\n  6845: a3 = a3 | a4\n  6848: a4 = a1 | a2\n  6851: a4 = a4 | a3\n  6854: a4 = a4 >> 0x20\n  6857: a2 = a2 | a3\n  6860: a2 = a2 << 0x20\n  6863: a2 = a2 | a4\n  6866: jump @108 if a2 != 0\n      : @106 (gas: 13)\n  6870: sp = sp + 0xffffffffffffffe0\n  6873: u64 [sp + 0x18] = ra\n  6876: u64 [sp + 0x10] = s0\n  6879: u64 [sp + 0x8] = s1\n  6882: a2 = u64 [a0 + 0x10]\n  6885: a3 = u64 [a0 + 0x8]\n  6888: u64 [sp] = a3\n  6890: s1 = u64 [a0]\n  6892: a2 = a2 << 0x20\n  6895: s0 = a2 >> 0x20\n  6898: i32 a0 = a1 + 0\n  6900: a1 = 0x20\n  6903: ra = 88, jump @0\n      : @107 [@dyn 44] (gas: 59)\n  6908: a1 = reverse s0\n  6910: a2 = u64 [sp]\n  6912: a2 = reverse a2\n  6914: a3 = reverse s1\n  6916: a4 = a3 >> 0x38\n  6919: u8 [a0 + 0x1f] = a4\n  6922: a4 = a3 >> 0x30\n  6925: u8 [a0 + 0x1e] = a4\n  6928: a4 = a3 >> 0x28\n  6931: u8 [a0 + 0x1d] = a4\n  6934: a4 = a3 >> 0x20\n  6937: u8 [a0 + 0x1c] = a4\n  6940: a4 = a3 >> 0x18\n  6943: u8 [a0 + 0x1b] = a4\n  6946: a4 = a3 >> 0x10\n  6949: u8 [a0 + 0x1a] = a4\n  6952: a4 = a3 >> 0x8\n  6955: u8 [a0 + 0x19] = a4\n  6958: u8 [a0 + 0x18] = a3\n  6961: u8 [a0 + 0x10] = a2\n  6964: u8 [a0 + 11] = 0\n  6967: u8 [a0 + 10] = 0\n  6970: u8 [a0 + 9] = 0\n  6973: u8 [a0 + 7] = 0\n  6976: u8 [a0 + 6] = 0\n  6979: u8 [a0 + 5] = 0\n  6982: u8 [a0 + 4] = 0\n  6985: u8 [a0 + 3] = 0\n  6988: u8 [a0 + 2] = 0\n  6991: u8 [a0 + 1] = 0\n  6994: u8 [a0 + 0] = 0\n  6996: a3 = a2 >> 0x38\n  6999: u8 [a0 + 0x17] = a3\n  7002: a3 = a2 >> 0x30\n  7005: u8 [a0 + 0x16] = a3\n  7008: a3 = a2 >> 0x28\n  7011: u8 [a0 + 0x15] = a3\n  7014: a3 = a2 >> 0x20\n  7017: u8 [a0 + 0x14] = a3\n  7020: a3 = a2 >> 0x18\n  7023: u8 [a0 + 0x13] = a3\n  7026: a3 = a2 >> 0x10\n  7029: u8 [a0 + 0x12] = a3\n  7032: a2 = a2 >> 0x8\n  7035: u8 [a0 + 0x11] = a2\n  7038: u8 [a0 + 0x8] = a1\n  7041: a2 = a1 >> 0x38\n  7044: u8 [a0 + 0xf] = a2\n  7047: a2 = a1 >> 0x30\n  7050: u8 [a0 + 0xe] = a2\n  7053: a2 = a1 >> 0x28\n  7056: u8 [a0 + 0xd] = a2\n  7059: a1 = a1 >> 0x20\n  7062: u8 [a0 + 0xc] = a1\n  7065: ra = u64 [sp + 0x18]\n  7068: s0 = u64 [sp + 0x10]\n  7071: s1 = u64 [sp + 0x8]\n  7074: sp = sp + 0x20\n  7077: ret\n      : @108 (gas: 1)\n  7079: trap\n      : @109 (gas: 8)\n  7080: a0 = u64 [sp + 0x70]\n  7083: a1 = u64 [sp + 0x78]\n  7086: a2 = u64 [sp + 0x68]\n  7089: a3 = u64 [sp + 0x60]\n  7092: a1 = a1 | a2\n  7095: a0 = a0 | a3\n  7098: a0 = a0 | a1\n  7101: jump @115 if a0 != 0\n      : @110 (gas: 2)\n  7105: a0 = i32 [0x20044]\n  7110: jump @115 if a0 <=u 35\n      : @111 (gas: 44)\n  7115: i32 a0 = sp + 0x80\n  7119: a1 = 0x4\n  7122: ecalli 3 // 'call_data_load'\n  7124: a2 = u64 [sp + 0x80]\n  7128: a0 = u64 [sp + 0x88]\n  7132: a1 = u64 [sp + 0x90]\n  7136: a3 = u64 [sp + 0x98]\n  7140: u64 [sp + 0x38] = a3\n  7143: u64 [sp + 0x30] = a1\n  7146: u64 [sp + 0x28] = a0\n  7149: a0 = sp + 0x40\n  7152: a1 = sp + 0x20\n  7155: u64 [sp + 0x20] = a2\n  7158: ra = 0x5a\n  7161: sp = sp + 0xfffffffffffffec0\n  7165: u64 [sp + 0x138] = ra\n  7169: u64 [sp + 0x130] = s0\n  7173: u64 [sp + 0x128] = s1\n  7177: s0 = sp + 0x140\n  7181: sp = sp & 0xffffffffffffffe0\n  7184: u64 [sp + 0x18] = a0\n  7187: a0 = u64 [a1]\n  7189: u64 [sp + 0x8] = a0\n  7192: a0 = u64 [a1 + 0x8]\n  7195: u64 [sp] = a0\n  7197: a0 = u64 [a1 + 0x10]\n  7200: u64 [sp + 0x10] = a0\n  7203: s1 = u64 [a1 + 0x18]\n  7206: u64 [sp + 248] = 0\n  7210: u64 [sp + 240] = 0\n  7214: u64 [sp + 232] = 0\n  7218: u64 [sp + 224] = 0\n  7222: u64 [sp + 280] = 0\n  7226: u64 [sp + 272] = 0\n  7230: u64 [sp + 264] = 0\n  7234: u64 [sp + 256] = 0\n  7238: u32 [sp + 288] = 0x20\n  7243: i32 a1 = sp + 0xe0\n  7247: i32 a3 = sp + 0x100\n  7251: i32 a4 = sp + 0x120\n  7255: a2 = 0xffffffffffffffff\n  7258: a0 = 0\n  7260: ecalli 7 // 'get_storage'\n  7262: jump @100\n      : @112 [@dyn 45] (gas: 11)\n  7265: a0 = u64 [sp + 0x58]\n  7268: u64 [sp] = a0\n  7270: a0 = u64 [sp + 0x50]\n  7273: u64 [sp + 0x8] = a0\n  7276: a0 = u64 [sp + 0x48]\n  7279: u64 [sp + 0x10] = a0\n  7282: a0 = u64 [sp + 0x40]\n  7285: u64 [sp + 0x18] = a0\n  7288: a0 = 0x40\n  7291: a1 = 0x20\n  7294: ra = 92, jump @0\n      : @113 [@dyn 46] (gas: 100)\n  7299: a1 = u8 [a0 + 0x11]\n  7302: a2 = u8 [a0 + 0x10]\n  7305: a3 = u8 [a0 + 0x12]\n  7308: a4 = u8 [a0 + 0x13]\n  7311: a1 = a1 << 0x8\n  7314: a1 = a1 | a2\n  7317: a3 = a3 << 0x10\n  7320: a4 = a4 << 0x18\n  7323: a3 = a3 | a4\n  7326: a1 = a1 | a3\n  7329: a2 = u8 [a0 + 0x15]\n  7332: a3 = u8 [a0 + 0x14]\n  7335: a4 = u8 [a0 + 0x16]\n  7338: a5 = u8 [a0 + 0x17]\n  7341: a2 = a2 << 0x8\n  7344: a2 = a2 | a3\n  7347: a4 = a4 << 0x10\n  7350: a5 = a5 << 0x18\n  7353: a4 = a4 | a5\n  7356: a2 = a2 | a4\n  7359: a2 = a2 << 0x20\n  7362: t0 = a2 | a1\n  7365: a2 = u8 [a0 + 0x1]\n  7368: a3 = u8 [a0]\n  7370: a4 = u8 [a0 + 0x2]\n  7373: a5 = u8 [a0 + 0x3]\n  7376: a2 = a2 << 0x8\n  7379: a2 = a2 | a3\n  7382: a4 = a4 << 0x10\n  7385: a5 = a5 << 0x18\n  7388: a4 = a4 | a5\n  7391: a2 = a2 | a4\n  7394: a3 = u8 [a0 + 0x5]\n  7397: a4 = u8 [a0 + 0x4]\n  7400: a5 = u8 [a0 + 0x6]\n  7403: s1 = u8 [a0 + 0x7]\n  7406: a3 = a3 << 0x8\n  7409: a3 = a3 | a4\n  7412: a5 = a5 << 0x10\n  7415: s1 = s1 << 0x18\n  7418: a5 = a5 | s1\n  7421: a3 = a3 | a5\n  7424: a3 = a3 << 0x20\n  7427: a2 = a2 | a3\n  7430: a3 = u8 [a0 + 0x19]\n  7433: a4 = u8 [a0 + 0x18]\n  7436: a5 = u8 [a0 + 0x1a]\n  7439: s1 = u8 [a0 + 0x1b]\n  7442: a3 = a3 << 0x8\n  7445: a3 = a3 | a4\n  7448: a5 = a5 << 0x10\n  7451: s1 = s1 << 0x18\n  7454: a5 = a5 | s1\n  7457: a3 = a3 | a5\n  7460: a4 = u8 [a0 + 0x1d]\n  7463: a5 = u8 [a0 + 0x1c]\n  7466: s1 = u8 [a0 + 0x1e]\n  7469: a1 = u8 [a0 + 0x1f]\n  7472: a4 = a4 << 0x8\n  7475: a4 = a4 | a5\n  7478: s1 = s1 << 0x10\n  7481: a1 = a1 << 0x18\n  7484: a1 = a1 | s1\n  7487: a1 = a1 | a4\n  7490: a1 = a1 << 0x20\n  7493: a3 = a3 | a1\n  7496: a1 = u8 [a0 + 0x9]\n  7499: a4 = u8 [a0 + 0x8]\n  7502: a5 = u8 [a0 + 0xa]\n  7505: s1 = u8 [a0 + 0xb]\n  7508: a1 = a1 << 0x8\n  7511: a1 = a1 | a4\n  7514: a5 = a5 << 0x10\n  7517: s1 = s1 << 0x18\n  7520: a5 = a5 | s1\n  7523: a1 = a1 | a5\n  7526: a4 = u8 [a0 + 0xd]\n  7529: a5 = u8 [a0 + 0xc]\n  7532: s1 = u8 [a0 + 0xe]\n  7535: a0 = u8 [a0 + 0xf]\n  7538: a4 = a4 << 0x8\n  7541: a4 = a4 | a5\n  7544: s1 = s1 << 0x10\n  7547: a0 = a0 << 0x18\n  7550: a0 = a0 | s1\n  7553: a0 = a0 | a4\n  7556: a0 = a0 << 0x20\n  7559: a0 = a0 | a1\n  7562: a1 = reverse a0\n  7564: a0 = reverse a3\n  7566: a2 = reverse a2\n  7568: a3 = reverse t0\n  7570: a2 = a2 | a3\n  7573: a3 = a0 | a1\n  7576: a3 = a3 | a2\n  7579: a3 = a3 >> 0x20\n  7582: a1 = a1 | a2\n  7585: a1 = a1 << 0x20\n  7588: a1 = a1 | a3\n  7591: jump @117 if a1 == 0\n      : @114 (gas: 1)\n  7594: trap\n      : @115 (gas: 3)\n  7595: a0 = 0\n  7597: a1 = 0\n  7599: ra = 94, jump @0\n      : @116 [@dyn 47] (gas: 5)\n  7604: i32 a1 = a0 + 0\n  7606: a0 = 0x1\n  7609: a2 = 0\n  7611: ecalli 13 // 'seal_return'\n  7613: fallthrough\n      : @117 (gas: 4)\n  7614: i32 s1 = a0 + 0\n  7616: a1 = 0x20\n  7619: a0 = s1\n  7621: ra = 96, jump @0\n      : @118 [@dyn 48] (gas: 71)\n  7626: a1 = u64 [sp]\n  7628: a1 = reverse a1\n  7630: a2 = u64 [sp + 0x8]\n  7633: a2 = reverse a2\n  7635: a3 = u64 [sp + 0x10]\n  7638: a3 = reverse a3\n  7640: a4 = u64 [sp + 0x18]\n  7643: a4 = reverse a4\n  7645: a5 = a4 >> 0x38\n  7648: u8 [a0 + 0x1f] = a5\n  7651: a5 = a4 >> 0x30\n  7654: u8 [a0 + 0x1e] = a5\n  7657: a5 = a4 >> 0x28\n  7660: u8 [a0 + 0x1d] = a5\n  7663: a5 = a4 >> 0x20\n  7666: u8 [a0 + 0x1c] = a5\n  7669: a5 = a4 >> 0x18\n  7672: u8 [a0 + 0x1b] = a5\n  7675: a5 = a4 >> 0x10\n  7678: u8 [a0 + 0x1a] = a5\n  7681: a5 = a4 >> 0x8\n  7684: u8 [a0 + 0x19] = a5\n  7687: u8 [a0 + 0x18] = a4\n  7690: u8 [a0 + 0x10] = a3\n  7693: a4 = a3 >> 0x38\n  7696: u8 [a0 + 0x17] = a4\n  7699: a4 = a3 >> 0x30\n  7702: u8 [a0 + 0x16] = a4\n  7705: a4 = a3 >> 0x28\n  7708: u8 [a0 + 0x15] = a4\n  7711: a4 = a3 >> 0x20\n  7714: u8 [a0 + 0x14] = a4\n  7717: a4 = a3 >> 0x18\n  7720: u8 [a0 + 0x13] = a4\n  7723: a4 = a3 >> 0x10\n  7726: u8 [a0 + 0x12] = a4\n  7729: a3 = a3 >> 0x8\n  7732: u8 [a0 + 0x11] = a3\n  7735: u8 [a0 + 0x8] = a2\n  7738: a3 = a2 >> 0x38\n  7741: u8 [a0 + 0xf] = a3\n  7744: a3 = a2 >> 0x30\n  7747: u8 [a0 + 0xe] = a3\n  7750: a3 = a2 >> 0x28\n  7753: u8 [a0 + 0xd] = a3\n  7756: a3 = a2 >> 0x20\n  7759: u8 [a0 + 0xc] = a3\n  7762: a3 = a2 >> 0x18\n  7765: u8 [a0 + 0xb] = a3\n  7768: a3 = a2 >> 0x10\n  7771: u8 [a0 + 0xa] = a3\n  7774: a2 = a2 >> 0x8\n  7777: u8 [a0 + 0x9] = a2\n  7780: u8 [a0] = a1\n  7782: a2 = a1 >> 0x38\n  7785: u8 [a0 + 0x7] = a2\n  7788: a2 = a1 >> 0x30\n  7791: u8 [a0 + 0x6] = a2\n  7794: a2 = a1 >> 0x28\n  7797: u8 [a0 + 0x5] = a2\n  7800: a2 = a1 >> 0x20\n  7803: u8 [a0 + 0x4] = a2\n  7806: a2 = a1 >> 0x18\n  7809: u8 [a0 + 0x3] = a2\n  7812: a2 = a1 >> 0x10\n  7815: u8 [a0 + 0x2] = a2\n  7818: a1 = a1 >> 0x8\n  7821: u8 [a0 + 0x1] = a1\n  7824: a1 = 0x20\n  7827: a0 = s1\n  7829: ra = 98, jump @0\n      : @119 [@dyn 49] (gas: 6)\n  7834: i32 a1 = a0 + 0\n  7836: a2 = 0x20\n  7839: a0 = 0\n  7841: ra = 0x64\n  7844: ecalli 13 // 'seal_return'\n  7846: fallthrough\n      : @120 [@dyn 50] (gas: 19)\n  7847: t0 = u64 [a0 + 0x18]\n  7850: t1 = u64 [a1 + 0x18]\n  7853: a4 = u64 [a0 + 0x10]\n  7856: a5 = u64 [a0 + 0x8]\n  7859: a2 = u64 [a1 + 0x8]\n  7862: t2 = u64 [a0]\n  7864: a3 = u64 [a1]\n  7866: a1 = u64 [a1 + 0x10]\n  7869: a0 = a2 ^ a5\n  7872: a2 = a2 <u a5\n  7875: a3 = a3 <u t2\n  7878: a3 = a2 if a0 != 0\n  7881: a0 = a1 - a4\n  7884: a0 = a0 <u a3\n  7887: a1 = a1 <u a4\n  7890: a2 = t1 - t0\n  7893: a2 = a2 - a1\n  7896: a2 = a2 - a0\n  7899: jump @122 if a2 <s 0\n      : @121 (gas: 1)\n  7902: ret\n      : @122 (gas: 5)\n  7904: sp = sp + 0xfffffffffffffff8\n  7907: u64 [sp] = ra\n  7909: a0 = 0\n  7911: a1 = 0\n  7913: ra = 102, jump @0\n      : @123 [@dyn 51] (gas: 6)\n  7918: i32 a1 = a0 + 0\n  7920: a0 = 0x1\n  7923: a2 = 0\n  7925: ra = 0x68\n  7928: ecalli 13 // 'seal_return'\n  7930: fallthrough\n      : @124 [@dyn 52] (gas: 13)\n  7931: sp = sp + 0xfffffffffffffec0\n  7935: u64 [sp + 0x138] = ra\n  7939: u64 [sp + 0x130] = s0\n  7943: u64 [sp + 0x128] = s1\n  7947: s0 = sp + 0x140\n  7951: sp = sp & 0xffffffffffffffe0\n  7954: u64 [sp + 280] = 0\n  7958: u64 [sp + 272] = 0\n  7962: u64 [sp + 264] = 0\n  7966: u64 [sp + 256] = 0\n  7970: i32 a0 = sp + 0x100\n  7974: ecalli 16 // 'value_transferred'\n  7976: fallthrough\n      : @125 (gas: 8)\n  7977: a0 = u64 [sp + 0x110]\n  7981: a1 = u64 [sp + 0x118]\n  7985: a2 = u64 [sp + 0x108]\n  7989: a3 = u64 [sp + 0x100]\n  7993: a1 = a1 | a2\n  7996: a0 = a0 | a3\n  7999: a0 = a0 | a1\n  8002: jump @134 if a0 != 0\n      : @126 (gas: 2)\n  8006: a0 = i32 [0x20044]\n  8011: jump @134 if a0 <=u 3\n      : @127 (gas: 7)\n  8016: u64 [sp + 216] = 0\n  8020: u64 [sp + 208] = 0\n  8024: u64 [sp + 200] = 0\n  8028: a0 = sp + 0xe0\n  8032: a1 = sp + 0xc0\n  8036: u64 [sp + 192] = 0\n  8040: ra = 106, jump @430\n      : @128 [@dyn 53] (gas: 11)\n  8045: a0 = u64 [sp + 0xf8]\n  8049: u64 [sp + 0x40] = a0\n  8052: a0 = u64 [sp + 0xf0]\n  8056: u64 [sp + 0x48] = a0\n  8059: a0 = u64 [sp + 0xe8]\n  8063: u64 [sp + 0x50] = a0\n  8066: a0 = u64 [sp + 0xe0]\n  8070: u64 [sp + 0x58] = a0\n  8073: a0 = 0x40\n  8076: a1 = 0x20\n  8079: ra = 108, jump @0\n      : @129 [@dyn 54] (gas: 100)\n  8084: a1 = u8 [a0 + 0x11]\n  8087: a2 = u8 [a0 + 0x10]\n  8090: a3 = u8 [a0 + 0x12]\n  8093: a4 = u8 [a0 + 0x13]\n  8096: a1 = a1 << 0x8\n  8099: a1 = a1 | a2\n  8102: a3 = a3 << 0x10\n  8105: a4 = a4 << 0x18\n  8108: a3 = a3 | a4\n  8111: a1 = a1 | a3\n  8114: a2 = u8 [a0 + 0x15]\n  8117: a3 = u8 [a0 + 0x14]\n  8120: a4 = u8 [a0 + 0x16]\n  8123: a5 = u8 [a0 + 0x17]\n  8126: a2 = a2 << 0x8\n  8129: a2 = a2 | a3\n  8132: a4 = a4 << 0x10\n  8135: a5 = a5 << 0x18\n  8138: a4 = a4 | a5\n  8141: a2 = a2 | a4\n  8144: a2 = a2 << 0x20\n  8147: t0 = a2 | a1\n  8150: a2 = u8 [a0 + 0x1]\n  8153: a3 = u8 [a0]\n  8155: a4 = u8 [a0 + 0x2]\n  8158: a5 = u8 [a0 + 0x3]\n  8161: a2 = a2 << 0x8\n  8164: a2 = a2 | a3\n  8167: a4 = a4 << 0x10\n  8170: a5 = a5 << 0x18\n  8173: a4 = a4 | a5\n  8176: a2 = a2 | a4\n  8179: a3 = u8 [a0 + 0x5]\n  8182: a4 = u8 [a0 + 0x4]\n  8185: a5 = u8 [a0 + 0x6]\n  8188: s1 = u8 [a0 + 0x7]\n  8191: a3 = a3 << 0x8\n  8194: a3 = a3 | a4\n  8197: a5 = a5 << 0x10\n  8200: s1 = s1 << 0x18\n  8203: a5 = a5 | s1\n  8206: a3 = a3 | a5\n  8209: a3 = a3 << 0x20\n  8212: a2 = a2 | a3\n  8215: a3 = u8 [a0 + 0x19]\n  8218: a4 = u8 [a0 + 0x18]\n  8221: a5 = u8 [a0 + 0x1a]\n  8224: s1 = u8 [a0 + 0x1b]\n  8227: a3 = a3 << 0x8\n  8230: a3 = a3 | a4\n  8233: a5 = a5 << 0x10\n  8236: s1 = s1 << 0x18\n  8239: a5 = a5 | s1\n  8242: a3 = a3 | a5\n  8245: a4 = u8 [a0 + 0x1d]\n  8248: a5 = u8 [a0 + 0x1c]\n  8251: s1 = u8 [a0 + 0x1e]\n  8254: a1 = u8 [a0 + 0x1f]\n  8257: a4 = a4 << 0x8\n  8260: a4 = a4 | a5\n  8263: s1 = s1 << 0x10\n  8266: a1 = a1 << 0x18\n  8269: a1 = a1 | s1\n  8272: a1 = a1 | a4\n  8275: a1 = a1 << 0x20\n  8278: a3 = a3 | a1\n  8281: a1 = u8 [a0 + 0x9]\n  8284: a4 = u8 [a0 + 0x8]\n  8287: a5 = u8 [a0 + 0xa]\n  8290: s1 = u8 [a0 + 0xb]\n  8293: a1 = a1 << 0x8\n  8296: a1 = a1 | a4\n  8299: a5 = a5 << 0x10\n  8302: s1 = s1 << 0x18\n  8305: a5 = a5 | s1\n  8308: a1 = a1 | a5\n  8311: a4 = u8 [a0 + 0xd]\n  8314: a5 = u8 [a0 + 0xc]\n  8317: s1 = u8 [a0 + 0xe]\n  8320: a0 = u8 [a0 + 0xf]\n  8323: a4 = a4 << 0x8\n  8326: a4 = a4 | a5\n  8329: s1 = s1 << 0x10\n  8332: a0 = a0 << 0x18\n  8335: a0 = a0 | s1\n  8338: a0 = a0 | a4\n  8341: a0 = a0 << 0x20\n  8344: a0 = a0 | a1\n  8347: s1 = reverse a0\n  8349: a3 = reverse a3\n  8351: a4 = reverse a2\n  8353: a2 = reverse t0\n  8355: a0 = a2 | a4\n  8358: a1 = a3 | s1\n  8361: a1 = a1 | a0\n  8364: a1 = a1 >> 0x20\n  8367: a0 = a0 | s1\n  8370: a0 = a0 << 0x20\n  8373: a0 = a0 | a1\n  8376: jump @133 if a0 != 0\n      : @130 (gas: 19)\n  8380: a0 = a3 + 0x20\n  8383: u64 [sp + 0x18] = a0\n  8386: a0 = a0 <u a3\n  8389: a1 = a2 + a0\n  8392: u64 [sp + 0x8] = a1\n  8395: a1 = a1 <u a2\n  8398: a1 = a0 if a0 == 0\n  8401: a1 = a1 + s1\n  8404: u64 [sp + 0x10] = a1\n  8407: a0 = a1 <u s1\n  8410: a0 = a0 + a4\n  8413: u64 [sp + 0x20] = a0\n  8416: i32 a0 = a3 + 0\n  8418: a1 = 0x20\n  8421: u64 [sp] = a0\n  8423: u64 [sp + 0x30] = a3\n  8426: u64 [sp + 0x28] = a2\n  8429: u64 [sp + 0x38] = a4\n  8432: ra = 110, jump @0\n      : @131 [@dyn 55] (gas: 52)\n  8437: u8 [a0 + 31] = 0x20\n  8441: u8 [a0 + 30] = 0\n  8444: u8 [a0 + 29] = 0\n  8447: u8 [a0 + 28] = 0\n  8450: u8 [a0 + 27] = 0\n  8453: u8 [a0 + 26] = 0\n  8456: u8 [a0 + 25] = 0\n  8459: u8 [a0 + 24] = 0\n  8462: u8 [a0 + 23] = 0\n  8465: u8 [a0 + 22] = 0\n  8468: u8 [a0 + 21] = 0\n  8471: u8 [a0 + 20] = 0\n  8474: u8 [a0 + 19] = 0\n  8477: u8 [a0 + 18] = 0\n  8480: u8 [a0 + 17] = 0\n  8483: u8 [a0 + 16] = 0\n  8486: u8 [a0 + 15] = 0\n  8489: u8 [a0 + 14] = 0\n  8492: u8 [a0 + 13] = 0\n  8495: u8 [a0 + 12] = 0\n  8498: u8 [a0 + 11] = 0\n  8501: u8 [a0 + 10] = 0\n  8504: u8 [a0 + 9] = 0\n  8507: u8 [a0 + 8] = 0\n  8510: u8 [a0 + 7] = 0\n  8513: u8 [a0 + 6] = 0\n  8516: u8 [a0 + 5] = 0\n  8519: u8 [a0 + 4] = 0\n  8522: u8 [a0 + 3] = 0\n  8525: u8 [a0 + 2] = 0\n  8528: u8 [a0 + 1] = 0\n  8531: u8 [a0 + 0] = 0\n  8533: a0 = u64 [sp + 0x8]\n  8536: u64 [sp + 0x68] = a0\n  8539: a0 = u64 [sp + 0x18]\n  8542: u64 [sp + 0x60] = a0\n  8545: a0 = u64 [sp + 0x40]\n  8548: u64 [sp + 0x98] = a0\n  8552: a0 = u64 [sp + 0x48]\n  8555: u64 [sp + 0x90] = a0\n  8559: a0 = u64 [sp + 0x50]\n  8562: u64 [sp + 0x88] = a0\n  8566: a0 = u64 [sp + 0x58]\n  8569: u64 [sp + 0x80] = a0\n  8573: a0 = u64 [sp + 0x10]\n  8576: u64 [sp + 0x70] = a0\n  8579: a0 = sp + 0xa0\n  8583: a1 = sp + 0x80\n  8587: a2 = sp + 0x60\n  8590: a3 = u64 [sp + 0x20]\n  8593: u64 [sp + 0x78] = a3\n  8596: ra = 112, jump @61\n      : @132 [@dyn 56] (gas: 30)\n  8601: a0 = u64 [sp + 0xa8]\n  8605: t0 = u64 [sp + 0xb8]\n  8609: t1 = u64 [sp + 0xa0]\n  8613: a3 = u64 [sp + 0xb0]\n  8617: a1 = u64 [sp + 0x28]\n  8620: a4 = a0 ^ a1\n  8623: a5 = a0 <u a1\n  8626: t2 = a1\n  8628: a2 = u64 [sp + 0x30]\n  8631: a1 = t1 <u a2\n  8634: a5 = a1 if a4 == 0\n  8637: a4 = a3 - s1\n  8640: a3 = a3 <u s1\n  8643: s1 = u64 [sp + 0x38]\n  8646: s1 = t0 - s1\n  8649: s1 = s1 - a3\n  8652: a3 = a4 <u a5\n  8655: s1 = s1 - a3\n  8658: a4 = a4 - a5\n  8661: a0 = a0 - t2\n  8664: a1 = a0 - a1\n  8667: a0 = t1 - a2\n  8670: a1 = a1 | s1\n  8673: a2 = a0 | a4\n  8676: a2 = a2 | a1\n  8679: a1 = a1 | a4\n  8682: a2 = a2 >> 0x20\n  8685: a1 = a1 << 0x20\n  8688: a1 = a1 | a2\n  8691: jump @136 if a1 == 0\n      : @133 (gas: 1)\n  8694: trap\n      : @134 (gas: 3)\n  8695: a0 = 0\n  8697: a1 = 0\n  8699: ra = 114, jump @0\n      : @135 [@dyn 57] (gas: 5)\n  8704: i32 a1 = a0 + 0\n  8706: a0 = 0x1\n  8709: a2 = 0\n  8711: ecalli 13 // 'seal_return'\n  8713: fallthrough\n      : @136 (gas: 4)\n  8714: i32 s1 = a0 + 0\n  8716: a0 = u64 [sp]\n  8718: a1 = s1\n  8720: ra = 116, jump @0\n      : @137 [@dyn 58] (gas: 6)\n  8725: i32 a1 = a0 + 0\n  8727: a0 = 0\n  8729: a2 = s1\n  8731: ra = 0x76\n  8734: ecalli 13 // 'seal_return'\n  8736: fallthrough\n      : @138 [@dyn 59] (gas: 5)\n  8737: sp = sp + 0xfffffffffffffff8\n  8740: u64 [sp] = ra\n  8742: a0 = 0\n  8744: a1 = 0\n  8746: ra = 120, jump @0\n      : @139 [@dyn 60] (gas: 6)\n  8751: i32 a1 = a0 + 0\n  8753: a0 = 0x1\n  8756: a2 = 0\n  8758: ra = 0x7a\n  8761: ecalli 13 // 'seal_return'\n  8763: fallthrough\n      : @140 [@dyn 61] (gas: 18)\n  8764: a2 = u64 [a1]\n  8766: t0 = u64 [a1 + 0x18]\n  8769: a4 = u64 [a1 + 0x8]\n  8772: a1 = u64 [a1 + 0x10]\n  8775: a5 = a2 + 0x1f\n  8778: a2 = a5 <u a2\n  8781: a3 = a4 + a2\n  8784: a4 = a3 <u a4\n  8787: a4 = a2 if a2 == 0\n  8790: a4 = a4 + a1\n  8793: a1 = a4 <u a1\n  8796: a1 = a1 + t0\n  8799: a5 = a5 & 0xffffffffffffffe0\n  8802: u64 [a0] = a5\n  8804: u64 [a0 + 0x8] = a3\n  8807: u64 [a0 + 0x10] = a4\n  8810: u64 [a0 + 0x18] = a1\n  8813: ret\n      : @141 (gas: 18)\n  8815: sp = sp + 0xffffffffffffff60\n  8819: u64 [sp + 0x98] = ra\n  8823: u64 [sp + 0x90] = s0\n  8827: u64 [sp + 0x88] = s1\n  8831: s0 = sp + 0xa0\n  8835: sp = sp & 0xfffffffffffffff0\n  8838: a2 = u64 [a1 + 0x18]\n  8841: u64 [sp + 0x30] = a2\n  8844: a2 = u64 [a1 + 0x10]\n  8847: u64 [sp + 0x28] = a2\n  8850: a2 = u64 [a1 + 0x8]\n  8853: u64 [sp + 0x20] = a2\n  8856: a1 = u64 [a1]\n  8858: u64 [sp + 0x18] = a1\n  8861: u64 [sp + 0x38] = a0\n  8864: a0 = 0x40\n  8867: a1 = 0x20\n  8870: ra = 124, jump @0\n      : @142 [@dyn 62] (gas: 130)\n  8875: a1 = u8 [a0 + 0x19]\n  8878: a2 = u8 [a0 + 0x18]\n  8881: a3 = u8 [a0 + 0x1a]\n  8884: a4 = u8 [a0 + 0x1b]\n  8887: a1 = a1 << 0x8\n  8890: a1 = a1 | a2\n  8893: a3 = a3 << 0x10\n  8896: a4 = a4 << 0x18\n  8899: a3 = a3 | a4\n  8902: a1 = a1 | a3\n  8905: a2 = u8 [a0 + 0x1d]\n  8908: a3 = u8 [a0 + 0x1c]\n  8911: a4 = u8 [a0 + 0x1e]\n  8914: a5 = u8 [a0 + 0x1f]\n  8917: a2 = a2 << 0x8\n  8920: a2 = a2 | a3\n  8923: a4 = a4 << 0x10\n  8926: a5 = a5 << 0x18\n  8929: a4 = a4 | a5\n  8932: a2 = a2 | a4\n  8935: a2 = a2 << 0x20\n  8938: t0 = a2 | a1\n  8941: a2 = u8 [a0 + 0x11]\n  8944: a3 = u8 [a0 + 0x10]\n  8947: a4 = u8 [a0 + 0x12]\n  8950: a5 = u8 [a0 + 0x13]\n  8953: a2 = a2 << 0x8\n  8956: a2 = a2 | a3\n  8959: a4 = a4 << 0x10\n  8962: a5 = a5 << 0x18\n  8965: a4 = a4 | a5\n  8968: a2 = a2 | a4\n  8971: a3 = u8 [a0 + 0x15]\n  8974: a4 = u8 [a0 + 0x14]\n  8977: a5 = u8 [a0 + 0x16]\n  8980: s1 = u8 [a0 + 0x17]\n  8983: a3 = a3 << 0x8\n  8986: a3 = a3 | a4\n  8989: a5 = a5 << 0x10\n  8992: s1 = s1 << 0x18\n  8995: a5 = a5 | s1\n  8998: a3 = a3 | a5\n  9001: a3 = a3 << 0x20\n  9004: a2 = a2 | a3\n  9007: a3 = u8 [a0 + 0x9]\n  9010: a4 = u8 [a0 + 0x8]\n  9013: a5 = u8 [a0 + 0xa]\n  9016: s1 = u8 [a0 + 0xb]\n  9019: a3 = a3 << 0x8\n  9022: a3 = a3 | a4\n  9025: a5 = a5 << 0x10\n  9028: s1 = s1 << 0x18\n  9031: a5 = a5 | s1\n  9034: a3 = a3 | a5\n  9037: a4 = u8 [a0 + 0xd]\n  9040: a5 = u8 [a0 + 0xc]\n  9043: s1 = u8 [a0 + 0xe]\n  9046: a1 = u8 [a0 + 0xf]\n  9049: a4 = a4 << 0x8\n  9052: a4 = a4 | a5\n  9055: s1 = s1 << 0x10\n  9058: a1 = a1 << 0x18\n  9061: a1 = a1 | s1\n  9064: a1 = a1 | a4\n  9067: a1 = a1 << 0x20\n  9070: a3 = a3 | a1\n  9073: a1 = u8 [a0 + 0x1]\n  9076: a4 = u8 [a0]\n  9078: a5 = u8 [a0 + 0x2]\n  9081: s1 = u8 [a0 + 0x3]\n  9084: a1 = a1 << 0x8\n  9087: a1 = a1 | a4\n  9090: a5 = a5 << 0x10\n  9093: s1 = s1 << 0x18\n  9096: a5 = a5 | s1\n  9099: a1 = a1 | a5\n  9102: a4 = u8 [a0 + 0x5]\n  9105: a5 = u8 [a0 + 0x4]\n  9108: s1 = u8 [a0 + 0x6]\n  9111: a0 = u8 [a0 + 0x7]\n  9114: a4 = a4 << 0x8\n  9117: a4 = a4 | a5\n  9120: s1 = s1 << 0x10\n  9123: a0 = a0 << 0x18\n  9126: a0 = a0 | s1\n  9129: a0 = a0 | a4\n  9132: a0 = a0 << 0x20\n  9135: a0 = a0 | a1\n  9138: t1 = reverse a0\n  9140: t2 = reverse a3\n  9142: s1 = reverse a2\n  9144: a5 = reverse t0\n  9146: a1 = u64 [sp + 0x18]\n  9149: a0 = a1 + 0x1f\n  9152: a1 = a0 <u a1\n  9155: a3 = u64 [sp + 0x20]\n  9158: a2 = a3 + a1\n  9161: a3 = a2 <u a3\n  9164: a3 = a1 if a1 == 0\n  9167: a1 = u64 [sp + 0x28]\n  9170: a3 = a3 + a1\n  9173: a1 = a3 <u a1\n  9176: a4 = u64 [sp + 0x30]\n  9179: a1 = a1 + a4\n  9182: a0 = a0 & 0xffffffffffffffe0\n  9185: a0 = a0 + a5\n  9188: u64 [sp + 0x28] = a5\n  9191: u64 [sp + 0x10] = a0\n  9194: a4 = a0 <u a5\n  9197: a2 = a2 + s1\n  9200: a5 = a2 + a4\n  9203: a2 = a5 ^ s1\n  9206: u64 [sp + 0x30] = s1\n  9209: a0 = a5 <u s1\n  9212: a0 = a4 if a2 == 0\n  9215: a3 = a3 + t2\n  9218: a4 = a3 + a0\n  9221: s1 = a4 <u a3\n  9224: a2 = a3 <u t2\n  9227: a1 = a1 + t1\n  9230: a1 = a1 + a2\n  9233: s1 = s1 + a1\n  9236: a1 = a4 >u 0\n  9238: a2 = s1 >u 0\n  9240: a2 = a1 if s1 == 0\n  9243: a1 = a4 | s1\n  9246: u64 [sp + 0x8] = a5\n  9249: a3 = a5 >u 0\n  9251: a3 = a2 if a1 != 0\n  9254: jump @146 if a3 != 0\n      : @143 (gas: 8)\n  9258: a1 = a4 <u t2\n  9261: a2 = s1 ^ t1\n  9264: a3 = s1 <u t1\n  9267: a3 = a1 if a2 == 0\n  9270: a1 = a4 ^ t2\n  9273: a1 = a1 | a2\n  9276: a0 = a3 if a1 != 0\n  9279: jump @146 if a0 != 0\n      : @144 (gas: 6)\n  9283: a0 = 0x40\n  9286: a1 = 0x20\n  9289: u64 [sp + 0x20] = t2\n  9292: u64 [sp + 0x18] = t1\n  9295: u64 [sp] = a4\n  9297: ra = 126, jump @0\n      : @145 [@dyn 63] (gas: 82)\n  9302: a1 = reverse s1\n  9304: a2 = u64 [sp]\n  9306: a2 = reverse a2\n  9308: a3 = u64 [sp + 0x8]\n  9311: a3 = reverse a3\n  9313: a4 = u64 [sp + 0x10]\n  9316: a4 = reverse a4\n  9318: u8 [a0 + 0x18] = a4\n  9321: a5 = a4 >> 0x38\n  9324: u8 [a0 + 0x1f] = a5\n  9327: a5 = a4 >> 0x30\n  9330: u8 [a0 + 0x1e] = a5\n  9333: a5 = a4 >> 0x28\n  9336: u8 [a0 + 0x1d] = a5\n  9339: a5 = a4 >> 0x20\n  9342: u8 [a0 + 0x1c] = a5\n  9345: a5 = a4 >> 0x18\n  9348: u8 [a0 + 0x1b] = a5\n  9351: a5 = a4 >> 0x10\n  9354: u8 [a0 + 0x1a] = a5\n  9357: a4 = a4 >> 0x8\n  9360: u8 [a0 + 0x19] = a4\n  9363: u8 [a0 + 0x10] = a3\n  9366: a4 = a3 >> 0x38\n  9369: u8 [a0 + 0x17] = a4\n  9372: a4 = a3 >> 0x30\n  9375: u8 [a0 + 0x16] = a4\n  9378: a4 = a3 >> 0x28\n  9381: u8 [a0 + 0x15] = a4\n  9384: a4 = a3 >> 0x20\n  9387: u8 [a0 + 0x14] = a4\n  9390: a4 = a3 >> 0x18\n  9393: u8 [a0 + 0x13] = a4\n  9396: a4 = a3 >> 0x10\n  9399: u8 [a0 + 0x12] = a4\n  9402: a3 = a3 >> 0x8\n  9405: u8 [a0 + 0x11] = a3\n  9408: u8 [a0 + 0x8] = a2\n  9411: a3 = a2 >> 0x38\n  9414: u8 [a0 + 0xf] = a3\n  9417: a3 = a2 >> 0x30\n  9420: u8 [a0 + 0xe] = a3\n  9423: a3 = a2 >> 0x28\n  9426: u8 [a0 + 0xd] = a3\n  9429: a3 = a2 >> 0x20\n  9432: u8 [a0 + 0xc] = a3\n  9435: a3 = a2 >> 0x18\n  9438: u8 [a0 + 0xb] = a3\n  9441: a3 = a2 >> 0x10\n  9444: u8 [a0 + 0xa] = a3\n  9447: a2 = a2 >> 0x8\n  9450: u8 [a0 + 0x9] = a2\n  9453: u8 [a0] = a1\n  9455: a2 = a1 >> 0x38\n  9458: u8 [a0 + 0x7] = a2\n  9461: a2 = a1 >> 0x30\n  9464: u8 [a0 + 0x6] = a2\n  9467: a2 = a1 >> 0x28\n  9470: u8 [a0 + 0x5] = a2\n  9473: a2 = a1 >> 0x20\n  9476: u8 [a0 + 0x4] = a2\n  9479: a2 = a1 >> 0x18\n  9482: u8 [a0 + 0x3] = a2\n  9485: a2 = a1 >> 0x10\n  9488: u8 [a0 + 0x2] = a2\n  9491: a1 = a1 >> 0x8\n  9494: u8 [a0 + 0x1] = a1\n  9497: a0 = u64 [sp + 0x38]\n  9500: a1 = u64 [sp + 0x28]\n  9503: u64 [a0] = a1\n  9505: a1 = u64 [sp + 0x18]\n  9508: u64 [a0 + 0x18] = a1\n  9511: a1 = u64 [sp + 0x30]\n  9514: u64 [a0 + 0x8] = a1\n  9517: a1 = u64 [sp + 0x20]\n  9520: u64 [a0 + 0x10] = a1\n  9523: sp = s0 + 0xffffffffffffff60\n  9527: ra = u64 [sp + 0x98]\n  9531: s0 = u64 [sp + 0x90]\n  9535: s1 = u64 [sp + 0x88]\n  9539: sp = sp + 0xa0\n  9543: ret\n      : @146 (gas: 8)\n  9545: u64 [sp + 112] = 0\n  9548: u64 [sp + 104] = 0\n  9551: u64 [sp + 96] = 0\n  9554: a0 = 0x4e487b7100000000\n  9564: a1 = sp + 0x60\n  9567: u64 [sp + 0x78] = a0\n  9570: a0 = 0\n  9572: ra = 128, jump @8\n      : @147 [@dyn 64] (gas: 7)\n  9578: u64 [sp + 88] = 0\n  9581: u64 [sp + 80] = 0\n  9584: u64 [sp + 64] = 0x41\n  9588: a0 = 0x4\n  9591: a1 = sp + 0x40\n  9594: u64 [sp + 72] = 0\n  9597: ra = 130, jump @8\n      : @148 [@dyn 65] (gas: 3)\n  9603: a1 = 0x24\n  9606: a0 = 0\n  9608: ra = 132, jump @0\n      : @149 [@dyn 66] (gas: 6)\n  9614: i32 a1 = a0 + 0\n  9616: a0 = 0x1\n  9619: a2 = 0x24\n  9622: ra = 0x86\n  9626: ecalli 13 // 'seal_return'\n  9628: fallthrough\n      : @150 [@dyn 67] (gas: 7)\n  9629: a4 = u64 [a1 + 0x18]\n  9632: a3 = u64 [a1 + 0x10]\n  9635: a2 = u64 [a1 + 0x8]\n  9638: t0 = a3 | a4\n  9641: a5 = a2 <u 0x1\n  9644: a5 = 0 if t0 != 0\n  9646: jump @152 if a5 == 0\n      : @151 (gas: 24)\n  9649: a1 = u64 [a1]\n  9651: a5 = a3 >> 0x3b\n  9654: a4 = a4 << 0x5\n  9657: t0 = a4 | a5\n  9660: a5 = a2 >> 0x3b\n  9663: a3 = a3 << 0x5\n  9666: a3 = a3 | a5\n  9669: a5 = a1 >> 0x3b\n  9672: a2 = a2 << 0x5\n  9675: a2 = a2 | a5\n  9678: a1 = a1 << 0x5\n  9681: a5 = a1 + 0x20\n  9684: a1 = a5 <u a1\n  9687: a4 = a2 + a1\n  9690: a2 = a4 <u a2\n  9693: a2 = a1 if a1 == 0\n  9696: a2 = a2 + a3\n  9699: a1 = a2 <u a3\n  9702: a1 = a1 + t0\n  9705: u64 [a0] = a5\n  9707: u64 [a0 + 0x8] = a4\n  9710: u64 [a0 + 0x10] = a2\n  9713: u64 [a0 + 0x18] = a1\n  9716: ret\n      : @152 (gas: 13)\n  9718: sp = sp + 0xffffffffffffffb0\n  9721: u64 [sp + 0x48] = ra\n  9724: u64 [sp + 0x40] = s0\n  9727: s0 = sp + 0x50\n  9730: sp = sp & 0xfffffffffffffff0\n  9733: u64 [sp + 48] = 0\n  9736: u64 [sp + 40] = 0\n  9739: u64 [sp + 32] = 0\n  9742: a0 = 0x4e487b7100000000\n  9752: a1 = sp + 0x20\n  9755: u64 [sp + 0x38] = a0\n  9758: a0 = 0\n  9760: ra = 136, jump @8\n      : @153 [@dyn 68] (gas: 7)\n  9766: u64 [sp + 24] = 0\n  9769: u64 [sp + 16] = 0\n  9772: u64 [sp + 0] = 0x41\n  9775: a0 = 0x4\n  9778: a1 = sp\n  9780: u64 [sp + 8] = 0\n  9783: ra = 138, jump @8\n      : @154 [@dyn 69] (gas: 3)\n  9789: a1 = 0x24\n  9792: a0 = 0\n  9794: ra = 140, jump @0\n      : @155 [@dyn 70] (gas: 6)\n  9800: i32 a1 = a0 + 0\n  9802: a0 = 0x1\n  9805: a2 = 0x24\n  9808: ra = 0x8e\n  9812: ecalli 13 // 'seal_return'\n  9814: fallthrough\n      : @156 [@dyn 71] (gas: 14)\n  9815: sp = sp + 0xfffffffffffffe60\n  9819: u64 [sp + 0x198] = ra\n  9823: u64 [sp + 0x190] = s0\n  9827: u64 [sp + 0x188] = s1\n  9831: s0 = sp + 0x1a0\n  9835: sp = sp & 0xffffffffffffffe0\n  9838: t1 = u64 [a2 + 0x18]\n  9841: a4 = u64 [a2 + 0x10]\n  9844: s1 = u64 [a2 + 0x8]\n  9847: t0 = a4 | t1\n  9850: a5 = s1 <u 0x1\n  9853: a5 = 0 if t0 != 0\n  9855: u64 [sp + 0x18] = a0\n  9858: jump @173 if a5 == 0\n      : @157 (gas: 50)\n  9862: a5 = u64 [a2]\n  9864: a0 = a4 >> 0x3b\n  9867: u64 [sp + 0xb8] = t1\n  9871: a2 = t1 << 0x5\n  9874: t0 = a2 | a0\n  9877: a0 = s1 >> 0x3b\n  9880: u64 [sp + 0xb0] = a4\n  9884: a2 = a4 << 0x5\n  9887: a0 = a0 | a2\n  9890: a2 = a5 >> 0x3b\n  9893: u64 [sp + 0xa8] = s1\n  9897: s1 = s1 << 0x5\n  9900: a2 = a2 | s1\n  9903: u64 [sp + 0xa0] = a5\n  9907: a5 = a5 << 0x5\n  9910: t1 = a5 + 0x20\n  9913: u64 [sp + 0x58] = a5\n  9916: a4 = t1 <u a5\n  9919: s1 = a2 + a4\n  9922: u64 [sp + 0x60] = a2\n  9925: a5 = s1 <u a2\n  9928: a5 = a4 if a4 == 0\n  9931: a2 = u64 [a3 + 0x18]\n  9934: u64 [sp + 0x80] = a2\n  9938: a2 = u64 [a3 + 0x10]\n  9941: u64 [sp + 0x88] = a2\n  9945: a2 = u64 [a3 + 0x8]\n  9948: u64 [sp + 0x68] = a2\n  9951: a2 = u64 [a3]\n  9953: u64 [sp + 0x78] = a2\n  9956: a2 = u64 [a1 + 0x18]\n  9959: u64 [sp + 0xc8] = a2\n  9963: a2 = u64 [a1 + 0x10]\n  9966: u64 [sp + 0xc0] = a2\n  9970: a2 = u64 [a1 + 0x8]\n  9973: u64 [sp + 0xd8] = a2\n  9977: a1 = u64 [a1]\n  9979: u64 [sp + 0xd0] = a1\n  9983: a5 = a5 + a0\n  9986: u64 [sp + 0x90] = a0\n  9990: a1 = a5 <u a0\n  9993: u64 [sp + 0x98] = t0\n  9997: a2 = t0 + a1\n 10000: u64 [sp + 0x120] = t1\n 10004: u64 [sp + 0x128] = s1\n 10008: u64 [sp + 0x130] = a5\n 10012: a0 = sp + 0x140\n 10016: a1 = sp + 0x120\n 10020: u64 [sp + 0x138] = a2\n 10024: ra = 144, jump @141\n      : @158 [@dyn 72] (gas: 15)\n 10030: a0 = u64 [sp + 0x158]\n 10034: a2 = u64 [sp + 0x150]\n 10038: a1 = u64 [sp + 0x148]\n 10042: a3 = u64 [sp + 0x140]\n 10046: u64 [sp + 0x38] = a0\n 10049: u64 [sp + 0x28] = a1\n 10052: a0 = a0 | a1\n 10055: a1 = a3 | a2\n 10058: a1 = a1 | a0\n 10061: a1 = a1 >> 0x20\n 10064: u64 [sp + 0x30] = a2\n 10067: a0 = a0 | a2\n 10070: a0 = a0 << 0x20\n 10073: a0 = a0 | a1\n 10076: jump @170 if a0 != 0\n      : @159 (gas: 4)\n 10080: u64 [sp + 0x20] = a3\n 10083: i32 a0 = a3 + 0\n 10085: a1 = 0x20\n 10088: ra = 146, jump @0\n      : @160 [@dyn 73] (gas: 111)\n 10094: a1 = u64 [sp + 0x58]\n 10097: a5 = u64 [sp + 0xd0]\n 10101: a5 = a5 + a1\n 10104: a1 = a5 <u a1\n 10107: a4 = u64 [sp + 0x60]\n 10110: a2 = u64 [sp + 0xd8]\n 10114: a2 = a2 + a4\n 10117: ra = a2 + a1\n 10120: a3 = ra ^ a4\n 10123: a2 = ra <u a4\n 10126: a2 = a1 if a3 == 0\n 10129: a1 = u64 [sp + 0x68]\n 10132: a3 = ra ^ a1\n 10135: a4 = a1 <u ra\n 10138: u64 [sp + 0x70] = a5\n 10141: a1 = u64 [sp + 0x78]\n 10144: a1 = a1 <u a5\n 10147: a1 = a4 if a3 != 0\n 10150: t1 = u64 [sp + 0xc0]\n 10154: a4 = u64 [sp + 0x90]\n 10158: a3 = a4 + t1\n 10161: a4 = a3 <u a4\n 10164: t0 = u64 [sp + 0xc8]\n 10168: a5 = u64 [sp + 0x98]\n 10172: a5 = a5 + t0\n 10175: a4 = a4 + a5\n 10178: s1 = a3 + a2\n 10181: a2 = s1 <u a3\n 10184: t2 = a4 + a2\n 10187: a3 = u64 [sp + 0x80]\n 10191: a2 = t2 ^ a3\n 10194: a3 = a3 <u t2\n 10197: a5 = u64 [sp + 0x88]\n 10201: a4 = a5 <u s1\n 10204: a3 = a4 if a2 == 0\n 10207: a4 = s1 ^ a5\n 10210: a2 = a2 | a4\n 10213: a1 = a3 if a2 != 0\n 10216: a2 = u64 [sp + 0xa0]\n 10220: a2 = reverse a2\n 10222: a3 = a2 >> 0x38\n 10225: u8 [a0 + 0x1f] = a3\n 10228: a3 = a2 >> 0x30\n 10231: u8 [a0 + 0x1e] = a3\n 10234: a3 = a2 >> 0x28\n 10237: u8 [a0 + 0x1d] = a3\n 10240: a3 = a2 >> 0x20\n 10243: u8 [a0 + 0x1c] = a3\n 10246: a3 = a2 >> 0x18\n 10249: u8 [a0 + 0x1b] = a3\n 10252: a3 = a2 >> 0x10\n 10255: u8 [a0 + 0x1a] = a3\n 10258: a3 = a2 >> 0x8\n 10261: u8 [a0 + 0x19] = a3\n 10264: a3 = u64 [sp + 0xa8]\n 10268: a3 = reverse a3\n 10270: u8 [a0 + 0x18] = a2\n 10273: a2 = a3 >> 0x38\n 10276: u8 [a0 + 0x17] = a2\n 10279: a2 = a3 >> 0x30\n 10282: u8 [a0 + 0x16] = a2\n 10285: a2 = a3 >> 0x28\n 10288: u8 [a0 + 0x15] = a2\n 10291: a2 = a3 >> 0x20\n 10294: u8 [a0 + 0x14] = a2\n 10297: a2 = a3 >> 0x18\n 10300: u8 [a0 + 0x13] = a2\n 10303: a2 = a3 >> 0x10\n 10306: u8 [a0 + 0x12] = a2\n 10309: a2 = u64 [sp + 0xb0]\n 10313: a2 = reverse a2\n 10315: u8 [a0 + 0x10] = a3\n 10318: a3 = a3 >> 0x8\n 10321: u8 [a0 + 0x11] = a3\n 10324: a3 = a2 >> 0x38\n 10327: u8 [a0 + 0xf] = a3\n 10330: a3 = a2 >> 0x30\n 10333: u8 [a0 + 0xe] = a3\n 10336: a3 = a2 >> 0x28\n 10339: u8 [a0 + 0xd] = a3\n 10342: a3 = a2 >> 0x20\n 10345: u8 [a0 + 0xc] = a3\n 10348: a3 = a2 >> 0x18\n 10351: u8 [a0 + 0xb] = a3\n 10354: a3 = a2 >> 0x10\n 10357: u8 [a0 + 0xa] = a3\n 10360: a3 = u64 [sp + 0xb8]\n 10364: a3 = reverse a3\n 10366: u8 [a0 + 0x8] = a2\n 10369: a2 = a2 >> 0x8\n 10372: u8 [a0 + 0x9] = a2\n 10375: a2 = a3 >> 0x38\n 10378: u8 [a0 + 0x7] = a2\n 10381: a2 = a3 >> 0x30\n 10384: u8 [a0 + 0x6] = a2\n 10387: a2 = a3 >> 0x28\n 10390: u8 [a0 + 0x5] = a2\n 10393: a2 = a3 >> 0x20\n 10396: u8 [a0 + 0x4] = a2\n 10399: a2 = a3 >> 0x18\n 10402: u8 [a0 + 0x3] = a2\n 10405: a2 = a3 >> 0x10\n 10408: u8 [a0 + 0x2] = a2\n 10411: u8 [a0] = a3\n 10413: a3 = a3 >> 0x8\n 10416: u8 [a0 + 0x1] = a3\n 10419: a2 = t0\n 10421: a5 = t1\n 10423: t1 = u64 [sp + 0xd8]\n 10427: t0 = u64 [sp + 0xd0]\n 10431: jump @177 if a1 != 0\n      : @161 (gas: 15)\n 10435: a0 = u64 [sp + 0x70]\n 10438: a0 = t0 <u a0\n 10441: a1 = ra ^ t1\n 10444: a4 = t1 <u ra\n 10447: a4 = a0 if a1 == 0\n 10450: a0 = a5 <u s1\n 10453: a1 = t2 ^ a2\n 10456: u64 [sp + 0x60] = t2\n 10459: a3 = a2 <u t2\n 10462: a3 = a0 if a1 == 0\n 10465: u64 [sp + 0x68] = s1\n 10468: a0 = s1 ^ a5\n 10471: a0 = a0 | a1\n 10474: a3 = a4 if a0 == 0\n 10477: jump @169 if a3 == 0\n      : @162 (gas: 13)\n 10481: i32 a0 = sp + 0x160\n 10485: u64 [sp + 0x58] = a0\n 10488: a0 = 0x100000000\n 10498: u64 [sp + 0x50] = a0\n 10501: a0 = 0xffffffe0\n 10511: u64 [sp + 0x48] = a0\n 10514: s1 = u64 [sp + 0x20]\n 10517: a4 = u64 [sp + 0x28]\n 10520: a1 = u64 [sp + 0x30]\n 10523: a0 = u64 [sp + 0x38]\n 10526: u64 [sp + 0xb8] = a0\n 10530: u64 [sp + 0x40] = ra\n 10533: fallthrough\n      : @163 (gas: 13)\n 10534: u64 [sp + 0xa8] = a4\n 10538: u64 [sp + 0xb0] = a1\n 10542: a0 = t0 | a5\n 10545: u64 [sp + 0xc8] = a2\n 10549: u64 [sp + 0xd8] = t1\n 10553: a1 = t1 | a2\n 10556: a0 = a0 | a1\n 10559: a0 = a0 >> 0x20\n 10562: u64 [sp + 0xc0] = a5\n 10566: a1 = a1 | a5\n 10569: a1 = a1 << 0x20\n 10572: a0 = a0 | a1\n 10575: jump @170 if a0 != 0\n      : @164 (gas: 5)\n 10579: u64 [sp + 0xd0] = t0\n 10583: i32 a1 = t0 + 0\n 10585: a0 = u64 [sp + 0x58]\n 10588: ecalli 3 // 'call_data_load'\n 10590: fallthrough\n      : @165 (gas: 10)\n 10591: a3 = u64 [sp + 0x170]\n 10595: a2 = u64 [sp + 0x178]\n 10599: a0 = u64 [sp + 0x50]\n 10602: a0 = a0 ^ a3\n 10605: a0 = a0 | a2\n 10608: a1 = a3 >> 0x20\n 10611: a1 = a1 <u 0x1\n 10614: a1 = 0 if a2 != 0\n 10616: a1 = 0 if a0 == 0\n 10618: jump @171 if a1 == 0\n      : @166 (gas: 11)\n 10622: u64 [sp + 0x98] = a3\n 10626: u64 [sp + 0xa0] = a2\n 10630: a2 = u64 [sp + 0xb8]\n 10634: a4 = u64 [sp + 0xb0]\n 10638: a0 = a4 | a2\n 10641: a1 = u64 [sp + 0x48]\n 10644: a1 = s1 <u a1\n 10647: a5 = u64 [sp + 0xa8]\n 10651: a1 = 0 if a5 != 0\n 10653: a1 = 0 if a0 != 0\n 10655: jump @170 if a1 == 0\n      : @167 (gas: 20)\n 10659: a1 = s1 + 0x20\n 10662: a0 = a1 <u s1\n 10665: a3 = a1\n 10667: u64 [sp + 0x88] = a1\n 10671: a1 = a5 + a0\n 10674: u64 [sp + 0x90] = a1\n 10678: a1 = a1 <u a5\n 10681: a1 = a0 if a0 == 0\n 10684: a0 = u64 [sp + 0x168]\n 10688: u64 [sp + 0x80] = a0\n 10692: a0 = u64 [sp + 0x160]\n 10696: u64 [sp + 0x78] = a0\n 10699: a1 = a1 + a4\n 10702: u64 [sp + 0xa8] = a1\n 10706: a0 = a1 <u a4\n 10709: a2 = a2 + a0\n 10712: u64 [sp + 0xb8] = a2\n 10716: i32 a0 = a3 + 0\n 10718: a1 = 0x20\n 10721: ra = 148, jump @0\n      : @168 [@dyn 74] (gas: 100)\n 10727: a1 = u64 [sp + 0xd0]\n 10731: t0 = a1 + 0x20\n 10734: a4 = t0 <u a1\n 10737: a1 = u64 [sp + 0xd8]\n 10741: t1 = a1 + a4\n 10744: a2 = u64 [sp + 0x70]\n 10747: a5 = t0 <u a2\n 10750: a2 = u64 [sp + 0x40]\n 10753: s1 = t1 ^ a2\n 10756: a3 = t1 <u a2\n 10759: a3 = a5 if s1 == 0\n 10762: a5 = t1 <u a1\n 10765: a5 = a4 if a4 == 0\n 10768: a1 = u64 [sp + 0xc0]\n 10772: ra = a1 + a5\n 10775: a5 = ra <u a1\n 10778: a2 = u64 [sp + 0xc8]\n 10782: a2 = a2 + a5\n 10785: a5 = u64 [sp + 0x68]\n 10788: t2 = ra <u a5\n 10791: a1 = u64 [sp + 0x60]\n 10794: s1 = a2 ^ a1\n 10797: a1 = a2 <u a1\n 10800: a1 = t2 if s1 == 0\n 10803: a5 = ra ^ a5\n 10806: a5 = a5 | s1\n 10809: a3 = a1 if a5 != 0\n 10812: a1 = u64 [sp + 0x78]\n 10815: a1 = reverse a1\n 10817: a5 = a1 >> 0x38\n 10820: u8 [a0 + 0x1f] = a5\n 10823: a5 = a1 >> 0x30\n 10826: u8 [a0 + 0x1e] = a5\n 10829: a5 = a1 >> 0x28\n 10832: u8 [a0 + 0x1d] = a5\n 10835: a5 = a1 >> 0x20\n 10838: u8 [a0 + 0x1c] = a5\n 10841: a5 = a1 >> 0x18\n 10844: u8 [a0 + 0x1b] = a5\n 10847: a5 = a1 >> 0x10\n 10850: u8 [a0 + 0x1a] = a5\n 10853: a5 = a1 >> 0x8\n 10856: u8 [a0 + 0x19] = a5\n 10859: u8 [a0 + 0x18] = a1\n 10862: a1 = u64 [sp + 0x80]\n 10866: a1 = reverse a1\n 10868: a5 = a1 >> 0x38\n 10871: u8 [a0 + 0x17] = a5\n 10874: a5 = a1 >> 0x30\n 10877: u8 [a0 + 0x16] = a5\n 10880: a5 = a1 >> 0x28\n 10883: u8 [a0 + 0x15] = a5\n 10886: a5 = a1 >> 0x20\n 10889: u8 [a0 + 0x14] = a5\n 10892: a5 = a1 >> 0x18\n 10895: u8 [a0 + 0x13] = a5\n 10898: a5 = a1 >> 0x10\n 10901: u8 [a0 + 0x12] = a5\n 10904: a5 = u64 [sp + 0x98]\n 10908: a5 = reverse a5\n 10910: u8 [a0 + 0x10] = a1\n 10913: a1 = a1 >> 0x8\n 10916: u8 [a0 + 0x11] = a1\n 10919: a1 = a5 >> 0x38\n 10922: u8 [a0 + 0xf] = a1\n 10925: a1 = a5 >> 0x30\n 10928: u8 [a0 + 0xe] = a1\n 10931: a1 = a5 >> 0x28\n 10934: u8 [a0 + 0xd] = a1\n 10937: a1 = a5 >> 0x20\n 10940: u8 [a0 + 0xc] = a1\n 10943: a1 = a5 >> 0x18\n 10946: u8 [a0 + 0xb] = a1\n 10949: a1 = a5 >> 0x10\n 10952: u8 [a0 + 0xa] = a1\n 10955: a1 = u64 [sp + 0xa0]\n 10959: a1 = reverse a1\n 10961: u8 [a0 + 0x8] = a5\n 10964: a5 = a5 >> 0x8\n 10967: u8 [a0 + 0x9] = a5\n 10970: a5 = a1 >> 0x38\n 10973: u8 [a0 + 0x7] = a5\n 10976: a5 = a1 >> 0x30\n 10979: u8 [a0 + 0x6] = a5\n 10982: a5 = a1 >> 0x28\n 10985: u8 [a0 + 0x5] = a5\n 10988: a5 = a1 >> 0x20\n 10991: u8 [a0 + 0x4] = a5\n 10994: a5 = a1 >> 0x18\n 10997: u8 [a0 + 0x3] = a5\n 11000: a5 = a1 >> 0x10\n 11003: u8 [a0 + 0x2] = a5\n 11006: u8 [a0] = a1\n 11008: a1 = a1 >> 0x8\n 11011: u8 [a0 + 0x1] = a1\n 11014: s1 = u64 [sp + 0x88]\n 11018: a4 = u64 [sp + 0x90]\n 11022: a1 = u64 [sp + 0xa8]\n 11026: a5 = ra\n 11028: jump @163 if a3 != 0\n      : @169 (gas: 15)\n 11032: a0 = u64 [sp + 0x18]\n 11035: a1 = u64 [sp + 0x20]\n 11038: u64 [a0] = a1\n 11040: a1 = u64 [sp + 0x28]\n 11043: u64 [a0 + 0x8] = a1\n 11046: a1 = u64 [sp + 0x30]\n 11049: u64 [a0 + 0x10] = a1\n 11052: a1 = u64 [sp + 0x38]\n 11055: u64 [a0 + 0x18] = a1\n 11058: sp = s0 + 0xfffffffffffffe60\n 11062: ra = u64 [sp + 0x198]\n 11066: s0 = u64 [sp + 0x190]\n 11070: s1 = u64 [sp + 0x188]\n 11074: sp = sp + 0x1a0\n 11078: ret\n      : @170 (gas: 1)\n 11080: trap\n      : @171 (gas: 2)\n 11081: a0 = 0\n 11083: ra = 150, jump @0\n      : @172 [@dyn 75] (gas: 5)\n 11089: i32 a1 = a0 + 0\n 11091: a0 = 0x1\n 11094: a2 = 0\n 11096: ecalli 13 // 'seal_return'\n 11098: fallthrough\n      : @173 (gas: 8)\n 11099: u64 [sp + 272] = 0\n 11103: u64 [sp + 264] = 0\n 11107: u64 [sp + 256] = 0\n 11111: a0 = 0x4e487b7100000000\n 11121: a1 = sp + 0x100\n 11125: u64 [sp + 0x118] = a0\n 11129: a0 = 0\n 11131: ra = 152, jump @8\n      : @174 [@dyn 76] (gas: 7)\n 11137: u64 [sp + 248] = 0\n 11141: u64 [sp + 240] = 0\n 11145: u64 [sp + 224] = 0x41\n 11150: a0 = 0x4\n 11153: a1 = sp + 0xe0\n 11157: u64 [sp + 232] = 0\n 11161: ra = 154, jump @8\n      : @175 [@dyn 77] (gas: 3)\n 11167: a1 = 0x24\n 11170: a0 = 0\n 11172: ra = 156, jump @0\n      : @176 [@dyn 78] (gas: 5)\n 11178: i32 a1 = a0 + 0\n 11180: a0 = 0x1\n 11183: a2 = 0x24\n 11186: ecalli 13 // 'seal_return'\n 11188: fallthrough\n      : @177 (gas: 4)\n 11189: a0 = 0\n 11191: a1 = 0\n 11193: ra = 0x96\n 11197: jump @0\n      : @178 (gas: 42)\n 11200: sp = sp + 0xfffffffffffffea0\n 11204: u64 [sp + 0x158] = ra\n 11208: u64 [sp + 0x150] = s0\n 11212: u64 [sp + 0x148] = s1\n 11216: s0 = sp + 0x160\n 11220: sp = sp & 0xffffffffffffffe0\n 11223: s1 = u64 [a2 + 0x8]\n 11226: t0 = u64 [a1 + 0x8]\n 11229: a5 = u64 [a2]\n 11231: t1 = u64 [a1]\n 11233: ra = u64 [a2 + 0x10]\n 11236: a4 = s1 ^ t0\n 11239: a3 = s1 <u t0\n 11242: t2 = a5 <u t1\n 11245: a3 = t2 if a4 == 0\n 11248: u64 [sp + 0x70] = s1\n 11251: a4 = s1 - t0\n 11254: a4 = a4 - t2\n 11257: u64 [sp + 0x68] = a5\n 11260: a5 = a5 - t1\n 11263: a5 = a5 <u 0x40\n 11266: a5 = a5 ^ 0x1\n 11269: t2 = u64 [a1 + 0x10]\n 11272: s1 = a4 >u 0\n 11274: a5 = s1 if a4 != 0\n 11277: a4 = u64 [a2 + 0x18]\n 11280: s1 = u64 [a1 + 0x18]\n 11283: a1 = ra - t2\n 11286: a2 = a1 - a3\n 11289: a1 = a1 <u a3\n 11292: u64 [sp + 0x60] = ra\n 11295: a3 = ra <u t2\n 11298: u64 [sp + 0x50] = a4\n 11301: a4 = a4 - s1\n 11304: a4 = a4 - a3\n 11307: a4 = a4 - a1\n 11310: a1 = a4 >s 0\n 11312: a3 = a2 >u 0\n 11314: a3 = a1 if a4 != 0\n 11317: a2 = a2 | a4\n 11320: a5 = a3 if a2 != 0\n 11323: jump @188 if a5 == 0\n      : @179 (gas: 10)\n 11327: a2 = t1 | t2\n 11330: u64 [sp + 0x78] = t0\n 11333: a1 = t0 | s1\n 11336: a2 = a2 | a1\n 11339: a2 = a2 >> 0x20\n 11342: u64 [sp + 0x58] = t2\n 11345: a1 = a1 | t2\n 11348: a1 = a1 << 0x20\n 11351: a1 = a1 | a2\n 11354: jump @187 if a1 != 0\n      : @180 (gas: 8)\n 11358: u64 [sp + 0x48] = s1\n 11361: u64 [sp + 0x20] = a0\n 11364: i32 a1 = t1 + 0\n 11366: i32 a0 = sp + 0x100\n 11370: u64 [sp + 0x18] = a1\n 11373: s1 = t1\n 11375: ecalli 3 // 'call_data_load'\n 11377: fallthrough\n      : @181 (gas: 7)\n 11378: a0 = u64 [sp + 0x118]\n 11382: a1 = u64 [sp + 0x110]\n 11386: a2 = u64 [sp + 0x108]\n 11390: a3 = a1 | a0\n 11393: a4 = a2 <u 0x1\n 11396: a4 = 0 if a3 != 0\n 11398: jump @188 if a4 == 0\n      : @182 (gas: 43)\n 11402: a3 = u64 [sp + 0x100]\n 11406: t0 = a3 + s1\n 11409: a3 = t0 <u a3\n 11412: a4 = u64 [sp + 0x78]\n 11415: a4 = a4 + a2\n 11418: t1 = a4 + a3\n 11421: a4 = t1 ^ a2\n 11424: u64 [sp + 0x40] = s1\n 11427: s1 = t1 <u a2\n 11430: s1 = a3 if a4 == 0\n 11433: a2 = u64 [sp + 0x58]\n 11436: a2 = a2 + a1\n 11439: s1 = s1 + a2\n 11442: a3 = s1 <u a2\n 11445: a1 = a2 <u a1\n 11448: a2 = u64 [sp + 0x48]\n 11451: a0 = a0 + a2\n 11454: a0 = a0 + a1\n 11457: ra = a0 + a3\n 11460: a0 = t0 + 0x1f\n 11463: a1 = a0 <u t0\n 11466: a2 = t1 + a1\n 11469: a3 = a2 <u t1\n 11472: a3 = a1 if a1 == 0\n 11475: t2 = s1 + a3\n 11478: a1 = t2 <u s1\n 11481: a1 = a1 + ra\n 11484: a5 = u64 [sp + 0x70]\n 11487: a4 = a2 ^ a5\n 11490: a2 = a2 <u a5\n 11493: a5 = u64 [sp + 0x68]\n 11496: a0 = a0 <u a5\n 11499: a0 = a2 if a4 != 0\n 11502: a5 = u64 [sp + 0x60]\n 11505: a2 = t2 <u a5\n 11508: a4 = u64 [sp + 0x50]\n 11511: a3 = a1 ^ a4\n 11514: a1 = a1 <s a4\n 11517: a1 = a2 if a3 == 0\n 11520: a2 = t2 ^ a5\n 11523: a2 = a2 | a3\n 11526: a0 = a1 if a2 != 0\n 11529: jump @189 if a0 == 0\n      : @183 (gas: 11)\n 11533: a0 = t0 | s1\n 11536: u64 [sp + 0x38] = t1\n 11539: u64 [sp + 0x28] = ra\n 11542: a1 = t1 | ra\n 11545: a0 = a0 | a1\n 11548: a0 = a0 >> 0x20\n 11551: u64 [sp + 0x30] = s1\n 11554: a1 = a1 | s1\n 11557: a1 = a1 << 0x20\n 11560: a0 = a0 | a1\n 11563: jump @187 if a0 != 0\n      : @184 (gas: 40)\n 11567: i32 a1 = t0 + 0\n 11569: i32 a0 = sp + 0x120\n 11573: s1 = t0\n 11575: ecalli 3 // 'call_data_load'\n 11577: t0 = u64 [sp + 0x120]\n 11581: t1 = u64 [sp + 0x128]\n 11585: a2 = u64 [sp + 0x130]\n 11589: a3 = u64 [sp + 0x138]\n 11593: a4 = s1 + 0x20\n 11596: a5 = a4 <u s1\n 11599: a1 = u64 [sp + 0x38]\n 11602: a0 = a1 + a5\n 11605: a1 = a0 <u a1\n 11608: a1 = a5 if a5 == 0\n 11611: a5 = u64 [sp + 0x30]\n 11614: a1 = a1 + a5\n 11617: a5 = a1 <u a5\n 11620: s1 = u64 [sp + 0x28]\n 11623: a5 = a5 + s1\n 11626: s1 = u64 [sp + 0x50]\n 11629: u64 [sp + 0x98] = s1\n 11633: s1 = u64 [sp + 0x60]\n 11636: u64 [sp + 0x90] = s1\n 11640: s1 = u64 [sp + 0x70]\n 11643: u64 [sp + 0x88] = s1\n 11647: s1 = u64 [sp + 0x68]\n 11650: u64 [sp + 0x80] = s1\n 11654: u64 [sp + 0xb8] = a3\n 11658: u64 [sp + 0xb0] = a2\n 11662: u64 [sp + 0xa8] = t1\n 11666: u64 [sp + 0xa0] = t0\n 11670: u64 [sp + 0xc8] = a0\n 11674: u64 [sp + 0xc0] = a4\n 11678: u64 [sp + 0xd0] = a1\n 11682: a0 = sp + 0xe0\n 11686: a1 = sp + 0xc0\n 11690: a2 = sp + 0xa0\n 11694: a3 = sp + 0x80\n 11698: u64 [sp + 0xd8] = a5\n 11702: ra = 158, jump @156\n      : @185 [@dyn 79] (gas: 10)\n 11708: a0 = u64 [sp + 0x58]\n 11711: a1 = u64 [sp + 0x48]\n 11714: a0 = a0 | a1\n 11717: a1 = 0xffffffe0\n 11727: a2 = u64 [sp + 0x40]\n 11730: a1 = a2 <u a1\n 11733: a2 = u64 [sp + 0x78]\n 11736: a1 = 0 if a2 != 0\n 11738: a1 = 0 if a0 != 0\n 11740: jump @187 if a1 == 0\n      : @186 (gas: 33)\n 11743: s1 = u64 [sp + 0xf8]\n 11747: a0 = u64 [sp + 0xf0]\n 11751: u64 [sp + 0x68] = a0\n 11754: a0 = u64 [sp + 0xe8]\n 11758: u64 [sp + 0x70] = a0\n 11761: a0 = u64 [sp + 0xe0]\n 11765: u64 [sp + 0x78] = a0\n 11768: a0 = u64 [sp + 0x18]\n 11771: i32 a1 = a0 + 0x20\n 11774: i32 a0 = sp + 0x120\n 11778: ecalli 3 // 'call_data_load'\n 11780: a0 = u64 [sp + 0x138]\n 11784: a1 = u64 [sp + 0x130]\n 11788: a2 = u64 [sp + 0x128]\n 11792: a3 = u64 [sp + 0x120]\n 11796: a4 = u64 [sp + 0x20]\n 11799: u64 [a4 + 0x38] = a0\n 11802: u64 [a4 + 0x30] = a1\n 11805: u64 [a4 + 0x28] = a2\n 11808: u64 [a4 + 0x20] = a3\n 11811: u64 [a4 + 0x18] = s1\n 11814: a0 = u64 [sp + 0x68]\n 11817: u64 [a4 + 0x10] = a0\n 11820: a0 = u64 [sp + 0x70]\n 11823: u64 [a4 + 0x8] = a0\n 11826: a0 = u64 [sp + 0x78]\n 11829: u64 [a4] = a0\n 11831: sp = s0 + 0xfffffffffffffea0\n 11835: ra = u64 [sp + 0x158]\n 11839: s0 = u64 [sp + 0x150]\n 11843: s1 = u64 [sp + 0x148]\n 11847: sp = sp + 0x160\n 11851: ret\n      : @187 (gas: 1)\n 11853: trap\n      : @188 (gas: 4)\n 11854: a0 = 0\n 11856: a1 = 0\n 11858: ra = 0xa0\n 11862: jump @0\n      : @189 (gas: 2)\n 11865: a1 = 0\n 11867: ra = 160, jump @0\n      : @190 [@dyn 80] (gas: 6)\n 11873: i32 a1 = a0 + 0\n 11875: a0 = 0x1\n 11878: a2 = 0\n 11880: ra = 0xa2\n 11884: ecalli 13 // 'seal_return'\n 11886: fallthrough\n      : @191 [@dyn 81] (gas: 13)\n 11887: sp = sp + 0xfffffffffffffec0\n 11891: u64 [sp + 0x138] = ra\n 11895: u64 [sp + 0x130] = s0\n 11899: u64 [sp + 0x128] = s1\n 11903: s0 = sp + 0x140\n 11907: sp = sp & 0xffffffffffffffe0\n 11910: u64 [sp + 280] = 0\n 11914: u64 [sp + 272] = 0\n 11918: u64 [sp + 264] = 0\n 11922: u64 [sp + 256] = 0\n 11926: i32 a0 = sp + 0x100\n 11930: ecalli 16 // 'value_transferred'\n 11932: fallthrough\n      : @192 (gas: 8)\n 11933: a0 = u64 [sp + 0x110]\n 11937: a1 = u64 [sp + 0x118]\n 11941: a2 = u64 [sp + 0x108]\n 11945: a3 = u64 [sp + 0x100]\n 11949: a1 = a1 | a2\n 11952: a0 = a0 | a3\n 11955: a0 = a0 | a1\n 11958: jump @198 if a0 != 0\n      : @193 (gas: 13)\n 11962: a0 = u32 [0x20044]\n 11967: u64 [sp + 152] = 0\n 11971: u64 [sp + 144] = 0\n 11975: u64 [sp + 136] = 0\n 11979: u64 [sp + 0x80] = a0\n 11983: u64 [sp + 184] = 0\n 11987: u64 [sp + 176] = 0\n 11991: u64 [sp + 160] = 0x4\n 11996: a0 = sp + 0xc0\n 12000: a1 = sp + 0xa0\n 12004: a2 = sp + 0x80\n 12008: u64 [sp + 168] = 0\n 12012: ra = 164, jump @178\n      : @194 [@dyn 82] (gas: 47)\n 12018: t0 = u64 [sp + 0xc0]\n 12022: a0 = u64 [sp + 0xc8]\n 12026: a1 = u64 [sp + 0xd0]\n 12030: a2 = u64 [sp + 0xd8]\n 12034: a4 = u64 [sp + 0xe0]\n 12038: a5 = u64 [sp + 0xe8]\n 12042: s1 = u64 [sp + 0xf0]\n 12046: a3 = u64 [sp + 0xf8]\n 12050: u64 [sp + 0x38] = a3\n 12053: u64 [sp + 0x30] = s1\n 12056: u64 [sp + 0x28] = a5\n 12059: u64 [sp + 0x20] = a4\n 12062: u64 [sp + 0x58] = a2\n 12065: u64 [sp + 0x50] = a1\n 12068: u64 [sp + 0x48] = a0\n 12071: a0 = sp + 0x60\n 12074: a1 = sp + 0x40\n 12077: a2 = sp + 0x20\n 12080: u64 [sp + 0x40] = t0\n 12083: ra = 0xa6\n 12087: sp = sp + 0xfffffffffffffc20\n 12091: u64 [sp + 0x3d8] = ra\n 12095: u64 [sp + 0x3d0] = s0\n 12099: u64 [sp + 0x3c8] = s1\n 12103: s0 = sp + 0x3e0\n 12107: sp = sp & 0xffffffffffffffe0\n 12110: a3 = u64 [a2 + 0x18]\n 12113: u64 [sp + 0x128] = a3\n 12117: a3 = u64 [a2 + 0x10]\n 12120: u64 [sp + 0x130] = a3\n 12124: a3 = u64 [a2 + 0x8]\n 12127: u64 [sp + 0x138] = a3\n 12131: a2 = u64 [a2]\n 12133: u64 [sp + 0x140] = a2\n 12137: a2 = u64 [a1 + 0x18]\n 12140: u64 [sp + 0x148] = a2\n 12144: a2 = u64 [a1 + 0x10]\n 12147: u64 [sp + 0x150] = a2\n 12151: a2 = u64 [a1 + 0x8]\n 12154: u64 [sp + 0x158] = a2\n 12158: a1 = u64 [a1]\n 12160: u64 [sp + 0x160] = a1\n 12164: u64 [sp + 0xf0] = a0\n 12168: a0 = 0x40\n 12171: a1 = 0x20\n 12174: ra = 0x17a\n 12178: jump @0\n      : @195 [@dyn 83] (gas: 11)\n 12181: a0 = u64 [sp + 0x78]\n 12184: u64 [sp] = a0\n 12186: a0 = u64 [sp + 0x70]\n 12189: u64 [sp + 0x8] = a0\n 12192: a0 = u64 [sp + 0x68]\n 12195: u64 [sp + 0x10] = a0\n 12198: a0 = u64 [sp + 0x60]\n 12201: u64 [sp + 0x18] = a0\n 12204: a0 = 0x40\n 12207: a1 = 0x20\n 12210: ra = 168, jump @0\n      : @196 [@dyn 84] (gas: 100)\n 12216: a1 = u8 [a0 + 0x11]\n 12219: a2 = u8 [a0 + 0x10]\n 12222: a3 = u8 [a0 + 0x12]\n 12225: a4 = u8 [a0 + 0x13]\n 12228: a1 = a1 << 0x8\n 12231: a1 = a1 | a2\n 12234: a3 = a3 << 0x10\n 12237: a4 = a4 << 0x18\n 12240: a3 = a3 | a4\n 12243: a1 = a1 | a3\n 12246: a2 = u8 [a0 + 0x15]\n 12249: a3 = u8 [a0 + 0x14]\n 12252: a4 = u8 [a0 + 0x16]\n 12255: a5 = u8 [a0 + 0x17]\n 12258: a2 = a2 << 0x8\n 12261: a2 = a2 | a3\n 12264: a4 = a4 << 0x10\n 12267: a5 = a5 << 0x18\n 12270: a4 = a4 | a5\n 12273: a2 = a2 | a4\n 12276: a2 = a2 << 0x20\n 12279: t0 = a2 | a1\n 12282: a2 = u8 [a0 + 0x1]\n 12285: a3 = u8 [a0]\n 12287: a4 = u8 [a0 + 0x2]\n 12290: a5 = u8 [a0 + 0x3]\n 12293: a2 = a2 << 0x8\n 12296: a2 = a2 | a3\n 12299: a4 = a4 << 0x10\n 12302: a5 = a5 << 0x18\n 12305: a4 = a4 | a5\n 12308: a2 = a2 | a4\n 12311: a3 = u8 [a0 + 0x5]\n 12314: a4 = u8 [a0 + 0x4]\n 12317: a5 = u8 [a0 + 0x6]\n 12320: s1 = u8 [a0 + 0x7]\n 12323: a3 = a3 << 0x8\n 12326: a3 = a3 | a4\n 12329: a5 = a5 << 0x10\n 12332: s1 = s1 << 0x18\n 12335: a5 = a5 | s1\n 12338: a3 = a3 | a5\n 12341: a3 = a3 << 0x20\n 12344: a2 = a2 | a3\n 12347: a3 = u8 [a0 + 0x19]\n 12350: a4 = u8 [a0 + 0x18]\n 12353: a5 = u8 [a0 + 0x1a]\n 12356: s1 = u8 [a0 + 0x1b]\n 12359: a3 = a3 << 0x8\n 12362: a3 = a3 | a4\n 12365: a5 = a5 << 0x10\n 12368: s1 = s1 << 0x18\n 12371: a5 = a5 | s1\n 12374: a3 = a3 | a5\n 12377: a4 = u8 [a0 + 0x1d]\n 12380: a5 = u8 [a0 + 0x1c]\n 12383: s1 = u8 [a0 + 0x1e]\n 12386: a1 = u8 [a0 + 0x1f]\n 12389: a4 = a4 << 0x8\n 12392: a4 = a4 | a5\n 12395: s1 = s1 << 0x10\n 12398: a1 = a1 << 0x18\n 12401: a1 = a1 | s1\n 12404: a1 = a1 | a4\n 12407: a1 = a1 << 0x20\n 12410: a3 = a3 | a1\n 12413: a1 = u8 [a0 + 0x9]\n 12416: a4 = u8 [a0 + 0x8]\n 12419: a5 = u8 [a0 + 0xa]\n 12422: s1 = u8 [a0 + 0xb]\n 12425: a1 = a1 << 0x8\n 12428: a1 = a1 | a4\n 12431: a5 = a5 << 0x10\n 12434: s1 = s1 << 0x18\n 12437: a5 = a5 | s1\n 12440: a1 = a1 | a5\n 12443: a4 = u8 [a0 + 0xd]\n 12446: a5 = u8 [a0 + 0xc]\n 12449: s1 = u8 [a0 + 0xe]\n 12452: a0 = u8 [a0 + 0xf]\n 12455: a4 = a4 << 0x8\n 12458: a4 = a4 | a5\n 12461: s1 = s1 << 0x10\n 12464: a0 = a0 << 0x18\n 12467: a0 = a0 | s1\n 12470: a0 = a0 | a4\n 12473: a0 = a0 << 0x20\n 12476: a0 = a0 | a1\n 12479: a1 = reverse a0\n 12481: a0 = reverse a3\n 12483: a2 = reverse a2\n 12485: a3 = reverse t0\n 12487: a2 = a2 | a3\n 12490: a3 = a0 | a1\n 12493: a3 = a3 | a2\n 12496: a3 = a3 >> 0x20\n 12499: a1 = a1 | a2\n 12502: a1 = a1 << 0x20\n 12505: a1 = a1 | a3\n 12508: jump @200 if a1 == 0\n      : @197 (gas: 1)\n 12511: trap\n      : @198 (gas: 3)\n 12512: a0 = 0\n 12514: a1 = 0\n 12516: ra = 170, jump @0\n      : @199 [@dyn 85] (gas: 5)\n 12522: i32 a1 = a0 + 0\n 12524: a0 = 0x1\n 12527: a2 = 0\n 12529: ecalli 13 // 'seal_return'\n 12531: fallthrough\n      : @200 (gas: 4)\n 12532: i32 s1 = a0 + 0\n 12534: a1 = 0x20\n 12537: a0 = s1\n 12539: ra = 172, jump @0\n      : @201 [@dyn 86] (gas: 71)\n 12545: a1 = u64 [sp]\n 12547: a1 = reverse a1\n 12549: a2 = u64 [sp + 0x8]\n 12552: a2 = reverse a2\n 12554: a3 = u64 [sp + 0x10]\n 12557: a3 = reverse a3\n 12559: a4 = u64 [sp + 0x18]\n 12562: a4 = reverse a4\n 12564: a5 = a4 >> 0x38\n 12567: u8 [a0 + 0x1f] = a5\n 12570: a5 = a4 >> 0x30\n 12573: u8 [a0 + 0x1e] = a5\n 12576: a5 = a4 >> 0x28\n 12579: u8 [a0 + 0x1d] = a5\n 12582: a5 = a4 >> 0x20\n 12585: u8 [a0 + 0x1c] = a5\n 12588: a5 = a4 >> 0x18\n 12591: u8 [a0 + 0x1b] = a5\n 12594: a5 = a4 >> 0x10\n 12597: u8 [a0 + 0x1a] = a5\n 12600: a5 = a4 >> 0x8\n 12603: u8 [a0 + 0x19] = a5\n 12606: u8 [a0 + 0x18] = a4\n 12609: u8 [a0 + 0x10] = a3\n 12612: a4 = a3 >> 0x38\n 12615: u8 [a0 + 0x17] = a4\n 12618: a4 = a3 >> 0x30\n 12621: u8 [a0 + 0x16] = a4\n 12624: a4 = a3 >> 0x28\n 12627: u8 [a0 + 0x15] = a4\n 12630: a4 = a3 >> 0x20\n 12633: u8 [a0 + 0x14] = a4\n 12636: a4 = a3 >> 0x18\n 12639: u8 [a0 + 0x13] = a4\n 12642: a4 = a3 >> 0x10\n 12645: u8 [a0 + 0x12] = a4\n 12648: a3 = a3 >> 0x8\n 12651: u8 [a0 + 0x11] = a3\n 12654: u8 [a0 + 0x8] = a2\n 12657: a3 = a2 >> 0x38\n 12660: u8 [a0 + 0xf] = a3\n 12663: a3 = a2 >> 0x30\n 12666: u8 [a0 + 0xe] = a3\n 12669: a3 = a2 >> 0x28\n 12672: u8 [a0 + 0xd] = a3\n 12675: a3 = a2 >> 0x20\n 12678: u8 [a0 + 0xc] = a3\n 12681: a3 = a2 >> 0x18\n 12684: u8 [a0 + 0xb] = a3\n 12687: a3 = a2 >> 0x10\n 12690: u8 [a0 + 0xa] = a3\n 12693: a2 = a2 >> 0x8\n 12696: u8 [a0 + 0x9] = a2\n 12699: u8 [a0] = a1\n 12701: a2 = a1 >> 0x38\n 12704: u8 [a0 + 0x7] = a2\n 12707: a2 = a1 >> 0x30\n 12710: u8 [a0 + 0x6] = a2\n 12713: a2 = a1 >> 0x28\n 12716: u8 [a0 + 0x5] = a2\n 12719: a2 = a1 >> 0x20\n 12722: u8 [a0 + 0x4] = a2\n 12725: a2 = a1 >> 0x18\n 12728: u8 [a0 + 0x3] = a2\n 12731: a2 = a1 >> 0x10\n 12734: u8 [a0 + 0x2] = a2\n 12737: a1 = a1 >> 0x8\n 12740: u8 [a0 + 0x1] = a1\n 12743: a1 = 0x20\n 12746: a0 = s1\n 12748: ra = 174, jump @0\n      : @202 [@dyn 87] (gas: 6)\n 12754: i32 a1 = a0 + 0\n 12756: a2 = 0x20\n 12759: a0 = 0\n 12761: ra = 0xb0\n 12765: ecalli 13 // 'seal_return'\n 12767: fallthrough\n      : @203 [@dyn 88] (gas: 9)\n 12768: a2 = u64 [a1 + 0x18]\n 12771: a3 = u64 [a1 + 0x10]\n 12774: a4 = u64 [a1 + 0x8]\n 12777: a1 = u64 [a1]\n 12779: u64 [a0 + 0x18] = a2\n 12782: u64 [a0 + 0x10] = a3\n 12785: u64 [a0 + 0x8] = a4\n 12788: u64 [a0] = a1\n 12790: ret\n      : @204 (gas: 17)\n 12792: sp = sp + 0xffffffffffffffa0\n 12795: u64 [sp + 0x58] = ra\n 12798: u64 [sp + 0x50] = s0\n 12801: u64 [sp + 0x48] = s1\n 12804: a3 = u64 [a1 + 0x18]\n 12807: a4 = u64 [a1 + 0x10]\n 12810: a5 = u64 [a1 + 0x8]\n 12813: s1 = u64 [a1]\n 12815: a1 = a5 | a3\n 12818: a2 = s1 | a4\n 12821: a2 = a2 | a1\n 12824: a2 = a2 >> 0x20\n 12827: a1 = a1 | a4\n 12830: a1 = a1 << 0x20\n 12833: a1 = a1 | a2\n 12836: u64 [sp + 0x28] = a0\n 12839: jump @211 if a1 != 0\n      : @205 (gas: 19)\n 12843: a0 = s1 + 0x20\n 12846: u64 [sp + 0x30] = a0\n 12849: a0 = a0 <u s1\n 12852: a1 = a5 + a0\n 12855: u64 [sp + 0x40] = a1\n 12858: u64 [sp + 0x8] = a5\n 12861: s0 = a1 <u a5\n 12864: s0 = a0 if a0 == 0\n 12867: s0 = s0 + a4\n 12870: u64 [sp + 0x10] = a4\n 12873: a0 = s0 <u a4\n 12876: u64 [sp + 0x18] = a3\n 12879: a0 = a0 + a3\n 12882: u64 [sp + 0x38] = a0\n 12885: u64 [sp] = s1\n 12887: i32 a0 = s1 + 0\n 12889: a1 = 0x20\n 12892: s1 = 0x20\n 12895: ra = 178, jump @0\n      : @206 [@dyn 89] (gas: 45)\n 12901: u8 [a0 + 0x1f] = s1\n 12904: a1 = u64 [sp + 0x30]\n 12907: s1 = a1\n 12909: a1 = a1 | s0\n 12912: a2 = u64 [sp + 0x40]\n 12915: a4 = u64 [sp + 0x38]\n 12918: a2 = a2 | a4\n 12921: a1 = a1 | a2\n 12924: a1 = a1 >> 0x20\n 12927: u64 [sp + 0x20] = s0\n 12930: a2 = a2 | s0\n 12933: a2 = a2 << 0x20\n 12936: a1 = a1 | a2\n 12939: u8 [a0 + 30] = 0\n 12942: u8 [a0 + 29] = 0\n 12945: u8 [a0 + 28] = 0\n 12948: u8 [a0 + 27] = 0\n 12951: u8 [a0 + 26] = 0\n 12954: u8 [a0 + 25] = 0\n 12957: u8 [a0 + 24] = 0\n 12960: u8 [a0 + 23] = 0\n 12963: u8 [a0 + 22] = 0\n 12966: u8 [a0 + 21] = 0\n 12969: u8 [a0 + 20] = 0\n 12972: u8 [a0 + 19] = 0\n 12975: u8 [a0 + 18] = 0\n 12978: u8 [a0 + 17] = 0\n 12981: u8 [a0 + 16] = 0\n 12984: u8 [a0 + 15] = 0\n 12987: u8 [a0 + 14] = 0\n 12990: u8 [a0 + 13] = 0\n 12993: u8 [a0 + 12] = 0\n 12996: u8 [a0 + 11] = 0\n 12999: u8 [a0 + 10] = 0\n 13002: u8 [a0 + 9] = 0\n 13005: u8 [a0 + 8] = 0\n 13008: u8 [a0 + 7] = 0\n 13011: u8 [a0 + 6] = 0\n 13014: u8 [a0 + 5] = 0\n 13017: u8 [a0 + 4] = 0\n 13020: u8 [a0 + 3] = 0\n 13023: u8 [a0 + 2] = 0\n 13026: u8 [a0 + 1] = 0\n 13029: u8 [a0 + 0] = 0\n 13031: jump @211 if a1 != 0\n      : @207 (gas: 4)\n 13035: i32 s0 = s1 + 0\n 13037: a1 = 0x20\n 13040: a0 = s0\n 13042: ra = 180, jump @0\n      : @208 [@dyn 90] (gas: 41)\n 13048: u8 [a0 + 31] = 0x18\n 13052: u8 [a0 + 30] = 0\n 13055: u8 [a0 + 29] = 0\n 13058: u8 [a0 + 28] = 0\n 13061: u8 [a0 + 27] = 0\n 13064: u8 [a0 + 26] = 0\n 13067: u8 [a0 + 25] = 0\n 13070: u8 [a0 + 24] = 0\n 13073: u8 [a0 + 23] = 0\n 13076: u8 [a0 + 22] = 0\n 13079: u8 [a0 + 21] = 0\n 13082: u8 [a0 + 20] = 0\n 13085: u8 [a0 + 19] = 0\n 13088: u8 [a0 + 18] = 0\n 13091: u8 [a0 + 17] = 0\n 13094: u8 [a0 + 16] = 0\n 13097: u8 [a0 + 15] = 0\n 13100: u8 [a0 + 14] = 0\n 13103: u8 [a0 + 13] = 0\n 13106: u8 [a0 + 12] = 0\n 13109: u8 [a0 + 11] = 0\n 13112: u8 [a0 + 10] = 0\n 13115: u8 [a0 + 9] = 0\n 13118: u8 [a0 + 8] = 0\n 13121: u8 [a0 + 7] = 0\n 13124: u8 [a0 + 6] = 0\n 13127: u8 [a0 + 5] = 0\n 13130: u8 [a0 + 4] = 0\n 13133: u8 [a0 + 3] = 0\n 13136: u8 [a0 + 2] = 0\n 13139: u8 [a0 + 1] = 0\n 13142: a1 = u64 [sp + 0x20]\n 13145: a2 = u64 [sp + 0x38]\n 13148: a1 = a1 | a2\n 13151: a2 = 0xffffffe0\n 13161: a2 = s1 <u a2\n 13164: a3 = u64 [sp + 0x40]\n 13167: a2 = 0 if a3 != 0\n 13169: a2 = 0 if a1 != 0\n 13171: u8 [a0 + 0] = 0\n 13173: jump @211 if a2 == 0\n      : @209 (gas: 3)\n 13177: i32 a0 = s0 + 0x20\n 13180: a1 = 0x20\n 13183: ra = 182, jump @0\n      : @210 [@dyn 91] (gas: 55)\n 13189: u8 [a0 + 31] = 0\n 13192: u8 [a0 + 30] = 0\n 13195: u8 [a0 + 29] = 0\n 13198: u8 [a0 + 28] = 0\n 13201: u8 [a0 + 27] = 0\n 13204: u8 [a0 + 26] = 0\n 13207: u8 [a0 + 25] = 0\n 13210: u8 [a0 + 24] = 0\n 13213: u8 [a0 + 23] = 0x73\n 13217: u8 [a0 + 22] = 0x73\n 13221: u8 [a0 + 21] = 0x65\n 13225: u8 [a0 + 20] = 0x72\n 13229: u8 [a0 + 19] = 0x64\n 13233: u8 [a0 + 18] = 0x64\n 13237: u8 [a0 + 17] = 0x61\n 13241: u8 [a0 + 16] = 0x20\n 13245: u8 [a0 + 15] = 0x67\n 13249: u8 [a0 + 14] = 0x69\n 13253: u8 [a0 + 13] = 0x73\n 13257: u8 [a0 + 12] = 0x69\n 13261: u8 [a0 + 11] = 0x74\n 13265: u8 [a0 + 10] = 0x6c\n 13269: u8 [a0 + 9] = 0x75\n 13273: a5 = 0x6d\n 13276: u8 [a0 + 0x8] = a5\n 13279: u8 [a0 + 7] = 0x20\n 13283: u8 [a0 + 6] = 0x64\n 13287: u8 [a0 + 5] = 0x69\n 13291: u8 [a0 + 4] = 0x6c\n 13295: u8 [a0 + 3] = 0x61\n 13299: u8 [a0 + 2] = 0x76\n 13303: u8 [a0 + 1] = 0x6e\n 13307: u8 [a0 + 0] = 0x49\n 13310: a1 = u64 [sp]\n 13312: a0 = a1 + 0x60\n 13315: a1 = a0 <u a1\n 13318: a3 = u64 [sp + 0x8]\n 13321: a2 = a3 + a1\n 13324: a3 = a2 <u a3\n 13327: a3 = a1 if a1 == 0\n 13330: a1 = u64 [sp + 0x10]\n 13333: a3 = a3 + a1\n 13336: a1 = a3 <u a1\n 13339: a4 = u64 [sp + 0x18]\n 13342: a1 = a1 + a4\n 13345: a4 = u64 [sp + 0x28]\n 13348: u64 [a4] = a0\n 13350: u64 [a4 + 0x8] = a2\n 13353: u64 [a4 + 0x10] = a3\n 13356: u64 [a4 + 0x18] = a1\n 13359: ra = u64 [sp + 0x58]\n 13362: s0 = u64 [sp + 0x50]\n 13365: s1 = u64 [sp + 0x48]\n 13368: sp = sp + 0x60\n 13371: ret\n      : @211 (gas: 1)\n 13373: trap\n      : @212 (gas: 9)\n 13374: sp = sp + 0xffffffffffffffc0\n 13377: u64 [sp + 0x38] = ra\n 13380: u64 [sp + 0x30] = s0\n 13383: u64 [sp + 0x28] = s1\n 13386: s0 = sp + 0x40\n 13389: sp = sp & 0xffffffffffffffe0\n 13392: a0 = 0x40\n 13395: a1 = 0x20\n 13398: ra = 184, jump @0\n      : @213 [@dyn 92] (gas: 97)\n 13404: a1 = u8 [a0 + 0x11]\n 13407: a2 = u8 [a0 + 0x10]\n 13410: a3 = u8 [a0 + 0x12]\n 13413: a4 = u8 [a0 + 0x13]\n 13416: a1 = a1 << 0x8\n 13419: a1 = a1 | a2\n 13422: a3 = a3 << 0x10\n 13425: a4 = a4 << 0x18\n 13428: a3 = a3 | a4\n 13431: a1 = a1 | a3\n 13434: a2 = u8 [a0 + 0x15]\n 13437: a3 = u8 [a0 + 0x14]\n 13440: a4 = u8 [a0 + 0x16]\n 13443: a5 = u8 [a0 + 0x17]\n 13446: a2 = a2 << 0x8\n 13449: a2 = a2 | a3\n 13452: a4 = a4 << 0x10\n 13455: a5 = a5 << 0x18\n 13458: a4 = a4 | a5\n 13461: a2 = a2 | a4\n 13464: a2 = a2 << 0x20\n 13467: t0 = a2 | a1\n 13470: a2 = u8 [a0 + 0x1]\n 13473: a3 = u8 [a0]\n 13475: a4 = u8 [a0 + 0x2]\n 13478: a5 = u8 [a0 + 0x3]\n 13481: a2 = a2 << 0x8\n 13484: a2 = a2 | a3\n 13487: a4 = a4 << 0x10\n 13490: a5 = a5 << 0x18\n 13493: a4 = a4 | a5\n 13496: a2 = a2 | a4\n 13499: a3 = u8 [a0 + 0x5]\n 13502: a4 = u8 [a0 + 0x4]\n 13505: a5 = u8 [a0 + 0x6]\n 13508: s1 = u8 [a0 + 0x7]\n 13511: a3 = a3 << 0x8\n 13514: a3 = a3 | a4\n 13517: a5 = a5 << 0x10\n 13520: s1 = s1 << 0x18\n 13523: a5 = a5 | s1\n 13526: a3 = a3 | a5\n 13529: a3 = a3 << 0x20\n 13532: a2 = a2 | a3\n 13535: a3 = u8 [a0 + 0x19]\n 13538: a4 = u8 [a0 + 0x18]\n 13541: a5 = u8 [a0 + 0x1a]\n 13544: s1 = u8 [a0 + 0x1b]\n 13547: a3 = a3 << 0x8\n 13550: a3 = a3 | a4\n 13553: a5 = a5 << 0x10\n 13556: s1 = s1 << 0x18\n 13559: a5 = a5 | s1\n 13562: a3 = a3 | a5\n 13565: a4 = u8 [a0 + 0x1d]\n 13568: a5 = u8 [a0 + 0x1c]\n 13571: s1 = u8 [a0 + 0x1e]\n 13574: a1 = u8 [a0 + 0x1f]\n 13577: a4 = a4 << 0x8\n 13580: a4 = a4 | a5\n 13583: s1 = s1 << 0x10\n 13586: a1 = a1 << 0x18\n 13589: a1 = a1 | s1\n 13592: a1 = a1 | a4\n 13595: a1 = a1 << 0x20\n 13598: a3 = a3 | a1\n 13601: a1 = u8 [a0 + 0x9]\n 13604: a4 = u8 [a0 + 0x8]\n 13607: a5 = u8 [a0 + 0xa]\n 13610: s1 = u8 [a0 + 0xb]\n 13613: a1 = a1 << 0x8\n 13616: a1 = a1 | a4\n 13619: a5 = a5 << 0x10\n 13622: s1 = s1 << 0x18\n 13625: a5 = a5 | s1\n 13628: a1 = a1 | a5\n 13631: a4 = u8 [a0 + 0xd]\n 13634: a5 = u8 [a0 + 0xc]\n 13637: s1 = u8 [a0 + 0xe]\n 13640: a0 = u8 [a0 + 0xf]\n 13643: a4 = a4 << 0x8\n 13646: a4 = a4 | a5\n 13649: s1 = s1 << 0x10\n 13652: a0 = a0 << 0x18\n 13655: a0 = a0 | s1\n 13658: a0 = a0 | a4\n 13661: a0 = a0 << 0x20\n 13664: a0 = a0 | a1\n 13667: s1 = reverse a0\n 13669: a0 = reverse a3\n 13671: u64 [sp + 0x8] = a0\n 13674: a0 = reverse a2\n 13676: u64 [sp + 0x18] = a0\n 13679: a0 = reverse t0\n 13681: u64 [sp + 0x10] = a0\n 13684: ecalli 12 // 'return_data_size'\n 13686: fallthrough\n      : @214 (gas: 11)\n 13687: a3 = u64 [sp + 0x8]\n 13690: a1 = u64 [sp + 0x18]\n 13693: a2 = u64 [sp + 0x10]\n 13696: a1 = a1 | a2\n 13699: a2 = a3 | s1\n 13702: a2 = a2 | a1\n 13705: a2 = a2 >> 0x20\n 13708: a1 = a1 | s1\n 13711: a1 = a1 << 0x20\n 13714: a1 = a1 | a2\n 13717: jump @221 if a1 != 0\n      : @215 (gas: 3)\n 13720: s1 = a0\n 13722: a0 = a0 >> 0x20\n 13725: jump @221 if a0 != 0\n      : @216 (gas: 5)\n 13728: i32 a0 = a3 + 0\n 13730: i32 a1 = s1 + 0\n 13732: u64 [sp + 0x18] = a1\n 13735: u64 [sp + 0x10] = a0\n 13738: ra = 186, jump @0\n      : @217 [@dyn 93] (gas: 6)\n 13744: u32 [sp + 0x20] = s1\n 13747: i32 a0 = a0 + 0\n 13749: i32 a1 = sp + 0x20\n 13752: a2 = 0\n 13754: ecalli 11 // 'return_data_copy'\n 13756: fallthrough\n      : @218 (gas: 3)\n 13757: a0 = i32 [sp + 0x20]\n 13760: a1 = u64 [sp + 0x18]\n 13763: jump @221 if a0 <u a1\n      : @219 (gas: 2)\n 13766: ecalli 12 // 'return_data_size'\n 13768: fallthrough\n      : @220 (gas: 2)\n 13769: a1 = a0 >> 0x20\n 13772: jump @222 if a1 == 0\n      : @221 (gas: 1)\n 13775: trap\n      : @222 (gas: 4)\n 13776: i32 s1 = a0 + 0\n 13778: a0 = u64 [sp + 0x10]\n 13781: a1 = s1\n 13783: ra = 188, jump @0\n      : @223 [@dyn 94] (gas: 6)\n 13789: i32 a1 = a0 + 0\n 13791: a0 = 0x1\n 13794: a2 = s1\n 13796: ra = 0xbe\n 13800: ecalli 13 // 'seal_return'\n 13802: fallthrough\n      : @224 [@dyn 95] (gas: 12)\n 13803: a1 = u64 [a0 + 0x10]\n 13806: a2 = u64 [a0 + 0x18]\n 13809: a3 = u64 [a0 + 0x8]\n 13812: a0 = u64 [a0]\n 13814: a2 = a2 | a3\n 13817: a3 = a0 | a1\n 13820: a3 = a3 | a2\n 13823: a3 = a3 >> 0x20\n 13826: a1 = a1 | a2\n 13829: a1 = a1 << 0x20\n 13832: a1 = a1 | a3\n 13835: jump @227 if a1 != 0\n      : @225 (gas: 7)\n 13839: sp = sp + 0xfffffffffffffff0\n 13842: u64 [sp + 0x8] = ra\n 13845: u64 [sp] = s0\n 13847: i32 a0 = a0 + 0\n 13849: a1 = 0x20\n 13852: s0 = 0x20\n 13855: ra = 192, jump @0\n      : @226 [@dyn 96] (gas: 41)\n 13861: u8 [a0 + 31] = 0\n 13864: u8 [a0 + 30] = 0\n 13867: u8 [a0 + 29] = 0\n 13870: u8 [a0 + 28] = 0\n 13873: u8 [a0 + 27] = 0\n 13876: u8 [a0 + 26] = 0\n 13879: u8 [a0 + 25] = 0x74\n 13883: u8 [a0 + 24] = 0x65\n 13887: u8 [a0 + 23] = 0x6c\n 13891: u8 [a0 + 22] = 0x6c\n 13895: a2 = 0x61\n 13898: u8 [a0 + 0x15] = a2\n 13901: u8 [a0 + 20] = 0x57\n 13905: u8 [a0 + 19] = 0x67\n 13909: a4 = 0x69\n 13912: u8 [a0 + 0x12] = a4\n 13915: u8 [a0 + 17] = 0x53\n 13919: u8 [a0 + 0x10] = a4\n 13922: u8 [a0 + 15] = 0x74\n 13926: u8 [a0 + 14] = 0x6c\n 13930: u8 [a0 + 13] = 0x75\n 13934: u8 [a0 + 12] = 0x4d\n 13938: u8 [a0 + 0xb] = s0\n 13941: a5 = 0x64\n 13944: u8 [a0 + 0xa] = a5\n 13947: u8 [a0 + 0x9] = a4\n 13950: u8 [a0 + 8] = 0x6c\n 13954: u8 [a0 + 0x7] = a2\n 13957: a3 = 0x76\n 13960: u8 [a0 + 0x6] = a3\n 13963: u8 [a0 + 0x5] = s0\n 13966: u8 [a0 + 0x4] = a2\n 13969: u8 [a0 + 0x3] = s0\n 13972: u8 [a0 + 2] = 0x74\n 13976: u8 [a0 + 1] = 0x6f\n 13980: a1 = 0x4e\n 13983: u8 [a0] = a1\n 13985: ra = u64 [sp + 0x8]\n 13988: s0 = u64 [sp]\n 13990: sp = sp + 0x10\n 13993: ret\n      : @227 (gas: 1)\n 13995: trap\n      : @228 (gas: 17)\n 13996: sp = sp + 0xffffffffffffffa0\n 13999: u64 [sp + 0x58] = ra\n 14002: u64 [sp + 0x50] = s0\n 14005: u64 [sp + 0x48] = s1\n 14008: a3 = u64 [a1 + 0x18]\n 14011: a4 = u64 [a1 + 0x10]\n 14014: a5 = u64 [a1 + 0x8]\n 14017: s1 = u64 [a1]\n 14019: a1 = a5 | a3\n 14022: a2 = s1 | a4\n 14025: a2 = a2 | a1\n 14028: a2 = a2 >> 0x20\n 14031: a1 = a1 | a4\n 14034: a1 = a1 << 0x20\n 14037: a1 = a1 | a2\n 14040: u64 [sp + 0x28] = a0\n 14043: jump @235 if a1 != 0\n      : @229 (gas: 19)\n 14047: a0 = s1 + 0x20\n 14050: u64 [sp + 0x30] = a0\n 14053: a0 = a0 <u s1\n 14056: a1 = a5 + a0\n 14059: u64 [sp + 0x40] = a1\n 14062: u64 [sp + 0x8] = a5\n 14065: s0 = a1 <u a5\n 14068: s0 = a0 if a0 == 0\n 14071: s0 = s0 + a4\n 14074: u64 [sp + 0x10] = a4\n 14077: a0 = s0 <u a4\n 14080: u64 [sp + 0x18] = a3\n 14083: a0 = a0 + a3\n 14086: u64 [sp + 0x38] = a0\n 14089: u64 [sp] = s1\n 14091: i32 a0 = s1 + 0\n 14093: a1 = 0x20\n 14096: s1 = 0x20\n 14099: ra = 194, jump @0\n      : @230 [@dyn 97] (gas: 45)\n 14105: u8 [a0 + 0x1f] = s1\n 14108: a1 = u64 [sp + 0x30]\n 14111: s1 = a1\n 14113: a1 = a1 | s0\n 14116: a2 = u64 [sp + 0x40]\n 14119: a4 = u64 [sp + 0x38]\n 14122: a2 = a2 | a4\n 14125: a1 = a1 | a2\n 14128: a1 = a1 >> 0x20\n 14131: u64 [sp + 0x20] = s0\n 14134: a2 = a2 | s0\n 14137: a2 = a2 << 0x20\n 14140: a1 = a1 | a2\n 14143: u8 [a0 + 30] = 0\n 14146: u8 [a0 + 29] = 0\n 14149: u8 [a0 + 28] = 0\n 14152: u8 [a0 + 27] = 0\n 14155: u8 [a0 + 26] = 0\n 14158: u8 [a0 + 25] = 0\n 14161: u8 [a0 + 24] = 0\n 14164: u8 [a0 + 23] = 0\n 14167: u8 [a0 + 22] = 0\n 14170: u8 [a0 + 21] = 0\n 14173: u8 [a0 + 20] = 0\n 14176: u8 [a0 + 19] = 0\n 14179: u8 [a0 + 18] = 0\n 14182: u8 [a0 + 17] = 0\n 14185: u8 [a0 + 16] = 0\n 14188: u8 [a0 + 15] = 0\n 14191: u8 [a0 + 14] = 0\n 14194: u8 [a0 + 13] = 0\n 14197: u8 [a0 + 12] = 0\n 14200: u8 [a0 + 11] = 0\n 14203: u8 [a0 + 10] = 0\n 14206: u8 [a0 + 9] = 0\n 14209: u8 [a0 + 8] = 0\n 14212: u8 [a0 + 7] = 0\n 14215: u8 [a0 + 6] = 0\n 14218: u8 [a0 + 5] = 0\n 14221: u8 [a0 + 4] = 0\n 14224: u8 [a0 + 3] = 0\n 14227: u8 [a0 + 2] = 0\n 14230: u8 [a0 + 1] = 0\n 14233: u8 [a0 + 0] = 0\n 14235: jump @235 if a1 != 0\n      : @231 (gas: 4)\n 14239: i32 s0 = s1 + 0\n 14241: a1 = 0x20\n 14244: a0 = s0\n 14246: ra = 196, jump @0\n      : @232 [@dyn 98] (gas: 41)\n 14252: u8 [a0 + 31] = 0x1a\n 14256: u8 [a0 + 30] = 0\n 14259: u8 [a0 + 29] = 0\n 14262: u8 [a0 + 28] = 0\n 14265: u8 [a0 + 27] = 0\n 14268: u8 [a0 + 26] = 0\n 14271: u8 [a0 + 25] = 0\n 14274: u8 [a0 + 24] = 0\n 14277: u8 [a0 + 23] = 0\n 14280: u8 [a0 + 22] = 0\n 14283: u8 [a0 + 21] = 0\n 14286: u8 [a0 + 20] = 0\n 14289: u8 [a0 + 19] = 0\n 14292: u8 [a0 + 18] = 0\n 14295: u8 [a0 + 17] = 0\n 14298: u8 [a0 + 16] = 0\n 14301: u8 [a0 + 15] = 0\n 14304: u8 [a0 + 14] = 0\n 14307: u8 [a0 + 13] = 0\n 14310: u8 [a0 + 12] = 0\n 14313: u8 [a0 + 11] = 0\n 14316: u8 [a0 + 10] = 0\n 14319: u8 [a0 + 9] = 0\n 14322: u8 [a0 + 8] = 0\n 14325: u8 [a0 + 7] = 0\n 14328: u8 [a0 + 6] = 0\n 14331: u8 [a0 + 5] = 0\n 14334: u8 [a0 + 4] = 0\n 14337: u8 [a0 + 3] = 0\n 14340: u8 [a0 + 2] = 0\n 14343: u8 [a0 + 1] = 0\n 14346: a1 = u64 [sp + 0x20]\n 14349: a2 = u64 [sp + 0x38]\n 14352: a1 = a1 | a2\n 14355: a2 = 0xffffffe0\n 14365: a2 = s1 <u a2\n 14368: a3 = u64 [sp + 0x40]\n 14371: a2 = 0 if a3 != 0\n 14373: a2 = 0 if a1 != 0\n 14375: u8 [a0 + 0] = 0\n 14377: jump @235 if a2 == 0\n      : @233 (gas: 3)\n 14381: i32 a0 = s0 + 0x20\n 14384: a1 = 0x20\n 14387: ra = 198, jump @0\n      : @234 [@dyn 99] (gas: 55)\n 14393: u8 [a0 + 31] = 0\n 14396: u8 [a0 + 30] = 0\n 14399: u8 [a0 + 29] = 0\n 14402: u8 [a0 + 28] = 0\n 14405: u8 [a0 + 27] = 0\n 14408: u8 [a0 + 26] = 0\n 14411: u8 [a0 + 25] = 0x74\n 14415: u8 [a0 + 24] = 0x65\n 14419: u8 [a0 + 23] = 0x6c\n 14423: u8 [a0 + 22] = 0x6c\n 14427: u8 [a0 + 21] = 0x61\n 14431: u8 [a0 + 20] = 0x57\n 14435: u8 [a0 + 19] = 0x67\n 14439: u8 [a0 + 18] = 0x69\n 14443: u8 [a0 + 17] = 0x53\n 14447: u8 [a0 + 16] = 0x69\n 14451: u8 [a0 + 15] = 0x74\n 14455: u8 [a0 + 14] = 0x6c\n 14459: u8 [a0 + 13] = 0x75\n 14463: u8 [a0 + 12] = 0x4d\n 14467: u8 [a0 + 11] = 0x20\n 14471: a5 = 0x64\n 14474: u8 [a0 + 0xa] = a5\n 14477: u8 [a0 + 9] = 0x69\n 14481: u8 [a0 + 8] = 0x6c\n 14485: u8 [a0 + 7] = 0x61\n 14489: u8 [a0 + 6] = 0x76\n 14493: u8 [a0 + 5] = 0x20\n 14497: u8 [a0 + 4] = 0x61\n 14501: u8 [a0 + 3] = 0x20\n 14505: u8 [a0 + 2] = 0x74\n 14509: u8 [a0 + 1] = 0x6f\n 14513: u8 [a0 + 0] = 0x4e\n 14516: a1 = u64 [sp]\n 14518: a0 = a1 + 0x60\n 14521: a1 = a0 <u a1\n 14524: a3 = u64 [sp + 0x8]\n 14527: a2 = a3 + a1\n 14530: a3 = a2 <u a3\n 14533: a3 = a1 if a1 == 0\n 14536: a1 = u64 [sp + 0x10]\n 14539: a3 = a3 + a1\n 14542: a1 = a3 <u a1\n 14545: a4 = u64 [sp + 0x18]\n 14548: a1 = a1 + a4\n 14551: a4 = u64 [sp + 0x28]\n 14554: u64 [a4] = a0\n 14556: u64 [a4 + 0x8] = a2\n 14559: u64 [a4 + 0x10] = a3\n 14562: u64 [a4 + 0x18] = a1\n 14565: ra = u64 [sp + 0x58]\n 14568: s0 = u64 [sp + 0x50]\n 14571: s1 = u64 [sp + 0x48]\n 14574: sp = sp + 0x60\n 14577: ret\n      : @235 (gas: 1)\n 14579: trap\n      : @236 (gas: 36)\n 14580: sp = sp + 0xfffffffffffffdc0\n 14584: u64 [sp + 0x238] = ra\n 14588: u64 [sp + 0x230] = s0\n 14592: u64 [sp + 0x228] = s1\n 14596: s0 = sp + 0x240\n 14600: sp = sp & 0xffffffffffffffe0\n 14603: a2 = u64 [a1 + 0x10]\n 14606: u64 [sp + 0x38] = a2\n 14609: a2 = u64 [a1 + 0x8]\n 14612: u64 [sp + 0x30] = a2\n 14615: a1 = u64 [a1]\n 14617: u64 [sp + 0x28] = a1\n 14620: a3 = u64 [a0 + 0x18]\n 14623: a2 = u64 [a0 + 0x10]\n 14626: a1 = u64 [a0 + 0x8]\n 14629: a0 = u64 [a0]\n 14631: u64 [sp + 0x60] = a3\n 14634: u64 [sp + 0x1f8] = a3\n 14638: u64 [sp + 0x68] = a2\n 14641: u64 [sp + 0x1f0] = a2\n 14645: u64 [sp + 0x70] = a1\n 14648: u64 [sp + 0x1e8] = a1\n 14652: u64 [sp + 0x78] = a0\n 14655: u64 [sp + 0x1e0] = a0\n 14659: u64 [sp + 536] = 0\n 14663: u64 [sp + 528] = 0\n 14667: u64 [sp + 520] = 0\n 14671: u64 [sp + 512] = 0\n 14675: u32 [sp + 448] = 0x20\n 14680: i32 a1 = sp + 0x1e0\n 14684: i32 a3 = sp + 0x200\n 14688: i32 a4 = sp + 0x1c0\n 14692: a2 = 0xffffffffffffffff\n 14695: a0 = 0\n 14697: ecalli 7 // 'get_storage'\n 14699: fallthrough\n      : @237 (gas: 7)\n 14700: a4 = u64 [sp + 0x218]\n 14704: a3 = u64 [sp + 0x210]\n 14708: a2 = u64 [sp + 0x208]\n 14712: a0 = a3 | a4\n 14715: a1 = a2 <u 0x1\n 14718: a1 = 0 if a0 != 0\n 14720: jump @240 if a1 == 0\n      : @238 (gas: 50)\n 14724: a0 = u64 [sp + 0x200]\n 14728: u64 [sp + 0x58] = a0\n 14731: a0 = a0 + 0x1\n 14734: a1 = a0 <u 0x1\n 14737: a1 = a1 + a2\n 14740: u64 [sp + 0x200] = a0\n 14744: a0 = a0 | a1\n 14747: u64 [sp + 0x208] = a1\n 14751: a0 = a0 <u 0x1\n 14754: a0 = a0 + a3\n 14757: u64 [sp + 0x210] = a0\n 14761: a0 = a0 <u a3\n 14764: a0 = a0 + a4\n 14767: u64 [sp + 0x218] = a0\n 14771: a0 = u64 [sp + 0x70]\n 14774: u64 [sp + 0x1e8] = a0\n 14778: a0 = u64 [sp + 0x78]\n 14781: u64 [sp + 0x1e0] = a0\n 14785: a0 = u64 [sp + 0x68]\n 14788: u64 [sp + 0x1f0] = a0\n 14792: s1 = u64 [sp + 0x60]\n 14795: u64 [sp + 0x1f8] = s1\n 14799: i32 a1 = sp + 0x1e0\n 14803: u64 [sp + 0x50] = a3\n 14806: i32 a3 = sp + 0x200\n 14810: u64 [sp + 0x48] = a2\n 14813: a2 = 0xffffffffffffffff\n 14816: u64 [sp + 0x40] = a4\n 14819: a4 = 0x20\n 14822: a0 = 0\n 14824: ecalli 15 // 'set_storage'\n 14826: a0 = u64 [sp + 0x40]\n 14829: u64 [sp + 0x158] = a0\n 14833: a0 = u64 [sp + 0x50]\n 14836: u64 [sp + 0x150] = a0\n 14840: a0 = u64 [sp + 0x48]\n 14843: u64 [sp + 0x148] = a0\n 14847: a0 = u64 [sp + 0x58]\n 14850: u64 [sp + 0x140] = a0\n 14854: u64 [sp + 0x178] = s1\n 14858: a0 = u64 [sp + 0x68]\n 14861: u64 [sp + 0x170] = a0\n 14865: a0 = u64 [sp + 0x70]\n 14868: u64 [sp + 0x168] = a0\n 14872: a0 = sp + 0x180\n 14876: a1 = sp + 0x160\n 14880: a2 = sp + 0x140\n 14884: a3 = u64 [sp + 0x78]\n 14887: u64 [sp + 0x160] = a3\n 14891: ra = 200, jump @90\n      : @239 [@dyn 100] (gas: 444)\n 14897: a0 = u64 [sp + 0x1b8]\n 14901: u64 [sp + 0x58] = a0\n 14904: a0 = u64 [sp + 0x1b0]\n 14908: u64 [sp + 0x50] = a0\n 14911: s1 = u64 [sp + 0x1a8]\n 14915: a0 = u64 [sp + 0x1a0]\n 14919: u64 [sp + 0x20] = a0\n 14922: a3 = u64 [sp + 0x198]\n 14926: u64 [sp + 0x60] = a3\n 14929: a2 = u64 [sp + 0x190]\n 14933: u64 [sp + 0x68] = a2\n 14936: a1 = u64 [sp + 0x188]\n 14940: u64 [sp + 0x70] = a1\n 14943: a0 = u64 [sp + 0x180]\n 14947: u64 [sp + 0x78] = a0\n 14950: u64 [sp + 0x1f8] = a3\n 14954: u64 [sp + 0x1f0] = a2\n 14958: u64 [sp + 0x1e8] = a1\n 14962: u64 [sp + 0x1e0] = a0\n 14966: u64 [sp + 536] = 0\n 14970: u64 [sp + 528] = 0\n 14974: u64 [sp + 520] = 0\n 14978: u64 [sp + 512] = 0\n 14982: u32 [sp + 448] = 0x20\n 14987: i32 a1 = sp + 0x1e0\n 14991: i32 a3 = sp + 0x200\n 14995: i32 a4 = sp + 0x1c0\n 14999: a2 = 0xffffffffffffffff\n 15002: a0 = 0\n 15004: ecalli 7 // 'get_storage'\n 15006: a2 = u64 [sp + 0x20]\n 15009: a0 = a2 >> 0x3d\n 15012: a1 = s1 << 0x3\n 15015: a0 = a0 | a1\n 15018: a1 = a2 << 0x3\n 15021: a1 = a1 <u 0x100\n 15025: t1 = a1 ^ 0x1\n 15028: a1 = a0 >u 0\n 15030: t1 = a1 if a0 != 0\n 15033: s1 = s1 >> 0x3d\n 15036: a1 = u64 [sp + 0x50]\n 15039: a0 = a1 << 0x3\n 15042: a0 = a0 | s1\n 15045: a1 = a1 >> 0x3d\n 15048: a3 = u64 [sp + 0x58]\n 15051: a3 = a3 << 0x3\n 15054: a1 = a1 | a3\n 15057: a3 = a1 >u 0\n 15059: a4 = a0 >u 0\n 15061: a4 = a3 if a1 != 0\n 15064: a0 = a0 | a1\n 15067: t1 = a4 if a0 != 0\n 15070: a0 = u64 [sp + 0x200]\n 15074: u64 [sp + 0x58] = a0\n 15077: a0 = u64 [sp + 0x208]\n 15081: u64 [sp + 0x50] = a0\n 15084: a0 = u64 [sp + 0x210]\n 15088: u64 [sp + 0x48] = a0\n 15091: a0 = u64 [sp + 0x218]\n 15095: u64 [sp + 0x40] = a0\n 15098: u8 [sp + 307] = 0xff\n 15104: u8 [sp + 303] = 0xff\n 15110: u8 [sp + 302] = 0xff\n 15116: u8 [sp + 301] = 0xff\n 15122: u8 [sp + 299] = 0xff\n 15128: u8 [sp + 295] = 0xff\n 15134: u8 [sp + 294] = 0xff\n 15140: u8 [sp + 293] = 0xff\n 15146: u8 [sp + 291] = 0xff\n 15152: a0 = 0xffffffff\n 15162: u8 [sp + 0x12c] = a0\n 15166: u8 [sp + 0x124] = a0\n 15170: a0 = 0xffffffffffff\n 15180: u8 [sp + 0x132] = a0\n 15184: u8 [sp + 0x12a] = a0\n 15188: u8 [sp + 0x122] = a0\n 15192: u8 [sp + 304] = 0xffffffffffffffff\n 15197: u8 [sp + 296] = 0xffffffffffffffff\n 15202: u8 [sp + 288] = 0xffffffffffffffff\n 15207: a0 = 0xffffffffffffff\n 15217: u8 [sp + 0x131] = a0\n 15221: u8 [sp + 0x129] = a0\n 15225: u8 [sp + 0x121] = a0\n 15229: u8 [sp + 319] = 0\n 15233: u8 [sp + 318] = 0\n 15237: u8 [sp + 317] = 0\n 15241: u8 [sp + 316] = 0\n 15245: u8 [sp + 315] = 0\n 15249: u8 [sp + 314] = 0\n 15253: u8 [sp + 313] = 0\n 15257: u8 [sp + 312] = 0\n 15261: u8 [sp + 311] = 0\n 15265: u8 [sp + 310] = 0\n 15269: u8 [sp + 309] = 0\n 15273: u8 [sp + 308] = 0\n 15277: u8 [sp + 287] = 0\n 15281: u8 [sp + 286] = 0\n 15285: u8 [sp + 285] = 0\n 15289: u8 [sp + 284] = 0\n 15293: u8 [sp + 283] = 0\n 15297: u8 [sp + 282] = 0\n 15301: u8 [sp + 281] = 0\n 15305: u8 [sp + 280] = 0\n 15309: u8 [sp + 279] = 0\n 15313: u8 [sp + 278] = 0\n 15317: u8 [sp + 277] = 0\n 15321: u8 [sp + 276] = 0\n 15325: u8 [sp + 275] = 0\n 15329: u8 [sp + 274] = 0\n 15333: u8 [sp + 273] = 0\n 15337: u8 [sp + 272] = 0\n 15341: u8 [sp + 271] = 0\n 15345: u8 [sp + 270] = 0\n 15349: u8 [sp + 269] = 0\n 15353: u8 [sp + 268] = 0\n 15357: u8 [sp + 267] = 0\n 15361: u8 [sp + 266] = 0\n 15365: u8 [sp + 265] = 0\n 15369: u8 [sp + 264] = 0\n 15373: u8 [sp + 263] = 0\n 15377: u8 [sp + 262] = 0\n 15381: u8 [sp + 261] = 0\n 15385: u8 [sp + 260] = 0\n 15389: u8 [sp + 259] = 0\n 15393: u8 [sp + 258] = 0\n 15397: u8 [sp + 257] = 0\n 15401: u8 [sp + 256] = 0\n 15405: a4 = a2 & 0x1f\n 15408: a3 = sp + 0x120\n 15412: a3 = a3 - a4\n 15415: a0 = u8 [a3 + 0x19]\n 15418: a1 = u8 [a3 + 0x18]\n 15421: a5 = u8 [a3 + 0x1a]\n 15424: s1 = u8 [a3 + 0x1b]\n 15427: a0 = a0 << 0x8\n 15430: a0 = a0 | a1\n 15433: a5 = a5 << 0x10\n 15436: s1 = s1 << 0x18\n 15439: a5 = a5 | s1\n 15442: t0 = a5 | a0\n 15445: a1 = u8 [a3 + 0x1d]\n 15448: a5 = u8 [a3 + 0x1c]\n 15451: s1 = u8 [a3 + 0x1e]\n 15454: a0 = u8 [a3 + 0x1f]\n 15457: a1 = a1 << 0x8\n 15460: a1 = a1 | a5\n 15463: s1 = s1 << 0x10\n 15466: a0 = a0 << 0x18\n 15469: a0 = a0 | s1\n 15472: a0 = a0 | a1\n 15475: a0 = a0 << 0x20\n 15478: a0 = a0 | t0\n 15481: u64 [sp + 0x20] = a0\n 15484: a0 = u8 [a3 + 0x11]\n 15487: a1 = u8 [a3 + 0x10]\n 15490: a5 = u8 [a3 + 0x12]\n 15493: s1 = u8 [a3 + 0x13]\n 15496: a0 = a0 << 0x8\n 15499: a0 = a0 | a1\n 15502: a5 = a5 << 0x10\n 15505: s1 = s1 << 0x18\n 15508: a5 = a5 | s1\n 15511: t0 = a5 | a0\n 15514: a1 = u8 [a3 + 0x15]\n 15517: a5 = u8 [a3 + 0x14]\n 15520: s1 = u8 [a3 + 0x16]\n 15523: a0 = u8 [a3 + 0x17]\n 15526: a1 = a1 << 0x8\n 15529: a1 = a1 | a5\n 15532: s1 = s1 << 0x10\n 15535: a0 = a0 << 0x18\n 15538: a0 = a0 | s1\n 15541: a0 = a0 | a1\n 15544: a0 = a0 << 0x20\n 15547: a0 = a0 | t0\n 15550: u64 [sp + 0x18] = a0\n 15553: a0 = u8 [a3 + 0x9]\n 15556: a1 = u8 [a3 + 0x8]\n 15559: a5 = u8 [a3 + 0xa]\n 15562: s1 = u8 [a3 + 0xb]\n 15565: a0 = a0 << 0x8\n 15568: a0 = a0 | a1\n 15571: a5 = a5 << 0x10\n 15574: s1 = s1 << 0x18\n 15577: a5 = a5 | s1\n 15580: a2 = a5 | a0\n 15583: a1 = u8 [a3 + 0xd]\n 15586: a5 = u8 [a3 + 0xc]\n 15589: s1 = u8 [a3 + 0xe]\n 15592: a0 = u8 [a3 + 0xf]\n 15595: a1 = a1 << 0x8\n 15598: a1 = a1 | a5\n 15601: s1 = s1 << 0x10\n 15604: a0 = a0 << 0x18\n 15607: a0 = a0 | s1\n 15610: a0 = a0 | a1\n 15613: a0 = a0 << 0x20\n 15616: ra = a0 | a2\n 15619: a0 = u8 [a3 + 0x1]\n 15622: a1 = u8 [a3]\n 15624: a2 = u8 [a3 + 0x2]\n 15627: s1 = u8 [a3 + 0x3]\n 15630: a0 = a0 << 0x8\n 15633: a0 = a0 | a1\n 15636: a2 = a2 << 0x10\n 15639: s1 = s1 << 0x18\n 15642: a2 = a2 | s1\n 15645: a0 = a0 | a2\n 15648: a1 = u8 [a3 + 0x5]\n 15651: a2 = u8 [a3 + 0x4]\n 15654: s1 = u8 [a3 + 0x6]\n 15657: a3 = u8 [a3 + 0x7]\n 15660: a1 = a1 << 0x8\n 15663: a1 = a1 | a2\n 15666: s1 = s1 << 0x10\n 15669: a3 = a3 << 0x18\n 15672: a3 = a3 | s1\n 15675: a1 = a1 | a3\n 15678: a1 = a1 << 0x20\n 15681: t2 = a1 | a0\n 15684: a1 = u64 [sp + 0x28]\n 15687: a0 = a1 >> 0x38\n 15690: u8 [sp + 0xe7] = a0\n 15694: a0 = a1 >> 0x30\n 15697: u8 [sp + 0xe6] = a0\n 15701: a0 = a1 >> 0x28\n 15704: u8 [sp + 0xe5] = a0\n 15708: a0 = a1 >> 0x20\n 15711: u8 [sp + 0xe4] = a0\n 15715: a0 = a1 >> 0x18\n 15718: u8 [sp + 0xe3] = a0\n 15722: a0 = a1 >> 0x10\n 15725: u8 [sp + 0xe2] = a0\n 15729: u8 [sp + 0xe0] = a1\n 15733: a0 = a1 >> 0x8\n 15736: u8 [sp + 0xe1] = a0\n 15740: a1 = u64 [sp + 0x30]\n 15743: a0 = a1 >> 0x38\n 15746: u8 [sp + 0xef] = a0\n 15750: a0 = a1 >> 0x30\n 15753: u8 [sp + 0xee] = a0\n 15757: a0 = a1 >> 0x28\n 15760: u8 [sp + 0xed] = a0\n 15764: a0 = a1 >> 0x20\n 15767: u8 [sp + 0xec] = a0\n 15771: a0 = a1 >> 0x18\n 15774: u8 [sp + 0xeb] = a0\n 15778: a0 = a1 >> 0x10\n 15781: u8 [sp + 0xea] = a0\n 15785: u8 [sp + 0xe8] = a1\n 15789: a0 = a1 >> 0x8\n 15792: u8 [sp + 0xe9] = a0\n 15796: a1 = u64 [sp + 0x38]\n 15799: a0 = a1 >> 0x18\n 15802: u8 [sp + 0xf3] = a0\n 15806: a0 = a1 >> 0x10\n 15809: u8 [sp + 0xf2] = a0\n 15813: u8 [sp + 0xf0] = a1\n 15817: a0 = a1 >> 0x8\n 15820: u8 [sp + 0xf1] = a0\n 15824: a0 = sp + 0xe0\n 15828: a4 = a0 - a4\n 15831: u8 [sp + 255] = 0\n 15835: u8 [sp + 254] = 0\n 15839: u8 [sp + 253] = 0\n 15843: u8 [sp + 252] = 0\n 15847: u8 [sp + 251] = 0\n 15851: u8 [sp + 250] = 0\n 15855: u8 [sp + 249] = 0\n 15859: u8 [sp + 248] = 0\n 15863: u8 [sp + 247] = 0\n 15867: u8 [sp + 246] = 0\n 15871: u8 [sp + 245] = 0\n 15875: u8 [sp + 244] = 0\n 15879: u8 [sp + 223] = 0\n 15883: u8 [sp + 222] = 0\n 15887: u8 [sp + 221] = 0\n 15891: u8 [sp + 220] = 0\n 15895: u8 [sp + 219] = 0\n 15899: u8 [sp + 218] = 0\n 15903: u8 [sp + 217] = 0\n 15907: u8 [sp + 216] = 0\n 15911: u8 [sp + 215] = 0\n 15915: u8 [sp + 214] = 0\n 15919: u8 [sp + 213] = 0\n 15923: u8 [sp + 212] = 0\n 15927: u8 [sp + 211] = 0\n 15931: u8 [sp + 210] = 0\n 15935: u8 [sp + 209] = 0\n 15939: u8 [sp + 208] = 0\n 15943: u8 [sp + 207] = 0\n 15947: u8 [sp + 206] = 0\n 15951: u8 [sp + 205] = 0\n 15955: u8 [sp + 204] = 0\n 15959: u8 [sp + 203] = 0\n 15963: u8 [sp + 202] = 0\n 15967: u8 [sp + 201] = 0\n 15971: u8 [sp + 200] = 0\n 15975: u8 [sp + 199] = 0\n 15979: u8 [sp + 198] = 0\n 15983: u8 [sp + 197] = 0\n 15987: u8 [sp + 196] = 0\n 15991: u8 [sp + 195] = 0\n 15995: u8 [sp + 194] = 0\n 15999: u8 [sp + 193] = 0\n 16003: u8 [sp + 192] = 0\n 16007: a0 = u8 [a4 + 0x19]\n 16010: a1 = u8 [a4 + 0x18]\n 16013: a2 = u8 [a4 + 0x1a]\n 16016: s1 = u8 [a4 + 0x1b]\n 16019: a0 = a0 << 0x8\n 16022: a0 = a0 | a1\n 16025: a2 = a2 << 0x10\n 16028: s1 = s1 << 0x18\n 16031: a2 = a2 | s1\n 16034: a3 = a2 | a0\n 16037: a1 = u8 [a4 + 0x1d]\n 16040: a2 = u8 [a4 + 0x1c]\n 16043: s1 = u8 [a4 + 0x1e]\n 16046: a0 = u8 [a4 + 0x1f]\n 16049: a1 = a1 << 0x8\n 16052: a1 = a1 | a2\n 16055: s1 = s1 << 0x10\n 16058: a0 = a0 << 0x18\n 16061: a0 = a0 | s1\n 16064: a0 = a0 | a1\n 16067: a0 = a0 << 0x20\n 16070: s1 = a0 | a3\n 16073: a0 = u8 [a4 + 0x11]\n 16076: a1 = u8 [a4 + 0x10]\n 16079: a2 = u8 [a4 + 0x12]\n 16082: a3 = u8 [a4 + 0x13]\n 16085: a0 = a0 << 0x8\n 16088: a0 = a0 | a1\n 16091: a2 = a2 << 0x10\n 16094: a3 = a3 << 0x18\n 16097: a2 = a2 | a3\n 16100: a5 = a2 | a0\n 16103: a1 = u8 [a4 + 0x15]\n 16106: a2 = u8 [a4 + 0x14]\n 16109: a3 = u8 [a4 + 0x16]\n 16112: a0 = u8 [a4 + 0x17]\n 16115: a1 = a1 << 0x8\n 16118: a1 = a1 | a2\n 16121: a3 = a3 << 0x10\n 16124: a0 = a0 << 0x18\n 16127: a0 = a0 | a3\n 16130: a0 = a0 | a1\n 16133: a0 = a0 << 0x20\n 16136: t0 = a0 | a5\n 16139: a0 = u8 [a4 + 0x9]\n 16142: a2 = u8 [a4 + 0x8]\n 16145: a3 = u8 [a4 + 0xa]\n 16148: a5 = u8 [a4 + 0xb]\n 16151: a0 = a0 << 0x8\n 16154: a0 = a0 | a2\n 16157: a3 = a3 << 0x10\n 16160: a5 = a5 << 0x18\n 16163: a3 = a3 | a5\n 16166: a1 = a3 | a0\n 16169: a2 = u8 [a4 + 0xd]\n 16172: a3 = u8 [a4 + 0xc]\n 16175: a5 = u8 [a4 + 0xe]\n 16178: a0 = u8 [a4 + 0xf]\n 16181: a2 = a2 << 0x8\n 16184: a2 = a2 | a3\n 16187: a5 = a5 << 0x10\n 16190: a0 = a0 << 0x18\n 16193: a0 = a0 | a5\n 16196: a0 = a0 | a2\n 16199: a0 = a0 << 0x20\n 16202: a0 = a0 | a1\n 16205: a1 = u8 [a4 + 0x1]\n 16208: a2 = u8 [a4]\n 16210: a3 = u8 [a4 + 0x2]\n 16213: a5 = u8 [a4 + 0x3]\n 16216: a1 = a1 << 0x8\n 16219: a1 = a1 | a2\n 16222: a3 = a3 << 0x10\n 16225: a5 = a5 << 0x18\n 16228: a3 = a3 | a5\n 16231: a1 = a1 | a3\n 16234: a2 = u8 [a4 + 0x5]\n 16237: a3 = u8 [a4 + 0x4]\n 16240: a5 = u8 [a4 + 0x6]\n 16243: a4 = u8 [a4 + 0x7]\n 16246: a2 = a2 << 0x8\n 16249: a2 = a2 | a3\n 16252: a5 = a5 << 0x10\n 16255: a4 = a4 << 0x18\n 16258: a4 = a4 | a5\n 16261: a2 = a2 | a4\n 16264: a2 = a2 << 0x20\n 16267: a4 = a2 | a1\n 16270: t2 = 0 if t1 != 0\n 16272: ra = 0 if t1 != 0\n 16274: a5 = u64 [sp + 0x18]\n 16277: a5 = 0 if t1 != 0\n 16279: a2 = u64 [sp + 0x20]\n 16282: a2 = 0 if t1 != 0\n 16284: a4 = 0 if t1 != 0\n 16286: a0 = 0 if t1 != 0\n 16288: t0 = 0 if t1 != 0\n 16290: s1 = 0 if t1 != 0\n 16292: a1 = u64 [sp + 0x40]\n 16295: t1 = a1 & ~a2\n 16298: a2 = a2 & s1\n 16301: a1 = u64 [sp + 0x48]\n 16304: a3 = a1 & ~a5\n 16307: a5 = t0 & a5\n 16310: a1 = u64 [sp + 0x50]\n 16313: s1 = a1 & ~ra\n 16316: a0 = a0 & ra\n 16319: a1 = u64 [sp + 0x58]\n 16322: a1 = a1 & ~t2\n 16325: a4 = a4 & t2\n 16328: a1 = a1 | a4\n 16331: a0 = a0 | s1\n 16334: a3 = a3 | a5\n 16337: a2 = t1 | a2\n 16340: a4 = u64 [sp + 0x60]\n 16343: u64 [sp + 0x1f8] = a4\n 16347: a4 = u64 [sp + 0x68]\n 16350: u64 [sp + 0x1f0] = a4\n 16354: a4 = u64 [sp + 0x70]\n 16357: u64 [sp + 0x1e8] = a4\n 16361: a4 = u64 [sp + 0x78]\n 16364: u64 [sp + 0x1e0] = a4\n 16368: u64 [sp + 0x218] = a2\n 16372: u64 [sp + 0x210] = a3\n 16376: u64 [sp + 0x208] = a0\n 16380: u64 [sp + 0x200] = a1\n 16384: i32 a1 = sp + 0x1e0\n 16388: i32 a3 = sp + 0x200\n 16392: a2 = 0xffffffffffffffff\n 16395: a4 = 0x20\n 16398: a0 = 0\n 16400: ecalli 15 // 'set_storage'\n 16402: sp = s0 + 0xfffffffffffffdc0\n 16406: ra = u64 [sp + 0x238]\n 16410: s0 = u64 [sp + 0x230]\n 16414: s1 = u64 [sp + 0x228]\n 16418: sp = sp + 0x240\n 16422: ret\n      : @240 (gas: 8)\n 16424: u64 [sp + 176] = 0\n 16428: u64 [sp + 168] = 0\n 16432: u64 [sp + 160] = 0\n 16436: a0 = 0x4e487b7100000000\n 16446: a1 = sp + 0xa0\n 16450: u64 [sp + 0xb8] = a0\n 16454: a0 = 0\n 16456: ra = 202, jump @8\n      : @241 [@dyn 101] (gas: 7)\n 16462: u64 [sp + 152] = 0\n 16466: u64 [sp + 144] = 0\n 16470: u64 [sp + 128] = 0x41\n 16475: a0 = 0x4\n 16478: a1 = sp + 0x80\n 16482: u64 [sp + 136] = 0\n 16486: ra = 204, jump @8\n      : @242 [@dyn 102] (gas: 3)\n 16492: a1 = 0x24\n 16495: a0 = 0\n 16497: ra = 206, jump @0\n      : @243 [@dyn 103] (gas: 6)\n 16503: i32 a1 = a0 + 0\n 16505: a0 = 0x1\n 16508: a2 = 0x24\n 16511: ra = 0xd0\n 16515: ecalli 13 // 'seal_return'\n 16517: fallthrough\n      : @244 [@dyn 104] (gas: 18)\n 16518: sp = sp + 0xfffffffffffffd40\n 16522: u64 [sp + 0x2b8] = ra\n 16526: u64 [sp + 0x2b0] = s0\n 16530: u64 [sp + 0x2a8] = s1\n 16534: s0 = sp + 0x2c0\n 16538: sp = sp & 0xffffffffffffffe0\n 16541: a1 = u64 [a0 + 0x10]\n 16544: a3 = u64 [a0 + 0x8]\n 16547: a4 = u64 [a0]\n 16549: u64 [sp + 0x70] = a1\n 16552: a1 = a1 << 0x20\n 16555: a2 = a1 >> 0x20\n 16558: u64 [sp + 0x68] = a3\n 16561: u64 [sp + 0x60] = a4\n 16564: a1 = a4 | a3\n 16567: u64 [sp + 0x28] = a2\n 16570: a1 = a1 | a2\n 16573: jump @268 if a1 == 0\n      : @245 (gas: 13)\n 16577: a0 = u64 [a0 + 0x18]\n 16580: u64 [sp + 0x20] = a0\n 16583: i32 a0 = sp + 0x180\n 16587: ecalli 0 // 'address'\n 16588: a0 = i32 [sp + 0x190]\n 16592: u64 [sp + 0x40] = a0\n 16595: a0 = u64 [sp + 0x180]\n 16599: u64 [sp + 0x38] = a0\n 16602: a0 = u64 [sp + 0x188]\n 16606: u64 [sp + 0x30] = a0\n 16609: a0 = 0x40\n 16612: a1 = 0x20\n 16615: ra = 210, jump @0\n      : @246 [@dyn 105] (gas: 102)\n 16621: a1 = u8 [a0 + 0x11]\n 16624: a2 = u8 [a0 + 0x10]\n 16627: a3 = u8 [a0 + 0x12]\n 16630: a4 = u8 [a0 + 0x13]\n 16633: a1 = a1 << 0x8\n 16636: a1 = a1 | a2\n 16639: a3 = a3 << 0x10\n 16642: a4 = a4 << 0x18\n 16645: a3 = a3 | a4\n 16648: a1 = a1 | a3\n 16651: a2 = u8 [a0 + 0x15]\n 16654: a3 = u8 [a0 + 0x14]\n 16657: a4 = u8 [a0 + 0x16]\n 16660: a5 = u8 [a0 + 0x17]\n 16663: a2 = a2 << 0x8\n 16666: a2 = a2 | a3\n 16669: a4 = a4 << 0x10\n 16672: a5 = a5 << 0x18\n 16675: a4 = a4 | a5\n 16678: a2 = a2 | a4\n 16681: a2 = a2 << 0x20\n 16684: t0 = a2 | a1\n 16687: a2 = u8 [a0 + 0x1]\n 16690: a3 = u8 [a0]\n 16692: a4 = u8 [a0 + 0x2]\n 16695: a5 = u8 [a0 + 0x3]\n 16698: a2 = a2 << 0x8\n 16701: a2 = a2 | a3\n 16704: a4 = a4 << 0x10\n 16707: a5 = a5 << 0x18\n 16710: a4 = a4 | a5\n 16713: a2 = a2 | a4\n 16716: a3 = u8 [a0 + 0x5]\n 16719: a4 = u8 [a0 + 0x4]\n 16722: a5 = u8 [a0 + 0x6]\n 16725: s1 = u8 [a0 + 0x7]\n 16728: a3 = a3 << 0x8\n 16731: a3 = a3 | a4\n 16734: a5 = a5 << 0x10\n 16737: s1 = s1 << 0x18\n 16740: a5 = a5 | s1\n 16743: a3 = a3 | a5\n 16746: a3 = a3 << 0x20\n 16749: a2 = a2 | a3\n 16752: a3 = u8 [a0 + 0x19]\n 16755: a4 = u8 [a0 + 0x18]\n 16758: a5 = u8 [a0 + 0x1a]\n 16761: s1 = u8 [a0 + 0x1b]\n 16764: a3 = a3 << 0x8\n 16767: a3 = a3 | a4\n 16770: a5 = a5 << 0x10\n 16773: s1 = s1 << 0x18\n 16776: a5 = a5 | s1\n 16779: a3 = a3 | a5\n 16782: a4 = u8 [a0 + 0x1d]\n 16785: a5 = u8 [a0 + 0x1c]\n 16788: s1 = u8 [a0 + 0x1e]\n 16791: a1 = u8 [a0 + 0x1f]\n 16794: a4 = a4 << 0x8\n 16797: a4 = a4 | a5\n 16800: s1 = s1 << 0x10\n 16803: a1 = a1 << 0x18\n 16806: a1 = a1 | s1\n 16809: a1 = a1 | a4\n 16812: a1 = a1 << 0x20\n 16815: a3 = a3 | a1\n 16818: a1 = u8 [a0 + 0x9]\n 16821: a4 = u8 [a0 + 0x8]\n 16824: a5 = u8 [a0 + 0xa]\n 16827: s1 = u8 [a0 + 0xb]\n 16830: a1 = a1 << 0x8\n 16833: a1 = a1 | a4\n 16836: a5 = a5 << 0x10\n 16839: s1 = s1 << 0x18\n 16842: a5 = a5 | s1\n 16845: a1 = a1 | a5\n 16848: a4 = u8 [a0 + 0xd]\n 16851: a5 = u8 [a0 + 0xc]\n 16854: s1 = u8 [a0 + 0xe]\n 16857: a0 = u8 [a0 + 0xf]\n 16860: a4 = a4 << 0x8\n 16863: a4 = a4 | a5\n 16866: s1 = s1 << 0x10\n 16869: a0 = a0 << 0x18\n 16872: a0 = a0 | s1\n 16875: a0 = a0 | a4\n 16878: a0 = a0 << 0x20\n 16881: a0 = a0 | a1\n 16884: s1 = reverse a0\n 16886: a3 = reverse a3\n 16888: a1 = reverse a2\n 16890: a0 = reverse t0\n 16892: u64 [sp + 0x50] = a0\n 16895: u64 [sp + 0x58] = a1\n 16898: a0 = a0 | a1\n 16901: a1 = a3 | s1\n 16904: a1 = a1 | a0\n 16907: a1 = a1 >> 0x20\n 16910: a0 = a0 | s1\n 16913: a0 = a0 << 0x20\n 16916: a0 = a0 | a1\n 16919: jump @279 if a0 != 0\n      : @247 (gas: 5)\n 16923: i32 a0 = a3 + 0\n 16925: a1 = 0x20\n 16928: u64 [sp + 0x78] = a0\n 16931: u64 [sp + 0x48] = a3\n 16934: ra = 212, jump @0\n      : @248 [@dyn 106] (gas: 42)\n 16940: u8 [a0 + 3] = 0x6e\n 16944: u8 [a0 + 2] = 0xbf\n 16949: u8 [a0 + 1] = 0x54\n 16953: u8 [a0 + 0] = 0x2f\n 16956: u64 [sp + 0x18] = s1\n 16959: a2 = u64 [sp + 0x58]\n 16962: a2 = a2 | s1\n 16965: a1 = 0xfffffffc\n 16975: a3 = u64 [sp + 0x48]\n 16978: a1 = a3 <u a1\n 16981: a3 = u64 [sp + 0x50]\n 16984: a1 = 0 if a3 != 0\n 16986: a1 = 0 if a2 != 0\n 16988: u8 [a0 + 31] = 0\n 16991: u8 [a0 + 30] = 0\n 16994: u8 [a0 + 29] = 0\n 16997: u8 [a0 + 28] = 0\n 17000: u8 [a0 + 27] = 0\n 17003: u8 [a0 + 26] = 0\n 17006: u8 [a0 + 25] = 0\n 17009: u8 [a0 + 24] = 0\n 17012: u8 [a0 + 23] = 0\n 17015: u8 [a0 + 22] = 0\n 17018: u8 [a0 + 21] = 0\n 17021: u8 [a0 + 20] = 0\n 17024: u8 [a0 + 19] = 0\n 17027: u8 [a0 + 18] = 0\n 17030: u8 [a0 + 17] = 0\n 17033: u8 [a0 + 16] = 0\n 17036: u8 [a0 + 15] = 0\n 17039: u8 [a0 + 14] = 0\n 17042: u8 [a0 + 13] = 0\n 17045: u8 [a0 + 12] = 0\n 17048: u8 [a0 + 11] = 0\n 17051: u8 [a0 + 10] = 0\n 17054: u8 [a0 + 9] = 0\n 17057: u8 [a0 + 8] = 0\n 17060: u8 [a0 + 7] = 0\n 17063: u8 [a0 + 6] = 0\n 17066: u8 [a0 + 5] = 0\n 17069: u8 [a0 + 4] = 0\n 17072: jump @279 if a1 == 0\n      : @249 (gas: 19)\n 17076: a0 = u64 [sp + 0x30]\n 17079: a0 = reverse a0\n 17081: a1 = a0 >> 0x20\n 17084: a2 = u64 [sp + 0x38]\n 17087: a2 = reverse a2\n 17089: a3 = a2 << 0x20\n 17092: a1 = a1 | a3\n 17095: u64 [sp + 0x38] = a1\n 17098: a0 = a0 << 0x20\n 17101: a1 = u64 [sp + 0x40]\n 17104: a1 = reverse a1\n 17106: a1 = a1 >> 0x20\n 17109: a0 = a0 | a1\n 17112: u64 [sp + 0x40] = a0\n 17115: s1 = a2 >> 0x20\n 17118: a0 = u64 [sp + 0x78]\n 17121: i32 a0 = a0 + 0x4\n 17124: a1 = 0x20\n 17127: ra = 214, jump @0\n      : @250 [@dyn 107] (gas: 82)\n 17133: a1 = reverse s1\n 17135: a2 = u64 [sp + 0x38]\n 17138: a2 = reverse a2\n 17140: a3 = u64 [sp + 0x40]\n 17143: a3 = reverse a3\n 17145: a4 = a3 >> 0x38\n 17148: u8 [a0 + 0x1f] = a4\n 17151: a4 = a3 >> 0x30\n 17154: u8 [a0 + 0x1e] = a4\n 17157: a4 = a3 >> 0x28\n 17160: u8 [a0 + 0x1d] = a4\n 17163: a4 = a3 >> 0x20\n 17166: u8 [a0 + 0x1c] = a4\n 17169: a4 = a3 >> 0x18\n 17172: u8 [a0 + 0x1b] = a4\n 17175: a4 = a3 >> 0x10\n 17178: u8 [a0 + 0x1a] = a4\n 17181: a4 = a3 >> 0x8\n 17184: u8 [a0 + 0x19] = a4\n 17187: u8 [a0 + 0x18] = a3\n 17190: u8 [a0 + 0x10] = a2\n 17193: u8 [a0 + 11] = 0\n 17196: u8 [a0 + 10] = 0\n 17199: u8 [a0 + 9] = 0\n 17202: u8 [a0 + 7] = 0\n 17205: u8 [a0 + 6] = 0\n 17208: u8 [a0 + 5] = 0\n 17211: u8 [a0 + 4] = 0\n 17214: u8 [a0 + 3] = 0\n 17217: u8 [a0 + 2] = 0\n 17220: u8 [a0 + 1] = 0\n 17223: u8 [a0 + 0] = 0\n 17225: a3 = a2 >> 0x38\n 17228: u8 [a0 + 0x17] = a3\n 17231: a3 = a2 >> 0x30\n 17234: u8 [a0 + 0x16] = a3\n 17237: a3 = a2 >> 0x28\n 17240: u8 [a0 + 0x15] = a3\n 17243: a3 = a2 >> 0x20\n 17246: u8 [a0 + 0x14] = a3\n 17249: a3 = a2 >> 0x18\n 17252: u8 [a0 + 0x13] = a3\n 17255: a3 = a2 >> 0x10\n 17258: u8 [a0 + 0x12] = a3\n 17261: a2 = a2 >> 0x8\n 17264: u8 [a0 + 0x11] = a2\n 17267: u8 [a0 + 0x8] = a1\n 17270: a2 = a1 >> 0x38\n 17273: u8 [a0 + 0xf] = a2\n 17276: a2 = a1 >> 0x30\n 17279: u8 [a0 + 0xe] = a2\n 17282: a2 = a1 >> 0x28\n 17285: u8 [a0 + 0xd] = a2\n 17288: a1 = a1 >> 0x20\n 17291: u8 [a0 + 0xc] = a1\n 17294: ecalli 10 // 'ref_time_left'\n 17296: a0 = u64 [sp + 0x68]\n 17299: a2 = reverse a0\n 17301: a0 = a2 << 0x20\n 17304: a1 = u64 [sp + 0x70]\n 17307: a1 = reverse a1\n 17309: a1 = a1 >> 0x20\n 17312: a0 = a0 | a1\n 17315: a1 = u64 [sp + 0x60]\n 17318: a3 = reverse a1\n 17320: a1 = a3 << 0x20\n 17323: u64 [sp + 0x38] = a2\n 17326: a2 = a2 >> 0x20\n 17329: a1 = a1 | a2\n 17332: u64 [sp + 0x30] = a3\n 17335: a2 = a3 >> 0x20\n 17338: u64 [sp + 0x1a8] = a1\n 17342: u64 [sp + 0x1a0] = a0\n 17346: u32 [sp + 0x1b0] = a2\n 17350: u64 [sp + 472] = 0\n 17354: u64 [sp + 464] = 0\n 17358: u64 [sp + 456] = 0\n 17362: u64 [sp + 448] = 0\n 17366: a1 = 0x24\n 17369: s1 = u64 [sp + 0x78]\n 17372: a0 = s1\n 17374: ra = 216, jump @0\n      : @251 [@dyn 108] (gas: 4)\n 17380: u64 [sp + 0x40] = a0\n 17383: a1 = 0x20\n 17386: a0 = s1\n 17388: ra = 218, jump @0\n      : @252 [@dyn 109] (gas: 31)\n 17394: u32 [sp + 480] = 0x20\n 17399: u64 [sp + 536] = 0\n 17403: u64 [sp + 528] = 0\n 17407: u64 [sp + 520] = 0\n 17411: u64 [sp + 512] = 0\n 17415: a1 = sp + 0x1a0\n 17419: a1 = a1 << 0x20\n 17422: a1 = a1 >> 0x20\n 17425: a2 = 0x1800000000\n 17435: s1 = a1 | a2\n 17438: a1 = sp + 0x1c0\n 17442: a1 = a1 << 0x20\n 17445: a1 = a1 >> 0x20\n 17448: a2 = sp + 0x200\n 17452: a2 = a2 << 0x20\n 17455: a3 = a2 | a1\n 17458: a1 = u64 [sp + 0x40]\n 17461: a1 = a1 << 0x20\n 17464: a1 = a1 >> 0x20\n 17467: a2 = 0x2400000000\n 17477: a4 = a1 | a2\n 17480: a0 = a0 << 0x20\n 17483: a0 = a0 >> 0x20\n 17486: a1 = sp + 0x1e0\n 17490: a1 = a1 << 0x20\n 17493: a5 = a1 | a0\n 17496: a1 = 0xffffffffffffffff\n 17499: a2 = 0xffffffffffffffff\n 17502: a0 = s1\n 17504: ecalli 1 // 'call'\n 17506: fallthrough\n      : @253 (gas: 1)\n 17507: jump @273 if a0 != 0\n      : @254 (gas: 2)\n 17511: ecalli 12 // 'return_data_size'\n 17513: fallthrough\n      : @255 (gas: 1)\n 17514: jump @257 if a0 >u 31\n      : @256 (gas: 3)\n 17518: ecalli 12 // 'return_data_size'\n 17520: a4 = 0\n 17522: jump @258\n      : @257 (gas: 3)\n 17524: a4 = 0\n 17526: a0 = 0x20\n 17529: fallthrough\n      : @258 (gas: 27)\n 17530: a3 = u64 [sp + 0x58]\n 17533: a2 = u64 [sp + 0x48]\n 17536: s1 = u64 [sp + 0x50]\n 17539: a5 = a0 + 0x1f\n 17542: u64 [sp + 0x50] = a0\n 17545: a1 = a5 <u a0\n 17548: u64 [sp + 88] = 0\n 17551: a1 = a1 & 0x1\n 17554: a0 = a5 & 0xffffffffffffffe0\n 17557: a2 = a2 + a0\n 17560: u64 [sp + 0x48] = a2\n 17563: a0 = a2 <u a0\n 17566: s1 = s1 + a1\n 17569: s1 = s1 + a0\n 17572: a2 = s1 ^ a1\n 17575: a1 = s1 <u a1\n 17578: a1 = a0 if a2 == 0\n 17581: a0 = u64 [sp + 0x18]\n 17584: a1 = a1 + a0\n 17587: a0 = a1 <u a0\n 17590: a0 = a0 + a3\n 17593: u64 [sp + 0x40] = a1\n 17596: u64 [sp + 0x18] = a0\n 17599: a0 = a0 | a1\n 17602: a1 = s1 <u 0x1\n 17605: a1 = 0 if a0 != 0\n 17607: jump @282 if a1 == 0\n      : @259 (gas: 3)\n 17611: a0 = 0x40\n 17614: a1 = 0x20\n 17617: ra = 220, jump @0\n      : @260 [@dyn 110] (gas: 79)\n 17623: a1 = u64 [sp + 0x18]\n 17626: a1 = reverse a1\n 17628: a2 = u64 [sp + 0x40]\n 17631: a2 = reverse a2\n 17633: a3 = reverse s1\n 17635: a4 = u64 [sp + 0x48]\n 17638: a4 = reverse a4\n 17640: u8 [a0 + 0x18] = a4\n 17643: a5 = a4 >> 0x38\n 17646: u8 [a0 + 0x1f] = a5\n 17649: a5 = a4 >> 0x30\n 17652: u8 [a0 + 0x1e] = a5\n 17655: a5 = a4 >> 0x28\n 17658: u8 [a0 + 0x1d] = a5\n 17661: a5 = a4 >> 0x20\n 17664: u8 [a0 + 0x1c] = a5\n 17667: a5 = a4 >> 0x18\n 17670: u8 [a0 + 0x1b] = a5\n 17673: a5 = a4 >> 0x10\n 17676: u8 [a0 + 0x1a] = a5\n 17679: a4 = a4 >> 0x8\n 17682: u8 [a0 + 0x19] = a4\n 17685: u8 [a0 + 0x10] = a3\n 17688: a4 = a3 >> 0x38\n 17691: u8 [a0 + 0x17] = a4\n 17694: a4 = a3 >> 0x30\n 17697: u8 [a0 + 0x16] = a4\n 17700: a4 = a3 >> 0x28\n 17703: u8 [a0 + 0x15] = a4\n 17706: a4 = a3 >> 0x20\n 17709: u8 [a0 + 0x14] = a4\n 17712: a4 = a3 >> 0x18\n 17715: u8 [a0 + 0x13] = a4\n 17718: a4 = a3 >> 0x10\n 17721: u8 [a0 + 0x12] = a4\n 17724: a3 = a3 >> 0x8\n 17727: u8 [a0 + 0x11] = a3\n 17730: u8 [a0 + 0x8] = a2\n 17733: a3 = a2 >> 0x38\n 17736: u8 [a0 + 0xf] = a3\n 17739: a3 = a2 >> 0x30\n 17742: u8 [a0 + 0xe] = a3\n 17745: a3 = a2 >> 0x28\n 17748: u8 [a0 + 0xd] = a3\n 17751: a3 = a2 >> 0x20\n 17754: u8 [a0 + 0xc] = a3\n 17757: a3 = a2 >> 0x18\n 17760: u8 [a0 + 0xb] = a3\n 17763: a3 = a2 >> 0x10\n 17766: u8 [a0 + 0xa] = a3\n 17769: a2 = a2 >> 0x8\n 17772: u8 [a0 + 0x9] = a2\n 17775: u8 [a0] = a1\n 17777: a2 = a1 >> 0x38\n 17780: u8 [a0 + 0x7] = a2\n 17783: a2 = a1 >> 0x30\n 17786: u8 [a0 + 0x6] = a2\n 17789: a2 = a1 >> 0x28\n 17792: u8 [a0 + 0x5] = a2\n 17795: a2 = a1 >> 0x20\n 17798: u8 [a0 + 0x4] = a2\n 17801: a2 = a1 >> 0x18\n 17804: u8 [a0 + 0x3] = a2\n 17807: a2 = a1 >> 0x10\n 17810: u8 [a0 + 0x2] = a2\n 17813: a1 = a1 >> 0x8\n 17816: a5 = u64 [sp + 0x58]\n 17819: a2 = a5 >u 0\n 17821: a3 = u64 [sp + 0x50]\n 17824: a3 = a3 <u 0x20\n 17827: a3 = a3 ^ 0x1\n 17830: a3 = a2 if a5 != 0\n 17833: a2 = a5 >u 0\n 17835: a4 = a5 >u 0\n 17837: a4 = a2 if a5 == 0\n 17840: a2 = a5 | a5\n 17843: a4 = a3 if a2 == 0\n 17846: u8 [a0 + 0x1] = a1\n 17849: jump @280 if a4 == 0\n      : @261 (gas: 3)\n 17853: a1 = 0x20\n 17856: a0 = u64 [sp + 0x78]\n 17859: ra = 222, jump @0\n      : @262 [@dyn 111] (gas: 95)\n 17865: a1 = u8 [a0 + 0x19]\n 17868: a2 = u8 [a0 + 0x18]\n 17871: a3 = u8 [a0 + 0x1a]\n 17874: a4 = u8 [a0 + 0x1b]\n 17877: a1 = a1 << 0x8\n 17880: a1 = a1 | a2\n 17883: a3 = a3 << 0x10\n 17886: a4 = a4 << 0x18\n 17889: a3 = a3 | a4\n 17892: a1 = a1 | a3\n 17895: a2 = u8 [a0 + 0x1d]\n 17898: a3 = u8 [a0 + 0x1c]\n 17901: a4 = u8 [a0 + 0x1e]\n 17904: a5 = u8 [a0 + 0x1f]\n 17907: a2 = a2 << 0x8\n 17910: a2 = a2 | a3\n 17913: a4 = a4 << 0x10\n 17916: a5 = a5 << 0x18\n 17919: a4 = a4 | a5\n 17922: a2 = a2 | a4\n 17925: a2 = a2 << 0x20\n 17928: t0 = a2 | a1\n 17931: a2 = u8 [a0 + 0x11]\n 17934: a3 = u8 [a0 + 0x10]\n 17937: a4 = u8 [a0 + 0x12]\n 17940: a5 = u8 [a0 + 0x13]\n 17943: a2 = a2 << 0x8\n 17946: a2 = a2 | a3\n 17949: a4 = a4 << 0x10\n 17952: a5 = a5 << 0x18\n 17955: a4 = a4 | a5\n 17958: a2 = a2 | a4\n 17961: a3 = u8 [a0 + 0x15]\n 17964: a4 = u8 [a0 + 0x14]\n 17967: a5 = u8 [a0 + 0x16]\n 17970: s1 = u8 [a0 + 0x17]\n 17973: a3 = a3 << 0x8\n 17976: a3 = a3 | a4\n 17979: a5 = a5 << 0x10\n 17982: s1 = s1 << 0x18\n 17985: a5 = a5 | s1\n 17988: a3 = a3 | a5\n 17991: a3 = a3 << 0x20\n 17994: t1 = a3 | a2\n 17997: a3 = u8 [a0 + 0x1]\n 18000: a4 = u8 [a0]\n 18002: a5 = u8 [a0 + 0x2]\n 18005: s1 = u8 [a0 + 0x3]\n 18008: a3 = a3 << 0x8\n 18011: a3 = a3 | a4\n 18014: a5 = a5 << 0x10\n 18017: s1 = s1 << 0x18\n 18020: a5 = a5 | s1\n 18023: a3 = a3 | a5\n 18026: a4 = u8 [a0 + 0x9]\n 18029: a5 = u8 [a0 + 0x8]\n 18032: s1 = u8 [a0 + 0xa]\n 18035: a1 = u8 [a0 + 0xb]\n 18038: a4 = a4 << 0x8\n 18041: a4 = a4 | a5\n 18044: s1 = s1 << 0x10\n 18047: a1 = a1 << 0x18\n 18050: a1 = a1 | s1\n 18053: a4 = a4 | a1\n 18056: a1 = u8 [a0 + 0x5]\n 18059: a5 = u8 [a0 + 0x4]\n 18062: s1 = u8 [a0 + 0x6]\n 18065: a2 = u8 [a0 + 0x7]\n 18068: a1 = a1 << 0x8\n 18071: a1 = a1 | a5\n 18074: s1 = s1 << 0x10\n 18077: a2 = a2 << 0x18\n 18080: a2 = a2 | s1\n 18083: a1 = a1 | a2\n 18086: a2 = u8 [a0 + 0xd]\n 18089: a5 = u8 [a0 + 0xc]\n 18092: s1 = u8 [a0 + 0xe]\n 18095: a0 = u8 [a0 + 0xf]\n 18098: a2 = a2 << 0x8\n 18101: a2 = a2 | a5\n 18104: s1 = s1 << 0x10\n 18107: a0 = a0 << 0x18\n 18110: a0 = a0 | s1\n 18113: a0 = a0 | a2\n 18116: a2 = reverse t1\n 18118: a5 = reverse t0\n 18120: a5 = a5 <u 0x2\n 18123: a5 = 0 if a2 != 0\n 18125: a0 = a0 | a1\n 18128: a0 = a0 << 0x20\n 18131: a3 = a3 | a4\n 18134: a0 = a0 | a3\n 18137: a0 = reverse a0\n 18139: a5 = 0 if a0 != 0\n 18141: jump @280 if a5 == 0\n      : @263 (gas: 15)\n 18145: a0 = u64 [sp + 0x60]\n 18148: u64 [sp + 0x100] = a0\n 18152: u64 [sp + 312] = 0\n 18156: u64 [sp + 304] = 0\n 18160: u64 [sp + 296] = 0\n 18164: u64 [sp + 288] = 0\n 18168: a0 = u64 [sp + 0x68]\n 18171: u64 [sp + 0x108] = a0\n 18175: a0 = u64 [sp + 0x70]\n 18178: u64 [sp + 0x110] = a0\n 18182: a0 = sp + 0x120\n 18186: a1 = sp + 0x100\n 18190: a2 = u64 [sp + 0x20]\n 18193: u64 [sp + 0x118] = a2\n 18197: ra = 224, jump @236\n      : @264 [@dyn 112] (gas: 11)\n 18203: i32 a0 = sp + 0x220\n 18207: ecalli 5 // 'caller'\n 18209: a0 = u32 [sp + 0x230]\n 18213: u64 [sp + 0x70] = a0\n 18216: a0 = u64 [sp + 0x228]\n 18220: u64 [sp + 0x68] = a0\n 18223: a0 = u64 [sp + 0x220]\n 18227: u64 [sp + 0x78] = a0\n 18230: a0 = 0x40\n 18233: a1 = 0x20\n 18236: ra = 226, jump @0\n      : @265 [@dyn 113] (gas: 100)\n 18242: a1 = u8 [a0 + 0x11]\n 18245: a2 = u8 [a0 + 0x10]\n 18248: a3 = u8 [a0 + 0x12]\n 18251: a4 = u8 [a0 + 0x13]\n 18254: a1 = a1 << 0x8\n 18257: a1 = a1 | a2\n 18260: a3 = a3 << 0x10\n 18263: a4 = a4 << 0x18\n 18266: a3 = a3 | a4\n 18269: a1 = a1 | a3\n 18272: a2 = u8 [a0 + 0x15]\n 18275: a3 = u8 [a0 + 0x14]\n 18278: a4 = u8 [a0 + 0x16]\n 18281: a5 = u8 [a0 + 0x17]\n 18284: a2 = a2 << 0x8\n 18287: a2 = a2 | a3\n 18290: a4 = a4 << 0x10\n 18293: a5 = a5 << 0x18\n 18296: a4 = a4 | a5\n 18299: a2 = a2 | a4\n 18302: a2 = a2 << 0x20\n 18305: t0 = a2 | a1\n 18308: a2 = u8 [a0 + 0x1]\n 18311: a3 = u8 [a0]\n 18313: a4 = u8 [a0 + 0x2]\n 18316: a5 = u8 [a0 + 0x3]\n 18319: a2 = a2 << 0x8\n 18322: a2 = a2 | a3\n 18325: a4 = a4 << 0x10\n 18328: a5 = a5 << 0x18\n 18331: a4 = a4 | a5\n 18334: a2 = a2 | a4\n 18337: a3 = u8 [a0 + 0x5]\n 18340: a4 = u8 [a0 + 0x4]\n 18343: a5 = u8 [a0 + 0x6]\n 18346: s1 = u8 [a0 + 0x7]\n 18349: a3 = a3 << 0x8\n 18352: a3 = a3 | a4\n 18355: a5 = a5 << 0x10\n 18358: s1 = s1 << 0x18\n 18361: a5 = a5 | s1\n 18364: a3 = a3 | a5\n 18367: a3 = a3 << 0x20\n 18370: a2 = a2 | a3\n 18373: a3 = u8 [a0 + 0x19]\n 18376: a4 = u8 [a0 + 0x18]\n 18379: a5 = u8 [a0 + 0x1a]\n 18382: s1 = u8 [a0 + 0x1b]\n 18385: a3 = a3 << 0x8\n 18388: a3 = a3 | a4\n 18391: a5 = a5 << 0x10\n 18394: s1 = s1 << 0x18\n 18397: a5 = a5 | s1\n 18400: a3 = a3 | a5\n 18403: a4 = u8 [a0 + 0x1d]\n 18406: a5 = u8 [a0 + 0x1c]\n 18409: s1 = u8 [a0 + 0x1e]\n 18412: a1 = u8 [a0 + 0x1f]\n 18415: a4 = a4 << 0x8\n 18418: a4 = a4 | a5\n 18421: s1 = s1 << 0x10\n 18424: a1 = a1 << 0x18\n 18427: a1 = a1 | s1\n 18430: a1 = a1 | a4\n 18433: a1 = a1 << 0x20\n 18436: a3 = a3 | a1\n 18439: a1 = u8 [a0 + 0x9]\n 18442: a4 = u8 [a0 + 0x8]\n 18445: a5 = u8 [a0 + 0xa]\n 18448: s1 = u8 [a0 + 0xb]\n 18451: a1 = a1 << 0x8\n 18454: a1 = a1 | a4\n 18457: a5 = a5 << 0x10\n 18460: s1 = s1 << 0x18\n 18463: a5 = a5 | s1\n 18466: a1 = a1 | a5\n 18469: a4 = u8 [a0 + 0xd]\n 18472: a5 = u8 [a0 + 0xc]\n 18475: s1 = u8 [a0 + 0xe]\n 18478: a0 = u8 [a0 + 0xf]\n 18481: a4 = a4 << 0x8\n 18484: a4 = a4 | a5\n 18487: s1 = s1 << 0x10\n 18490: a0 = a0 << 0x18\n 18493: a0 = a0 | s1\n 18496: a0 = a0 | a4\n 18499: a0 = a0 << 0x20\n 18502: a0 = a0 | a1\n 18505: a1 = reverse a0\n 18507: a0 = reverse a3\n 18509: a2 = reverse a2\n 18511: a3 = reverse t0\n 18513: a2 = a2 | a3\n 18516: a3 = a0 | a1\n 18519: a3 = a3 | a2\n 18522: a3 = a3 >> 0x20\n 18525: a1 = a1 | a2\n 18528: a1 = a1 << 0x20\n 18531: a1 = a1 | a3\n 18534: jump @279 if a1 != 0\n      : @266 (gas: 17)\n 18538: s1 = u64 [sp + 0x78]\n 18541: a1 = reverse s1\n 18543: a1 = a1 << 0x20\n 18546: a2 = u64 [sp + 0x68]\n 18549: a2 = reverse a2\n 18551: a3 = a2 >> 0x20\n 18554: a1 = a1 | a3\n 18557: u64 [sp + 0x68] = a1\n 18560: a2 = a2 << 0x20\n 18563: a1 = u64 [sp + 0x70]\n 18566: a1 = reverse a1\n 18568: a1 = a1 >> 0x20\n 18571: a1 = a1 | a2\n 18574: u64 [sp + 0x70] = a1\n 18577: i32 a0 = a0 + 0\n 18579: a1 = 0\n 18581: ra = 228, jump @0\n      : @267 [@dyn 114] (gas: 36)\n 18587: a1 = u64 [0x20000]\n 18592: a2 = u64 [0x20008]\n 18597: a3 = u64 [0x20010]\n 18602: a4 = u64 [0x20018]\n 18607: u64 [sp + 0x258] = a1\n 18611: u64 [sp + 0x250] = a2\n 18615: u64 [sp + 0x248] = a3\n 18619: u64 [sp + 0x240] = a4\n 18623: a1 = u64 [sp + 0x70]\n 18626: a1 = reverse a1\n 18628: a2 = u64 [sp + 0x68]\n 18631: a2 = reverse a2\n 18633: a3 = s1 << 0x20\n 18636: u64 [sp + 0x268] = a3\n 18640: u64 [sp + 608] = 0\n 18644: u64 [sp + 0x270] = a2\n 18648: u64 [sp + 0x278] = a1\n 18652: a1 = u64 [sp + 0x28]\n 18655: a1 = reverse a1\n 18657: a2 = u64 [sp + 0x30]\n 18660: u64 [sp + 0x298] = a2\n 18664: a2 = u64 [sp + 0x38]\n 18667: u64 [sp + 0x290] = a2\n 18671: u64 [sp + 640] = 0\n 18675: u64 [sp + 0x288] = a1\n 18679: i32 a2 = a0 + 0\n 18681: i32 a0 = sp + 0x240\n 18685: a1 = 0x3\n 18688: a3 = 0\n 18690: ecalli 6 // 'deposit_event'\n 18692: sp = s0 + 0xfffffffffffffd40\n 18696: ra = u64 [sp + 0x2b8]\n 18700: s0 = u64 [sp + 0x2b0]\n 18704: s1 = u64 [sp + 0x2a8]\n 18708: sp = sp + 0x2c0\n 18712: ret\n      : @268 (gas: 3)\n 18714: a0 = 0x40\n 18717: a1 = 0x20\n 18720: ra = 230, jump @0\n      : @269 [@dyn 115] (gas: 103)\n 18726: a1 = u8 [a0 + 0x11]\n 18729: a2 = u8 [a0 + 0x10]\n 18732: a3 = u8 [a0 + 0x12]\n 18735: a4 = u8 [a0 + 0x13]\n 18738: a1 = a1 << 0x8\n 18741: a1 = a1 | a2\n 18744: a3 = a3 << 0x10\n 18747: a4 = a4 << 0x18\n 18750: a3 = a3 | a4\n 18753: a1 = a1 | a3\n 18756: a2 = u8 [a0 + 0x15]\n 18759: a3 = u8 [a0 + 0x14]\n 18762: a4 = u8 [a0 + 0x16]\n 18765: a5 = u8 [a0 + 0x17]\n 18768: a2 = a2 << 0x8\n 18771: a2 = a2 | a3\n 18774: a4 = a4 << 0x10\n 18777: a5 = a5 << 0x18\n 18780: a4 = a4 | a5\n 18783: a2 = a2 | a4\n 18786: a2 = a2 << 0x20\n 18789: t0 = a2 | a1\n 18792: a2 = u8 [a0 + 0x1]\n 18795: a3 = u8 [a0]\n 18797: a4 = u8 [a0 + 0x2]\n 18800: a5 = u8 [a0 + 0x3]\n 18803: a2 = a2 << 0x8\n 18806: a2 = a2 | a3\n 18809: a4 = a4 << 0x10\n 18812: a5 = a5 << 0x18\n 18815: a4 = a4 | a5\n 18818: a2 = a2 | a4\n 18821: a3 = u8 [a0 + 0x5]\n 18824: a4 = u8 [a0 + 0x4]\n 18827: a5 = u8 [a0 + 0x6]\n 18830: s1 = u8 [a0 + 0x7]\n 18833: a3 = a3 << 0x8\n 18836: a3 = a3 | a4\n 18839: a5 = a5 << 0x10\n 18842: s1 = s1 << 0x18\n 18845: a5 = a5 | s1\n 18848: a3 = a3 | a5\n 18851: a3 = a3 << 0x20\n 18854: a2 = a2 | a3\n 18857: a3 = u8 [a0 + 0x19]\n 18860: a4 = u8 [a0 + 0x18]\n 18863: a5 = u8 [a0 + 0x1a]\n 18866: s1 = u8 [a0 + 0x1b]\n 18869: a3 = a3 << 0x8\n 18872: a3 = a3 | a4\n 18875: a5 = a5 << 0x10\n 18878: s1 = s1 << 0x18\n 18881: a5 = a5 | s1\n 18884: a3 = a3 | a5\n 18887: a4 = u8 [a0 + 0x1d]\n 18890: a5 = u8 [a0 + 0x1c]\n 18893: s1 = u8 [a0 + 0x1e]\n 18896: a1 = u8 [a0 + 0x1f]\n 18899: a4 = a4 << 0x8\n 18902: a4 = a4 | a5\n 18905: s1 = s1 << 0x10\n 18908: a1 = a1 << 0x18\n 18911: a1 = a1 | s1\n 18914: a1 = a1 | a4\n 18917: a1 = a1 << 0x20\n 18920: a3 = a3 | a1\n 18923: a1 = u8 [a0 + 0x9]\n 18926: a4 = u8 [a0 + 0x8]\n 18929: a5 = u8 [a0 + 0xa]\n 18932: s1 = u8 [a0 + 0xb]\n 18935: a1 = a1 << 0x8\n 18938: a1 = a1 | a4\n 18941: a5 = a5 << 0x10\n 18944: s1 = s1 << 0x18\n 18947: a5 = a5 | s1\n 18950: a1 = a1 | a5\n 18953: a4 = u8 [a0 + 0xd]\n 18956: a5 = u8 [a0 + 0xc]\n 18959: s1 = u8 [a0 + 0xe]\n 18962: a0 = u8 [a0 + 0xf]\n 18965: a4 = a4 << 0x8\n 18968: a4 = a4 | a5\n 18971: s1 = s1 << 0x10\n 18974: a0 = a0 << 0x18\n 18977: a0 = a0 | s1\n 18980: a0 = a0 | a4\n 18983: a0 = a0 << 0x20\n 18986: a0 = a0 | a1\n 18989: s1 = reverse a0\n 18991: a1 = reverse a3\n 18993: a2 = reverse a2\n 18995: a0 = reverse t0\n 18997: u64 [sp + 0x78] = a0\n 19000: u64 [sp + 0x70] = a2\n 19003: a0 = a0 | a2\n 19006: a2 = a1\n 19008: a1 = a1 | s1\n 19011: a1 = a1 | a0\n 19014: a1 = a1 >> 0x20\n 19017: a0 = a0 | s1\n 19020: a0 = a0 << 0x20\n 19023: a0 = a0 | a1\n 19026: jump @279 if a0 != 0\n      : @270 (gas: 5)\n 19030: u64 [sp + 0x68] = a2\n 19033: i32 a0 = a2 + 0\n 19035: a1 = 0x20\n 19038: u64 [sp + 0x60] = a0\n 19041: ra = 232, jump @0\n      : @271 [@dyn 116] (gas: 50)\n 19047: u8 [a0 + 31] = 0\n 19050: u8 [a0 + 30] = 0\n 19053: u8 [a0 + 29] = 0\n 19056: u8 [a0 + 28] = 0\n 19059: u8 [a0 + 27] = 0\n 19062: u8 [a0 + 26] = 0\n 19065: u8 [a0 + 25] = 0\n 19068: u8 [a0 + 24] = 0\n 19071: u8 [a0 + 23] = 0\n 19074: u8 [a0 + 22] = 0\n 19077: u8 [a0 + 21] = 0\n 19080: u8 [a0 + 20] = 0\n 19083: u8 [a0 + 19] = 0\n 19086: u8 [a0 + 18] = 0\n 19089: u8 [a0 + 17] = 0\n 19092: u8 [a0 + 16] = 0\n 19095: u8 [a0 + 15] = 0\n 19098: u8 [a0 + 14] = 0\n 19101: u8 [a0 + 13] = 0\n 19104: u8 [a0 + 12] = 0\n 19107: u8 [a0 + 11] = 0\n 19110: u8 [a0 + 10] = 0\n 19113: u8 [a0 + 9] = 0\n 19116: u8 [a0 + 8] = 0\n 19119: u8 [a0 + 7] = 0\n 19122: u8 [a0 + 6] = 0\n 19125: u8 [a0 + 5] = 0\n 19128: u8 [a0 + 4] = 0\n 19131: u8 [a0 + 3] = 0xa0\n 19136: u8 [a0 + 2] = 0x79\n 19140: u8 [a0 + 1] = 0xc3\n 19145: u8 [a0 + 0] = 0x8\n 19148: a1 = u64 [sp + 0x68]\n 19151: a0 = a1 + 0x4\n 19154: a1 = a0 <u a1\n 19157: a3 = u64 [sp + 0x78]\n 19160: a2 = a3 + a1\n 19163: a3 = a2 <u a3\n 19166: a3 = a1 if a1 == 0\n 19169: a3 = a3 + s1\n 19172: a1 = a3 <u s1\n 19175: a4 = u64 [sp + 0x70]\n 19178: a4 = a4 + a1\n 19181: u64 [sp + 0x88] = a2\n 19185: u64 [sp + 0x80] = a0\n 19189: u64 [sp + 0x90] = a3\n 19193: a0 = sp + 0xa0\n 19197: a1 = sp + 0x80\n 19201: u64 [sp + 0x98] = a4\n 19205: ra = 234, jump @204\n      : @272 [@dyn 117] (gas: 5)\n 19211: a0 = u64 [sp + 0xa8]\n 19215: t0 = u64 [sp + 0xb8]\n 19219: t1 = u64 [sp + 0xa0]\n 19223: a3 = u64 [sp + 0xb0]\n 19227: jump @278\n      : @273 (gas: 3)\n 19230: a0 = 0x40\n 19233: a1 = 0x20\n 19236: ra = 236, jump @0\n      : @274 [@dyn 118] (gas: 103)\n 19242: a1 = u8 [a0 + 0x11]\n 19245: a2 = u8 [a0 + 0x10]\n 19248: a3 = u8 [a0 + 0x12]\n 19251: a4 = u8 [a0 + 0x13]\n 19254: a1 = a1 << 0x8\n 19257: a1 = a1 | a2\n 19260: a3 = a3 << 0x10\n 19263: a4 = a4 << 0x18\n 19266: a3 = a3 | a4\n 19269: a1 = a1 | a3\n 19272: a2 = u8 [a0 + 0x15]\n 19275: a3 = u8 [a0 + 0x14]\n 19278: a4 = u8 [a0 + 0x16]\n 19281: a5 = u8 [a0 + 0x17]\n 19284: a2 = a2 << 0x8\n 19287: a2 = a2 | a3\n 19290: a4 = a4 << 0x10\n 19293: a5 = a5 << 0x18\n 19296: a4 = a4 | a5\n 19299: a2 = a2 | a4\n 19302: a2 = a2 << 0x20\n 19305: t0 = a2 | a1\n 19308: a2 = u8 [a0 + 0x1]\n 19311: a3 = u8 [a0]\n 19313: a4 = u8 [a0 + 0x2]\n 19316: a5 = u8 [a0 + 0x3]\n 19319: a2 = a2 << 0x8\n 19322: a2 = a2 | a3\n 19325: a4 = a4 << 0x10\n 19328: a5 = a5 << 0x18\n 19331: a4 = a4 | a5\n 19334: a2 = a2 | a4\n 19337: a3 = u8 [a0 + 0x5]\n 19340: a4 = u8 [a0 + 0x4]\n 19343: a5 = u8 [a0 + 0x6]\n 19346: s1 = u8 [a0 + 0x7]\n 19349: a3 = a3 << 0x8\n 19352: a3 = a3 | a4\n 19355: a5 = a5 << 0x10\n 19358: s1 = s1 << 0x18\n 19361: a5 = a5 | s1\n 19364: a3 = a3 | a5\n 19367: a3 = a3 << 0x20\n 19370: a2 = a2 | a3\n 19373: a3 = u8 [a0 + 0x19]\n 19376: a4 = u8 [a0 + 0x18]\n 19379: a5 = u8 [a0 + 0x1a]\n 19382: s1 = u8 [a0 + 0x1b]\n 19385: a3 = a3 << 0x8\n 19388: a3 = a3 | a4\n 19391: a5 = a5 << 0x10\n 19394: s1 = s1 << 0x18\n 19397: a5 = a5 | s1\n 19400: a3 = a3 | a5\n 19403: a4 = u8 [a0 + 0x1d]\n 19406: a5 = u8 [a0 + 0x1c]\n 19409: s1 = u8 [a0 + 0x1e]\n 19412: a1 = u8 [a0 + 0x1f]\n 19415: a4 = a4 << 0x8\n 19418: a4 = a4 | a5\n 19421: s1 = s1 << 0x10\n 19424: a1 = a1 << 0x18\n 19427: a1 = a1 | s1\n 19430: a1 = a1 | a4\n 19433: a1 = a1 << 0x20\n 19436: a3 = a3 | a1\n 19439: a1 = u8 [a0 + 0x9]\n 19442: a4 = u8 [a0 + 0x8]\n 19445: a5 = u8 [a0 + 0xa]\n 19448: s1 = u8 [a0 + 0xb]\n 19451: a1 = a1 << 0x8\n 19454: a1 = a1 | a4\n 19457: a5 = a5 << 0x10\n 19460: s1 = s1 << 0x18\n 19463: a5 = a5 | s1\n 19466: a1 = a1 | a5\n 19469: a4 = u8 [a0 + 0xd]\n 19472: a5 = u8 [a0 + 0xc]\n 19475: s1 = u8 [a0 + 0xe]\n 19478: a0 = u8 [a0 + 0xf]\n 19481: a4 = a4 << 0x8\n 19484: a4 = a4 | a5\n 19487: s1 = s1 << 0x10\n 19490: a0 = a0 << 0x18\n 19493: a0 = a0 | s1\n 19496: a0 = a0 | a4\n 19499: a0 = a0 << 0x20\n 19502: a0 = a0 | a1\n 19505: s1 = reverse a0\n 19507: a1 = reverse a3\n 19509: a2 = reverse a2\n 19511: a0 = reverse t0\n 19513: u64 [sp + 0x78] = a0\n 19516: u64 [sp + 0x70] = a2\n 19519: a0 = a0 | a2\n 19522: a2 = a1\n 19524: a1 = a1 | s1\n 19527: a1 = a1 | a0\n 19530: a1 = a1 >> 0x20\n 19533: a0 = a0 | s1\n 19536: a0 = a0 << 0x20\n 19539: a0 = a0 | a1\n 19542: jump @279 if a0 != 0\n      : @275 (gas: 5)\n 19546: u64 [sp + 0x68] = a2\n 19549: i32 a0 = a2 + 0\n 19551: a1 = 0x20\n 19554: u64 [sp + 0x60] = a0\n 19557: ra = 238, jump @0\n      : @276 [@dyn 119] (gas: 50)\n 19563: u8 [a0 + 31] = 0\n 19566: u8 [a0 + 30] = 0\n 19569: u8 [a0 + 29] = 0\n 19572: u8 [a0 + 28] = 0\n 19575: u8 [a0 + 27] = 0\n 19578: u8 [a0 + 26] = 0\n 19581: u8 [a0 + 25] = 0\n 19584: u8 [a0 + 24] = 0\n 19587: u8 [a0 + 23] = 0\n 19590: u8 [a0 + 22] = 0\n 19593: u8 [a0 + 21] = 0\n 19596: u8 [a0 + 20] = 0\n 19599: u8 [a0 + 19] = 0\n 19602: u8 [a0 + 18] = 0\n 19605: u8 [a0 + 17] = 0\n 19608: u8 [a0 + 16] = 0\n 19611: u8 [a0 + 15] = 0\n 19614: u8 [a0 + 14] = 0\n 19617: u8 [a0 + 13] = 0\n 19620: u8 [a0 + 12] = 0\n 19623: u8 [a0 + 11] = 0\n 19626: u8 [a0 + 10] = 0\n 19629: u8 [a0 + 9] = 0\n 19632: u8 [a0 + 8] = 0\n 19635: u8 [a0 + 7] = 0\n 19638: u8 [a0 + 6] = 0\n 19641: u8 [a0 + 5] = 0\n 19644: u8 [a0 + 4] = 0\n 19647: u8 [a0 + 3] = 0xa0\n 19652: u8 [a0 + 2] = 0x79\n 19656: u8 [a0 + 1] = 0xc3\n 19661: u8 [a0 + 0] = 0x8\n 19664: a1 = u64 [sp + 0x68]\n 19667: a0 = a1 + 0x4\n 19670: a1 = a0 <u a1\n 19673: a3 = u64 [sp + 0x78]\n 19676: a2 = a3 + a1\n 19679: a3 = a2 <u a3\n 19682: a3 = a1 if a1 == 0\n 19685: a3 = a3 + s1\n 19688: a1 = a3 <u s1\n 19691: a4 = u64 [sp + 0x70]\n 19694: a4 = a4 + a1\n 19697: u64 [sp + 0x148] = a2\n 19701: u64 [sp + 0x140] = a0\n 19705: u64 [sp + 0x150] = a3\n 19709: a0 = sp + 0x160\n 19713: a1 = sp + 0x140\n 19717: u64 [sp + 0x158] = a4\n 19721: ra = 240, jump @228\n      : @277 [@dyn 120] (gas: 5)\n 19727: a0 = u64 [sp + 0x168]\n 19731: t0 = u64 [sp + 0x178]\n 19735: t1 = u64 [sp + 0x160]\n 19739: a3 = u64 [sp + 0x170]\n 19743: fallthrough\n      : @278 (gas: 26)\n 19744: a1 = u64 [sp + 0x78]\n 19747: a4 = a0 ^ a1\n 19750: a5 = a0 <u a1\n 19753: t2 = a1\n 19755: a2 = u64 [sp + 0x68]\n 19758: a1 = t1 <u a2\n 19761: a5 = a1 if a4 == 0\n 19764: a4 = a3 - s1\n 19767: a3 = a3 <u s1\n 19770: s1 = u64 [sp + 0x70]\n 19773: s1 = t0 - s1\n 19776: s1 = s1 - a3\n 19779: a3 = a4 <u a5\n 19782: s1 = s1 - a3\n 19785: a4 = a4 - a5\n 19788: a0 = a0 - t2\n 19791: a1 = a0 - a1\n 19794: a0 = t1 - a2\n 19797: a1 = a1 | s1\n 19800: a2 = a0 | a4\n 19803: a2 = a2 | a1\n 19806: a1 = a1 | a4\n 19809: a2 = a2 >> 0x20\n 19812: a1 = a1 << 0x20\n 19815: a1 = a1 | a2\n 19818: jump @286 if a1 == 0\n      : @279 (gas: 1)\n 19821: trap\n      : @280 (gas: 3)\n 19822: a0 = 0\n 19824: a1 = 0\n 19826: ra = 242, jump @0\n      : @281 [@dyn 121] (gas: 5)\n 19832: i32 a1 = a0 + 0\n 19834: a0 = 0x1\n 19837: a2 = 0\n 19839: ecalli 13 // 'seal_return'\n 19841: fallthrough\n      : @282 (gas: 8)\n 19842: u64 [sp + 240] = 0\n 19846: u64 [sp + 232] = 0\n 19850: u64 [sp + 224] = 0\n 19854: a0 = 0x4e487b7100000000\n 19864: a1 = sp + 0xe0\n 19868: u64 [sp + 0xf8] = a0\n 19872: a0 = 0\n 19874: ra = 244, jump @8\n      : @283 [@dyn 122] (gas: 7)\n 19880: u64 [sp + 216] = 0\n 19884: u64 [sp + 208] = 0\n 19888: u64 [sp + 192] = 0x41\n 19893: a0 = 0x4\n 19896: a1 = sp + 0xc0\n 19900: u64 [sp + 200] = 0\n 19904: ra = 246, jump @8\n      : @284 [@dyn 123] (gas: 3)\n 19910: a1 = 0x24\n 19913: a0 = 0\n 19915: ra = 248, jump @0\n      : @285 [@dyn 124] (gas: 5)\n 19921: i32 a1 = a0 + 0\n 19923: a0 = 0x1\n 19926: a2 = 0x24\n 19929: ecalli 13 // 'seal_return'\n 19931: fallthrough\n      : @286 (gas: 4)\n 19932: i32 s1 = a0 + 0\n 19934: a0 = u64 [sp + 0x60]\n 19937: a1 = s1\n 19939: ra = 250, jump @0\n      : @287 [@dyn 125] (gas: 6)\n 19945: i32 a1 = a0 + 0\n 19947: a0 = 0x1\n 19950: a2 = s1\n 19952: ra = 0xfc\n 19956: ecalli 13 // 'seal_return'\n 19958: fallthrough\n      : @288 [@dyn 126] (gas: 6)\n 19959: u64 [a0 + 24] = 0\n 19962: u64 [a0 + 16] = 0\n 19965: u64 [a0 + 8] = 0\n 19968: a1 = 0x60\n 19971: u64 [a0] = a1\n 19973: ret\n      : @289 (gas: 14)\n 19975: sp = sp + 0xffffffffffffff10\n 19979: u64 [sp + 0xe8] = ra\n 19983: u64 [sp + 0xe0] = s0\n 19987: u64 [sp + 0xd8] = s1\n 19991: s0 = sp + 0xf0\n 19995: sp = sp & 0xfffffffffffffff0\n 19998: a2 = u64 [a1 + 0x18]\n 20001: a4 = u64 [a1 + 0x10]\n 20004: a5 = u64 [a1 + 0x8]\n 20007: s1 = a4 | a2\n 20010: a3 = a5 <u 0x1\n 20013: a3 = 0 if s1 != 0\n 20015: u64 [sp + 0x48] = a0\n 20018: jump @295 if a3 == 0\n      : @290 (gas: 30)\n 20022: s1 = u64 [a1]\n 20024: a0 = a4 >> 0x3b\n 20027: u64 [sp + 0x20] = a2\n 20030: a1 = a2 << 0x5\n 20033: a0 = a0 | a1\n 20036: a1 = a5 >> 0x3b\n 20039: u64 [sp + 0x28] = a4\n 20042: a2 = a4 << 0x5\n 20045: a1 = a1 | a2\n 20048: a2 = s1 >> 0x3b\n 20051: u64 [sp + 0x10] = a5\n 20054: a3 = a5 << 0x5\n 20057: a2 = a2 | a3\n 20060: u64 [sp + 0x18] = s1\n 20063: a3 = s1 << 0x5\n 20066: a4 = a3 + 0x20\n 20069: a3 = a4 <u a3\n 20072: a5 = a2 + a3\n 20075: a2 = a5 <u a2\n 20078: a2 = a3 if a3 == 0\n 20081: a2 = a2 + a1\n 20084: a1 = a2 <u a1\n 20087: a3 = a0 + a1\n 20090: u64 [sp + 0x90] = a4\n 20094: u64 [sp + 0x98] = a5\n 20098: u64 [sp + 0xa0] = a2\n 20102: a0 = sp + 0xb0\n 20106: a1 = sp + 0x90\n 20110: u64 [sp + 0xa8] = a3\n 20114: ra = 254, jump @141\n      : @291 [@dyn 127] (gas: 15)\n 20120: a0 = u64 [sp + 0xc8]\n 20124: a2 = u64 [sp + 0xc0]\n 20128: a1 = u64 [sp + 0xb8]\n 20132: a3 = u64 [sp + 0xb0]\n 20136: u64 [sp + 0x38] = a0\n 20139: u64 [sp + 0x30] = a1\n 20142: a0 = a0 | a1\n 20145: a1 = a3 | a2\n 20148: a1 = a1 | a0\n 20151: a1 = a1 >> 0x20\n 20154: u64 [sp + 0x40] = a2\n 20157: a0 = a0 | a2\n 20160: a0 = a0 << 0x20\n 20163: a0 = a0 | a1\n 20166: jump @294 if a0 != 0\n      : @292 (gas: 4)\n 20170: i32 a0 = a3 + 0\n 20172: a1 = 0x20\n 20175: u64 [sp + 0x8] = a3\n 20178: ra = 256, jump @0\n      : @293 [@dyn 128] (gas: 83)\n 20184: a1 = u64 [sp + 0x20]\n 20187: a1 = reverse a1\n 20189: a2 = u64 [sp + 0x28]\n 20192: a2 = reverse a2\n 20194: a3 = u64 [sp + 0x10]\n 20197: a3 = reverse a3\n 20199: a4 = u64 [sp + 0x18]\n 20202: a4 = reverse a4\n 20204: a5 = a4 >> 0x38\n 20207: u8 [a0 + 0x1f] = a5\n 20210: a5 = a4 >> 0x30\n 20213: u8 [a0 + 0x1e] = a5\n 20216: a5 = a4 >> 0x28\n 20219: u8 [a0 + 0x1d] = a5\n 20222: a5 = a4 >> 0x20\n 20225: u8 [a0 + 0x1c] = a5\n 20228: a5 = a4 >> 0x18\n 20231: u8 [a0 + 0x1b] = a5\n 20234: a5 = a4 >> 0x10\n 20237: u8 [a0 + 0x1a] = a5\n 20240: a5 = a4 >> 0x8\n 20243: u8 [a0 + 0x19] = a5\n 20246: u8 [a0 + 0x18] = a4\n 20249: u8 [a0 + 0x10] = a3\n 20252: a4 = a3 >> 0x38\n 20255: u8 [a0 + 0x17] = a4\n 20258: a4 = a3 >> 0x30\n 20261: u8 [a0 + 0x16] = a4\n 20264: a4 = a3 >> 0x28\n 20267: u8 [a0 + 0x15] = a4\n 20270: a4 = a3 >> 0x20\n 20273: u8 [a0 + 0x14] = a4\n 20276: a4 = a3 >> 0x18\n 20279: u8 [a0 + 0x13] = a4\n 20282: a4 = a3 >> 0x10\n 20285: u8 [a0 + 0x12] = a4\n 20288: a3 = a3 >> 0x8\n 20291: u8 [a0 + 0x11] = a3\n 20294: u8 [a0 + 0x8] = a2\n 20297: a3 = a2 >> 0x38\n 20300: u8 [a0 + 0xf] = a3\n 20303: a3 = a2 >> 0x30\n 20306: u8 [a0 + 0xe] = a3\n 20309: a3 = a2 >> 0x28\n 20312: u8 [a0 + 0xd] = a3\n 20315: a3 = a2 >> 0x20\n 20318: u8 [a0 + 0xc] = a3\n 20321: a3 = a2 >> 0x18\n 20324: u8 [a0 + 0xb] = a3\n 20327: a3 = a2 >> 0x10\n 20330: u8 [a0 + 0xa] = a3\n 20333: a2 = a2 >> 0x8\n 20336: u8 [a0 + 0x9] = a2\n 20339: u8 [a0] = a1\n 20341: a2 = a1 >> 0x38\n 20344: u8 [a0 + 0x7] = a2\n 20347: a2 = a1 >> 0x30\n 20350: u8 [a0 + 0x6] = a2\n 20353: a2 = a1 >> 0x28\n 20356: u8 [a0 + 0x5] = a2\n 20359: a2 = a1 >> 0x20\n 20362: u8 [a0 + 0x4] = a2\n 20365: a2 = a1 >> 0x18\n 20368: u8 [a0 + 0x3] = a2\n 20371: a2 = a1 >> 0x10\n 20374: u8 [a0 + 0x2] = a2\n 20377: a1 = a1 >> 0x8\n 20380: u8 [a0 + 0x1] = a1\n 20383: a0 = u64 [sp + 0x48]\n 20386: a1 = u64 [sp + 0x8]\n 20389: u64 [a0] = a1\n 20391: a1 = u64 [sp + 0x38]\n 20394: u64 [a0 + 0x18] = a1\n 20397: a1 = u64 [sp + 0x30]\n 20400: u64 [a0 + 0x8] = a1\n 20403: a1 = u64 [sp + 0x40]\n 20406: u64 [a0 + 0x10] = a1\n 20409: sp = s0 + 0xffffffffffffff10\n 20413: ra = u64 [sp + 0xe8]\n 20417: s0 = u64 [sp + 0xe0]\n 20421: s1 = u64 [sp + 0xd8]\n 20425: sp = sp + 0xf0\n 20429: ret\n      : @294 (gas: 1)\n 20431: trap\n      : @295 (gas: 8)\n 20432: u64 [sp + 128] = 0\n 20436: u64 [sp + 120] = 0\n 20439: u64 [sp + 112] = 0\n 20442: a0 = 0x4e487b7100000000\n 20452: a1 = sp + 0x70\n 20455: u64 [sp + 0x88] = a0\n 20459: a0 = 0\n 20461: ra = 258, jump @8\n      : @296 [@dyn 129] (gas: 7)\n 20467: u64 [sp + 104] = 0\n 20470: u64 [sp + 96] = 0\n 20473: u64 [sp + 80] = 0x41\n 20477: a0 = 0x4\n 20480: a1 = sp + 0x50\n 20483: u64 [sp + 88] = 0\n 20486: ra = 260, jump @8\n      : @297 [@dyn 130] (gas: 3)\n 20492: a1 = 0x24\n 20495: a0 = 0\n 20497: ra = 262, jump @0\n      : @298 [@dyn 131] (gas: 6)\n 20503: i32 a1 = a0 + 0\n 20505: a0 = 0x1\n 20508: a2 = 0x24\n 20511: ra = 0x108\n 20515: ecalli 13 // 'seal_return'\n 20517: fallthrough\n      : @299 [@dyn 132] (gas: 16)\n 20518: sp = sp + 0xffffffffffffffe8\n 20521: u64 [sp + 0x10] = ra\n 20524: u64 [sp + 0x8] = s0\n 20527: u64 [sp] = s1\n 20529: a2 = u64 [a1 + 0x10]\n 20532: a3 = u64 [a1 + 0x18]\n 20535: a4 = u64 [a1 + 0x8]\n 20538: s1 = u64 [a1]\n 20540: a3 = a3 | a4\n 20543: a1 = s1 | a2\n 20546: a1 = a1 | a3\n 20549: a1 = a1 >> 0x20\n 20552: a2 = a2 | a3\n 20555: a2 = a2 << 0x20\n 20558: a1 = a1 | a2\n 20561: jump @303 if a1 != 0\n      : @300 (gas: 12)\n 20564: a2 = u64 [a0 + 0x18]\n 20567: a3 = u64 [a0 + 0x10]\n 20570: a1 = u64 [a0]\n 20572: a0 = u64 [a0 + 0x8]\n 20575: a4 = a1 | a3\n 20578: a0 = a0 | a2\n 20581: a4 = a4 | a0\n 20584: a4 = a4 >> 0x20\n 20587: a0 = a0 | a3\n 20590: a0 = a0 << 0x20\n 20593: a0 = a0 | a4\n 20596: jump @303 if a0 != 0\n      : @301 (gas: 5)\n 20599: s0 = i32 [0x20044]\n 20604: i32 a0 = a1 + 0\n 20606: i32 s1 = s1 + 0\n 20608: a1 = s1\n 20610: ra = 266, jump @0\n      : @302 [@dyn 133] (gas: 9)\n 20616: i32 a0 = a0 + 0\n 20618: a1 = s1\n 20620: a2 = s0\n 20622: ra = u64 [sp + 0x10]\n 20625: s0 = u64 [sp + 0x8]\n 20628: s1 = u64 [sp]\n 20630: sp = sp + 0x18\n 20633: ecalli 2 // 'call_data_copy'\n 20635: ret\n      : @303 (gas: 1)\n 20637: trap\n      : @304 (gas: 21)\n 20638: sp = sp + 0xffffffffffffff20\n 20642: u64 [sp + 0xd8] = ra\n 20646: u64 [sp + 0xd0] = s0\n 20650: u64 [sp + 0xc8] = s1\n 20654: s0 = sp + 0xe0\n 20658: sp = sp & 0xfffffffffffffff0\n 20661: a2 = u64 [a1]\n 20663: a3 = u64 [a1 + 0x8]\n 20666: u64 [sp + 0x28] = a3\n 20669: s1 = u64 [a1 + 0x10]\n 20672: a1 = u64 [a1 + 0x18]\n 20675: u64 [sp + 0x30] = a1\n 20678: u64 [sp + 0x20] = a0\n 20681: u64 [sp + 0x98] = a1\n 20685: u64 [sp + 0x90] = s1\n 20689: u64 [sp + 0x88] = a3\n 20693: a0 = sp + 0xa0\n 20697: a1 = sp + 0x80\n 20701: u64 [sp + 0x38] = a2\n 20704: u64 [sp + 0x80] = a2\n 20708: ra = 268, jump @289\n      : @305 [@dyn 134] (gas: 6)\n 20714: a3 = u64 [sp + 0x30]\n 20717: a2 = u64 [sp + 0x28]\n 20720: a0 = s1 | a3\n 20723: a1 = a2 <u 0x1\n 20726: a1 = 0 if a0 != 0\n 20728: jump @311 if a1 == 0\n      : @306 (gas: 9)\n 20732: a5 = u64 [sp + 0x38]\n 20735: a0 = a5 | s1\n 20738: a1 = a2 | a3\n 20741: a0 = a0 | a1\n 20744: a0 = a0 >> 0x1b\n 20747: a1 = a1 | s1\n 20750: a1 = a1 << 0x25\n 20753: a0 = a0 | a1\n 20756: jump @310 if a0 != 0\n      : @307 (gas: 24)\n 20760: a1 = u64 [sp + 0xa0]\n 20764: a4 = u64 [sp + 0xb8]\n 20768: a3 = u64 [sp + 0xa8]\n 20772: s1 = u64 [sp + 0xb0]\n 20776: a0 = a1 + 0x20\n 20779: u64 [sp + 0x30] = a1\n 20782: a1 = a0 <u a1\n 20785: a2 = a3 + a1\n 20788: u64 [sp + 0x28] = a3\n 20791: a3 = a2 <u a3\n 20794: a3 = a1 if a1 == 0\n 20797: a3 = a3 + s1\n 20800: u64 [sp + 0x10] = s1\n 20803: a1 = a3 <u s1\n 20806: u64 [sp + 0x18] = a4\n 20809: a1 = a1 + a4\n 20812: a4 = a0 | a3\n 20815: a1 = a1 | a2\n 20818: a4 = a4 | a1\n 20821: a4 = a4 >> 0x20\n 20824: a1 = a1 | a3\n 20827: a1 = a1 << 0x20\n 20830: a1 = a1 | a4\n 20833: jump @310 if a1 != 0\n      : @308 (gas: 6)\n 20836: a1 = i32 [0x20044]\n 20841: u64 [sp + 0x8] = a1\n 20844: i32 s1 = a5 << 0x5\n 20847: i32 a0 = a0 + 0\n 20849: a1 = s1\n 20851: ra = 270, jump @0\n      : @309 [@dyn 135] (gas: 19)\n 20857: i32 a0 = a0 + 0\n 20859: a1 = s1\n 20861: a2 = u64 [sp + 0x8]\n 20864: ecalli 2 // 'call_data_copy'\n 20866: a0 = u64 [sp + 0x20]\n 20869: a1 = u64 [sp + 0x18]\n 20872: u64 [a0 + 0x18] = a1\n 20875: a1 = u64 [sp + 0x10]\n 20878: u64 [a0 + 0x10] = a1\n 20881: a1 = u64 [sp + 0x28]\n 20884: u64 [a0 + 0x8] = a1\n 20887: a1 = u64 [sp + 0x30]\n 20890: u64 [a0] = a1\n 20892: sp = s0 + 0xffffffffffffff20\n 20896: ra = u64 [sp + 0xd8]\n 20900: s0 = u64 [sp + 0xd0]\n 20904: s1 = u64 [sp + 0xc8]\n 20908: sp = sp + 0xe0\n 20912: ret\n      : @310 (gas: 1)\n 20914: trap\n      : @311 (gas: 8)\n 20915: u64 [sp + 112] = 0\n 20918: u64 [sp + 104] = 0\n 20921: u64 [sp + 96] = 0\n 20924: a0 = 0x4e487b7100000000\n 20934: a1 = sp + 0x60\n 20937: u64 [sp + 0x78] = a0\n 20940: a0 = 0\n 20942: ra = 272, jump @8\n      : @312 [@dyn 136] (gas: 7)\n 20948: u64 [sp + 88] = 0\n 20951: u64 [sp + 80] = 0\n 20954: u64 [sp + 64] = 0x41\n 20958: a0 = 0x4\n 20961: a1 = sp + 0x40\n 20964: u64 [sp + 72] = 0\n 20967: ra = 274, jump @8\n      : @313 [@dyn 137] (gas: 3)\n 20973: a1 = 0x24\n 20976: a0 = 0\n 20978: ra = 276, jump @0\n      : @314 [@dyn 138] (gas: 6)\n 20984: i32 a1 = a0 + 0\n 20986: a0 = 0x1\n 20989: a2 = 0x24\n 20992: ra = 0x116\n 20996: ecalli 13 // 'seal_return'\n 20998: fallthrough\n      : @315 [@dyn 139] (gas: 22)\n 20999: sp = sp + 0xffffffffffffff50\n 21003: u64 [sp + 0xa8] = ra\n 21007: u64 [sp + 0xa0] = s0\n 21011: u64 [sp + 0x98] = s1\n 21015: s0 = sp + 0xb0\n 21019: sp = sp & 0xfffffffffffffff0\n 21022: a4 = u64 [a1 + 0x10]\n 21025: a3 = u64 [a1 + 0x18]\n 21028: a5 = u64 [a1 + 0x8]\n 21031: s1 = u64 [a1]\n 21033: u64 [sp + 0x38] = a3\n 21036: u64 [sp + 0x30] = a5\n 21039: a1 = a5 | a3\n 21042: a3 = s1 | a4\n 21045: a3 = a3 | a1\n 21048: a3 = a3 >> 0x20\n 21051: u64 [sp + 0x40] = a4\n 21054: a1 = a1 | a4\n 21057: a1 = a1 << 0x20\n 21060: a1 = a1 | a3\n 21063: u64 [sp + 0x48] = a0\n 21066: jump @319 if a1 != 0\n      : @316 (gas: 12)\n 21070: a0 = u64 [a2 + 0x18]\n 21073: u64 [sp + 0x20] = a0\n 21076: a0 = u64 [a2 + 0x10]\n 21079: u64 [sp + 0x10] = a0\n 21082: a0 = u64 [a2 + 0x8]\n 21085: u64 [sp + 0x8] = a0\n 21088: a0 = u64 [a2]\n 21090: u64 [sp + 0x18] = a0\n 21093: u64 [sp + 0x28] = s1\n 21096: i32 a0 = s1 + 0\n 21098: a1 = 0x20\n 21101: ra = 280, jump @0\n      : @317 [@dyn 140] (gas: 108)\n 21107: t2 = u64 [sp + 0x8]\n 21110: a1 = u8 [a0 + 0x1]\n 21113: a2 = u8 [a0]\n 21115: a3 = u8 [a0 + 0x2]\n 21118: a4 = u8 [a0 + 0x3]\n 21121: a1 = a1 << 0x8\n 21124: a1 = a1 | a2\n 21127: a3 = a3 << 0x10\n 21130: a4 = a4 << 0x18\n 21133: a3 = a3 | a4\n 21136: a1 = a1 | a3\n 21139: a2 = u8 [a0 + 0x5]\n 21142: a3 = u8 [a0 + 0x4]\n 21145: a4 = u8 [a0 + 0x6]\n 21148: a5 = u8 [a0 + 0x7]\n 21151: a2 = a2 << 0x8\n 21154: a2 = a2 | a3\n 21157: a4 = a4 << 0x10\n 21160: a5 = a5 << 0x18\n 21163: a4 = a4 | a5\n 21166: a2 = a2 | a4\n 21169: a2 = a2 << 0x20\n 21172: t0 = a2 | a1\n 21175: a2 = u8 [a0 + 0x9]\n 21178: a3 = u8 [a0 + 0x8]\n 21181: a4 = u8 [a0 + 0xa]\n 21184: a5 = u8 [a0 + 0xb]\n 21187: a2 = a2 << 0x8\n 21190: a2 = a2 | a3\n 21193: a4 = a4 << 0x10\n 21196: a5 = a5 << 0x18\n 21199: a4 = a4 | a5\n 21202: a2 = a2 | a4\n 21205: a3 = u8 [a0 + 0xd]\n 21208: a4 = u8 [a0 + 0xc]\n 21211: a5 = u8 [a0 + 0xe]\n 21214: a1 = u8 [a0 + 0xf]\n 21217: a3 = a3 << 0x8\n 21220: a3 = a3 | a4\n 21223: a5 = a5 << 0x10\n 21226: a1 = a1 << 0x18\n 21229: a1 = a1 | a5\n 21232: a1 = a1 | a3\n 21235: a1 = a1 << 0x20\n 21238: t1 = a1 | a2\n 21241: a1 = u8 [a0 + 0x11]\n 21244: a3 = u8 [a0 + 0x10]\n 21247: a4 = u8 [a0 + 0x12]\n 21250: a5 = u8 [a0 + 0x13]\n 21253: a1 = a1 << 0x8\n 21256: a1 = a1 | a3\n 21259: a4 = a4 << 0x10\n 21262: a5 = a5 << 0x18\n 21265: a4 = a4 | a5\n 21268: a1 = a1 | a4\n 21271: a3 = u8 [a0 + 0x15]\n 21274: a4 = u8 [a0 + 0x14]\n 21277: a5 = u8 [a0 + 0x16]\n 21280: a2 = u8 [a0 + 0x17]\n 21283: a3 = a3 << 0x8\n 21286: a3 = a3 | a4\n 21289: a5 = a5 << 0x10\n 21292: a2 = a2 << 0x18\n 21295: a2 = a2 | a5\n 21298: a2 = a2 | a3\n 21301: a2 = a2 << 0x20\n 21304: a3 = a2 | a1\n 21307: a1 = u8 [a0 + 0x19]\n 21310: a2 = u8 [a0 + 0x18]\n 21313: a4 = u8 [a0 + 0x1a]\n 21316: a5 = u8 [a0 + 0x1b]\n 21319: a1 = a1 << 0x8\n 21322: a1 = a1 | a2\n 21325: a4 = a4 << 0x10\n 21328: a5 = a5 << 0x18\n 21331: a4 = a4 | a5\n 21334: a1 = a1 | a4\n 21337: a2 = u8 [a0 + 0x1d]\n 21340: a4 = u8 [a0 + 0x1c]\n 21343: a5 = u8 [a0 + 0x1e]\n 21346: a0 = u8 [a0 + 0x1f]\n 21349: a2 = a2 << 0x8\n 21352: a2 = a2 | a4\n 21355: a5 = a5 << 0x10\n 21358: a0 = a0 << 0x18\n 21361: a0 = a0 | a5\n 21364: a0 = a0 | a2\n 21367: a0 = a0 << 0x20\n 21370: a0 = a0 | a1\n 21373: ra = reverse a0\n 21375: s1 = reverse a3\n 21377: a2 = reverse t1\n 21379: t1 = u64 [sp + 0x18]\n 21382: a3 = reverse t0\n 21384: a1 = u64 [sp + 0x20]\n 21387: a4 = a3 ^ a1\n 21390: a0 = a1 <u a3\n 21393: a3 = u64 [sp + 0x10]\n 21396: a5 = a3 <u a2\n 21399: a5 = a0 if a4 != 0\n 21402: t0 = s1 ^ t2\n 21405: s1 = t2 <u s1\n 21408: a0 = t1 <u ra\n 21411: a0 = s1 if t0 != 0\n 21414: a2 = a2 ^ a3\n 21417: a2 = a2 | a4\n 21420: a0 = a5 if a2 != 0\n 21423: jump @320 if a0 == 0\n      : @318 (gas: 48)\n 21427: s1 = a3\n 21429: a0 = s1 >> 0x3b\n 21432: a1 = a1 << 0x5\n 21435: t0 = a1 | a0\n 21438: a1 = t2 >> 0x3b\n 21441: s1 = s1 << 0x5\n 21444: a1 = a1 | s1\n 21447: a2 = t1 >> 0x3b\n 21450: a3 = t2 << 0x5\n 21453: a2 = a2 | a3\n 21456: a3 = t1 << 0x5\n 21459: a0 = u64 [sp + 0x28]\n 21462: a3 = a3 + a0\n 21465: a4 = a3 <u a0\n 21468: a5 = u64 [sp + 0x30]\n 21471: a2 = a2 + a5\n 21474: a2 = a2 + a4\n 21477: a0 = a2 ^ a5\n 21480: s1 = a2 <u a5\n 21483: s1 = a4 if a0 == 0\n 21486: a5 = u64 [sp + 0x40]\n 21489: a1 = a1 + a5\n 21492: s1 = s1 + a1\n 21495: a4 = s1 <u a1\n 21498: a1 = a1 <u a5\n 21501: a5 = u64 [sp + 0x38]\n 21504: a0 = a5 + t0\n 21507: a0 = a0 + a1\n 21510: a0 = a0 + a4\n 21513: a1 = a3 + 0x20\n 21516: a3 = a1 <u a3\n 21519: a4 = a2 + a3\n 21522: a2 = a4 <u a2\n 21525: a2 = a3 if a3 == 0\n 21528: a2 = a2 + s1\n 21531: a3 = a2 <u s1\n 21534: a0 = a0 + a3\n 21537: a3 = u64 [sp + 0x48]\n 21540: u64 [a3] = a1\n 21542: u64 [a3 + 0x8] = a4\n 21545: u64 [a3 + 0x10] = a2\n 21548: u64 [a3 + 0x18] = a0\n 21551: sp = s0 + 0xffffffffffffff50\n 21555: ra = u64 [sp + 0xa8]\n 21559: s0 = u64 [sp + 0xa0]\n 21563: s1 = u64 [sp + 0x98]\n 21567: sp = sp + 0xb0\n 21571: ret\n      : @319 (gas: 1)\n 21573: trap\n      : @320 (gas: 8)\n 21574: u64 [sp + 128] = 0\n 21578: u64 [sp + 120] = 0\n 21581: u64 [sp + 112] = 0\n 21584: a0 = 0x4e487b7100000000\n 21594: a1 = sp + 0x70\n 21597: u64 [sp + 0x88] = a0\n 21601: a0 = 0\n 21603: ra = 282, jump @8\n      : @321 [@dyn 141] (gas: 7)\n 21609: u64 [sp + 104] = 0\n 21612: u64 [sp + 96] = 0\n 21615: u64 [sp + 80] = 0x32\n 21619: a0 = 0x4\n 21622: a1 = sp + 0x50\n 21625: u64 [sp + 88] = 0\n 21628: ra = 284, jump @8\n      : @322 [@dyn 142] (gas: 3)\n 21634: a1 = 0x24\n 21637: a0 = 0\n 21639: ra = 286, jump @0\n      : @323 [@dyn 143] (gas: 6)\n 21645: i32 a1 = a0 + 0\n 21647: a0 = 0x1\n 21650: a2 = 0x24\n 21653: ra = 0x120\n 21657: ecalli 13 // 'seal_return'\n 21659: fallthrough\n      : @324 [@dyn 144] (gas: 12)\n 21660: a2 = u64 [a0 + 0x10]\n 21663: a3 = u64 [a0 + 0x18]\n 21666: a4 = u64 [a0 + 0x8]\n 21669: a0 = u64 [a0]\n 21671: a3 = a3 | a4\n 21674: a4 = a0 | a2\n 21677: a4 = a4 | a3\n 21680: a4 = a4 >> 0x20\n 21683: a2 = a2 | a3\n 21686: a2 = a2 << 0x20\n 21689: a2 = a2 | a4\n 21692: jump @327 if a2 != 0\n      : @325 (gas: 13)\n 21696: sp = sp + 0xffffffffffffffe0\n 21699: u64 [sp + 0x18] = ra\n 21702: u64 [sp + 0x10] = s0\n 21705: u64 [sp + 0x8] = s1\n 21708: a2 = u64 [a1 + 0x10]\n 21711: a3 = u64 [a1 + 0x8]\n 21714: u64 [sp] = a3\n 21716: s1 = u64 [a1]\n 21718: a2 = a2 << 0x20\n 21721: s0 = a2 >> 0x20\n 21724: i32 a0 = a0 + 0\n 21726: a1 = 0x20\n 21729: ra = 290, jump @0\n      : @326 [@dyn 145] (gas: 59)\n 21735: a1 = reverse s0\n 21737: a2 = u64 [sp]\n 21739: a2 = reverse a2\n 21741: a3 = reverse s1\n 21743: a4 = a3 >> 0x38\n 21746: u8 [a0 + 0x1f] = a4\n 21749: a4 = a3 >> 0x30\n 21752: u8 [a0 + 0x1e] = a4\n 21755: a4 = a3 >> 0x28\n 21758: u8 [a0 + 0x1d] = a4\n 21761: a4 = a3 >> 0x20\n 21764: u8 [a0 + 0x1c] = a4\n 21767: a4 = a3 >> 0x18\n 21770: u8 [a0 + 0x1b] = a4\n 21773: a4 = a3 >> 0x10\n 21776: u8 [a0 + 0x1a] = a4\n 21779: a4 = a3 >> 0x8\n 21782: u8 [a0 + 0x19] = a4\n 21785: u8 [a0 + 0x18] = a3\n 21788: u8 [a0 + 0x10] = a2\n 21791: u8 [a0 + 11] = 0\n 21794: u8 [a0 + 10] = 0\n 21797: u8 [a0 + 9] = 0\n 21800: u8 [a0 + 7] = 0\n 21803: u8 [a0 + 6] = 0\n 21806: u8 [a0 + 5] = 0\n 21809: u8 [a0 + 4] = 0\n 21812: u8 [a0 + 3] = 0\n 21815: u8 [a0 + 2] = 0\n 21818: u8 [a0 + 1] = 0\n 21821: u8 [a0 + 0] = 0\n 21823: a3 = a2 >> 0x38\n 21826: u8 [a0 + 0x17] = a3\n 21829: a3 = a2 >> 0x30\n 21832: u8 [a0 + 0x16] = a3\n 21835: a3 = a2 >> 0x28\n 21838: u8 [a0 + 0x15] = a3\n 21841: a3 = a2 >> 0x20\n 21844: u8 [a0 + 0x14] = a3\n 21847: a3 = a2 >> 0x18\n 21850: u8 [a0 + 0x13] = a3\n 21853: a3 = a2 >> 0x10\n 21856: u8 [a0 + 0x12] = a3\n 21859: a2 = a2 >> 0x8\n 21862: u8 [a0 + 0x11] = a2\n 21865: u8 [a0 + 0x8] = a1\n 21868: a2 = a1 >> 0x38\n 21871: u8 [a0 + 0xf] = a2\n 21874: a2 = a1 >> 0x30\n 21877: u8 [a0 + 0xe] = a2\n 21880: a2 = a1 >> 0x28\n 21883: u8 [a0 + 0xd] = a2\n 21886: a1 = a1 >> 0x20\n 21889: u8 [a0 + 0xc] = a1\n 21892: ra = u64 [sp + 0x18]\n 21895: s0 = u64 [sp + 0x10]\n 21898: s1 = u64 [sp + 0x8]\n 21901: sp = sp + 0x20\n 21904: ret\n      : @327 (gas: 1)\n 21906: trap\n      : @328 (gas: 12)\n 21907: a0 = u64 [sp + 0x718]\n 21911: a1 = u64 [sp + 0x710]\n 21915: a2 = u64 [sp + 0x708]\n 21919: a3 = u64 [sp + 0x700]\n 21923: u64 [sp + 0x1b8] = a0\n 21927: u64 [sp + 0x1a8] = a2\n 21931: a0 = a0 | a2\n 21934: u64 [sp + 0x1b0] = a1\n 21938: u64 [sp + 0x1a0] = a3\n 21942: a1 = a1 | a3\n 21945: a0 = a0 | a1\n 21948: jump @330 if a0 != 0\n      : @329 (gas: 1)\n 21951: jump @394\n      : @330 (gas: 41)\n 21954: a5 = 0\n 21956: a2 = 0\n 21958: a3 = 0\n 21960: t1 = 0\n 21962: u64 [sp + 192] = 0\n 21966: u64 [sp + 184] = 0\n 21970: u64 [sp + 176] = 0\n 21974: u64 [sp + 200] = 0\n 21978: a0 = 0x2400000000\n 21988: u64 [sp + 0x198] = a0\n 21992: a0 = sp + 0x600\n 21996: a0 = a0 << 0x20\n 21999: a0 = a0 >> 0x20\n 22002: a1 = sp + 0x640\n 22006: a1 = a1 << 0x20\n 22009: a0 = a0 | a1\n 22012: u64 [sp + 0xa8] = a0\n 22016: a1 = 0x1800000000\n 22026: u64 [sp + 0x58] = s1\n 22029: a0 = s1 << 0x20\n 22032: a0 = a0 >> 0x20\n 22035: a0 = reverse a0\n 22037: u64 [sp + 0xa0] = a0\n 22041: a0 = sp + 0x5e0\n 22045: a0 = a0 << 0x20\n 22048: a0 = a0 >> 0x20\n 22051: u64 [sp + 0x60] = a1\n 22054: a0 = a0 | a1\n 22057: u64 [sp + 0x98] = a0\n 22061: a0 = sp + 0x620\n 22065: a0 = a0 << 0x20\n 22068: u64 [sp + 0x90] = a0\n 22072: s1 = 0xffffffff\n 22082: u64 [sp + 0x70] = s1\n 22085: a0 = u64 [sp + 0x78]\n 22088: a0 = reverse a0\n 22090: u64 [sp + 0x88] = a0\n 22094: a0 = u64 [sp + 0x68]\n 22097: a0 = reverse a0\n 22099: u64 [sp + 0x80] = a0\n 22103: jump @333\n      : @331 (gas: 3)\n 22105: a5 = u64 [sp + 0xf0]\n 22109: a2 = u64 [sp + 0xe8]\n 22113: fallthrough\n      : @332 (gas: 26)\n 22114: a5 = a5 + 0x1\n 22117: a0 = a5 <u 0x1\n 22120: a2 = a2 + a0\n 22123: a0 = a5 | a2\n 22126: a0 = a0 <u 0x1\n 22129: a1 = u64 [sp + 0xd8]\n 22133: a0 = a0 + a1\n 22136: a1 = a0 <u a1\n 22139: t1 = t1 + a1\n 22142: a1 = u64 [sp + 0x1a0]\n 22146: a1 = a5 <u a1\n 22149: a3 = u64 [sp + 0x1a8]\n 22153: a4 = a2 ^ a3\n 22156: a3 = a2 <u a3\n 22159: a3 = a1 if a4 == 0\n 22162: a1 = u64 [sp + 0x1b0]\n 22166: t0 = a0 <u a1\n 22169: a4 = u64 [sp + 0x1b8]\n 22173: s1 = t1 ^ a4\n 22176: a4 = t1 <u a4\n 22179: a4 = t0 if s1 == 0\n 22182: a1 = a1 ^ a0\n 22185: a1 = a1 | s1\n 22188: a4 = a3 if a1 == 0\n 22191: a3 = a0\n 22193: jump @361 if a4 == 0\n      : @333 (gas: 16)\n 22197: u64 [sp + 0xf0] = a5\n 22201: u64 [sp + 0x560] = a5\n 22205: u64 [sp + 1432] = 0\n 22209: u64 [sp + 1424] = 0\n 22213: u64 [sp + 1416] = 0\n 22217: u64 [sp + 1408] = 0\n 22221: u64 [sp + 0xe8] = a2\n 22225: u64 [sp + 0x568] = a2\n 22229: u64 [sp + 0xd8] = a3\n 22233: u64 [sp + 0x570] = a3\n 22237: a0 = sp + 0x5a0\n 22241: a1 = sp + 0x580\n 22245: a2 = sp + 0x560\n 22249: u64 [sp + 0xe0] = t1\n 22253: u64 [sp + 0x578] = t1\n 22257: ra = 292, jump @90\n      : @334 [@dyn 146] (gas: 177)\n 22263: s1 = u64 [sp + 0x5c0]\n 22267: a0 = u64 [sp + 0x5c8]\n 22271: u64 [sp + 0x1f8] = a0\n 22275: a0 = u64 [sp + 0x5d8]\n 22279: u64 [sp + 0x1e8] = a0\n 22283: a0 = u64 [sp + 0x5d0]\n 22287: u64 [sp + 0x1f0] = a0\n 22291: a0 = u64 [sp + 0x5b8]\n 22295: a1 = u64 [sp + 0x5b0]\n 22299: a2 = u64 [sp + 0x5a8]\n 22303: a3 = u64 [sp + 0x5a0]\n 22307: u64 [sp + 0x6f8] = a0\n 22311: u64 [sp + 0x6f0] = a1\n 22315: u64 [sp + 0x6e8] = a2\n 22319: u64 [sp + 0x6e0] = a3\n 22323: u64 [sp + 1816] = 0\n 22327: u64 [sp + 1808] = 0\n 22331: u64 [sp + 1800] = 0\n 22335: u64 [sp + 1792] = 0\n 22339: u32 [sp + 1824] = 0x20\n 22344: i32 a1 = sp + 0x6e0\n 22348: i32 a3 = sp + 0x700\n 22352: i32 a4 = sp + 0x720\n 22356: a2 = 0xffffffffffffffff\n 22359: a0 = 0\n 22361: ecalli 7 // 'get_storage'\n 22363: a0 = u64 [sp + 0x700]\n 22367: a1 = u64 [sp + 0x708]\n 22371: a2 = u64 [sp + 0x710]\n 22375: a3 = u64 [sp + 0x718]\n 22379: u8 [sp + 1375] = 0\n 22383: u8 [sp + 1374] = 0\n 22387: u8 [sp + 1373] = 0\n 22391: u8 [sp + 1372] = 0\n 22395: u8 [sp + 1371] = 0\n 22399: u8 [sp + 1370] = 0\n 22403: u8 [sp + 1369] = 0\n 22407: u8 [sp + 1368] = 0\n 22411: u8 [sp + 1367] = 0\n 22415: u8 [sp + 1366] = 0\n 22419: u8 [sp + 1365] = 0\n 22423: u8 [sp + 1364] = 0\n 22427: u8 [sp + 1363] = 0\n 22431: u8 [sp + 1362] = 0\n 22435: u8 [sp + 1361] = 0\n 22439: u8 [sp + 1360] = 0\n 22443: u8 [sp + 1359] = 0\n 22447: u8 [sp + 1358] = 0\n 22451: u8 [sp + 1357] = 0\n 22455: u8 [sp + 1356] = 0\n 22459: u8 [sp + 1355] = 0\n 22463: u8 [sp + 1354] = 0\n 22467: u8 [sp + 1353] = 0\n 22471: u8 [sp + 1352] = 0\n 22475: u8 [sp + 1351] = 0\n 22479: u8 [sp + 1350] = 0\n 22483: u8 [sp + 1349] = 0\n 22487: u8 [sp + 1348] = 0\n 22491: u8 [sp + 1347] = 0\n 22495: u8 [sp + 1346] = 0\n 22499: u8 [sp + 1345] = 0\n 22503: u8 [sp + 1344] = 0\n 22507: u8 [sp + 0x538] = a3\n 22511: u8 [sp + 0x530] = a2\n 22515: u8 [sp + 0x528] = a1\n 22519: u8 [sp + 0x520] = a0\n 22523: a4 = a3 >> 0x38\n 22526: u8 [sp + 0x53f] = a4\n 22530: a4 = a3 >> 0x30\n 22533: u8 [sp + 0x53e] = a4\n 22537: a4 = a3 >> 0x28\n 22540: u8 [sp + 0x53d] = a4\n 22544: a4 = a3 >> 0x20\n 22547: u8 [sp + 0x53c] = a4\n 22551: a4 = a3 >> 0x18\n 22554: u8 [sp + 0x53b] = a4\n 22558: a4 = a3 >> 0x10\n 22561: u8 [sp + 0x53a] = a4\n 22565: a3 = a3 >> 0x8\n 22568: u8 [sp + 0x539] = a3\n 22572: a3 = a2 >> 0x38\n 22575: u8 [sp + 0x537] = a3\n 22579: a3 = a2 >> 0x30\n 22582: u8 [sp + 0x536] = a3\n 22586: a3 = a2 >> 0x28\n 22589: u8 [sp + 0x535] = a3\n 22593: a3 = a2 >> 0x20\n 22596: u8 [sp + 0x534] = a3\n 22600: a3 = a2 >> 0x18\n 22603: u8 [sp + 0x533] = a3\n 22607: a3 = a2 >> 0x10\n 22610: u8 [sp + 0x532] = a3\n 22614: a2 = a2 >> 0x8\n 22617: u8 [sp + 0x531] = a2\n 22621: a2 = a1 >> 0x38\n 22624: u8 [sp + 0x52f] = a2\n 22628: a2 = a1 >> 0x30\n 22631: u8 [sp + 0x52e] = a2\n 22635: a2 = a1 >> 0x28\n 22638: u8 [sp + 0x52d] = a2\n 22642: a2 = a1 >> 0x20\n 22645: u8 [sp + 0x52c] = a2\n 22649: a2 = a1 >> 0x18\n 22652: u8 [sp + 0x52b] = a2\n 22656: a2 = a1 >> 0x10\n 22659: u8 [sp + 0x52a] = a2\n 22663: a1 = a1 >> 0x8\n 22666: u8 [sp + 0x529] = a1\n 22670: a1 = a0 >> 0x38\n 22673: u8 [sp + 0x527] = a1\n 22677: a1 = a0 >> 0x30\n 22680: u8 [sp + 0x526] = a1\n 22684: a1 = a0 >> 0x28\n 22687: u8 [sp + 0x525] = a1\n 22691: a1 = a0 >> 0x20\n 22694: u8 [sp + 0x524] = a1\n 22698: a1 = a0 >> 0x18\n 22701: u8 [sp + 0x523] = a1\n 22705: a1 = a0 >> 0x10\n 22708: u8 [sp + 0x522] = a1\n 22712: a0 = a0 >> 0x8\n 22715: u8 [sp + 0x521] = a0\n 22719: u64 [sp + 0x1e0] = s1\n 22723: a0 = s1 & 0x1f\n 22726: a1 = sp + 0x520\n 22730: a0 = a0 + a1\n 22733: a1 = u8 [a0 + 0x10]\n 22736: u64 [sp + 0x118] = a1\n 22740: a1 = u8 [a0 + 0x11]\n 22743: u64 [sp + 0xf8] = a1\n 22747: a1 = u8 [a0 + 0x12]\n 22750: u64 [sp + 0x108] = a1\n 22754: a1 = u8 [a0 + 0x13]\n 22757: u64 [sp + 0x100] = a1\n 22761: a1 = u8 [a0 + 0x14]\n 22764: u64 [sp + 0x130] = a1\n 22768: a1 = u8 [a0 + 0x15]\n 22771: u64 [sp + 0x110] = a1\n 22775: a1 = u8 [a0 + 0x16]\n 22778: u64 [sp + 0x128] = a1\n 22782: a1 = u8 [a0 + 0x17]\n 22785: u64 [sp + 0x120] = a1\n 22789: a1 = u8 [a0 + 0x8]\n 22792: u64 [sp + 0x158] = a1\n 22796: a1 = u8 [a0 + 0x9]\n 22799: u64 [sp + 0x138] = a1\n 22803: a1 = u8 [a0 + 0xa]\n 22806: u64 [sp + 0x148] = a1\n 22810: a1 = u8 [a0 + 0xb]\n 22813: u64 [sp + 0x140] = a1\n 22817: a1 = u8 [a0 + 0xc]\n 22820: u64 [sp + 0x170] = a1\n 22824: a1 = u8 [a0 + 0xd]\n 22827: u64 [sp + 0x150] = a1\n 22831: a1 = u8 [a0 + 0xe]\n 22834: u64 [sp + 0x168] = a1\n 22838: a1 = u8 [a0 + 0xf]\n 22841: u64 [sp + 0x160] = a1\n 22845: a1 = u8 [a0]\n 22847: u64 [sp + 0x1c0] = a1\n 22851: a1 = u8 [a0 + 0x1]\n 22854: u64 [sp + 0x178] = a1\n 22858: a1 = u8 [a0 + 0x2]\n 22861: u64 [sp + 0x188] = a1\n 22865: a1 = u8 [a0 + 0x3]\n 22868: u64 [sp + 0x180] = a1\n 22872: a1 = u8 [a0 + 0x4]\n 22875: u64 [sp + 0x1d8] = a1\n 22879: a1 = u8 [a0 + 0x5]\n 22882: u64 [sp + 0x190] = a1\n 22886: a1 = u8 [a0 + 0x6]\n 22889: u64 [sp + 0x1d0] = a1\n 22893: a0 = u8 [a0 + 0x7]\n 22896: u64 [sp + 0x1c8] = a0\n 22900: a0 = 0x40\n 22903: a1 = 0x20\n 22906: ra = 294, jump @0\n      : @335 [@dyn 147] (gas: 102)\n 22912: a1 = u8 [a0 + 0x11]\n 22915: a2 = u8 [a0 + 0x10]\n 22918: a3 = u8 [a0 + 0x12]\n 22921: a4 = u8 [a0 + 0x13]\n 22924: a1 = a1 << 0x8\n 22927: a1 = a1 | a2\n 22930: a3 = a3 << 0x10\n 22933: a4 = a4 << 0x18\n 22936: a3 = a3 | a4\n 22939: a1 = a1 | a3\n 22942: a2 = u8 [a0 + 0x15]\n 22945: a3 = u8 [a0 + 0x14]\n 22948: a4 = u8 [a0 + 0x16]\n 22951: a5 = u8 [a0 + 0x17]\n 22954: a2 = a2 << 0x8\n 22957: a2 = a2 | a3\n 22960: a4 = a4 << 0x10\n 22963: a5 = a5 << 0x18\n 22966: a4 = a4 | a5\n 22969: a2 = a2 | a4\n 22972: a2 = a2 << 0x20\n 22975: t0 = a2 | a1\n 22978: a2 = u8 [a0 + 0x1]\n 22981: a3 = u8 [a0]\n 22983: a4 = u8 [a0 + 0x2]\n 22986: a5 = u8 [a0 + 0x3]\n 22989: a2 = a2 << 0x8\n 22992: a2 = a2 | a3\n 22995: a4 = a4 << 0x10\n 22998: a5 = a5 << 0x18\n 23001: a4 = a4 | a5\n 23004: a2 = a2 | a4\n 23007: a3 = u8 [a0 + 0x5]\n 23010: a4 = u8 [a0 + 0x4]\n 23013: a5 = u8 [a0 + 0x6]\n 23016: s1 = u8 [a0 + 0x7]\n 23019: a3 = a3 << 0x8\n 23022: a3 = a3 | a4\n 23025: a5 = a5 << 0x10\n 23028: s1 = s1 << 0x18\n 23031: a5 = a5 | s1\n 23034: a3 = a3 | a5\n 23037: a3 = a3 << 0x20\n 23040: a2 = a2 | a3\n 23043: a3 = u8 [a0 + 0x19]\n 23046: a4 = u8 [a0 + 0x18]\n 23049: a5 = u8 [a0 + 0x1a]\n 23052: s1 = u8 [a0 + 0x1b]\n 23055: a3 = a3 << 0x8\n 23058: a3 = a3 | a4\n 23061: a5 = a5 << 0x10\n 23064: s1 = s1 << 0x18\n 23067: a5 = a5 | s1\n 23070: a3 = a3 | a5\n 23073: a4 = u8 [a0 + 0x1d]\n 23076: a5 = u8 [a0 + 0x1c]\n 23079: s1 = u8 [a0 + 0x1e]\n 23082: a1 = u8 [a0 + 0x1f]\n 23085: a4 = a4 << 0x8\n 23088: a4 = a4 | a5\n 23091: s1 = s1 << 0x10\n 23094: a1 = a1 << 0x18\n 23097: a1 = a1 | s1\n 23100: a1 = a1 | a4\n 23103: a1 = a1 << 0x20\n 23106: a3 = a3 | a1\n 23109: a1 = u8 [a0 + 0x9]\n 23112: a4 = u8 [a0 + 0x8]\n 23115: a5 = u8 [a0 + 0xa]\n 23118: s1 = u8 [a0 + 0xb]\n 23121: a1 = a1 << 0x8\n 23124: a1 = a1 | a4\n 23127: a5 = a5 << 0x10\n 23130: s1 = s1 << 0x18\n 23133: a5 = a5 | s1\n 23136: a1 = a1 | a5\n 23139: a4 = u8 [a0 + 0xd]\n 23142: a5 = u8 [a0 + 0xc]\n 23145: s1 = u8 [a0 + 0xe]\n 23148: a0 = u8 [a0 + 0xf]\n 23151: a4 = a4 << 0x8\n 23154: a4 = a4 | a5\n 23157: s1 = s1 << 0x10\n 23160: a0 = a0 << 0x18\n 23163: a0 = a0 | s1\n 23166: a0 = a0 | a4\n 23169: a0 = a0 << 0x20\n 23172: a0 = a0 | a1\n 23175: a4 = reverse a0\n 23177: a3 = reverse a3\n 23179: a1 = reverse a2\n 23181: a0 = reverse t0\n 23183: u64 [sp + 0x208] = a0\n 23187: u64 [sp + 0x210] = a1\n 23191: a0 = a0 | a1\n 23194: a1 = a3 | a4\n 23197: a1 = a1 | a0\n 23200: a1 = a1 >> 0x20\n 23203: a0 = a0 | a4\n 23206: a0 = a0 << 0x20\n 23209: a0 = a0 | a1\n 23212: jump @337 if a0 == 0\n      : @336 (gas: 1)\n 23215: jump @397\n      : @337 (gas: 6)\n 23218: s1 = a4\n 23220: i32 a0 = a3 + 0\n 23222: a1 = 0x20\n 23225: u64 [sp + 0x218] = a0\n 23229: u64 [sp + 0x200] = a3\n 23233: ra = 296, jump @0\n      : @338 [@dyn 148] (gas: 42)\n 23239: u64 [sp + 0xd0] = s1\n 23243: a2 = u64 [sp + 0x210]\n 23247: a2 = a2 | s1\n 23250: a1 = 0xfffffffc\n 23260: a3 = u64 [sp + 0x200]\n 23264: a1 = a3 <u a1\n 23267: a3 = u64 [sp + 0x208]\n 23271: a1 = 0 if a3 != 0\n 23273: a1 = 0 if a2 != 0\n 23275: u8 [a0 + 31] = 0\n 23278: u8 [a0 + 30] = 0\n 23281: u8 [a0 + 29] = 0\n 23284: u8 [a0 + 28] = 0\n 23287: u8 [a0 + 27] = 0\n 23290: u8 [a0 + 26] = 0\n 23293: u8 [a0 + 25] = 0\n 23296: u8 [a0 + 24] = 0\n 23299: u8 [a0 + 23] = 0\n 23302: u8 [a0 + 22] = 0\n 23305: u8 [a0 + 21] = 0\n 23308: u8 [a0 + 20] = 0\n 23311: u8 [a0 + 19] = 0\n 23314: u8 [a0 + 18] = 0\n 23317: u8 [a0 + 17] = 0\n 23320: u8 [a0 + 16] = 0\n 23323: u8 [a0 + 15] = 0\n 23326: u8 [a0 + 14] = 0\n 23329: u8 [a0 + 13] = 0\n 23332: u8 [a0 + 12] = 0\n 23335: u8 [a0 + 11] = 0\n 23338: u8 [a0 + 10] = 0\n 23341: u8 [a0 + 9] = 0\n 23344: u8 [a0 + 8] = 0\n 23347: u8 [a0 + 7] = 0\n 23350: u8 [a0 + 6] = 0\n 23353: u8 [a0 + 5] = 0\n 23356: u8 [a0 + 4] = 0\n 23359: u8 [a0 + 3] = 0x6e\n 23363: u8 [a0 + 2] = 0xbf\n 23368: u8 [a0 + 1] = 0x54\n 23372: u8 [a0 + 0] = 0x2f\n 23375: jump @340 if a1 != 0\n      : @339 (gas: 1)\n 23378: jump @397\n      : @340 (gas: 96)\n 23381: s1 = u64 [sp + 0x1e0]\n 23385: a0 = s1 >> 0x3d\n 23388: a3 = u64 [sp + 0x1f8]\n 23392: a1 = a3 << 0x3\n 23395: a0 = a0 | a1\n 23398: s1 = s1 << 0x3\n 23401: a1 = s1 <u 0x100\n 23405: a1 = a1 ^ 0x1\n 23408: a2 = a0 >u 0\n 23410: a1 = a2 if a0 != 0\n 23413: a0 = u64 [sp + 0x1e8]\n 23417: a0 = a0 << 0x3\n 23420: a4 = u64 [sp + 0x1f0]\n 23424: a2 = a4 >> 0x3d\n 23427: a0 = a0 | a2\n 23430: a2 = a3 >> 0x3d\n 23433: a3 = a4 << 0x3\n 23436: a2 = a2 | a3\n 23439: a3 = a2 >u 0\n 23441: s1 = a0 >u 0\n 23443: s1 = a3 if a0 == 0\n 23446: a0 = a0 | a2\n 23449: s1 = a1 if a0 == 0\n 23452: a0 = u64 [sp + 0xf8]\n 23456: a0 = a0 << 0x8\n 23459: a1 = u64 [sp + 0x118]\n 23463: a0 = a0 | a1\n 23466: a1 = u64 [sp + 0x108]\n 23470: a1 = a1 << 0x10\n 23473: a2 = u64 [sp + 0x100]\n 23477: a2 = a2 << 0x18\n 23480: a1 = a1 | a2\n 23483: a0 = a0 | a1\n 23486: a1 = u64 [sp + 0x110]\n 23490: a1 = a1 << 0x8\n 23493: a2 = u64 [sp + 0x130]\n 23497: a1 = a1 | a2\n 23500: a2 = u64 [sp + 0x128]\n 23504: a2 = a2 << 0x10\n 23507: a3 = u64 [sp + 0x120]\n 23511: a3 = a3 << 0x18\n 23514: a2 = a2 | a3\n 23517: a1 = a1 | a2\n 23520: a1 = a1 << 0x20\n 23523: a0 = a0 | a1\n 23526: u64 [sp + 0x1f8] = a0\n 23530: a0 = u64 [sp + 0x138]\n 23534: a0 = a0 << 0x8\n 23537: a1 = u64 [sp + 0x158]\n 23541: a0 = a0 | a1\n 23544: a1 = u64 [sp + 0x148]\n 23548: a1 = a1 << 0x10\n 23551: a2 = u64 [sp + 0x140]\n 23555: a2 = a2 << 0x18\n 23558: a1 = a1 | a2\n 23561: a0 = a0 | a1\n 23564: a1 = u64 [sp + 0x150]\n 23568: a1 = a1 << 0x8\n 23571: a2 = u64 [sp + 0x170]\n 23575: a1 = a1 | a2\n 23578: a2 = u64 [sp + 0x168]\n 23582: a2 = a2 << 0x10\n 23585: a3 = u64 [sp + 0x160]\n 23589: a3 = a3 << 0x18\n 23592: a2 = a2 | a3\n 23595: a1 = a1 | a2\n 23598: a1 = a1 << 0x20\n 23601: a0 = a0 | a1\n 23604: u64 [sp + 0x1f0] = a0\n 23608: a0 = u64 [sp + 0x178]\n 23612: a0 = a0 << 0x8\n 23615: a1 = u64 [sp + 0x1c0]\n 23619: a0 = a0 | a1\n 23622: a1 = u64 [sp + 0x188]\n 23626: a1 = a1 << 0x10\n 23629: a2 = u64 [sp + 0x180]\n 23633: a2 = a2 << 0x18\n 23636: a1 = a1 | a2\n 23639: a0 = a0 | a1\n 23642: a1 = u64 [sp + 0x190]\n 23646: a1 = a1 << 0x8\n 23649: a2 = u64 [sp + 0x1d8]\n 23653: a1 = a1 | a2\n 23656: a2 = u64 [sp + 0x1d0]\n 23660: a2 = a2 << 0x10\n 23663: a3 = u64 [sp + 0x1c8]\n 23667: a3 = a3 << 0x18\n 23670: a2 = a2 | a3\n 23673: a1 = a1 | a2\n 23676: a1 = a1 << 0x20\n 23679: a0 = a0 | a1\n 23682: u64 [sp + 0x1e8] = a0\n 23686: a0 = u64 [sp + 0x218]\n 23690: i32 a0 = a0 + 0x4\n 23693: a1 = 0x20\n 23696: ra = 298, jump @0\n      : @341 [@dyn 149] (gas: 84)\n 23702: a3 = u64 [sp + 0x80]\n 23706: u8 [a0 + 0x10] = a3\n 23709: a2 = u64 [sp + 0xa0]\n 23713: a1 = a2 >> 0x38\n 23716: u8 [a0 + 0xf] = a1\n 23719: a1 = a2 >> 0x30\n 23722: u8 [a0 + 0xe] = a1\n 23725: a1 = a2 >> 0x28\n 23728: u8 [a0 + 0xd] = a1\n 23731: a1 = a2 >> 0x20\n 23734: u8 [a0 + 0xc] = a1\n 23737: a1 = a2 >> 0x18\n 23740: u8 [a0 + 0xb] = a1\n 23743: a1 = a2 >> 0x10\n 23746: u8 [a0 + 0xa] = a1\n 23749: a1 = a2 >> 0x8\n 23752: u8 [a0 + 0x9] = a1\n 23755: u8 [a0 + 0x8] = a2\n 23758: u8 [a0 + 7] = 0\n 23761: u8 [a0 + 6] = 0\n 23764: u8 [a0 + 5] = 0\n 23767: u8 [a0 + 4] = 0\n 23770: u8 [a0 + 3] = 0\n 23773: u8 [a0 + 2] = 0\n 23776: u8 [a0 + 1] = 0\n 23779: u8 [a0 + 0] = 0\n 23781: a2 = u64 [sp + 0x88]\n 23785: u8 [a0 + 0x18] = a2\n 23788: a1 = a3 >> 0x38\n 23791: u8 [a0 + 0x17] = a1\n 23794: a1 = a3 >> 0x30\n 23797: u8 [a0 + 0x16] = a1\n 23800: a1 = a3 >> 0x28\n 23803: u8 [a0 + 0x15] = a1\n 23806: a1 = a3 >> 0x20\n 23809: u8 [a0 + 0x14] = a1\n 23812: a1 = a3 >> 0x18\n 23815: u8 [a0 + 0x13] = a1\n 23818: a1 = a3 >> 0x10\n 23821: u8 [a0 + 0x12] = a1\n 23824: a1 = a3 >> 0x8\n 23827: u8 [a0 + 0x11] = a1\n 23830: a1 = a2 >> 0x38\n 23833: u8 [a0 + 0x1f] = a1\n 23836: a1 = a2 >> 0x30\n 23839: u8 [a0 + 0x1e] = a1\n 23842: a1 = a2 >> 0x28\n 23845: u8 [a0 + 0x1d] = a1\n 23848: a1 = a2 >> 0x20\n 23851: u8 [a0 + 0x1c] = a1\n 23854: a1 = a2 >> 0x18\n 23857: u8 [a0 + 0x1b] = a1\n 23860: a1 = a2 >> 0x10\n 23863: u8 [a0 + 0x1a] = a1\n 23866: a1 = a2 >> 0x8\n 23869: u8 [a0 + 0x19] = a1\n 23872: ecalli 10 // 'ref_time_left'\n 23874: a3 = u64 [sp + 0x1e8]\n 23878: a3 = 0 if s1 != 0\n 23880: a2 = u64 [sp + 0x1f8]\n 23884: a2 = 0 if s1 != 0\n 23886: a0 = u64 [sp + 0x1f0]\n 23890: a0 = 0 if s1 != 0\n 23892: a0 = reverse a0\n 23894: a1 = a0 << 0x20\n 23897: a2 = reverse a2\n 23899: a2 = a2 >> 0x20\n 23902: a1 = a1 | a2\n 23905: a0 = a0 >> 0x20\n 23908: a2 = reverse a3\n 23910: a3 = a2 << 0x20\n 23913: a0 = a0 | a3\n 23916: a2 = a2 >> 0x20\n 23919: u32 [sp + 0x5f0] = a2\n 23923: u64 [sp + 0x5e8] = a0\n 23927: u64 [sp + 0x5e0] = a1\n 23931: u64 [sp + 1560] = 0\n 23935: u64 [sp + 1552] = 0\n 23939: u64 [sp + 1544] = 0\n 23943: u64 [sp + 1536] = 0\n 23947: a1 = 0x24\n 23950: s1 = u64 [sp + 0x218]\n 23954: a0 = s1\n 23956: ra = 300, jump @0\n      : @342 [@dyn 150] (gas: 4)\n 23962: u64 [sp + 0x1f8] = a0\n 23966: a1 = 0x20\n 23969: a0 = s1\n 23971: ra = 302, jump @0\n      : @343 [@dyn 151] (gas: 20)\n 23977: u32 [sp + 1568] = 0x20\n 23982: u64 [sp + 1624] = 0\n 23986: u64 [sp + 1616] = 0\n 23990: u64 [sp + 1608] = 0\n 23994: u64 [sp + 1600] = 0\n 23998: s1 = u64 [sp + 0x1f8]\n 24002: s1 = s1 << 0x20\n 24005: s1 = s1 >> 0x20\n 24008: a4 = u64 [sp + 0x198]\n 24012: a4 = a4 | s1\n 24015: a0 = a0 << 0x20\n 24018: a0 = a0 >> 0x20\n 24021: a5 = u64 [sp + 0x90]\n 24025: a5 = a5 | a0\n 24028: a1 = 0xffffffffffffffff\n 24031: a2 = 0xffffffffffffffff\n 24034: a0 = u64 [sp + 0x98]\n 24038: a3 = u64 [sp + 0xa8]\n 24042: ecalli 1 // 'call'\n 24044: fallthrough\n      : @344 (gas: 1)\n 24045: jump @346 if a0 == 0\n      : @345 (gas: 1)\n 24048: jump @398\n      : @346 (gas: 2)\n 24051: ecalli 12 // 'return_data_size'\n 24053: fallthrough\n      : @347 (gas: 2)\n 24054: a1 = 0x20\n 24057: jump @349 if a0 >=u a1\n      : @348 (gas: 3)\n 24060: ecalli 12 // 'return_data_size'\n 24062: a1 = a0\n 24064: fallthrough\n      : @349 (gas: 27)\n 24065: a3 = u64 [sp + 0x210]\n 24069: a4 = u64 [sp + 0x200]\n 24073: s1 = u64 [sp + 0x208]\n 24077: a0 = a1 + 0x1f\n 24080: u64 [sp + 0x208] = a1\n 24084: a1 = a0 <u a1\n 24087: u64 [sp + 528] = 0\n 24091: a1 = a1 & 0x1\n 24094: a0 = a0 & 0xffffffffffffffe0\n 24097: a4 = a4 + a0\n 24100: u64 [sp + 0x200] = a4\n 24104: a0 = a4 <u a0\n 24107: s1 = s1 + a1\n 24110: s1 = s1 + a0\n 24113: a2 = s1 ^ a1\n 24116: a1 = s1 <u a1\n 24119: a1 = a0 if a2 == 0\n 24122: a0 = u64 [sp + 0xd0]\n 24126: a1 = a1 + a0\n 24129: a0 = a1 <u a0\n 24132: a0 = a0 + a3\n 24135: u64 [sp + 0x1f8] = a1\n 24139: u64 [sp + 0x1f0] = a0\n 24143: a0 = a0 | a1\n 24146: a1 = s1 <u 0x1\n 24149: a1 = 0 if a0 != 0\n 24151: jump @351 if a1 != 0\n      : @350 (gas: 1)\n 24154: jump @401\n      : @351 (gas: 3)\n 24157: a0 = 0x40\n 24160: a1 = 0x20\n 24163: ra = 304, jump @0\n      : @352 [@dyn 152] (gas: 79)\n 24169: a1 = u64 [sp + 0x1f0]\n 24173: a1 = reverse a1\n 24175: a2 = u64 [sp + 0x1f8]\n 24179: a2 = reverse a2\n 24181: a3 = reverse s1\n 24183: a4 = u64 [sp + 0x200]\n 24187: a4 = reverse a4\n 24189: u8 [a0 + 0x18] = a4\n 24192: a5 = a4 >> 0x38\n 24195: u8 [a0 + 0x1f] = a5\n 24198: a5 = a4 >> 0x30\n 24201: u8 [a0 + 0x1e] = a5\n 24204: a5 = a4 >> 0x28\n 24207: u8 [a0 + 0x1d] = a5\n 24210: a5 = a4 >> 0x20\n 24213: u8 [a0 + 0x1c] = a5\n 24216: a5 = a4 >> 0x18\n 24219: u8 [a0 + 0x1b] = a5\n 24222: a5 = a4 >> 0x10\n 24225: u8 [a0 + 0x1a] = a5\n 24228: a4 = a4 >> 0x8\n 24231: u8 [a0 + 0x19] = a4\n 24234: u8 [a0 + 0x10] = a3\n 24237: a4 = a3 >> 0x38\n 24240: u8 [a0 + 0x17] = a4\n 24243: a4 = a3 >> 0x30\n 24246: u8 [a0 + 0x16] = a4\n 24249: a4 = a3 >> 0x28\n 24252: u8 [a0 + 0x15] = a4\n 24255: a4 = a3 >> 0x20\n 24258: u8 [a0 + 0x14] = a4\n 24261: a4 = a3 >> 0x18\n 24264: u8 [a0 + 0x13] = a4\n 24267: a4 = a3 >> 0x10\n 24270: u8 [a0 + 0x12] = a4\n 24273: a3 = a3 >> 0x8\n 24276: u8 [a0 + 0x11] = a3\n 24279: u8 [a0 + 0x8] = a2\n 24282: a3 = a2 >> 0x38\n 24285: u8 [a0 + 0xf] = a3\n 24288: a3 = a2 >> 0x30\n 24291: u8 [a0 + 0xe] = a3\n 24294: a3 = a2 >> 0x28\n 24297: u8 [a0 + 0xd] = a3\n 24300: a3 = a2 >> 0x20\n 24303: u8 [a0 + 0xc] = a3\n 24306: a3 = a2 >> 0x18\n 24309: u8 [a0 + 0xb] = a3\n 24312: a3 = a2 >> 0x10\n 24315: u8 [a0 + 0xa] = a3\n 24318: a2 = a2 >> 0x8\n 24321: u8 [a0 + 0x9] = a2\n 24324: u8 [a0] = a1\n 24326: a2 = a1 >> 0x38\n 24329: u8 [a0 + 0x7] = a2\n 24332: a2 = a1 >> 0x30\n 24335: u8 [a0 + 0x6] = a2\n 24338: a2 = a1 >> 0x28\n 24341: u8 [a0 + 0x5] = a2\n 24344: a2 = a1 >> 0x20\n 24347: u8 [a0 + 0x4] = a2\n 24350: a2 = a1 >> 0x18\n 24353: u8 [a0 + 0x3] = a2\n 24356: a2 = a1 >> 0x10\n 24359: u8 [a0 + 0x2] = a2\n 24362: a1 = a1 >> 0x8\n 24365: a5 = u64 [sp + 0x210]\n 24369: a2 = a5 >u 0\n 24371: a3 = u64 [sp + 0x208]\n 24375: a3 = a3 <u 0x20\n 24378: a3 = a3 ^ 0x1\n 24381: a3 = a2 if a5 != 0\n 24384: a2 = a5 >u 0\n 24386: a4 = a5 >u 0\n 24388: a4 = a2 if a5 == 0\n 24391: a2 = a5 | a5\n 24394: a4 = a3 if a2 == 0\n 24397: u8 [a0 + 0x1] = a1\n 24400: jump @354 if a4 != 0\n      : @353 (gas: 1)\n 24403: jump @399\n      : @354 (gas: 3)\n 24406: a1 = 0x20\n 24409: a0 = u64 [sp + 0x218]\n 24413: ra = 306, jump @0\n      : @355 [@dyn 153] (gas: 96)\n 24419: a1 = u8 [a0 + 0x9]\n 24422: a2 = u8 [a0 + 0x8]\n 24425: a3 = u8 [a0 + 0xa]\n 24428: a4 = u8 [a0 + 0xb]\n 24431: a1 = a1 << 0x8\n 24434: a1 = a1 | a2\n 24437: a3 = a3 << 0x10\n 24440: a4 = a4 << 0x18\n 24443: a3 = a3 | a4\n 24446: a1 = a1 | a3\n 24449: a2 = u8 [a0 + 0xd]\n 24452: a3 = u8 [a0 + 0xc]\n 24455: a4 = u8 [a0 + 0xe]\n 24458: a5 = u8 [a0 + 0xf]\n 24461: a2 = a2 << 0x8\n 24464: a2 = a2 | a3\n 24467: a4 = a4 << 0x10\n 24470: a5 = a5 << 0x18\n 24473: a4 = a4 | a5\n 24476: a2 = a2 | a4\n 24479: a2 = a2 << 0x20\n 24482: t0 = a2 | a1\n 24485: a2 = u8 [a0 + 0x1]\n 24488: a3 = u8 [a0]\n 24490: a4 = u8 [a0 + 0x2]\n 24493: a5 = u8 [a0 + 0x3]\n 24496: a2 = a2 << 0x8\n 24499: a2 = a2 | a3\n 24502: a4 = a4 << 0x10\n 24505: a5 = a5 << 0x18\n 24508: a4 = a4 | a5\n 24511: a2 = a2 | a4\n 24514: a3 = u8 [a0 + 0x5]\n 24517: a4 = u8 [a0 + 0x4]\n 24520: a5 = u8 [a0 + 0x6]\n 24523: s1 = u8 [a0 + 0x7]\n 24526: a3 = a3 << 0x8\n 24529: a3 = a3 | a4\n 24532: a5 = a5 << 0x10\n 24535: s1 = s1 << 0x18\n 24538: a5 = a5 | s1\n 24541: a3 = a3 | a5\n 24544: a3 = a3 << 0x20\n 24547: a2 = a2 | a3\n 24550: a3 = u8 [a0 + 0x19]\n 24553: a4 = u8 [a0 + 0x18]\n 24556: a5 = u8 [a0 + 0x1a]\n 24559: s1 = u8 [a0 + 0x1b]\n 24562: a3 = a3 << 0x8\n 24565: a3 = a3 | a4\n 24568: a5 = a5 << 0x10\n 24571: s1 = s1 << 0x18\n 24574: a5 = a5 | s1\n 24577: a3 = a3 | a5\n 24580: a4 = u8 [a0 + 0x1d]\n 24583: a5 = u8 [a0 + 0x1c]\n 24586: s1 = u8 [a0 + 0x1e]\n 24589: a1 = u8 [a0 + 0x1f]\n 24592: a4 = a4 << 0x8\n 24595: a4 = a4 | a5\n 24598: s1 = s1 << 0x10\n 24601: a1 = a1 << 0x18\n 24604: a1 = a1 | s1\n 24607: a1 = a1 | a4\n 24610: a1 = a1 << 0x20\n 24613: a3 = a3 | a1\n 24616: a1 = u8 [a0 + 0x11]\n 24619: a4 = u8 [a0 + 0x10]\n 24622: a5 = u8 [a0 + 0x12]\n 24625: s1 = u8 [a0 + 0x13]\n 24628: a1 = a1 << 0x8\n 24631: a1 = a1 | a4\n 24634: a5 = a5 << 0x10\n 24637: s1 = s1 << 0x18\n 24640: a5 = a5 | s1\n 24643: a1 = a1 | a5\n 24646: a4 = u8 [a0 + 0x15]\n 24649: a5 = u8 [a0 + 0x14]\n 24652: s1 = u8 [a0 + 0x16]\n 24655: a0 = u8 [a0 + 0x17]\n 24658: a4 = a4 << 0x8\n 24661: a4 = a4 | a5\n 24664: s1 = s1 << 0x10\n 24667: a0 = a0 << 0x18\n 24670: a0 = a0 | s1\n 24673: a0 = a0 | a4\n 24676: a0 = a0 << 0x20\n 24679: a0 = a0 | a1\n 24682: a1 = reverse a0\n 24684: a4 = reverse a3\n 24686: a4 = a4 <u 0x2\n 24689: a4 = 0 if a1 != 0\n 24691: a1 = t0 | a2\n 24694: a1 = reverse a1\n 24696: a4 = 0 if a1 != 0\n 24698: jump @357 if a4 != 0\n      : @356 (gas: 1)\n 24701: jump @399\n      : @357 (gas: 5)\n 24704: a0 = a0 | a2\n 24707: a1 = t0 | a3\n 24710: a0 = a0 | a1\n 24713: t1 = u64 [sp + 0xe0]\n 24717: jump @331 if a0 == 0\n      : @358 (gas: 18)\n 24721: a4 = u64 [sp + 0xc0]\n 24725: a4 = a4 + 0x1\n 24728: a0 = a4 <u 0x1\n 24731: s1 = u64 [sp + 0xb8]\n 24735: s1 = s1 + a0\n 24738: a0 = a4 | s1\n 24741: a0 = a0 <u 0x1\n 24744: a1 = u64 [sp + 0xb0]\n 24748: a0 = a0 + a1\n 24751: a1 = a0 <u a1\n 24754: a3 = u64 [sp + 0xc8]\n 24758: a3 = a3 + a1\n 24761: a1 = s1 | a3\n 24764: a2 = a4 | a0\n 24767: a1 = a1 | a2\n 24770: a5 = u64 [sp + 0xf0]\n 24774: a2 = u64 [sp + 0xe8]\n 24778: jump @360 if a1 != 0\n      : @359 (gas: 1)\n 24781: jump @405\n      : @360 (gas: 5)\n 24784: u64 [sp + 0xb8] = s1\n 24788: u64 [sp + 0xc0] = a4\n 24792: u64 [sp + 0xc8] = a3\n 24796: u64 [sp + 0xb0] = a0\n 24800: jump @332\n      : @361 (gas: 11)\n 24803: a0 = u64 [sp + 0xc0]\n 24807: u64 [sp + 0x4a0] = a0\n 24811: a0 = u64 [sp + 0xb8]\n 24815: u64 [sp + 0x4a8] = a0\n 24819: a0 = u64 [sp + 0xb0]\n 24823: u64 [sp + 0x4b0] = a0\n 24827: a0 = sp + 0x4c0\n 24831: a1 = sp + 0x4a0\n 24835: a2 = u64 [sp + 0xc8]\n 24839: u64 [sp + 0x4b8] = a2\n 24843: ra = 308, jump @304\n      : @362 [@dyn 154] (gas: 62)\n 24849: s1 = 0\n 24851: t0 = 0\n 24853: a5 = 0\n 24855: t1 = 0\n 24857: u64 [sp + 464] = 0\n 24861: u64 [sp + 456] = 0\n 24865: t2 = 0\n 24867: u64 [sp + 448] = 0\n 24871: a0 = sp + 0x660\n 24875: a0 = a0 << 0x20\n 24878: a0 = a0 >> 0x20\n 24881: a1 = u64 [sp + 0x60]\n 24884: a0 = a0 | a1\n 24887: u64 [sp + 0xa0] = a0\n 24891: a0 = sp + 0x680\n 24895: a0 = a0 << 0x20\n 24898: a0 = a0 >> 0x20\n 24901: a4 = u64 [sp + 0x4c0]\n 24905: a1 = sp + 0x6c0\n 24909: a1 = a1 << 0x20\n 24912: a2 = u64 [sp + 0x4c8]\n 24916: a0 = a0 | a1\n 24919: u64 [sp + 0x98] = a0\n 24923: a0 = a4 + 0x20\n 24926: u64 [sp + 0x48] = a0\n 24929: a0 = a0 <u a4\n 24932: a1 = a2 + a0\n 24935: u64 [sp + 0x60] = a2\n 24938: u64 [sp + 0x40] = a1\n 24941: a1 = a1 <u a2\n 24944: a1 = a0 if a0 == 0\n 24947: a0 = u64 [sp + 0x70]\n 24950: a2 = u64 [sp + 0x58]\n 24953: a0 = a0 & a2\n 24956: a2 = u64 [sp + 0x68]\n 24959: a2 = a2 & 0xffffffffffffffff\n 24962: a3 = u64 [sp + 0x78]\n 24965: a3 = a3 & 0xffffffffffffffff\n 24968: a3 = reverse a3\n 24970: u64 [sp + 0x90] = a3\n 24974: a2 = reverse a2\n 24976: u64 [sp + 0x88] = a2\n 24980: a0 = reverse a0\n 24982: u64 [sp + 0x80] = a0\n 24986: a3 = u64 [sp + 0x4d0]\n 24990: a2 = u64 [sp + 0x4d8]\n 24994: a0 = sp + 0x6a0\n 24998: a0 = a0 << 0x20\n 25001: u64 [sp + 0x78] = a0\n 25004: a1 = a1 + a3\n 25007: u64 [sp + 0x50] = a3\n 25010: u64 [sp + 0x38] = a1\n 25013: a0 = a1 <u a3\n 25016: u64 [sp + 0x58] = a2\n 25019: a0 = a0 + a2\n 25022: u64 [sp + 0x30] = a0\n 25025: a0 = 0xfffffffc\n 25035: u64 [sp + 0xa8] = a0\n 25039: u64 [sp + 0x68] = a4\n 25042: i32 a4 = a4 + 0\n 25044: u64 [sp + 0x28] = a4\n 25047: jump @366\n      : @363 (gas: 4)\n 25049: s1 = u64 [sp + 0x1f8]\n 25053: t0 = u64 [sp + 0x1f0]\n 25057: t2 = u64 [sp + 0x1d8]\n 25061: fallthrough\n      : @364 (gas: 25)\n 25062: s1 = s1 + 0x1\n 25065: a0 = s1 <u 0x1\n 25068: t0 = t0 + a0\n 25071: a0 = s1 | t0\n 25074: a0 = a0 <u 0x1\n 25077: a0 = a0 + a4\n 25080: a1 = a0 <u a4\n 25083: t1 = t1 + a1\n 25086: a1 = u64 [sp + 0x1a0]\n 25090: a1 = s1 <u a1\n 25093: a3 = u64 [sp + 0x1a8]\n 25097: a2 = t0 ^ a3\n 25100: a3 = t0 <u a3\n 25103: a3 = a1 if a2 == 0\n 25106: a5 = u64 [sp + 0x1b0]\n 25110: a1 = a0 <u a5\n 25113: a4 = u64 [sp + 0x1b8]\n 25117: a2 = t1 ^ a4\n 25120: a4 = t1 <u a4\n 25123: a4 = a1 if a2 == 0\n 25126: a1 = a0 ^ a5\n 25129: a1 = a1 | a2\n 25132: a4 = a3 if a1 == 0\n 25135: a5 = a0\n 25137: jump @366 if a4 != 0\n      : @365 (gas: 1)\n 25140: jump @393\n      : @366 (gas: 17)\n 25143: u64 [sp + 0x1d8] = t2\n 25147: u64 [sp + 0x1f8] = s1\n 25151: u64 [sp + 0x420] = s1\n 25155: u64 [sp + 1112] = 0\n 25159: u64 [sp + 1104] = 0\n 25163: u64 [sp + 1096] = 0\n 25167: u64 [sp + 1088] = 0\n 25171: u64 [sp + 0x1f0] = t0\n 25175: u64 [sp + 0x428] = t0\n 25179: u64 [sp + 0x1e0] = a5\n 25183: u64 [sp + 0x430] = a5\n 25187: a0 = sp + 0x460\n 25191: a1 = sp + 0x440\n 25195: a2 = sp + 0x420\n 25199: u64 [sp + 0x1e8] = t1\n 25203: u64 [sp + 0x438] = t1\n 25207: ra = 310, jump @90\n      : @367 [@dyn 155] (gas: 177)\n 25213: s1 = u64 [sp + 0x480]\n 25217: a0 = u64 [sp + 0x488]\n 25221: u64 [sp + 0x190] = a0\n 25225: a0 = u64 [sp + 0x498]\n 25229: u64 [sp + 0x180] = a0\n 25233: a0 = u64 [sp + 0x490]\n 25237: u64 [sp + 0x188] = a0\n 25241: a0 = u64 [sp + 0x478]\n 25245: a1 = u64 [sp + 0x470]\n 25249: a2 = u64 [sp + 0x468]\n 25253: a3 = u64 [sp + 0x460]\n 25257: u64 [sp + 0x6f8] = a0\n 25261: u64 [sp + 0x6f0] = a1\n 25265: u64 [sp + 0x6e8] = a2\n 25269: u64 [sp + 0x6e0] = a3\n 25273: u64 [sp + 1816] = 0\n 25277: u64 [sp + 1808] = 0\n 25281: u64 [sp + 1800] = 0\n 25285: u64 [sp + 1792] = 0\n 25289: u32 [sp + 1824] = 0x20\n 25294: i32 a1 = sp + 0x6e0\n 25298: i32 a3 = sp + 0x700\n 25302: i32 a4 = sp + 0x720\n 25306: a2 = 0xffffffffffffffff\n 25309: a0 = 0\n 25311: ecalli 7 // 'get_storage'\n 25313: a0 = u64 [sp + 0x700]\n 25317: a1 = u64 [sp + 0x708]\n 25321: a2 = u64 [sp + 0x710]\n 25325: a3 = u64 [sp + 0x718]\n 25329: u8 [sp + 1055] = 0\n 25333: u8 [sp + 1054] = 0\n 25337: u8 [sp + 1053] = 0\n 25341: u8 [sp + 1052] = 0\n 25345: u8 [sp + 1051] = 0\n 25349: u8 [sp + 1050] = 0\n 25353: u8 [sp + 1049] = 0\n 25357: u8 [sp + 1048] = 0\n 25361: u8 [sp + 1047] = 0\n 25365: u8 [sp + 1046] = 0\n 25369: u8 [sp + 1045] = 0\n 25373: u8 [sp + 1044] = 0\n 25377: u8 [sp + 1043] = 0\n 25381: u8 [sp + 1042] = 0\n 25385: u8 [sp + 1041] = 0\n 25389: u8 [sp + 1040] = 0\n 25393: u8 [sp + 1039] = 0\n 25397: u8 [sp + 1038] = 0\n 25401: u8 [sp + 1037] = 0\n 25405: u8 [sp + 1036] = 0\n 25409: u8 [sp + 1035] = 0\n 25413: u8 [sp + 1034] = 0\n 25417: u8 [sp + 1033] = 0\n 25421: u8 [sp + 1032] = 0\n 25425: u8 [sp + 1031] = 0\n 25429: u8 [sp + 1030] = 0\n 25433: u8 [sp + 1029] = 0\n 25437: u8 [sp + 1028] = 0\n 25441: u8 [sp + 1027] = 0\n 25445: u8 [sp + 1026] = 0\n 25449: u8 [sp + 1025] = 0\n 25453: u8 [sp + 1024] = 0\n 25457: u8 [sp + 0x3f8] = a3\n 25461: u8 [sp + 0x3f0] = a2\n 25465: u8 [sp + 0x3e8] = a1\n 25469: u8 [sp + 0x3e0] = a0\n 25473: a4 = a3 >> 0x38\n 25476: u8 [sp + 0x3ff] = a4\n 25480: a4 = a3 >> 0x30\n 25483: u8 [sp + 0x3fe] = a4\n 25487: a4 = a3 >> 0x28\n 25490: u8 [sp + 0x3fd] = a4\n 25494: a4 = a3 >> 0x20\n 25497: u8 [sp + 0x3fc] = a4\n 25501: a4 = a3 >> 0x18\n 25504: u8 [sp + 0x3fb] = a4\n 25508: a4 = a3 >> 0x10\n 25511: u8 [sp + 0x3fa] = a4\n 25515: a3 = a3 >> 0x8\n 25518: u8 [sp + 0x3f9] = a3\n 25522: a3 = a2 >> 0x38\n 25525: u8 [sp + 0x3f7] = a3\n 25529: a3 = a2 >> 0x30\n 25532: u8 [sp + 0x3f6] = a3\n 25536: a3 = a2 >> 0x28\n 25539: u8 [sp + 0x3f5] = a3\n 25543: a3 = a2 >> 0x20\n 25546: u8 [sp + 0x3f4] = a3\n 25550: a3 = a2 >> 0x18\n 25553: u8 [sp + 0x3f3] = a3\n 25557: a3 = a2 >> 0x10\n 25560: u8 [sp + 0x3f2] = a3\n 25564: a2 = a2 >> 0x8\n 25567: u8 [sp + 0x3f1] = a2\n 25571: a2 = a1 >> 0x38\n 25574: u8 [sp + 0x3ef] = a2\n 25578: a2 = a1 >> 0x30\n 25581: u8 [sp + 0x3ee] = a2\n 25585: a2 = a1 >> 0x28\n 25588: u8 [sp + 0x3ed] = a2\n 25592: a2 = a1 >> 0x20\n 25595: u8 [sp + 0x3ec] = a2\n 25599: a2 = a1 >> 0x18\n 25602: u8 [sp + 0x3eb] = a2\n 25606: a2 = a1 >> 0x10\n 25609: u8 [sp + 0x3ea] = a2\n 25613: a1 = a1 >> 0x8\n 25616: u8 [sp + 0x3e9] = a1\n 25620: a1 = a0 >> 0x38\n 25623: u8 [sp + 0x3e7] = a1\n 25627: a1 = a0 >> 0x30\n 25630: u8 [sp + 0x3e6] = a1\n 25634: a1 = a0 >> 0x28\n 25637: u8 [sp + 0x3e5] = a1\n 25641: a1 = a0 >> 0x20\n 25644: u8 [sp + 0x3e4] = a1\n 25648: a1 = a0 >> 0x18\n 25651: u8 [sp + 0x3e3] = a1\n 25655: a1 = a0 >> 0x10\n 25658: u8 [sp + 0x3e2] = a1\n 25662: a0 = a0 >> 0x8\n 25665: u8 [sp + 0x3e1] = a0\n 25669: u64 [sp + 0x178] = s1\n 25673: a0 = s1 & 0x1f\n 25676: a1 = sp + 0x3e0\n 25680: a0 = a0 + a1\n 25683: a1 = u8 [a0 + 0x10]\n 25686: u64 [sp + 0xd8] = a1\n 25690: a1 = u8 [a0 + 0x11]\n 25693: u64 [sp + 0xb8] = a1\n 25697: a1 = u8 [a0 + 0x12]\n 25700: u64 [sp + 0xc8] = a1\n 25704: a1 = u8 [a0 + 0x13]\n 25707: u64 [sp + 0xc0] = a1\n 25711: a1 = u8 [a0 + 0x14]\n 25714: u64 [sp + 0xf0] = a1\n 25718: a1 = u8 [a0 + 0x15]\n 25721: u64 [sp + 0xd0] = a1\n 25725: a1 = u8 [a0 + 0x16]\n 25728: u64 [sp + 0xe8] = a1\n 25732: a1 = u8 [a0 + 0x17]\n 25735: u64 [sp + 0xe0] = a1\n 25739: a1 = u8 [a0 + 0x8]\n 25742: u64 [sp + 0x118] = a1\n 25746: a1 = u8 [a0 + 0x9]\n 25749: u64 [sp + 0xf8] = a1\n 25753: a1 = u8 [a0 + 0xa]\n 25756: u64 [sp + 0x108] = a1\n 25760: a1 = u8 [a0 + 0xb]\n 25763: u64 [sp + 0x100] = a1\n 25767: a1 = u8 [a0 + 0xc]\n 25770: u64 [sp + 0x130] = a1\n 25774: a1 = u8 [a0 + 0xd]\n 25777: u64 [sp + 0x110] = a1\n 25781: a1 = u8 [a0 + 0xe]\n 25784: u64 [sp + 0x128] = a1\n 25788: a1 = u8 [a0 + 0xf]\n 25791: u64 [sp + 0x120] = a1\n 25795: a1 = u8 [a0]\n 25797: u64 [sp + 0x158] = a1\n 25801: a1 = u8 [a0 + 0x1]\n 25804: u64 [sp + 0x138] = a1\n 25808: a1 = u8 [a0 + 0x2]\n 25811: u64 [sp + 0x148] = a1\n 25815: a1 = u8 [a0 + 0x3]\n 25818: u64 [sp + 0x140] = a1\n 25822: a1 = u8 [a0 + 0x4]\n 25825: u64 [sp + 0x170] = a1\n 25829: a1 = u8 [a0 + 0x5]\n 25832: u64 [sp + 0x150] = a1\n 25836: a1 = u8 [a0 + 0x6]\n 25839: u64 [sp + 0x168] = a1\n 25843: a0 = u8 [a0 + 0x7]\n 25846: u64 [sp + 0x160] = a0\n 25850: a0 = 0x40\n 25853: a1 = 0x20\n 25856: ra = 312, jump @0\n      : @368 [@dyn 156] (gas: 102)\n 25862: a1 = u8 [a0 + 0x11]\n 25865: a2 = u8 [a0 + 0x10]\n 25868: a3 = u8 [a0 + 0x12]\n 25871: a4 = u8 [a0 + 0x13]\n 25874: a1 = a1 << 0x8\n 25877: a1 = a1 | a2\n 25880: a3 = a3 << 0x10\n 25883: a4 = a4 << 0x18\n 25886: a3 = a3 | a4\n 25889: a1 = a1 | a3\n 25892: a2 = u8 [a0 + 0x15]\n 25895: a3 = u8 [a0 + 0x14]\n 25898: a4 = u8 [a0 + 0x16]\n 25901: a5 = u8 [a0 + 0x17]\n 25904: a2 = a2 << 0x8\n 25907: a2 = a2 | a3\n 25910: a4 = a4 << 0x10\n 25913: a5 = a5 << 0x18\n 25916: a4 = a4 | a5\n 25919: a2 = a2 | a4\n 25922: a2 = a2 << 0x20\n 25925: t0 = a2 | a1\n 25928: a2 = u8 [a0 + 0x1]\n 25931: a3 = u8 [a0]\n 25933: a4 = u8 [a0 + 0x2]\n 25936: a5 = u8 [a0 + 0x3]\n 25939: a2 = a2 << 0x8\n 25942: a2 = a2 | a3\n 25945: a4 = a4 << 0x10\n 25948: a5 = a5 << 0x18\n 25951: a4 = a4 | a5\n 25954: a2 = a2 | a4\n 25957: a3 = u8 [a0 + 0x5]\n 25960: a4 = u8 [a0 + 0x4]\n 25963: a5 = u8 [a0 + 0x6]\n 25966: s1 = u8 [a0 + 0x7]\n 25969: a3 = a3 << 0x8\n 25972: a3 = a3 | a4\n 25975: a5 = a5 << 0x10\n 25978: s1 = s1 << 0x18\n 25981: a5 = a5 | s1\n 25984: a3 = a3 | a5\n 25987: a3 = a3 << 0x20\n 25990: a2 = a2 | a3\n 25993: a3 = u8 [a0 + 0x19]\n 25996: a4 = u8 [a0 + 0x18]\n 25999: a5 = u8 [a0 + 0x1a]\n 26002: s1 = u8 [a0 + 0x1b]\n 26005: a3 = a3 << 0x8\n 26008: a3 = a3 | a4\n 26011: a5 = a5 << 0x10\n 26014: s1 = s1 << 0x18\n 26017: a5 = a5 | s1\n 26020: a3 = a3 | a5\n 26023: a4 = u8 [a0 + 0x1d]\n 26026: a5 = u8 [a0 + 0x1c]\n 26029: s1 = u8 [a0 + 0x1e]\n 26032: a1 = u8 [a0 + 0x1f]\n 26035: a4 = a4 << 0x8\n 26038: a4 = a4 | a5\n 26041: s1 = s1 << 0x10\n 26044: a1 = a1 << 0x18\n 26047: a1 = a1 | s1\n 26050: a1 = a1 | a4\n 26053: a1 = a1 << 0x20\n 26056: a3 = a3 | a1\n 26059: a1 = u8 [a0 + 0x9]\n 26062: a4 = u8 [a0 + 0x8]\n 26065: a5 = u8 [a0 + 0xa]\n 26068: s1 = u8 [a0 + 0xb]\n 26071: a1 = a1 << 0x8\n 26074: a1 = a1 | a4\n 26077: a5 = a5 << 0x10\n 26080: s1 = s1 << 0x18\n 26083: a5 = a5 | s1\n 26086: a1 = a1 | a5\n 26089: a4 = u8 [a0 + 0xd]\n 26092: a5 = u8 [a0 + 0xc]\n 26095: s1 = u8 [a0 + 0xe]\n 26098: a0 = u8 [a0 + 0xf]\n 26101: a4 = a4 << 0x8\n 26104: a4 = a4 | a5\n 26107: s1 = s1 << 0x10\n 26110: a0 = a0 << 0x18\n 26113: a0 = a0 | s1\n 26116: a0 = a0 | a4\n 26119: a0 = a0 << 0x20\n 26122: a0 = a0 | a1\n 26125: a4 = reverse a0\n 26127: a3 = reverse a3\n 26129: a1 = reverse a2\n 26131: a0 = reverse t0\n 26133: u64 [sp + 0x208] = a0\n 26137: u64 [sp + 0x210] = a1\n 26141: a0 = a0 | a1\n 26144: a1 = a3 | a4\n 26147: a1 = a1 | a0\n 26150: a1 = a1 >> 0x20\n 26153: a0 = a0 | a4\n 26156: a0 = a0 << 0x20\n 26159: a0 = a0 | a1\n 26162: jump @397 if a0 != 0\n      : @369 (gas: 6)\n 26166: s1 = a4\n 26168: i32 a0 = a3 + 0\n 26170: a1 = 0x20\n 26173: u64 [sp + 0x218] = a0\n 26177: u64 [sp + 0x200] = a3\n 26181: ra = 314, jump @0\n      : @370 [@dyn 157] (gas: 42)\n 26187: u64 [sp + 0xb0] = s1\n 26191: a2 = u64 [sp + 0x210]\n 26195: a2 = a2 | s1\n 26198: a1 = u64 [sp + 0xa8]\n 26202: a3 = u64 [sp + 0x200]\n 26206: a1 = a3 <u a1\n 26209: a3 = u64 [sp + 0x208]\n 26213: a1 = 0 if a3 != 0\n 26215: a1 = 0 if a2 != 0\n 26217: u8 [a0 + 31] = 0\n 26220: u8 [a0 + 30] = 0\n 26223: u8 [a0 + 29] = 0\n 26226: u8 [a0 + 28] = 0\n 26229: u8 [a0 + 27] = 0\n 26232: u8 [a0 + 26] = 0\n 26235: u8 [a0 + 25] = 0\n 26238: u8 [a0 + 24] = 0\n 26241: u8 [a0 + 23] = 0\n 26244: u8 [a0 + 22] = 0\n 26247: u8 [a0 + 21] = 0\n 26250: u8 [a0 + 20] = 0\n 26253: u8 [a0 + 19] = 0\n 26256: u8 [a0 + 18] = 0\n 26259: u8 [a0 + 17] = 0\n 26262: u8 [a0 + 16] = 0\n 26265: u8 [a0 + 15] = 0\n 26268: u8 [a0 + 14] = 0\n 26271: u8 [a0 + 13] = 0\n 26274: u8 [a0 + 12] = 0\n 26277: u8 [a0 + 11] = 0\n 26280: u8 [a0 + 10] = 0\n 26283: u8 [a0 + 9] = 0\n 26286: u8 [a0 + 8] = 0\n 26289: u8 [a0 + 7] = 0\n 26292: u8 [a0 + 6] = 0\n 26295: u8 [a0 + 5] = 0\n 26298: u8 [a0 + 4] = 0\n 26301: u8 [a0 + 3] = 0x6e\n 26305: u8 [a0 + 2] = 0xbf\n 26310: u8 [a0 + 1] = 0x54\n 26314: u8 [a0 + 0] = 0x2f\n 26317: jump @397 if a1 == 0\n      : @371 (gas: 96)\n 26321: s1 = u64 [sp + 0x178]\n 26325: a0 = s1 >> 0x3d\n 26328: a3 = u64 [sp + 0x190]\n 26332: a1 = a3 << 0x3\n 26335: a0 = a0 | a1\n 26338: s1 = s1 << 0x3\n 26341: a1 = s1 <u 0x100\n 26345: a1 = a1 ^ 0x1\n 26348: a2 = a0 >u 0\n 26350: a1 = a2 if a0 != 0\n 26353: a0 = u64 [sp + 0x180]\n 26357: a0 = a0 << 0x3\n 26360: a4 = u64 [sp + 0x188]\n 26364: a2 = a4 >> 0x3d\n 26367: a0 = a0 | a2\n 26370: a2 = a3 >> 0x3d\n 26373: a3 = a4 << 0x3\n 26376: a2 = a2 | a3\n 26379: a3 = a2 >u 0\n 26381: s1 = a0 >u 0\n 26383: s1 = a3 if a0 == 0\n 26386: a0 = a0 | a2\n 26389: s1 = a1 if a0 == 0\n 26392: a0 = u64 [sp + 0xb8]\n 26396: a0 = a0 << 0x8\n 26399: a1 = u64 [sp + 0xd8]\n 26403: a0 = a0 | a1\n 26406: a1 = u64 [sp + 0xc8]\n 26410: a1 = a1 << 0x10\n 26413: a2 = u64 [sp + 0xc0]\n 26417: a2 = a2 << 0x18\n 26420: a1 = a1 | a2\n 26423: a0 = a0 | a1\n 26426: a1 = u64 [sp + 0xd0]\n 26430: a1 = a1 << 0x8\n 26433: a2 = u64 [sp + 0xf0]\n 26437: a1 = a1 | a2\n 26440: a2 = u64 [sp + 0xe8]\n 26444: a2 = a2 << 0x10\n 26447: a3 = u64 [sp + 0xe0]\n 26451: a3 = a3 << 0x18\n 26454: a2 = a2 | a3\n 26457: a1 = a1 | a2\n 26460: a1 = a1 << 0x20\n 26463: a0 = a0 | a1\n 26466: u64 [sp + 0x190] = a0\n 26470: a0 = u64 [sp + 0xf8]\n 26474: a0 = a0 << 0x8\n 26477: a1 = u64 [sp + 0x118]\n 26481: a0 = a0 | a1\n 26484: a1 = u64 [sp + 0x108]\n 26488: a1 = a1 << 0x10\n 26491: a2 = u64 [sp + 0x100]\n 26495: a2 = a2 << 0x18\n 26498: a1 = a1 | a2\n 26501: a0 = a0 | a1\n 26504: a1 = u64 [sp + 0x110]\n 26508: a1 = a1 << 0x8\n 26511: a2 = u64 [sp + 0x130]\n 26515: a1 = a1 | a2\n 26518: a2 = u64 [sp + 0x128]\n 26522: a2 = a2 << 0x10\n 26525: a3 = u64 [sp + 0x120]\n 26529: a3 = a3 << 0x18\n 26532: a2 = a2 | a3\n 26535: a1 = a1 | a2\n 26538: a1 = a1 << 0x20\n 26541: a0 = a0 | a1\n 26544: u64 [sp + 0x188] = a0\n 26548: a0 = u64 [sp + 0x138]\n 26552: a0 = a0 << 0x8\n 26555: a1 = u64 [sp + 0x158]\n 26559: a0 = a0 | a1\n 26562: a1 = u64 [sp + 0x148]\n 26566: a1 = a1 << 0x10\n 26569: a2 = u64 [sp + 0x140]\n 26573: a2 = a2 << 0x18\n 26576: a1 = a1 | a2\n 26579: a0 = a0 | a1\n 26582: a1 = u64 [sp + 0x150]\n 26586: a1 = a1 << 0x8\n 26589: a2 = u64 [sp + 0x170]\n 26593: a1 = a1 | a2\n 26596: a2 = u64 [sp + 0x168]\n 26600: a2 = a2 << 0x10\n 26603: a3 = u64 [sp + 0x160]\n 26607: a3 = a3 << 0x18\n 26610: a2 = a2 | a3\n 26613: a1 = a1 | a2\n 26616: a1 = a1 << 0x20\n 26619: a0 = a0 | a1\n 26622: u64 [sp + 0x180] = a0\n 26626: a0 = u64 [sp + 0x218]\n 26630: i32 a0 = a0 + 0x4\n 26633: a1 = 0x20\n 26636: ra = 316, jump @0\n      : @372 [@dyn 158] (gas: 84)\n 26642: a3 = u64 [sp + 0x88]\n 26646: u8 [a0 + 0x10] = a3\n 26649: a2 = u64 [sp + 0x80]\n 26653: a1 = a2 >> 0x38\n 26656: u8 [a0 + 0xf] = a1\n 26659: a1 = a2 >> 0x30\n 26662: u8 [a0 + 0xe] = a1\n 26665: a1 = a2 >> 0x28\n 26668: u8 [a0 + 0xd] = a1\n 26671: a1 = a2 >> 0x20\n 26674: u8 [a0 + 0xc] = a1\n 26677: a1 = a2 >> 0x18\n 26680: u8 [a0 + 0xb] = a1\n 26683: a1 = a2 >> 0x10\n 26686: u8 [a0 + 0xa] = a1\n 26689: a1 = a2 >> 0x8\n 26692: u8 [a0 + 0x9] = a1\n 26695: u8 [a0 + 0x8] = a2\n 26698: u8 [a0 + 7] = 0\n 26701: u8 [a0 + 6] = 0\n 26704: u8 [a0 + 5] = 0\n 26707: u8 [a0 + 4] = 0\n 26710: u8 [a0 + 3] = 0\n 26713: u8 [a0 + 2] = 0\n 26716: u8 [a0 + 1] = 0\n 26719: u8 [a0 + 0] = 0\n 26721: a2 = u64 [sp + 0x90]\n 26725: u8 [a0 + 0x18] = a2\n 26728: a1 = a3 >> 0x38\n 26731: u8 [a0 + 0x17] = a1\n 26734: a1 = a3 >> 0x30\n 26737: u8 [a0 + 0x16] = a1\n 26740: a1 = a3 >> 0x28\n 26743: u8 [a0 + 0x15] = a1\n 26746: a1 = a3 >> 0x20\n 26749: u8 [a0 + 0x14] = a1\n 26752: a1 = a3 >> 0x18\n 26755: u8 [a0 + 0x13] = a1\n 26758: a1 = a3 >> 0x10\n 26761: u8 [a0 + 0x12] = a1\n 26764: a1 = a3 >> 0x8\n 26767: u8 [a0 + 0x11] = a1\n 26770: a1 = a2 >> 0x38\n 26773: u8 [a0 + 0x1f] = a1\n 26776: a1 = a2 >> 0x30\n 26779: u8 [a0 + 0x1e] = a1\n 26782: a1 = a2 >> 0x28\n 26785: u8 [a0 + 0x1d] = a1\n 26788: a1 = a2 >> 0x20\n 26791: u8 [a0 + 0x1c] = a1\n 26794: a1 = a2 >> 0x18\n 26797: u8 [a0 + 0x1b] = a1\n 26800: a1 = a2 >> 0x10\n 26803: u8 [a0 + 0x1a] = a1\n 26806: a1 = a2 >> 0x8\n 26809: u8 [a0 + 0x19] = a1\n 26812: ecalli 10 // 'ref_time_left'\n 26814: a3 = u64 [sp + 0x180]\n 26818: a3 = 0 if s1 != 0\n 26820: a2 = u64 [sp + 0x190]\n 26824: a2 = 0 if s1 != 0\n 26826: a0 = u64 [sp + 0x188]\n 26830: a0 = 0 if s1 != 0\n 26832: a0 = reverse a0\n 26834: a1 = a0 << 0x20\n 26837: a2 = reverse a2\n 26839: a2 = a2 >> 0x20\n 26842: a1 = a1 | a2\n 26845: a0 = a0 >> 0x20\n 26848: a2 = reverse a3\n 26850: a3 = a2 << 0x20\n 26853: a0 = a0 | a3\n 26856: a2 = a2 >> 0x20\n 26859: u32 [sp + 0x670] = a2\n 26863: u64 [sp + 0x668] = a0\n 26867: u64 [sp + 0x660] = a1\n 26871: u64 [sp + 1688] = 0\n 26875: u64 [sp + 1680] = 0\n 26879: u64 [sp + 1672] = 0\n 26883: u64 [sp + 1664] = 0\n 26887: a1 = 0x24\n 26890: s1 = u64 [sp + 0x218]\n 26894: a0 = s1\n 26896: ra = 318, jump @0\n      : @373 [@dyn 159] (gas: 4)\n 26902: u64 [sp + 0x190] = a0\n 26906: a1 = 0x20\n 26909: a0 = s1\n 26911: ra = 320, jump @0\n      : @374 [@dyn 160] (gas: 20)\n 26917: u32 [sp + 1696] = 0x20\n 26922: u64 [sp + 1752] = 0\n 26926: u64 [sp + 1744] = 0\n 26930: u64 [sp + 1736] = 0\n 26934: u64 [sp + 1728] = 0\n 26938: s1 = u64 [sp + 0x190]\n 26942: s1 = s1 << 0x20\n 26945: s1 = s1 >> 0x20\n 26948: a4 = u64 [sp + 0x198]\n 26952: a4 = a4 | s1\n 26955: a0 = a0 << 0x20\n 26958: a0 = a0 >> 0x20\n 26961: a5 = u64 [sp + 0x78]\n 26964: a5 = a5 | a0\n 26967: a1 = 0xffffffffffffffff\n 26970: a2 = 0xffffffffffffffff\n 26973: a0 = u64 [sp + 0xa0]\n 26977: a3 = u64 [sp + 0x98]\n 26981: ecalli 1 // 'call'\n 26983: fallthrough\n      : @375 (gas: 1)\n 26984: jump @398 if a0 != 0\n      : @376 (gas: 2)\n 26988: ecalli 12 // 'return_data_size'\n 26990: fallthrough\n      : @377 (gas: 2)\n 26991: a1 = 0x20\n 26994: jump @379 if a0 >=u a1\n      : @378 (gas: 3)\n 26997: ecalli 12 // 'return_data_size'\n 26999: a1 = a0\n 27001: fallthrough\n      : @379 (gas: 27)\n 27002: a3 = u64 [sp + 0x210]\n 27006: s1 = u64 [sp + 0x208]\n 27010: a0 = a1 + 0x1f\n 27013: u64 [sp + 0x208] = a1\n 27017: a1 = a0 <u a1\n 27020: u64 [sp + 528] = 0\n 27024: a1 = a1 & 0x1\n 27027: a0 = a0 & 0xffffffffffffffe0\n 27030: a2 = u64 [sp + 0x200]\n 27034: a2 = a2 + a0\n 27037: u64 [sp + 0x200] = a2\n 27041: a0 = a2 <u a0\n 27044: s1 = s1 + a1\n 27047: s1 = s1 + a0\n 27050: a2 = s1 ^ a1\n 27053: a1 = s1 <u a1\n 27056: a1 = a0 if a2 == 0\n 27059: a0 = u64 [sp + 0xb0]\n 27063: a1 = a1 + a0\n 27066: a0 = a1 <u a0\n 27069: a0 = a0 + a3\n 27072: u64 [sp + 0x190] = a1\n 27076: u64 [sp + 0x188] = a0\n 27080: a0 = a0 | a1\n 27083: a1 = s1 <u 0x1\n 27086: a1 = 0 if a0 != 0\n 27088: jump @403 if a1 == 0\n      : @380 (gas: 3)\n 27092: a0 = 0x40\n 27095: a1 = 0x20\n 27098: ra = 322, jump @0\n      : @381 [@dyn 161] (gas: 79)\n 27104: a1 = u64 [sp + 0x188]\n 27108: a1 = reverse a1\n 27110: a2 = u64 [sp + 0x190]\n 27114: a2 = reverse a2\n 27116: a3 = reverse s1\n 27118: a4 = u64 [sp + 0x200]\n 27122: a4 = reverse a4\n 27124: u8 [a0 + 0x18] = a4\n 27127: a5 = a4 >> 0x38\n 27130: u8 [a0 + 0x1f] = a5\n 27133: a5 = a4 >> 0x30\n 27136: u8 [a0 + 0x1e] = a5\n 27139: a5 = a4 >> 0x28\n 27142: u8 [a0 + 0x1d] = a5\n 27145: a5 = a4 >> 0x20\n 27148: u8 [a0 + 0x1c] = a5\n 27151: a5 = a4 >> 0x18\n 27154: u8 [a0 + 0x1b] = a5\n 27157: a5 = a4 >> 0x10\n 27160: u8 [a0 + 0x1a] = a5\n 27163: a4 = a4 >> 0x8\n 27166: u8 [a0 + 0x19] = a4\n 27169: u8 [a0 + 0x10] = a3\n 27172: a4 = a3 >> 0x38\n 27175: u8 [a0 + 0x17] = a4\n 27178: a4 = a3 >> 0x30\n 27181: u8 [a0 + 0x16] = a4\n 27184: a4 = a3 >> 0x28\n 27187: u8 [a0 + 0x15] = a4\n 27190: a4 = a3 >> 0x20\n 27193: u8 [a0 + 0x14] = a4\n 27196: a4 = a3 >> 0x18\n 27199: u8 [a0 + 0x13] = a4\n 27202: a4 = a3 >> 0x10\n 27205: u8 [a0 + 0x12] = a4\n 27208: a3 = a3 >> 0x8\n 27211: u8 [a0 + 0x11] = a3\n 27214: u8 [a0 + 0x8] = a2\n 27217: a3 = a2 >> 0x38\n 27220: u8 [a0 + 0xf] = a3\n 27223: a3 = a2 >> 0x30\n 27226: u8 [a0 + 0xe] = a3\n 27229: a3 = a2 >> 0x28\n 27232: u8 [a0 + 0xd] = a3\n 27235: a3 = a2 >> 0x20\n 27238: u8 [a0 + 0xc] = a3\n 27241: a3 = a2 >> 0x18\n 27244: u8 [a0 + 0xb] = a3\n 27247: a3 = a2 >> 0x10\n 27250: u8 [a0 + 0xa] = a3\n 27253: a2 = a2 >> 0x8\n 27256: u8 [a0 + 0x9] = a2\n 27259: u8 [a0] = a1\n 27261: a2 = a1 >> 0x38\n 27264: u8 [a0 + 0x7] = a2\n 27267: a2 = a1 >> 0x30\n 27270: u8 [a0 + 0x6] = a2\n 27273: a2 = a1 >> 0x28\n 27276: u8 [a0 + 0x5] = a2\n 27279: a2 = a1 >> 0x20\n 27282: u8 [a0 + 0x4] = a2\n 27285: a2 = a1 >> 0x18\n 27288: u8 [a0 + 0x3] = a2\n 27291: a2 = a1 >> 0x10\n 27294: u8 [a0 + 0x2] = a2\n 27297: a1 = a1 >> 0x8\n 27300: a5 = u64 [sp + 0x210]\n 27304: a2 = a5 >u 0\n 27306: a3 = u64 [sp + 0x208]\n 27310: a3 = a3 <u 0x20\n 27313: a3 = a3 ^ 0x1\n 27316: a3 = a2 if a5 != 0\n 27319: a2 = a5 >u 0\n 27321: a4 = a5 >u 0\n 27323: a4 = a2 if a5 == 0\n 27326: a2 = a5 | a5\n 27329: a4 = a3 if a2 == 0\n 27332: u8 [a0 + 0x1] = a1\n 27335: jump @399 if a4 == 0\n      : @382 (gas: 3)\n 27339: a1 = 0x20\n 27342: a0 = u64 [sp + 0x218]\n 27346: ra = 324, jump @0\n      : @383 [@dyn 162] (gas: 96)\n 27352: a1 = u8 [a0 + 0x9]\n 27355: a2 = u8 [a0 + 0x8]\n 27358: a3 = u8 [a0 + 0xa]\n 27361: a4 = u8 [a0 + 0xb]\n 27364: a1 = a1 << 0x8\n 27367: a1 = a1 | a2\n 27370: a3 = a3 << 0x10\n 27373: a4 = a4 << 0x18\n 27376: a3 = a3 | a4\n 27379: a1 = a1 | a3\n 27382: a2 = u8 [a0 + 0xd]\n 27385: a3 = u8 [a0 + 0xc]\n 27388: a4 = u8 [a0 + 0xe]\n 27391: a5 = u8 [a0 + 0xf]\n 27394: a2 = a2 << 0x8\n 27397: a2 = a2 | a3\n 27400: a4 = a4 << 0x10\n 27403: a5 = a5 << 0x18\n 27406: a4 = a4 | a5\n 27409: a2 = a2 | a4\n 27412: a2 = a2 << 0x20\n 27415: t0 = a2 | a1\n 27418: a2 = u8 [a0 + 0x1]\n 27421: a3 = u8 [a0]\n 27423: a4 = u8 [a0 + 0x2]\n 27426: a5 = u8 [a0 + 0x3]\n 27429: a2 = a2 << 0x8\n 27432: a2 = a2 | a3\n 27435: a4 = a4 << 0x10\n 27438: a5 = a5 << 0x18\n 27441: a4 = a4 | a5\n 27444: a2 = a2 | a4\n 27447: a3 = u8 [a0 + 0x5]\n 27450: a4 = u8 [a0 + 0x4]\n 27453: a5 = u8 [a0 + 0x6]\n 27456: s1 = u8 [a0 + 0x7]\n 27459: a3 = a3 << 0x8\n 27462: a3 = a3 | a4\n 27465: a5 = a5 << 0x10\n 27468: s1 = s1 << 0x18\n 27471: a5 = a5 | s1\n 27474: a3 = a3 | a5\n 27477: a3 = a3 << 0x20\n 27480: a2 = a2 | a3\n 27483: a3 = u8 [a0 + 0x19]\n 27486: a4 = u8 [a0 + 0x18]\n 27489: a5 = u8 [a0 + 0x1a]\n 27492: s1 = u8 [a0 + 0x1b]\n 27495: a3 = a3 << 0x8\n 27498: a3 = a3 | a4\n 27501: a5 = a5 << 0x10\n 27504: s1 = s1 << 0x18\n 27507: a5 = a5 | s1\n 27510: a3 = a3 | a5\n 27513: a4 = u8 [a0 + 0x1d]\n 27516: a5 = u8 [a0 + 0x1c]\n 27519: s1 = u8 [a0 + 0x1e]\n 27522: a1 = u8 [a0 + 0x1f]\n 27525: a4 = a4 << 0x8\n 27528: a4 = a4 | a5\n 27531: s1 = s1 << 0x10\n 27534: a1 = a1 << 0x18\n 27537: a1 = a1 | s1\n 27540: a1 = a1 | a4\n 27543: a1 = a1 << 0x20\n 27546: a3 = a3 | a1\n 27549: a1 = u8 [a0 + 0x11]\n 27552: a4 = u8 [a0 + 0x10]\n 27555: a5 = u8 [a0 + 0x12]\n 27558: s1 = u8 [a0 + 0x13]\n 27561: a1 = a1 << 0x8\n 27564: a1 = a1 | a4\n 27567: a5 = a5 << 0x10\n 27570: s1 = s1 << 0x18\n 27573: a5 = a5 | s1\n 27576: a1 = a1 | a5\n 27579: a4 = u8 [a0 + 0x15]\n 27582: a5 = u8 [a0 + 0x14]\n 27585: s1 = u8 [a0 + 0x16]\n 27588: a0 = u8 [a0 + 0x17]\n 27591: a4 = a4 << 0x8\n 27594: a4 = a4 | a5\n 27597: s1 = s1 << 0x10\n 27600: a0 = a0 << 0x18\n 27603: a0 = a0 | s1\n 27606: a0 = a0 | a4\n 27609: a0 = a0 << 0x20\n 27612: a0 = a0 | a1\n 27615: a1 = reverse a0\n 27617: a4 = reverse a3\n 27619: a4 = a4 <u 0x2\n 27622: a4 = 0 if a1 != 0\n 27624: a1 = t0 | a2\n 27627: a1 = reverse a1\n 27629: a4 = 0 if a1 != 0\n 27631: jump @399 if a4 == 0\n      : @384 (gas: 6)\n 27635: a0 = a0 | a2\n 27638: a1 = t0 | a3\n 27641: a0 = a0 | a1\n 27644: t1 = u64 [sp + 0x1e8]\n 27648: a4 = u64 [sp + 0x1e0]\n 27652: jump @363 if a0 == 0\n      : @385 (gas: 26)\n 27656: a0 = u64 [sp + 0x68]\n 27659: a3 = u64 [sp + 0x50]\n 27662: a0 = a0 | a3\n 27665: a1 = u64 [sp + 0x60]\n 27668: a2 = u64 [sp + 0x58]\n 27671: a1 = a1 | a2\n 27674: a0 = a0 | a1\n 27677: a0 = a0 >> 0x20\n 27680: a1 = a1 | a3\n 27683: a1 = a1 << 0x20\n 27686: a0 = a0 | a1\n 27689: u64 [sp + 0x218] = a0\n 27693: a0 = u64 [sp + 0x1f8]\n 27697: u64 [sp + 0x360] = a0\n 27701: u64 [sp + 920] = 0\n 27705: u64 [sp + 912] = 0\n 27709: u64 [sp + 904] = 0\n 27713: u64 [sp + 896] = 0\n 27717: a0 = u64 [sp + 0x1f0]\n 27721: u64 [sp + 0x368] = a0\n 27725: u64 [sp + 0x370] = a4\n 27729: a0 = sp + 0x3a0\n 27733: a1 = sp + 0x380\n 27737: a2 = sp + 0x360\n 27741: u64 [sp + 0x378] = t1\n 27745: ra = 326, jump @90\n      : @386 [@dyn 163] (gas: 27)\n 27751: a0 = u64 [sp + 0x3d8]\n 27755: u64 [sp + 0x210] = a0\n 27759: a0 = u64 [sp + 0x3d0]\n 27763: u64 [sp + 0x208] = a0\n 27767: a0 = u64 [sp + 0x3c8]\n 27771: u64 [sp + 0x200] = a0\n 27775: s1 = u64 [sp + 0x3c0]\n 27779: a0 = u64 [sp + 0x3b8]\n 27783: a1 = u64 [sp + 0x3b0]\n 27787: a2 = u64 [sp + 0x3a8]\n 27791: a3 = u64 [sp + 0x3a0]\n 27795: u64 [sp + 0x6f8] = a0\n 27799: u64 [sp + 0x6f0] = a1\n 27803: u64 [sp + 0x6e8] = a2\n 27807: u64 [sp + 0x6e0] = a3\n 27811: u64 [sp + 1816] = 0\n 27815: u64 [sp + 1808] = 0\n 27819: u64 [sp + 1800] = 0\n 27823: u64 [sp + 1792] = 0\n 27827: u32 [sp + 1824] = 0x20\n 27832: i32 a1 = sp + 0x6e0\n 27836: i32 a3 = sp + 0x700\n 27840: i32 a4 = sp + 0x720\n 27844: a2 = 0xffffffffffffffff\n 27847: a0 = 0\n 27849: ecalli 7 // 'get_storage'\n 27851: fallthrough\n      : @387 (gas: 98)\n 27852: a0 = u64 [sp + 0x700]\n 27856: a1 = u64 [sp + 0x708]\n 27860: a2 = u64 [sp + 0x710]\n 27864: a3 = u64 [sp + 0x718]\n 27868: u8 [sp + 863] = 0\n 27872: u8 [sp + 862] = 0\n 27876: u8 [sp + 861] = 0\n 27880: u8 [sp + 860] = 0\n 27884: u8 [sp + 859] = 0\n 27888: u8 [sp + 858] = 0\n 27892: u8 [sp + 857] = 0\n 27896: u8 [sp + 856] = 0\n 27900: u8 [sp + 855] = 0\n 27904: u8 [sp + 854] = 0\n 27908: u8 [sp + 853] = 0\n 27912: u8 [sp + 852] = 0\n 27916: u8 [sp + 851] = 0\n 27920: u8 [sp + 850] = 0\n 27924: u8 [sp + 849] = 0\n 27928: u8 [sp + 848] = 0\n 27932: u8 [sp + 847] = 0\n 27936: u8 [sp + 846] = 0\n 27940: u8 [sp + 845] = 0\n 27944: u8 [sp + 844] = 0\n 27948: u8 [sp + 843] = 0\n 27952: u8 [sp + 842] = 0\n 27956: u8 [sp + 841] = 0\n 27960: u8 [sp + 840] = 0\n 27964: u8 [sp + 839] = 0\n 27968: u8 [sp + 838] = 0\n 27972: u8 [sp + 837] = 0\n 27976: u8 [sp + 836] = 0\n 27980: u8 [sp + 835] = 0\n 27984: u8 [sp + 834] = 0\n 27988: u8 [sp + 833] = 0\n 27992: u8 [sp + 832] = 0\n 27996: u8 [sp + 0x338] = a3\n 28000: u8 [sp + 0x330] = a2\n 28004: u8 [sp + 0x328] = a1\n 28008: u8 [sp + 0x320] = a0\n 28012: a4 = a3 >> 0x38\n 28015: u8 [sp + 0x33f] = a4\n 28019: a4 = a3 >> 0x30\n 28022: u8 [sp + 0x33e] = a4\n 28026: a4 = a3 >> 0x28\n 28029: u8 [sp + 0x33d] = a4\n 28033: a4 = a3 >> 0x20\n 28036: u8 [sp + 0x33c] = a4\n 28040: a4 = a3 >> 0x18\n 28043: u8 [sp + 0x33b] = a4\n 28047: a4 = a3 >> 0x10\n 28050: u8 [sp + 0x33a] = a4\n 28054: a3 = a3 >> 0x8\n 28057: u8 [sp + 0x339] = a3\n 28061: a3 = a2 >> 0x38\n 28064: u8 [sp + 0x337] = a3\n 28068: a3 = a2 >> 0x30\n 28071: u8 [sp + 0x336] = a3\n 28075: a3 = a2 >> 0x28\n 28078: u8 [sp + 0x335] = a3\n 28082: a3 = a2 >> 0x20\n 28085: u8 [sp + 0x334] = a3\n 28089: a3 = a2 >> 0x18\n 28092: u8 [sp + 0x333] = a3\n 28096: a3 = a2 >> 0x10\n 28099: u8 [sp + 0x332] = a3\n 28103: a2 = a2 >> 0x8\n 28106: u8 [sp + 0x331] = a2\n 28110: a2 = a1 >> 0x38\n 28113: u8 [sp + 0x32f] = a2\n 28117: a2 = a1 >> 0x30\n 28120: u8 [sp + 0x32e] = a2\n 28124: a2 = a1 >> 0x28\n 28127: u8 [sp + 0x32d] = a2\n 28131: a2 = a1 >> 0x20\n 28134: u8 [sp + 0x32c] = a2\n 28138: a2 = a1 >> 0x18\n 28141: u8 [sp + 0x32b] = a2\n 28145: a2 = a1 >> 0x10\n 28148: u8 [sp + 0x32a] = a2\n 28152: a1 = a1 >> 0x8\n 28155: u8 [sp + 0x329] = a1\n 28159: a1 = a0 >> 0x38\n 28162: u8 [sp + 0x327] = a1\n 28166: a1 = a0 >> 0x30\n 28169: u8 [sp + 0x326] = a1\n 28173: a1 = a0 >> 0x28\n 28176: u8 [sp + 0x325] = a1\n 28180: a1 = a0 >> 0x20\n 28183: u8 [sp + 0x324] = a1\n 28187: a1 = a0 >> 0x18\n 28190: u8 [sp + 0x323] = a1\n 28194: a1 = a0 >> 0x10\n 28197: u8 [sp + 0x322] = a1\n 28201: a0 = a0 >> 0x8\n 28204: u8 [sp + 0x321] = a0\n 28208: a0 = u64 [sp + 0x218]\n 28212: jump @397 if a0 != 0\n      : @388 (gas: 47)\n 28216: u64 [sp + 0x218] = s1\n 28220: a0 = s1 & 0x1f\n 28223: a1 = sp + 0x320\n 28227: a0 = a0 + a1\n 28230: a1 = u8 [a0 + 0x8]\n 28233: u64 [sp + 0x118] = a1\n 28237: a1 = u8 [a0 + 0x9]\n 28240: u64 [sp + 0xf8] = a1\n 28244: a1 = u8 [a0 + 0xa]\n 28247: u64 [sp + 0x108] = a1\n 28251: a1 = u8 [a0 + 0xb]\n 28254: u64 [sp + 0x100] = a1\n 28258: a1 = u8 [a0 + 0xc]\n 28261: u64 [sp + 0x130] = a1\n 28265: a1 = u8 [a0 + 0xd]\n 28268: u64 [sp + 0x110] = a1\n 28272: a1 = u8 [a0 + 0xe]\n 28275: u64 [sp + 0x128] = a1\n 28279: a1 = u8 [a0 + 0xf]\n 28282: u64 [sp + 0x120] = a1\n 28286: a1 = u8 [a0]\n 28288: u64 [sp + 0x158] = a1\n 28292: a1 = u8 [a0 + 0x1]\n 28295: u64 [sp + 0x138] = a1\n 28299: a1 = u8 [a0 + 0x2]\n 28302: u64 [sp + 0x148] = a1\n 28306: a1 = u8 [a0 + 0x3]\n 28309: u64 [sp + 0x140] = a1\n 28313: a1 = u8 [a0 + 0x4]\n 28316: u64 [sp + 0x170] = a1\n 28320: a1 = u8 [a0 + 0x5]\n 28323: u64 [sp + 0x150] = a1\n 28327: a1 = u8 [a0 + 0x6]\n 28330: u64 [sp + 0x168] = a1\n 28334: a1 = u8 [a0 + 0x7]\n 28337: u64 [sp + 0x160] = a1\n 28341: a1 = u8 [a0 + 0x10]\n 28344: u64 [sp + 0x190] = a1\n 28348: a1 = u8 [a0 + 0x11]\n 28351: u64 [sp + 0x178] = a1\n 28355: a1 = u8 [a0 + 0x12]\n 28358: u64 [sp + 0x188] = a1\n 28362: a0 = u8 [a0 + 0x13]\n 28365: u64 [sp + 0x180] = a0\n 28369: a1 = 0x20\n 28372: a0 = u64 [sp + 0x28]\n 28375: ra = 328, jump @0\n      : @389 [@dyn 164] (gas: 108)\n 28381: a1 = u8 [a0 + 0x1]\n 28384: a2 = u8 [a0]\n 28386: a3 = u8 [a0 + 0x2]\n 28389: a4 = u8 [a0 + 0x3]\n 28392: a1 = a1 << 0x8\n 28395: a1 = a1 | a2\n 28398: a3 = a3 << 0x10\n 28401: a4 = a4 << 0x18\n 28404: a3 = a3 | a4\n 28407: a1 = a1 | a3\n 28410: a2 = u8 [a0 + 0x5]\n 28413: a3 = u8 [a0 + 0x4]\n 28416: a4 = u8 [a0 + 0x6]\n 28419: a5 = u8 [a0 + 0x7]\n 28422: a2 = a2 << 0x8\n 28425: a2 = a2 | a3\n 28428: a4 = a4 << 0x10\n 28431: a5 = a5 << 0x18\n 28434: a4 = a4 | a5\n 28437: a2 = a2 | a4\n 28440: a2 = a2 << 0x20\n 28443: t0 = a2 | a1\n 28446: a2 = u8 [a0 + 0x9]\n 28449: a3 = u8 [a0 + 0x8]\n 28452: a4 = u8 [a0 + 0xa]\n 28455: a5 = u8 [a0 + 0xb]\n 28458: a2 = a2 << 0x8\n 28461: a2 = a2 | a3\n 28464: a4 = a4 << 0x10\n 28467: a5 = a5 << 0x18\n 28470: a4 = a4 | a5\n 28473: a2 = a2 | a4\n 28476: a3 = u8 [a0 + 0xd]\n 28479: a4 = u8 [a0 + 0xc]\n 28482: a5 = u8 [a0 + 0xe]\n 28485: s1 = u8 [a0 + 0xf]\n 28488: a3 = a3 << 0x8\n 28491: a3 = a3 | a4\n 28494: a5 = a5 << 0x10\n 28497: s1 = s1 << 0x18\n 28500: a5 = a5 | s1\n 28503: a3 = a3 | a5\n 28506: a3 = a3 << 0x20\n 28509: a2 = a2 | a3\n 28512: a3 = u8 [a0 + 0x11]\n 28515: a4 = u8 [a0 + 0x10]\n 28518: a5 = u8 [a0 + 0x12]\n 28521: s1 = u8 [a0 + 0x13]\n 28524: a3 = a3 << 0x8\n 28527: a3 = a3 | a4\n 28530: a5 = a5 << 0x10\n 28533: s1 = s1 << 0x18\n 28536: a5 = a5 | s1\n 28539: a3 = a3 | a5\n 28542: a4 = u8 [a0 + 0x15]\n 28545: a5 = u8 [a0 + 0x14]\n 28548: s1 = u8 [a0 + 0x16]\n 28551: a1 = u8 [a0 + 0x17]\n 28554: a4 = a4 << 0x8\n 28557: a4 = a4 | a5\n 28560: s1 = s1 << 0x10\n 28563: a1 = a1 << 0x18\n 28566: a1 = a1 | s1\n 28569: a1 = a1 | a4\n 28572: a1 = a1 << 0x20\n 28575: a3 = a3 | a1\n 28578: a1 = u8 [a0 + 0x19]\n 28581: a4 = u8 [a0 + 0x18]\n 28584: a5 = u8 [a0 + 0x1a]\n 28587: s1 = u8 [a0 + 0x1b]\n 28590: a1 = a1 << 0x8\n 28593: a1 = a1 | a4\n 28596: a5 = a5 << 0x10\n 28599: s1 = s1 << 0x18\n 28602: a5 = a5 | s1\n 28605: a1 = a1 | a5\n 28608: a4 = u8 [a0 + 0x1d]\n 28611: a5 = u8 [a0 + 0x1c]\n 28614: s1 = u8 [a0 + 0x1e]\n 28617: a0 = u8 [a0 + 0x1f]\n 28620: a4 = a4 << 0x8\n 28623: a4 = a4 | a5\n 28626: s1 = s1 << 0x10\n 28629: a0 = a0 << 0x18\n 28632: a0 = a0 | s1\n 28635: a0 = a0 | a4\n 28638: a0 = a0 << 0x20\n 28641: a0 = a0 | a1\n 28644: a0 = reverse a0\n 28646: a1 = reverse a3\n 28648: a2 = reverse a2\n 28650: a3 = reverse t0\n 28652: t1 = u64 [sp + 0x1c0]\n 28656: a4 = a3 ^ t1\n 28659: a3 = t1 <u a3\n 28662: t2 = u64 [sp + 0x1d8]\n 28666: a5 = t2 <u a2\n 28669: a5 = a3 if a4 != 0\n 28672: s1 = u64 [sp + 0x1c8]\n 28676: a3 = a1 ^ s1\n 28679: a1 = s1 <u a1\n 28682: t0 = u64 [sp + 0x1d0]\n 28686: a0 = t0 <u a0\n 28689: a0 = a1 if a3 != 0\n 28692: a1 = a2 ^ t2\n 28695: a1 = a1 | a4\n 28698: a0 = a5 if a1 != 0\n 28701: jump @407 if a0 == 0\n      : @390 (gas: 40)\n 28705: a0 = t2 >> 0x3b\n 28708: a1 = t1 << 0x5\n 28711: ra = a1 | a0\n 28714: a0 = t0 >> 0x3b\n 28717: a2 = s1 << 0x5\n 28720: a2 = a2 | a0\n 28723: a0 = t0 << 0x5\n 28726: a3 = u64 [sp + 0x48]\n 28729: a0 = a0 + a3\n 28732: a3 = a0 <u a3\n 28735: a5 = u64 [sp + 0x40]\n 28738: a2 = a2 + a5\n 28741: a2 = a2 + a3\n 28744: a4 = a2 ^ a5\n 28747: a5 = a2 <u a5\n 28750: a5 = a3 if a4 == 0\n 28753: a3 = s1 >> 0x3b\n 28756: a4 = t2 << 0x5\n 28759: a3 = a3 | a4\n 28762: a4 = u64 [sp + 0x38]\n 28765: a3 = a3 + a4\n 28768: a4 = a3 <u a4\n 28771: a1 = u64 [sp + 0x30]\n 28774: a1 = a1 + ra\n 28777: a1 = a1 + a4\n 28780: a5 = a5 + a3\n 28783: a3 = a5 <u a3\n 28786: a1 = a1 + a3\n 28789: a1 = a1 | a2\n 28792: a2 = a0 | a5\n 28795: a2 = a2 | a1\n 28798: a1 = a1 | a5\n 28801: a2 = a2 >> 0x20\n 28804: a1 = a1 << 0x20\n 28807: a1 = a1 | a2\n 28810: u64 [sp + 0x1d0] = t0\n 28814: u64 [sp + 0x1c8] = s1\n 28818: t0 = 0xffffffffffffffff\n 28821: u64 [sp + 0x1c0] = t1\n 28825: jump @397 if a1 != 0\n      : @391 (gas: 89)\n 28829: a3 = u64 [sp + 0x218]\n 28833: a1 = a3 >> 0x3d\n 28836: a4 = u64 [sp + 0x200]\n 28840: a2 = a4 << 0x3\n 28843: a2 = a2 | a1\n 28846: a1 = a3 << 0x3\n 28849: a1 = a1 <u 0x100\n 28853: a1 = a1 ^ 0x1\n 28856: a3 = a2 >u 0\n 28858: a1 = a3 if a2 != 0\n 28861: a2 = a4 >> 0x3d\n 28864: a4 = u64 [sp + 0x208]\n 28868: a3 = a4 << 0x3\n 28871: a2 = a2 | a3\n 28874: a3 = a4 >> 0x3d\n 28877: a4 = u64 [sp + 0x210]\n 28881: a4 = a4 << 0x3\n 28884: a3 = a3 | a4\n 28887: a4 = a3 >u 0\n 28889: a5 = a2 >u 0\n 28891: a5 = a4 if a3 != 0\n 28894: a2 = a2 | a3\n 28897: a1 = a5 if a2 != 0\n 28900: a2 = u64 [sp + 0xf8]\n 28904: a2 = a2 << 0x8\n 28907: a3 = u64 [sp + 0x118]\n 28911: a2 = a2 | a3\n 28914: a3 = u64 [sp + 0x108]\n 28918: a3 = a3 << 0x10\n 28921: a4 = u64 [sp + 0x100]\n 28925: a4 = a4 << 0x18\n 28928: a3 = a3 | a4\n 28931: a2 = a2 | a3\n 28934: a3 = u64 [sp + 0x110]\n 28938: a3 = a3 << 0x8\n 28941: a4 = u64 [sp + 0x130]\n 28945: a3 = a3 | a4\n 28948: a4 = u64 [sp + 0x128]\n 28952: a4 = a4 << 0x10\n 28955: a5 = u64 [sp + 0x120]\n 28959: a5 = a5 << 0x18\n 28962: a4 = a4 | a5\n 28965: a3 = a3 | a4\n 28968: a3 = a3 << 0x20\n 28971: a2 = a2 | a3\n 28974: a3 = u64 [sp + 0x138]\n 28978: a3 = a3 << 0x8\n 28981: a4 = u64 [sp + 0x158]\n 28985: a3 = a3 | a4\n 28988: a4 = u64 [sp + 0x148]\n 28992: a4 = a4 << 0x10\n 28995: a5 = u64 [sp + 0x140]\n 28999: a5 = a5 << 0x18\n 29002: a4 = a4 | a5\n 29005: a3 = a3 | a4\n 29008: a4 = u64 [sp + 0x150]\n 29012: a4 = a4 << 0x8\n 29015: a5 = u64 [sp + 0x170]\n 29019: a4 = a4 | a5\n 29022: a5 = u64 [sp + 0x168]\n 29026: a5 = a5 << 0x10\n 29029: s1 = u64 [sp + 0x160]\n 29033: s1 = s1 << 0x18\n 29036: a5 = a5 | s1\n 29039: a4 = a4 | a5\n 29042: a4 = a4 << 0x20\n 29045: a3 = a3 | a4\n 29048: a4 = u64 [sp + 0x178]\n 29052: a4 = a4 << 0x8\n 29055: a5 = u64 [sp + 0x190]\n 29059: a4 = a4 | a5\n 29062: a5 = u64 [sp + 0x188]\n 29066: a5 = a5 << 0x10\n 29069: s1 = u64 [sp + 0x180]\n 29073: s1 = s1 << 0x18\n 29076: a5 = a5 | s1\n 29079: a4 = a4 | a5\n 29082: a3 = a3 & 0xffffffffffffffff\n 29085: a2 = a2 & 0xffffffffffffffff\n 29088: s1 = u64 [sp + 0x70]\n 29091: s1 = s1 & a4\n 29094: s1 = 0 if a1 != 0\n 29096: a2 = 0 if a1 != 0\n 29098: u64 [sp + 0x218] = a2\n 29102: a3 = 0 if a1 != 0\n 29104: u64 [sp + 0x210] = a3\n 29108: i32 a0 = a0 + 0\n 29110: a1 = 0x20\n 29113: ra = 330, jump @0\n      : @392 [@dyn 165] (gas: 76)\n 29119: a1 = reverse s1\n 29121: a2 = u64 [sp + 0x218]\n 29125: a2 = reverse a2\n 29127: a3 = u64 [sp + 0x210]\n 29131: a3 = reverse a3\n 29133: a4 = a3 >> 0x38\n 29136: u8 [a0 + 0x1f] = a4\n 29139: a4 = a3 >> 0x30\n 29142: u8 [a0 + 0x1e] = a4\n 29145: a4 = a3 >> 0x28\n 29148: u8 [a0 + 0x1d] = a4\n 29151: a4 = a3 >> 0x20\n 29154: u8 [a0 + 0x1c] = a4\n 29157: a4 = a3 >> 0x18\n 29160: u8 [a0 + 0x1b] = a4\n 29163: a4 = a3 >> 0x10\n 29166: u8 [a0 + 0x1a] = a4\n 29169: a4 = a3 >> 0x8\n 29172: u8 [a0 + 0x19] = a4\n 29175: u8 [a0 + 0x18] = a3\n 29178: u8 [a0 + 0x10] = a2\n 29181: u8 [a0 + 11] = 0\n 29184: u8 [a0 + 10] = 0\n 29187: u8 [a0 + 9] = 0\n 29190: u8 [a0 + 7] = 0\n 29193: u8 [a0 + 6] = 0\n 29196: u8 [a0 + 5] = 0\n 29199: u8 [a0 + 4] = 0\n 29202: u8 [a0 + 3] = 0\n 29205: u8 [a0 + 2] = 0\n 29208: u8 [a0 + 1] = 0\n 29211: u8 [a0 + 0] = 0\n 29213: a3 = a2 >> 0x38\n 29216: u8 [a0 + 0x17] = a3\n 29219: a3 = a2 >> 0x30\n 29222: u8 [a0 + 0x16] = a3\n 29225: a3 = a2 >> 0x28\n 29228: u8 [a0 + 0x15] = a3\n 29231: a3 = a2 >> 0x20\n 29234: u8 [a0 + 0x14] = a3\n 29237: a3 = a2 >> 0x18\n 29240: u8 [a0 + 0x13] = a3\n 29243: a3 = a2 >> 0x10\n 29246: u8 [a0 + 0x12] = a3\n 29249: a2 = a2 >> 0x8\n 29252: u8 [a0 + 0x11] = a2\n 29255: u8 [a0 + 0x8] = a1\n 29258: a2 = a1 >> 0x38\n 29261: u8 [a0 + 0xf] = a2\n 29264: a2 = a1 >> 0x30\n 29267: u8 [a0 + 0xe] = a2\n 29270: a2 = a1 >> 0x28\n 29273: u8 [a0 + 0xd] = a2\n 29276: a1 = a1 >> 0x20\n 29279: u8 [a0 + 0xc] = a1\n 29282: a1 = u64 [sp + 0x1d0]\n 29286: a1 = a1 + 0x1\n 29289: a0 = a1 <u 0x1\n 29292: a2 = u64 [sp + 0x1c8]\n 29296: a2 = a2 + a0\n 29299: u64 [sp + 0x1d0] = a1\n 29303: u64 [sp + 0x1c8] = a2\n 29307: a0 = a1 | a2\n 29310: a0 = a0 <u 0x1\n 29313: a1 = u64 [sp + 0x1d8]\n 29317: a0 = a0 + a1\n 29320: a1 = a0 <u a1\n 29323: a2 = u64 [sp + 0x1c0]\n 29327: a2 = a2 + a1\n 29330: u64 [sp + 0x1c0] = a2\n 29334: t2 = a0\n 29336: s1 = u64 [sp + 0x1f8]\n 29340: t0 = u64 [sp + 0x1f0]\n 29344: t1 = u64 [sp + 0x1e8]\n 29348: a4 = u64 [sp + 0x1e0]\n 29352: jump @364\n      : @393 (gas: 5)\n 29355: a1 = u64 [sp + 0x68]\n 29358: a2 = u64 [sp + 0x60]\n 29361: a3 = u64 [sp + 0x58]\n 29364: a4 = u64 [sp + 0x50]\n 29367: jump @396\n      : @394 (gas: 7)\n 29369: u64 [sp + 568] = 0\n 29373: u64 [sp + 560] = 0\n 29377: u64 [sp + 552] = 0\n 29381: a0 = sp + 0x240\n 29385: a1 = sp + 0x220\n 29389: u64 [sp + 544] = 0\n 29393: ra = 332, jump @304\n      : @395 [@dyn 166] (gas: 5)\n 29399: a3 = u64 [sp + 0x258]\n 29403: a4 = u64 [sp + 0x250]\n 29407: a2 = u64 [sp + 0x248]\n 29411: a1 = u64 [sp + 0x240]\n 29415: fallthrough\n      : @396 (gas: 11)\n 29416: a0 = u64 [sp + 0x20]\n 29419: u64 [a0] = a1\n 29421: u64 [a0 + 0x8] = a2\n 29424: u64 [a0 + 0x10] = a4\n 29427: u64 [a0 + 0x18] = a3\n 29430: sp = s0 + 0xfffffffffffff8c0\n 29434: ra = u64 [sp + 0x738]\n 29438: s0 = u64 [sp + 0x730]\n 29442: s1 = u64 [sp + 0x728]\n 29446: sp = sp + 0x740\n 29450: ret\n      : @397 (gas: 1)\n 29452: trap\n      : @398 (gas: 1)\n 29453: ra = 334, jump @212\n      : @399 [@dyn 167] (gas: 3)\n 29459: a0 = 0\n 29461: a1 = 0\n 29463: ra = 336, jump @0\n      : @400 [@dyn 168] (gas: 5)\n 29469: i32 a1 = a0 + 0\n 29471: a0 = 0x1\n 29474: a2 = 0\n 29476: ecalli 13 // 'seal_return'\n 29478: fallthrough\n      : @401 (gas: 8)\n 29479: u64 [sp + 656] = 0\n 29483: u64 [sp + 648] = 0\n 29487: u64 [sp + 640] = 0\n 29491: a0 = 0x4e487b7100000000\n 29501: a1 = sp + 0x280\n 29505: u64 [sp + 0x298] = a0\n 29509: a0 = 0\n 29511: ra = 338, jump @8\n      : @402 [@dyn 169] (gas: 8)\n 29517: u64 [sp + 632] = 0\n 29521: u64 [sp + 624] = 0\n 29525: u64 [sp + 608] = 0x41\n 29530: a0 = 0x4\n 29533: a1 = sp + 0x260\n 29537: u64 [sp + 616] = 0\n 29541: ra = 0x15a\n 29545: jump @8\n      : @403 (gas: 8)\n 29548: u64 [sp + 720] = 0\n 29552: u64 [sp + 712] = 0\n 29556: u64 [sp + 704] = 0\n 29560: a0 = 0x4e487b7100000000\n 29570: a1 = sp + 0x2c0\n 29574: u64 [sp + 0x2d8] = a0\n 29578: a0 = 0\n 29580: ra = 340, jump @8\n      : @404 [@dyn 170] (gas: 8)\n 29586: u64 [sp + 696] = 0\n 29590: u64 [sp + 688] = 0\n 29594: u64 [sp + 672] = 0x41\n 29599: a0 = 0x4\n 29602: a1 = sp + 0x2a0\n 29606: u64 [sp + 680] = 0\n 29610: ra = 0x15a\n 29614: jump @8\n      : @405 (gas: 8)\n 29617: u64 [sp + 1296] = 0\n 29621: u64 [sp + 1288] = 0\n 29625: u64 [sp + 1280] = 0\n 29629: a0 = 0x4e487b7100000000\n 29639: a1 = sp + 0x500\n 29643: u64 [sp + 0x518] = a0\n 29647: a0 = 0\n 29649: ra = 342, jump @8\n      : @406 [@dyn 171] (gas: 8)\n 29655: u64 [sp + 1272] = 0\n 29659: u64 [sp + 1264] = 0\n 29663: u64 [sp + 1248] = 0x11\n 29668: a0 = 0x4\n 29671: a1 = sp + 0x4e0\n 29675: u64 [sp + 1256] = 0\n 29679: ra = 0x15a\n 29683: jump @8\n      : @407 (gas: 8)\n 29686: u64 [sp + 784] = 0\n 29690: u64 [sp + 776] = 0\n 29694: u64 [sp + 768] = 0\n 29698: a0 = 0x4e487b7100000000\n 29708: a1 = sp + 0x300\n 29712: u64 [sp + 0x318] = a0\n 29716: a0 = 0\n 29718: ra = 344, jump @8\n      : @408 [@dyn 172] (gas: 7)\n 29724: u64 [sp + 760] = 0\n 29728: u64 [sp + 752] = 0\n 29732: u64 [sp + 736] = 0x32\n 29737: a0 = 0x4\n 29740: a1 = sp + 0x2e0\n 29744: u64 [sp + 744] = 0\n 29748: ra = 346, jump @8\n      : @409 [@dyn 173] (gas: 3)\n 29754: a1 = 0x24\n 29757: a0 = 0\n 29759: ra = 348, jump @0\n      : @410 [@dyn 174] (gas: 6)\n 29765: i32 a1 = a0 + 0\n 29767: a0 = 0x1\n 29770: a2 = 0x24\n 29773: ra = 0x15e\n 29777: ecalli 13 // 'seal_return'\n 29779: fallthrough\n      : @411 [@dyn 175] (gas: 20)\n 29780: sp = sp + 0xffffffffffffffb0\n 29783: u64 [sp + 0x48] = ra\n 29786: u64 [sp + 0x40] = s0\n 29789: u64 [sp + 0x38] = s1\n 29792: a4 = u64 [a1 + 0x10]\n 29795: a3 = u64 [a1 + 0x18]\n 29798: a5 = u64 [a1 + 0x8]\n 29801: s0 = u64 [a1]\n 29803: u64 [sp + 0x28] = a3\n 29806: u64 [sp + 0x20] = a5\n 29809: a1 = a5 | a3\n 29812: a3 = s0 | a4\n 29815: a3 = a3 | a1\n 29818: a3 = a3 >> 0x20\n 29821: u64 [sp + 0x30] = a4\n 29824: a1 = a1 | a4\n 29827: a1 = a1 << 0x20\n 29830: a1 = a1 | a3\n 29833: u64 [sp + 0x18] = a0\n 29836: jump @414 if a1 != 0\n      : @412 (gas: 10)\n 29840: a0 = u64 [a2 + 0x18]\n 29843: u64 [sp] = a0\n 29845: s1 = u64 [a2 + 0x10]\n 29848: a0 = u64 [a2 + 0x8]\n 29851: u64 [sp + 0x8] = a0\n 29854: a0 = u64 [a2]\n 29856: u64 [sp + 0x10] = a0\n 29859: i32 a0 = s0 + 0\n 29861: a1 = 0x20\n 29864: ra = 352, jump @0\n      : @413 [@dyn 176] (gas: 88)\n 29870: a1 = u64 [sp]\n 29872: a1 = reverse a1\n 29874: a2 = reverse s1\n 29876: a3 = u64 [sp + 0x8]\n 29879: a3 = reverse a3\n 29881: a4 = u64 [sp + 0x10]\n 29884: a4 = reverse a4\n 29886: a5 = a4 >> 0x38\n 29889: u8 [a0 + 0x1f] = a5\n 29892: a5 = a4 >> 0x30\n 29895: u8 [a0 + 0x1e] = a5\n 29898: a5 = a4 >> 0x28\n 29901: u8 [a0 + 0x1d] = a5\n 29904: a5 = a4 >> 0x20\n 29907: u8 [a0 + 0x1c] = a5\n 29910: a5 = a4 >> 0x18\n 29913: u8 [a0 + 0x1b] = a5\n 29916: a5 = a4 >> 0x10\n 29919: u8 [a0 + 0x1a] = a5\n 29922: a5 = a4 >> 0x8\n 29925: u8 [a0 + 0x19] = a5\n 29928: u8 [a0 + 0x18] = a4\n 29931: u8 [a0 + 0x10] = a3\n 29934: a4 = a3 >> 0x38\n 29937: u8 [a0 + 0x17] = a4\n 29940: a4 = a3 >> 0x30\n 29943: u8 [a0 + 0x16] = a4\n 29946: a4 = a3 >> 0x28\n 29949: u8 [a0 + 0x15] = a4\n 29952: a4 = a3 >> 0x20\n 29955: u8 [a0 + 0x14] = a4\n 29958: a4 = a3 >> 0x18\n 29961: u8 [a0 + 0x13] = a4\n 29964: a4 = a3 >> 0x10\n 29967: u8 [a0 + 0x12] = a4\n 29970: a3 = a3 >> 0x8\n 29973: u8 [a0 + 0x11] = a3\n 29976: u8 [a0 + 0x8] = a2\n 29979: a3 = a2 >> 0x38\n 29982: u8 [a0 + 0xf] = a3\n 29985: a3 = a2 >> 0x30\n 29988: u8 [a0 + 0xe] = a3\n 29991: a3 = a2 >> 0x28\n 29994: u8 [a0 + 0xd] = a3\n 29997: a3 = a2 >> 0x20\n 30000: u8 [a0 + 0xc] = a3\n 30003: a3 = a2 >> 0x18\n 30006: u8 [a0 + 0xb] = a3\n 30009: a3 = a2 >> 0x10\n 30012: u8 [a0 + 0xa] = a3\n 30015: a2 = a2 >> 0x8\n 30018: u8 [a0 + 0x9] = a2\n 30021: u8 [a0] = a1\n 30023: a2 = a1 >> 0x38\n 30026: u8 [a0 + 0x7] = a2\n 30029: a2 = a1 >> 0x30\n 30032: u8 [a0 + 0x6] = a2\n 30035: a2 = a1 >> 0x28\n 30038: u8 [a0 + 0x5] = a2\n 30041: a2 = a1 >> 0x20\n 30044: u8 [a0 + 0x4] = a2\n 30047: a2 = a1 >> 0x18\n 30050: u8 [a0 + 0x3] = a2\n 30053: a2 = a1 >> 0x10\n 30056: u8 [a0 + 0x2] = a2\n 30059: a1 = a1 >> 0x8\n 30062: u8 [a0 + 0x1] = a1\n 30065: a0 = s0 + 0x20\n 30068: a1 = a0 <u s0\n 30071: a3 = u64 [sp + 0x20]\n 30074: a2 = a3 + a1\n 30077: a3 = a2 <u a3\n 30080: a3 = a1 if a1 == 0\n 30083: a1 = u64 [sp + 0x30]\n 30086: a3 = a3 + a1\n 30089: a1 = a3 <u a1\n 30092: a4 = u64 [sp + 0x28]\n 30095: a1 = a1 + a4\n 30098: a4 = u64 [sp + 0x18]\n 30101: u64 [a4] = a0\n 30103: u64 [a4 + 0x8] = a2\n 30106: u64 [a4 + 0x10] = a3\n 30109: u64 [a4 + 0x18] = a1\n 30112: ra = u64 [sp + 0x48]\n 30115: s0 = u64 [sp + 0x40]\n 30118: s1 = u64 [sp + 0x38]\n 30121: sp = sp + 0x50\n 30124: ret\n      : @414 (gas: 1)\n 30126: trap\n      : @415 (gas: 12)\n 30127: a0 = u64 [sp + 0x70]\n 30130: a1 = u64 [sp + 0x78]\n 30133: a0 = a0 | a1\n 30136: a1 = u64 [sp + 0x98]\n 30140: a1 = a1 | s1\n 30143: a1 = a1 | a0\n 30146: a1 = a1 >> 0x20\n 30149: u64 [sp + 0x68] = s1\n 30152: a0 = a0 | s1\n 30155: a0 = a0 << 0x20\n 30158: a0 = a0 | a1\n 30161: jump @429 if a0 != 0\n      : @416 (gas: 11)\n 30165: s1 = u64 [sp + 0xd8]\n 30169: u64 [sp + 0x80] = s1\n 30173: a0 = u64 [sp + 0xd0]\n 30177: u64 [sp + 0x90] = a0\n 30181: a0 = u64 [sp + 0xc8]\n 30185: u64 [sp + 0x60] = a0\n 30188: a0 = u64 [sp + 0xc0]\n 30192: u64 [sp + 0x88] = a0\n 30196: a0 = i32 [sp + 0x98]\n 30200: a1 = 0x20\n 30203: ra = 354, jump @0\n      : @417 [@dyn 177] (gas: 70)\n 30209: a1 = reverse s1\n 30211: a2 = u64 [sp + 0x90]\n 30215: a2 = reverse a2\n 30217: s1 = u64 [sp + 0x60]\n 30220: a3 = reverse s1\n 30222: a4 = u64 [sp + 0x88]\n 30226: a4 = reverse a4\n 30228: a5 = a4 >> 0x38\n 30231: u8 [a0 + 0x1f] = a5\n 30234: a5 = a4 >> 0x30\n 30237: u8 [a0 + 0x1e] = a5\n 30240: a5 = a4 >> 0x28\n 30243: u8 [a0 + 0x1d] = a5\n 30246: a5 = a4 >> 0x20\n 30249: u8 [a0 + 0x1c] = a5\n 30252: a5 = a4 >> 0x18\n 30255: u8 [a0 + 0x1b] = a5\n 30258: a5 = a4 >> 0x10\n 30261: u8 [a0 + 0x1a] = a5\n 30264: a5 = a4 >> 0x8\n 30267: u8 [a0 + 0x19] = a5\n 30270: u8 [a0 + 0x18] = a4\n 30273: u8 [a0 + 0x10] = a3\n 30276: a4 = a3 >> 0x38\n 30279: u8 [a0 + 0x17] = a4\n 30282: a4 = a3 >> 0x30\n 30285: u8 [a0 + 0x16] = a4\n 30288: a4 = a3 >> 0x28\n 30291: u8 [a0 + 0x15] = a4\n 30294: a4 = a3 >> 0x20\n 30297: u8 [a0 + 0x14] = a4\n 30300: a4 = a3 >> 0x18\n 30303: u8 [a0 + 0x13] = a4\n 30306: a4 = a3 >> 0x10\n 30309: u8 [a0 + 0x12] = a4\n 30312: a3 = a3 >> 0x8\n 30315: u8 [a0 + 0x11] = a3\n 30318: u8 [a0 + 0x8] = a2\n 30321: a3 = a2 >> 0x38\n 30324: u8 [a0 + 0xf] = a3\n 30327: a3 = a2 >> 0x30\n 30330: u8 [a0 + 0xe] = a3\n 30333: a3 = a2 >> 0x28\n 30336: u8 [a0 + 0xd] = a3\n 30339: a3 = a2 >> 0x20\n 30342: u8 [a0 + 0xc] = a3\n 30345: a3 = a2 >> 0x18\n 30348: u8 [a0 + 0xb] = a3\n 30351: a3 = a2 >> 0x10\n 30354: u8 [a0 + 0xa] = a3\n 30357: a2 = a2 >> 0x8\n 30360: u8 [a0 + 0x9] = a2\n 30363: u8 [a0] = a1\n 30365: a2 = a1 >> 0x38\n 30368: u8 [a0 + 0x7] = a2\n 30371: a2 = a1 >> 0x30\n 30374: u8 [a0 + 0x6] = a2\n 30377: a2 = a1 >> 0x28\n 30380: u8 [a0 + 0x5] = a2\n 30383: a2 = a1 >> 0x20\n 30386: u8 [a0 + 0x4] = a2\n 30389: a2 = a1 >> 0x18\n 30392: u8 [a0 + 0x3] = a2\n 30395: a2 = a1 >> 0x10\n 30398: u8 [a0 + 0x2] = a2\n 30401: a1 = a1 >> 0x8\n 30404: u8 [a0 + 0x1] = a1\n 30407: a1 = 0x20\n 30410: a0 = 0\n 30412: ra = 356, jump @0\n      : @418 [@dyn 178] (gas: 71)\n 30418: a1 = u64 [sp + 0x40]\n 30421: a1 = reverse a1\n 30423: a2 = u64 [sp + 0x48]\n 30426: a2 = reverse a2\n 30428: a3 = u64 [sp + 0x50]\n 30431: a3 = reverse a3\n 30433: a4 = u64 [sp + 0x58]\n 30436: a4 = reverse a4\n 30438: a5 = a4 >> 0x38\n 30441: u8 [a0 + 0x1f] = a5\n 30444: a5 = a4 >> 0x30\n 30447: u8 [a0 + 0x1e] = a5\n 30450: a5 = a4 >> 0x28\n 30453: u8 [a0 + 0x1d] = a5\n 30456: a5 = a4 >> 0x20\n 30459: u8 [a0 + 0x1c] = a5\n 30462: a5 = a4 >> 0x18\n 30465: u8 [a0 + 0x1b] = a5\n 30468: a5 = a4 >> 0x10\n 30471: u8 [a0 + 0x1a] = a5\n 30474: a5 = a4 >> 0x8\n 30477: u8 [a0 + 0x19] = a5\n 30480: u8 [a0 + 0x18] = a4\n 30483: a4 = a3 >> 0x38\n 30486: u8 [a0 + 0x17] = a4\n 30489: a4 = a3 >> 0x30\n 30492: u8 [a0 + 0x16] = a4\n 30495: a4 = a3 >> 0x28\n 30498: u8 [a0 + 0x15] = a4\n 30501: a4 = a3 >> 0x20\n 30504: u8 [a0 + 0x14] = a4\n 30507: a4 = a3 >> 0x18\n 30510: u8 [a0 + 0x13] = a4\n 30513: a4 = a3 >> 0x10\n 30516: u8 [a0 + 0x12] = a4\n 30519: a4 = a3 >> 0x8\n 30522: u8 [a0 + 0x11] = a4\n 30525: u8 [a0 + 0x10] = a3\n 30528: a3 = a2 >> 0x38\n 30531: u8 [a0 + 0xf] = a3\n 30534: a3 = a2 >> 0x30\n 30537: u8 [a0 + 0xe] = a3\n 30540: a3 = a2 >> 0x28\n 30543: u8 [a0 + 0xd] = a3\n 30546: a3 = a2 >> 0x20\n 30549: u8 [a0 + 0xc] = a3\n 30552: a3 = a2 >> 0x18\n 30555: u8 [a0 + 0xb] = a3\n 30558: a3 = a2 >> 0x10\n 30561: u8 [a0 + 0xa] = a3\n 30564: a3 = a2 >> 0x8\n 30567: u8 [a0 + 0x9] = a3\n 30570: u8 [a0 + 0x8] = a2\n 30573: a2 = a1 >> 0x38\n 30576: u8 [a0 + 0x7] = a2\n 30579: a2 = a1 >> 0x30\n 30582: u8 [a0 + 0x6] = a2\n 30585: a2 = a1 >> 0x28\n 30588: u8 [a0 + 0x5] = a2\n 30591: a2 = a1 >> 0x20\n 30594: u8 [a0 + 0x4] = a2\n 30597: a2 = a1 >> 0x18\n 30600: u8 [a0 + 0x3] = a2\n 30603: a2 = a1 >> 0x10\n 30606: u8 [a0 + 0x2] = a2\n 30609: a2 = a1 >> 0x8\n 30612: u8 [a0 + 0x1] = a2\n 30615: u8 [a0] = a1\n 30617: a1 = 0x20\n 30620: a0 = 0\n 30622: ra = 358, jump @0\n      : @419 [@dyn 179] (gas: 5)\n 30628: i32 a0 = a0 + 0\n 30630: i32 a2 = sp + 0xc0\n 30634: a1 = 0x20\n 30637: ecalli 8 // 'hash_keccak_256'\n 30639: fallthrough\n      : @420 (gas: 20)\n 30640: a1 = u64 [sp + 0x98]\n 30644: a0 = a1 + 0x20\n 30647: u64 [sp + 0x50] = a0\n 30650: a2 = a0 <u a1\n 30653: a1 = u64 [sp + 0x78]\n 30656: t2 = a1 + a2\n 30659: a3 = t2 <u a1\n 30662: a3 = a2 if a2 == 0\n 30665: a2 = u64 [sp + 0x68]\n 30668: ra = a2 + a3\n 30671: a0 = u64 [sp + 0x90]\n 30675: a3 = u64 [sp + 0x88]\n 30679: a3 = a3 | a0\n 30682: a0 = u64 [sp + 0x80]\n 30686: a4 = s1 | a0\n 30689: a4 = a4 | a3\n 30692: a3 = ra <u a2\n 30695: t1 = u64 [sp + 0x70]\n 30698: a3 = a3 + t1\n 30701: jump @427 if a4 == 0\n      : @421 (gas: 161)\n 30705: a0 = 0xffffffe0\n 30715: a4 = u64 [sp + 0x98]\n 30719: s1 = a0 <u a4\n 30722: u64 [sp + 0x40] = s1\n 30725: a5 = a1 >u 0\n 30727: a5 = s1 if a1 == 0\n 30730: s1 = -a2\n 30732: a1 = s1 - a5\n 30735: u64 [sp + 0x58] = a1\n 30738: t0 = a1 >u 0\n 30740: a5 = s1 <u a5\n 30743: s1 = a2 >u 0\n 30745: s1 = s1 + t1\n 30748: s1 = -s1\n 30750: s1 = s1 - a5\n 30753: t1 = s1 >u 0\n 30755: t1 = t0 if s1 == 0\n 30758: a2 = s1\n 30760: u64 [sp + 0x48] = s1\n 30763: t0 = a0 - a4\n 30766: a1 = u64 [sp + 0x78]\n 30769: a5 = -a1\n 30771: a1 = u64 [sp + 0x40]\n 30774: a4 = a5 - a1\n 30777: u64 [sp + 0x40] = a0\n 30780: s1 = a0 <u t0\n 30783: a5 = a4 >u 0\n 30785: a5 = s1 if a4 == 0\n 30788: a1 = u64 [sp + 0x58]\n 30791: s1 = a1 | a2\n 30794: a5 = t1 if s1 != 0\n 30797: t0 = 0 if a5 != 0\n 30799: a0 = t0 + 0x1f\n 30802: s1 = a0 <u t0\n 30805: a4 = 0 if a5 != 0\n 30807: t0 = a4 + s1\n 30810: a4 = t0 <u a4\n 30813: a4 = s1 if s1 == 0\n 30816: a1 = 0 if a5 != 0\n 30818: u64 [sp + 0x58] = a1\n 30821: a1 = a1 + a4\n 30824: u64 [sp + 0x8] = a1\n 30827: a4 = a1 << 0x3b\n 30830: s1 = t0 >> 0x5\n 30833: t1 = s1 | a4\n 30836: t0 = t0 << 0x3b\n 30839: a4 = a0 >> 0x5\n 30842: s1 = a4 | t0\n 30845: u64 [sp + 0x38] = s1\n 30848: a1 = u64 [sp + 0x88]\n 30852: a4 = a1 <u 0x1\n 30855: t0 = u64 [sp + 0x60]\n 30858: a0 = t0 - a4\n 30861: u64 [sp + 0x20] = a0\n 30864: a2 = a1 + 0xffffffffffffffff\n 30867: u64 [sp + 0x30] = a2\n 30870: u64 [sp + 0x28] = t1\n 30873: a4 = a0 ^ t1\n 30876: t1 = a0 <u t1\n 30879: a0 = a2 <u s1\n 30882: a0 = t1 if a4 != 0\n 30885: u64 [sp + 0x10] = a0\n 30888: a4 = a1 | t0\n 30891: a4 = a4 <u 0x1\n 30894: a0 = u64 [sp + 0x90]\n 30898: t1 = a0 <u a4\n 30901: a1 = u64 [sp + 0x80]\n 30905: a1 = a1 - t1\n 30908: a0 = a0 - a4\n 30911: a2 = u64 [sp + 0x48]\n 30914: a2 = 0 if a5 != 0\n 30916: a4 = u64 [sp + 0x8]\n 30919: a5 = u64 [sp + 0x58]\n 30922: a5 = a4 <u a5\n 30925: a2 = a2 + a5\n 30928: t1 = a4 >> 0x5\n 30931: a5 = a2 << 0x3b\n 30934: t1 = t1 | a5\n 30937: a5 = a2 >> 0x5\n 30940: a2 = a0 <u t1\n 30943: t0 = a1 ^ a5\n 30946: a4 = a1 <u a5\n 30949: a4 = a2 if t0 == 0\n 30952: s1 = a0 ^ t1\n 30955: s1 = s1 | t0\n 30958: a2 = u64 [sp + 0x10]\n 30961: a4 = a2 if s1 == 0\n 30964: a1 = a5 if a4 == 0\n 30967: u64 [sp + 0x90] = a1\n 30971: a0 = t1 if a4 == 0\n 30974: a1 = u64 [sp + 0x20]\n 30977: a2 = u64 [sp + 0x28]\n 30980: a1 = a2 if a4 == 0\n 30983: a2 = u64 [sp + 0x30]\n 30986: a5 = u64 [sp + 0x38]\n 30989: a2 = a5 if a4 == 0\n 30992: a4 = a2 >> 0x3b\n 30995: a5 = a1 << 0x5\n 30998: t1 = a1\n 31000: a4 = a4 | a5\n 31003: a5 = a2 << 0x5\n 31006: s1 = u64 [sp + 0x78]\n 31009: s1 = s1 + a4\n 31012: a1 = u64 [sp + 0x98]\n 31016: a5 = a5 + a1\n 31019: u64 [sp + 0x60] = a5\n 31022: a4 = a5 <u a1\n 31025: s1 = s1 + a4\n 31028: a1 = u64 [sp + 0x78]\n 31031: t0 = s1 ^ a1\n 31034: a1 = u64 [sp + 0x78]\n 31037: a5 = s1 <u a1\n 31040: a5 = a4 if t0 == 0\n 31043: a1 = u64 [sp + 0xd0]\n 31047: u64 [sp + 0x88] = a1\n 31051: t1 = t1 >> 0x3b\n 31054: a4 = a0 << 0x5\n 31057: t1 = a4 | t1\n 31060: a1 = u64 [sp + 0xc8]\n 31064: u64 [sp + 0x80] = a1\n 31068: a0 = a0 >> 0x3b\n 31071: t0 = u64 [sp + 0x90]\n 31075: t0 = t0 << 0x5\n 31078: a4 = t0 | a0\n 31081: a2 = u64 [sp + 0x68]\n 31084: t0 = u64 [sp + 0x70]\n 31087: t0 = t0 + a4\n 31090: t1 = t1 + a2\n 31093: a4 = t1 <u a2\n 31096: t0 = t0 + a4\n 31099: a5 = a5 + t1\n 31102: a4 = a5 <u t1\n 31105: a1 = u64 [sp + 0x70]\n 31108: t0 = t0 + a4\n 31111: a4 = u64 [sp + 0x60]\n 31114: a0 = a4 + 0x20\n 31117: u64 [sp + 0x38] = a0\n 31120: a4 = a0 <u a4\n 31123: a0 = s1 + a4\n 31126: u64 [sp + 0x30] = a0\n 31129: s1 = a0 <u s1\n 31132: s1 = a4 if a4 == 0\n 31135: a0 = u64 [sp + 0xc0]\n 31139: s1 = s1 + a5\n 31142: u64 [sp + 0x28] = s1\n 31145: a5 = s1 <u a5\n 31148: a5 = a5 + t0\n 31151: u64 [sp + 0x20] = a5\n 31154: a4 = u64 [sp + 0x78]\n 31157: a5 = u64 [sp + 0xd8]\n 31161: a0 = reverse a0\n 31163: u64 [sp + 0x90] = a0\n 31167: a0 = u64 [sp + 0x80]\n 31171: t0 = reverse a0\n 31173: a0 = u64 [sp + 0x88]\n 31177: a0 = reverse a0\n 31179: u64 [sp + 0x88] = a0\n 31183: a0 = reverse a5\n 31185: u64 [sp + 0x80] = a0\n 31189: t1 = u64 [sp + 0x50]\n 31192: fallthrough\n      : @422 (gas: 29)\n 31193: u64 [sp + 0x60] = a1\n 31196: u64 [sp + 0x58] = a2\n 31199: s1 = a4\n 31201: a0 = u64 [sp + 0x98]\n 31205: u64 [sp + 0x50] = a0\n 31208: u64 [sp + 0x70] = a3\n 31211: u64 [sp + 0x68] = ra\n 31214: u64 [sp + 0x78] = t2\n 31217: u64 [sp + 0x98] = t1\n 31221: u64 [sp + 0x48] = t0\n 31224: u64 [sp + 0xb0] = t0\n 31228: a0 = u64 [sp + 0x88]\n 31232: u64 [sp + 0xa8] = a0\n 31236: a0 = u64 [sp + 0x80]\n 31240: u64 [sp + 0xa0] = a0\n 31244: a0 = u64 [sp + 0x90]\n 31248: u64 [sp + 0xb8] = a0\n 31252: u64 [sp + 216] = 0\n 31256: u64 [sp + 208] = 0\n 31260: u64 [sp + 200] = 0\n 31264: u64 [sp + 192] = 0\n 31268: u32 [sp + 224] = 0x20\n 31273: i32 a1 = sp + 0xa0\n 31277: i32 a3 = sp + 0xc0\n 31281: i32 a4 = sp + 0xe0\n 31285: a2 = 0xffffffffffffffff\n 31288: a0 = 0\n 31290: ecalli 7 // 'get_storage'\n 31292: fallthrough\n      : @423 (gas: 9)\n 31293: a0 = u64 [sp + 0x60]\n 31296: a1 = u64 [sp + 0x58]\n 31299: a0 = a0 | a1\n 31302: a1 = u64 [sp + 0x40]\n 31305: a2 = u64 [sp + 0x50]\n 31308: a1 = a2 <u a1\n 31311: a1 = 0 if s1 != 0\n 31313: a1 = 0 if a0 != 0\n 31315: jump @429 if a1 == 0\n      : @424 (gas: 10)\n 31319: a0 = u64 [sp + 0xd0]\n 31323: a1 = u64 [sp + 0xc8]\n 31327: u64 [sp + 0x58] = a1\n 31330: a1 = u64 [sp + 0xc0]\n 31334: u64 [sp + 0x60] = a1\n 31337: a0 = a0 << 0x20\n 31340: s1 = a0 >> 0x20\n 31343: a0 = i32 [sp + 0x98]\n 31347: a1 = 0x20\n 31350: ra = 360, jump @0\n      : @425 [@dyn 180] (gas: 95)\n 31356: a1 = reverse s1\n 31358: a2 = u64 [sp + 0x58]\n 31361: a2 = reverse a2\n 31363: a3 = u64 [sp + 0x60]\n 31366: a3 = reverse a3\n 31368: a4 = a3 >> 0x38\n 31371: u8 [a0 + 0x1f] = a4\n 31374: a4 = a3 >> 0x30\n 31377: u8 [a0 + 0x1e] = a4\n 31380: a4 = a3 >> 0x28\n 31383: u8 [a0 + 0x1d] = a4\n 31386: a4 = a3 >> 0x20\n 31389: u8 [a0 + 0x1c] = a4\n 31392: a4 = a3 >> 0x18\n 31395: u8 [a0 + 0x1b] = a4\n 31398: a4 = a3 >> 0x10\n 31401: u8 [a0 + 0x1a] = a4\n 31404: a4 = a3 >> 0x8\n 31407: u8 [a0 + 0x19] = a4\n 31410: u8 [a0 + 0x18] = a3\n 31413: u8 [a0 + 0x10] = a2\n 31416: u8 [a0 + 11] = 0\n 31419: u8 [a0 + 10] = 0\n 31422: u8 [a0 + 9] = 0\n 31425: u8 [a0 + 7] = 0\n 31428: u8 [a0 + 6] = 0\n 31431: u8 [a0 + 5] = 0\n 31434: u8 [a0 + 4] = 0\n 31437: u8 [a0 + 3] = 0\n 31440: u8 [a0 + 2] = 0\n 31443: u8 [a0 + 1] = 0\n 31446: u8 [a0 + 0] = 0\n 31448: a3 = a2 >> 0x38\n 31451: u8 [a0 + 0x17] = a3\n 31454: a3 = a2 >> 0x30\n 31457: u8 [a0 + 0x16] = a3\n 31460: a3 = a2 >> 0x28\n 31463: u8 [a0 + 0x15] = a3\n 31466: a3 = a2 >> 0x20\n 31469: u8 [a0 + 0x14] = a3\n 31472: a3 = a2 >> 0x18\n 31475: u8 [a0 + 0x13] = a3\n 31478: a3 = a2 >> 0x10\n 31481: u8 [a0 + 0x12] = a3\n 31484: a2 = a2 >> 0x8\n 31487: u8 [a0 + 0x11] = a2\n 31490: u8 [a0 + 0x8] = a1\n 31493: a2 = a1 >> 0x38\n 31496: u8 [a0 + 0xf] = a2\n 31499: a2 = a1 >> 0x30\n 31502: u8 [a0 + 0xe] = a2\n 31505: a2 = a1 >> 0x28\n 31508: u8 [a0 + 0xd] = a2\n 31511: a1 = a1 >> 0x20\n 31514: u8 [a0 + 0xc] = a1\n 31517: a2 = u64 [sp + 0x80]\n 31521: a2 = a2 + 0x1\n 31524: a0 = a2 <u 0x1\n 31527: a1 = u64 [sp + 0x88]\n 31531: a1 = a1 + a0\n 31534: u64 [sp + 0x88] = a1\n 31538: u64 [sp + 0x80] = a2\n 31542: a0 = a2 | a1\n 31545: a4 = a0 <u 0x1\n 31548: a0 = u64 [sp + 0x48]\n 31551: t0 = a0 + a4\n 31554: a0 = t0 <u a0\n 31557: a1 = u64 [sp + 0x90]\n 31561: a1 = a1 + a0\n 31564: u64 [sp + 0x90] = a1\n 31568: a0 = u64 [sp + 0x98]\n 31572: t1 = a0 + 0x20\n 31575: a2 = t1 <u a0\n 31578: s1 = a0\n 31580: a4 = u64 [sp + 0x78]\n 31583: t2 = a4 + a2\n 31586: a3 = t2 <u a4\n 31589: a3 = a2 if a2 == 0\n 31592: a0 = u64 [sp + 0x38]\n 31595: s1 = s1 ^ a0\n 31598: a2 = u64 [sp + 0x68]\n 31601: a5 = u64 [sp + 0x28]\n 31604: a5 = a5 ^ a2\n 31607: a5 = a5 | s1\n 31610: a0 = u64 [sp + 0x30]\n 31613: a0 = a0 ^ a4\n 31616: a1 = u64 [sp + 0x70]\n 31619: s1 = u64 [sp + 0x20]\n 31622: s1 = s1 ^ a1\n 31625: s1 = s1 | a0\n 31628: ra = a2 + a3\n 31631: a5 = a5 | s1\n 31634: a3 = ra <u a2\n 31637: a3 = a3 + a1\n 31640: jump @422 if a5 != 0\n      : @426 (gas: 1)\n 31644: jump @428\n      : @427 (gas: 2)\n 31646: t1 = u64 [sp + 0x50]\n 31649: fallthrough\n      : @428 (gas: 11)\n 31650: a4 = u64 [sp + 0x18]\n 31653: u64 [a4] = t1\n 31655: u64 [a4 + 0x8] = t2\n 31658: u64 [a4 + 0x10] = ra\n 31661: u64 [a4 + 0x18] = a3\n 31664: sp = s0 + 0xffffffffffffff00\n 31668: ra = u64 [sp + 0xf8]\n 31672: s0 = u64 [sp + 0xf0]\n 31676: s1 = u64 [sp + 0xe8]\n 31680: sp = sp + 0x100\n 31684: ret\n      : @429 (gas: 1)\n 31686: trap\n      : @430 (gas: 18)\n 31687: sp = sp + 0xffffffffffffff00\n 31691: u64 [sp + 0xf8] = ra\n 31695: u64 [sp + 0xf0] = s0\n 31699: u64 [sp + 0xe8] = s1\n 31703: s0 = sp + 0x100\n 31707: sp = sp & 0xfffffffffffffff0\n 31710: a2 = u64 [a1]\n 31712: u64 [sp + 0x20] = a2\n 31715: a2 = u64 [a1 + 0x8]\n 31718: u64 [sp + 0x10] = a2\n 31721: a2 = u64 [a1 + 0x10]\n 31724: u64 [sp + 0x8] = a2\n 31727: a1 = u64 [a1 + 0x18]\n 31730: u64 [sp] = a1\n 31732: u64 [sp + 0x18] = a0\n 31735: a0 = 0x40\n 31738: a1 = 0x20\n 31741: ra = 362, jump @0\n      : @431 [@dyn 181] (gas: 149)\n 31747: a1 = u8 [a0 + 0x1]\n 31750: a2 = u8 [a0]\n 31752: a3 = u8 [a0 + 0x2]\n 31755: a4 = u8 [a0 + 0x3]\n 31758: a1 = a1 << 0x8\n 31761: a1 = a1 | a2\n 31764: a3 = a3 << 0x10\n 31767: a4 = a4 << 0x18\n 31770: a3 = a3 | a4\n 31773: a1 = a1 | a3\n 31776: a2 = u8 [a0 + 0x5]\n 31779: a3 = u8 [a0 + 0x4]\n 31782: a4 = u8 [a0 + 0x6]\n 31785: a5 = u8 [a0 + 0x7]\n 31788: a2 = a2 << 0x8\n 31791: a2 = a2 | a3\n 31794: a4 = a4 << 0x10\n 31797: a5 = a5 << 0x18\n 31800: a4 = a4 | a5\n 31803: a2 = a2 | a4\n 31806: a2 = a2 << 0x20\n 31809: t0 = a2 | a1\n 31812: a2 = u8 [a0 + 0x9]\n 31815: a3 = u8 [a0 + 0x8]\n 31818: a4 = u8 [a0 + 0xa]\n 31821: a5 = u8 [a0 + 0xb]\n 31824: a2 = a2 << 0x8\n 31827: a2 = a2 | a3\n 31830: a4 = a4 << 0x10\n 31833: a5 = a5 << 0x18\n 31836: a4 = a4 | a5\n 31839: a2 = a2 | a4\n 31842: a3 = u8 [a0 + 0xd]\n 31845: a4 = u8 [a0 + 0xc]\n 31848: a5 = u8 [a0 + 0xe]\n 31851: s1 = u8 [a0 + 0xf]\n 31854: a3 = a3 << 0x8\n 31857: a3 = a3 | a4\n 31860: a5 = a5 << 0x10\n 31863: s1 = s1 << 0x18\n 31866: a5 = a5 | s1\n 31869: a3 = a3 | a5\n 31872: a3 = a3 << 0x20\n 31875: a2 = a2 | a3\n 31878: a3 = u8 [a0 + 0x11]\n 31881: a4 = u8 [a0 + 0x10]\n 31884: a5 = u8 [a0 + 0x12]\n 31887: s1 = u8 [a0 + 0x13]\n 31890: a3 = a3 << 0x8\n 31893: a3 = a3 | a4\n 31896: a5 = a5 << 0x10\n 31899: s1 = s1 << 0x18\n 31902: a5 = a5 | s1\n 31905: a3 = a3 | a5\n 31908: a4 = u8 [a0 + 0x15]\n 31911: a5 = u8 [a0 + 0x14]\n 31914: s1 = u8 [a0 + 0x16]\n 31917: a1 = u8 [a0 + 0x17]\n 31920: a4 = a4 << 0x8\n 31923: a4 = a4 | a5\n 31926: s1 = s1 << 0x10\n 31929: a1 = a1 << 0x18\n 31932: a1 = a1 | s1\n 31935: a1 = a1 | a4\n 31938: a1 = a1 << 0x20\n 31941: a3 = a3 | a1\n 31944: a1 = u8 [a0 + 0x19]\n 31947: a4 = u8 [a0 + 0x18]\n 31950: a5 = u8 [a0 + 0x1a]\n 31953: s1 = u8 [a0 + 0x1b]\n 31956: a1 = a1 << 0x8\n 31959: a1 = a1 | a4\n 31962: a5 = a5 << 0x10\n 31965: s1 = s1 << 0x18\n 31968: a5 = a5 | s1\n 31971: a1 = a1 | a5\n 31974: a4 = u8 [a0 + 0x1d]\n 31977: a5 = u8 [a0 + 0x1c]\n 31980: s1 = u8 [a0 + 0x1e]\n 31983: a0 = u8 [a0 + 0x1f]\n 31986: a4 = a4 << 0x8\n 31989: a4 = a4 | a5\n 31992: s1 = s1 << 0x10\n 31995: a0 = a0 << 0x18\n 31998: a0 = a0 | s1\n 32001: a0 = a0 | a4\n 32004: a0 = a0 << 0x20\n 32007: a0 = a0 | a1\n 32010: a4 = reverse a0\n 32012: u64 [sp + 0x38] = a4\n 32015: s1 = reverse a3\n 32017: a2 = reverse a2\n 32019: u64 [sp + 0x30] = a2\n 32022: a1 = reverse t0\n 32024: u64 [sp + 0x28] = a1\n 32027: a0 = u64 [sp]\n 32029: u64 [sp + 0xb8] = a0\n 32033: a0 = u64 [sp + 0x8]\n 32036: u64 [sp + 0xb0] = a0\n 32040: a0 = u64 [sp + 0x10]\n 32043: u64 [sp + 0xa8] = a0\n 32047: a0 = u64 [sp + 0x20]\n 32050: u64 [sp + 0xa0] = a0\n 32054: u64 [sp + 0x98] = a1\n 32058: u64 [sp + 0x90] = a2\n 32062: u64 [sp + 0x88] = s1\n 32066: a0 = sp + 0xc0\n 32070: a1 = sp + 0xa0\n 32074: a2 = sp + 0x80\n 32078: u64 [sp + 0x80] = a4\n 32082: ra = 0x16c\n 32086: sp = sp + 0xffffffffffffff00\n 32090: u64 [sp + 0xf8] = ra\n 32094: u64 [sp + 0xf0] = s0\n 32098: u64 [sp + 0xe8] = s1\n 32102: s0 = sp + 0x100\n 32106: sp = sp & 0xffffffffffffffe0\n 32109: u64 [sp + 0x18] = a0\n 32112: s1 = u64 [a2 + 0x10]\n 32115: a0 = u64 [a2]\n 32117: u64 [sp + 0x98] = a0\n 32121: a0 = u64 [a2 + 0x18]\n 32124: u64 [sp + 0x70] = a0\n 32127: a0 = u64 [a2 + 0x8]\n 32130: u64 [sp + 0x78] = a0\n 32133: a4 = u64 [a1 + 0x18]\n 32136: a3 = u64 [a1 + 0x10]\n 32139: a2 = u64 [a1 + 0x8]\n 32142: a0 = u64 [a1]\n 32144: u64 [sp + 0x40] = a4\n 32147: u64 [sp + 0xb8] = a4\n 32151: u64 [sp + 0x48] = a3\n 32154: u64 [sp + 0xb0] = a3\n 32158: u64 [sp + 0x50] = a2\n 32161: u64 [sp + 0xa8] = a2\n 32165: u64 [sp + 0x58] = a0\n 32168: u64 [sp + 0xa0] = a0\n 32172: u64 [sp + 216] = 0\n 32176: u64 [sp + 208] = 0\n 32180: u64 [sp + 200] = 0\n 32184: u64 [sp + 192] = 0\n 32188: u32 [sp + 224] = 0x20\n 32193: i32 a1 = sp + 0xa0\n 32197: i32 a3 = sp + 0xc0\n 32201: i32 a4 = sp + 0xe0\n 32205: a2 = 0xffffffffffffffff\n 32208: a0 = 0\n 32210: ecalli 7 // 'get_storage'\n 32212: jump @415\n      : @432 [@dyn 182] (gas: 58)\n 32215: t2 = s1\n 32217: a3 = u64 [sp + 0xc8]\n 32221: a0 = u64 [sp + 0xd8]\n 32225: u64 [sp + 0x10] = a0\n 32228: a4 = u64 [sp + 0xc0]\n 32232: t1 = u64 [sp + 0xd0]\n 32236: a5 = a3 ^ s1\n 32239: a1 = a3 <u s1\n 32242: a2 = u64 [sp + 0x38]\n 32245: s1 = a4 <u a2\n 32248: a1 = s1 if a5 == 0\n 32251: a3 = a3 - t2\n 32254: a3 = a3 - s1\n 32257: u64 [sp + 0x8] = a3\n 32260: a4 = a4 - a2\n 32263: a5 = a4 + 0x1f\n 32266: a4 = a5 <u a4\n 32269: a3 = a3 + a4\n 32272: a5 = a5 & 0xffffffffffffffe0\n 32275: a0 = a3 + t2\n 32278: a2 = a2 + a5\n 32281: u64 [sp + 0x20] = a2\n 32284: a5 = a2 <u a5\n 32287: t0 = a0 + a5\n 32290: a0 = t0 ^ a3\n 32293: a2 = t0 <u a3\n 32296: a2 = a5 if a0 == 0\n 32299: s1 = u64 [sp + 0x30]\n 32302: a0 = t1 - s1\n 32305: a5 = t1 <u s1\n 32308: t1 = s1\n 32310: ra = u64 [sp + 0x28]\n 32313: s1 = u64 [sp + 0x10]\n 32316: s1 = s1 - ra\n 32319: s1 = s1 - a5\n 32322: a5 = a0 <u a1\n 32325: s1 = s1 - a5\n 32328: a0 = a0 - a1\n 32331: a1 = u64 [sp + 0x8]\n 32334: a1 = a3 <u a1\n 32337: a1 = a4 if a4 == 0\n 32340: a1 = a1 + a0\n 32343: a0 = a1 <u a0\n 32346: a3 = a1 + t1\n 32349: a5 = a3 + a2\n 32352: a1 = a3 <u a1\n 32355: a2 = a5 <u a3\n 32358: s1 = s1 + ra\n 32361: a0 = a0 + s1\n 32364: a0 = a0 + a1\n 32367: s1 = a0 + a2\n 32370: a0 = s1 >u 0\n 32372: a1 = a5 >u 0\n 32374: a1 = a0 if s1 != 0\n 32377: a0 = a5 | s1\n 32380: a2 = t0 >u 0\n 32382: a2 = a1 if a0 != 0\n 32385: jump @436 if a2 != 0\n      : @433 (gas: 15)\n 32389: a4 = t1\n 32391: a0 = u64 [sp + 0x38]\n 32394: a1 = u64 [sp + 0x20]\n 32397: a0 = a1 <u a0\n 32400: a1 = t0 ^ t2\n 32403: a2 = t0 <u t2\n 32406: a2 = a0 if a1 == 0\n 32409: a0 = a5 <u t1\n 32412: a1 = s1 ^ ra\n 32415: a3 = s1 <u ra\n 32418: a3 = a0 if a1 == 0\n 32421: a0 = a5 ^ t1\n 32424: a0 = a0 | a1\n 32427: a3 = a2 if a0 == 0\n 32430: jump @436 if a3 != 0\n      : @434 (gas: 6)\n 32434: a0 = 0x40\n 32437: a1 = 0x20\n 32440: u64 [sp + 0x10] = t2\n 32443: u64 [sp + 0x8] = t0\n 32446: u64 [sp] = a5\n 32448: ra = 366, jump @0\n      : @435 [@dyn 183] (gas: 82)\n 32454: a1 = reverse s1\n 32456: a2 = u64 [sp]\n 32458: a2 = reverse a2\n 32460: a3 = u64 [sp + 0x8]\n 32463: a3 = reverse a3\n 32465: a4 = u64 [sp + 0x20]\n 32468: a4 = reverse a4\n 32470: u8 [a0 + 0x18] = a4\n 32473: a5 = a4 >> 0x38\n 32476: u8 [a0 + 0x1f] = a5\n 32479: a5 = a4 >> 0x30\n 32482: u8 [a0 + 0x1e] = a5\n 32485: a5 = a4 >> 0x28\n 32488: u8 [a0 + 0x1d] = a5\n 32491: a5 = a4 >> 0x20\n 32494: u8 [a0 + 0x1c] = a5\n 32497: a5 = a4 >> 0x18\n 32500: u8 [a0 + 0x1b] = a5\n 32503: a5 = a4 >> 0x10\n 32506: u8 [a0 + 0x1a] = a5\n 32509: a4 = a4 >> 0x8\n 32512: u8 [a0 + 0x19] = a4\n 32515: u8 [a0 + 0x10] = a3\n 32518: a4 = a3 >> 0x38\n 32521: u8 [a0 + 0x17] = a4\n 32524: a4 = a3 >> 0x30\n 32527: u8 [a0 + 0x16] = a4\n 32530: a4 = a3 >> 0x28\n 32533: u8 [a0 + 0x15] = a4\n 32536: a4 = a3 >> 0x20\n 32539: u8 [a0 + 0x14] = a4\n 32542: a4 = a3 >> 0x18\n 32545: u8 [a0 + 0x13] = a4\n 32548: a4 = a3 >> 0x10\n 32551: u8 [a0 + 0x12] = a4\n 32554: a3 = a3 >> 0x8\n 32557: u8 [a0 + 0x11] = a3\n 32560: u8 [a0 + 0x8] = a2\n 32563: a3 = a2 >> 0x38\n 32566: u8 [a0 + 0xf] = a3\n 32569: a3 = a2 >> 0x30\n 32572: u8 [a0 + 0xe] = a3\n 32575: a3 = a2 >> 0x28\n 32578: u8 [a0 + 0xd] = a3\n 32581: a3 = a2 >> 0x20\n 32584: u8 [a0 + 0xc] = a3\n 32587: a3 = a2 >> 0x18\n 32590: u8 [a0 + 0xb] = a3\n 32593: a3 = a2 >> 0x10\n 32596: u8 [a0 + 0xa] = a3\n 32599: a2 = a2 >> 0x8\n 32602: u8 [a0 + 0x9] = a2\n 32605: u8 [a0] = a1\n 32607: a2 = a1 >> 0x38\n 32610: u8 [a0 + 0x7] = a2\n 32613: a2 = a1 >> 0x30\n 32616: u8 [a0 + 0x6] = a2\n 32619: a2 = a1 >> 0x28\n 32622: u8 [a0 + 0x5] = a2\n 32625: a2 = a1 >> 0x20\n 32628: u8 [a0 + 0x4] = a2\n 32631: a2 = a1 >> 0x18\n 32634: u8 [a0 + 0x3] = a2\n 32637: a2 = a1 >> 0x10\n 32640: u8 [a0 + 0x2] = a2\n 32643: a1 = a1 >> 0x8\n 32646: u8 [a0 + 0x1] = a1\n 32649: a0 = u64 [sp + 0x18]\n 32652: a1 = u64 [sp + 0x38]\n 32655: u64 [a0] = a1\n 32657: a1 = u64 [sp + 0x28]\n 32660: u64 [a0 + 0x18] = a1\n 32663: a1 = u64 [sp + 0x10]\n 32666: u64 [a0 + 0x8] = a1\n 32669: a1 = u64 [sp + 0x30]\n 32672: u64 [a0 + 0x10] = a1\n 32675: sp = s0 + 0xffffffffffffff00\n 32679: ra = u64 [sp + 0xf8]\n 32683: s0 = u64 [sp + 0xf0]\n 32687: s1 = u64 [sp + 0xe8]\n 32691: sp = sp + 0x100\n 32695: ret\n      : @436 (gas: 8)\n 32697: u64 [sp + 112] = 0\n 32700: u64 [sp + 104] = 0\n 32703: u64 [sp + 96] = 0\n 32706: a0 = 0x4e487b7100000000\n 32716: a1 = sp + 0x60\n 32719: u64 [sp + 0x78] = a0\n 32722: a0 = 0\n 32724: ra = 368, jump @8\n      : @437 [@dyn 184] (gas: 7)\n 32730: u64 [sp + 88] = 0\n 32733: u64 [sp + 80] = 0\n 32736: u64 [sp + 64] = 0x41\n 32740: a0 = 0x4\n 32743: a1 = sp + 0x40\n 32746: u64 [sp + 72] = 0\n 32749: ra = 370, jump @8\n      : @438 [@dyn 185] (gas: 3)\n 32755: a1 = 0x24\n 32758: a0 = 0\n 32760: ra = 372, jump @0\n      : @439 [@dyn 186] (gas: 6)\n 32766: i32 a1 = a0 + 0\n 32768: a0 = 0x1\n 32771: a2 = 0x24\n 32774: ra = 0x176\n 32778: ecalli 13 // 'seal_return'\n 32780: fallthrough\n      : @440 [@dyn 187] (gas: 18)\n 32781: sp = sp + 0xffffffffffffffa0\n 32784: u64 [sp + 0x58] = ra\n 32787: u64 [sp + 0x50] = s0\n 32790: u64 [sp + 0x48] = s1\n 32793: s0 = sp + 0x60\n 32796: sp = sp & 0xfffffffffffffff0\n 32799: a2 = u64 [a1]\n 32801: a3 = u64 [a1 + 0x8]\n 32804: a4 = u64 [a1 + 0x10]\n 32807: a1 = u64 [a1 + 0x18]\n 32810: s1 = a0\n 32812: u64 [sp + 0x18] = a1\n 32815: u64 [sp + 0x10] = a4\n 32818: u64 [sp + 0x8] = a3\n 32821: a0 = sp + 0x20\n 32824: a1 = sp\n 32826: u64 [sp] = a2\n 32828: ra = 376, jump @430\n      : @441 [@dyn 188] (gas: 14)\n 32834: a0 = u64 [sp + 0x30]\n 32837: a1 = u64 [sp + 0x38]\n 32840: a2 = u64 [sp + 0x20]\n 32843: a3 = u64 [sp + 0x28]\n 32846: u64 [s1 + 0x10] = a0\n 32849: u64 [s1 + 0x18] = a1\n 32852: u64 [s1] = a2\n 32854: u64 [s1 + 0x8] = a3\n 32857: sp = s0 + 0xffffffffffffffa0\n 32860: ra = u64 [sp + 0x58]\n 32863: s0 = u64 [sp + 0x50]\n 32866: s1 = u64 [sp + 0x48]\n 32869: sp = sp + 0x60\n 32872: ret\n      : @442 [@dyn 189] (gas: 97)\n 32874: a1 = u8 [a0 + 0x19]\n 32877: a2 = u8 [a0 + 0x18]\n 32880: a3 = u8 [a0 + 0x1a]\n 32883: a4 = u8 [a0 + 0x1b]\n 32886: a1 = a1 << 0x8\n 32889: a1 = a1 | a2\n 32892: a3 = a3 << 0x10\n 32895: a4 = a4 << 0x18\n 32898: a3 = a3 | a4\n 32901: a1 = a1 | a3\n 32904: a2 = u8 [a0 + 0x1d]\n 32907: a3 = u8 [a0 + 0x1c]\n 32910: a4 = u8 [a0 + 0x1e]\n 32913: a5 = u8 [a0 + 0x1f]\n 32916: a2 = a2 << 0x8\n 32919: a2 = a2 | a3\n 32922: a4 = a4 << 0x10\n 32925: a5 = a5 << 0x18\n 32928: a4 = a4 | a5\n 32931: a2 = a2 | a4\n 32934: a2 = a2 << 0x20\n 32937: t0 = a2 | a1\n 32940: a2 = u8 [a0 + 0x11]\n 32943: a3 = u8 [a0 + 0x10]\n 32946: a4 = u8 [a0 + 0x12]\n 32949: a5 = u8 [a0 + 0x13]\n 32952: a2 = a2 << 0x8\n 32955: a2 = a2 | a3\n 32958: a4 = a4 << 0x10\n 32961: a5 = a5 << 0x18\n 32964: a4 = a4 | a5\n 32967: a2 = a2 | a4\n 32970: a3 = u8 [a0 + 0x15]\n 32973: a4 = u8 [a0 + 0x14]\n 32976: a5 = u8 [a0 + 0x16]\n 32979: s1 = u8 [a0 + 0x17]\n 32982: a3 = a3 << 0x8\n 32985: a3 = a3 | a4\n 32988: a5 = a5 << 0x10\n 32991: s1 = s1 << 0x18\n 32994: a5 = a5 | s1\n 32997: a3 = a3 | a5\n 33000: a3 = a3 << 0x20\n 33003: a2 = a2 | a3\n 33006: a3 = u8 [a0 + 0x9]\n 33009: a4 = u8 [a0 + 0x8]\n 33012: a5 = u8 [a0 + 0xa]\n 33015: s1 = u8 [a0 + 0xb]\n 33018: a3 = a3 << 0x8\n 33021: a3 = a3 | a4\n 33024: a5 = a5 << 0x10\n 33027: s1 = s1 << 0x18\n 33030: a5 = a5 | s1\n 33033: a3 = a3 | a5\n 33036: a4 = u8 [a0 + 0xd]\n 33039: a5 = u8 [a0 + 0xc]\n 33042: s1 = u8 [a0 + 0xe]\n 33045: a1 = u8 [a0 + 0xf]\n 33048: a4 = a4 << 0x8\n 33051: a4 = a4 | a5\n 33054: s1 = s1 << 0x10\n 33057: a1 = a1 << 0x18\n 33060: a1 = a1 | s1\n 33063: a1 = a1 | a4\n 33066: a1 = a1 << 0x20\n 33069: a3 = a3 | a1\n 33072: a1 = u8 [a0 + 0x1]\n 33075: a4 = u8 [a0]\n 33077: a5 = u8 [a0 + 0x2]\n 33080: s1 = u8 [a0 + 0x3]\n 33083: a1 = a1 << 0x8\n 33086: a1 = a1 | a4\n 33089: a5 = a5 << 0x10\n 33092: s1 = s1 << 0x18\n 33095: a5 = a5 | s1\n 33098: a1 = a1 | a5\n 33101: a4 = u8 [a0 + 0x5]\n 33104: a5 = u8 [a0 + 0x4]\n 33107: s1 = u8 [a0 + 0x6]\n 33110: a0 = u8 [a0 + 0x7]\n 33113: a4 = a4 << 0x8\n 33116: a4 = a4 | a5\n 33119: s1 = s1 << 0x10\n 33122: a0 = a0 << 0x18\n 33125: a0 = a0 | s1\n 33128: a0 = a0 | a4\n 33131: a0 = a0 << 0x20\n 33134: a0 = a0 | a1\n 33137: a4 = reverse a0\n 33139: a3 = reverse a3\n 33141: a2 = reverse a2\n 33143: s1 = reverse t0\n 33145: a0 = a3 | a4\n 33148: a1 = s1 <u 0xffffffffffffffe0\n 33151: a1 = 0 if a2 != 0\n 33153: a1 = 0 if a0 != 0\n 33155: jump @466 if a1 == 0\n      : @443 (gas: 8)\n 33159: a0 = s1 | a3\n 33162: a1 = a2 | a4\n 33165: a0 = a0 | a1\n 33168: a0 = a0 >> 0x20\n 33171: a1 = a1 | a3\n 33174: a1 = a1 << 0x20\n 33177: a0 = a0 | a1\n 33180: jump @464 if a0 != 0\n      : @444 (gas: 19)\n 33184: a0 = s1 + 0x20\n 33187: u64 [sp + 0x180] = a0\n 33191: a0 = a0 <u s1\n 33194: a1 = a2 + a0\n 33197: u64 [sp + 0x198] = a1\n 33201: u64 [sp + 0x178] = a2\n 33205: a1 = a1 <u a2\n 33208: a1 = a0 if a0 == 0\n 33211: a1 = a1 + a3\n 33214: u64 [sp + 0x190] = a1\n 33218: u64 [sp + 0x168] = a3\n 33222: a0 = a1 <u a3\n 33225: u64 [sp + 0x170] = a4\n 33229: a0 = a0 + a4\n 33232: u64 [sp + 0x188] = a0\n 33236: i32 a0 = s1 + 0\n 33238: a1 = 0x20\n 33241: u64 [sp + 0x108] = a0\n 33245: ra = 380, jump @0\n      : @445 [@dyn 190] (gas: 45)\n 33252: u8 [a0 + 31] = 0x54\n 33256: u8 [a0 + 30] = 0xfb\n 33261: u8 [a0 + 29] = 0x7b\n 33265: u8 [a0 + 28] = 0x75\n 33269: u8 [a0 + 27] = 0xfa\n 33274: u8 [a0 + 26] = 0x81\n 33279: u8 [a0 + 25] = 0x79\n 33283: u8 [a0 + 24] = 0xd2\n 33288: u8 [a0 + 23] = 0x35\n 33292: u8 [a0 + 22] = 0x41\n 33296: u8 [a0 + 21] = 0xe5\n 33301: u8 [a0 + 20] = 0xbd\n 33306: u8 [a0 + 19] = 0xf7\n 33311: u8 [a0 + 18] = 0x2\n 33315: u8 [a0 + 17] = 0x1d\n 33319: u8 [a0 + 16] = 0x8a\n 33324: u8 [a0 + 15] = 0x43\n 33328: u8 [a0 + 14] = 0x98\n 33333: u8 [a0 + 13] = 0xbb\n 33338: u8 [a0 + 12] = 0xe8\n 33343: u8 [a0 + 11] = 0x26\n 33347: u8 [a0 + 10] = 0x6d\n 33351: u8 [a0 + 9] = 0x9e\n 33356: u8 [a0 + 8] = 0xaf\n 33361: u8 [a0 + 7] = 0xf3\n 33366: u8 [a0 + 6] = 0xf1\n 33371: u8 [a0 + 5] = 0xe\n 33375: u8 [a0 + 4] = 0x26\n 33379: u8 [a0 + 3] = 0xdd\n 33384: u8 [a0 + 2] = 0x3c\n 33388: u8 [a0 + 1] = 0xb4\n 33393: a1 = u64 [sp + 0x180]\n 33397: a3 = a1\n 33399: a4 = u64 [sp + 0x190]\n 33403: a1 = a1 | a4\n 33406: a2 = u64 [sp + 0x198]\n 33410: a5 = u64 [sp + 0x188]\n 33414: a2 = a2 | a5\n 33417: a1 = a1 | a2\n 33420: a1 = a1 >> 0x20\n 33423: a2 = a2 | a4\n 33426: a2 = a2 << 0x20\n 33429: a1 = a1 | a2\n 33432: u8 [a0 + 0] = 0xef\n 33436: jump @464 if a1 != 0\n      : @446 (gas: 19)\n 33440: a0 = s1 + 0x60\n 33443: u64 [sp + 0x118] = a0\n 33447: u64 [sp + 0x100] = s1\n 33451: a0 = a0 <u s1\n 33454: a1 = u64 [sp + 0x178]\n 33458: s1 = a1 + a0\n 33461: a1 = s1 <u a1\n 33464: a1 = a0 if a0 == 0\n 33467: a0 = u64 [sp + 0x168]\n 33471: a1 = a1 + a0\n 33474: u64 [sp + 0x110] = a1\n 33478: a0 = a1 <u a0\n 33481: a1 = u64 [sp + 0x170]\n 33485: a0 = a0 + a1\n 33488: u64 [sp + 0x120] = a0\n 33492: i32 a0 = a3 + 0\n 33494: a1 = 0x20\n 33497: u64 [sp + 0xf8] = a0\n 33501: ra = 382, jump @0\n      : @447 [@dyn 191] (gas: 51)\n 33508: u8 [a0 + 31] = 0x40\n 33512: u8 [a0 + 30] = 0\n 33515: u8 [a0 + 29] = 0\n 33518: u8 [a0 + 28] = 0\n 33521: u8 [a0 + 27] = 0\n 33524: u8 [a0 + 26] = 0\n 33527: u8 [a0 + 25] = 0\n 33530: u8 [a0 + 24] = 0\n 33533: u8 [a0 + 23] = 0\n 33536: u8 [a0 + 22] = 0\n 33539: u8 [a0 + 21] = 0\n 33542: u8 [a0 + 20] = 0\n 33545: u8 [a0 + 19] = 0\n 33548: u8 [a0 + 18] = 0\n 33551: u8 [a0 + 17] = 0\n 33554: u8 [a0 + 16] = 0\n 33557: u8 [a0 + 15] = 0\n 33560: u8 [a0 + 14] = 0\n 33563: u8 [a0 + 13] = 0\n 33566: u8 [a0 + 12] = 0\n 33569: u8 [a0 + 11] = 0\n 33572: u8 [a0 + 10] = 0\n 33575: u8 [a0 + 9] = 0\n 33578: u8 [a0 + 8] = 0\n 33581: u8 [a0 + 7] = 0\n 33584: u8 [a0 + 6] = 0\n 33587: u8 [a0 + 5] = 0\n 33590: u8 [a0 + 4] = 0\n 33593: u8 [a0 + 3] = 0\n 33596: u8 [a0 + 2] = 0\n 33599: u8 [a0 + 1] = 0\n 33602: u8 [a0 + 0] = 0\n 33604: u64 [sp + 0x288] = s1\n 33608: a0 = u64 [sp + 0x118]\n 33612: u64 [sp + 0x280] = a0\n 33616: a0 = u64 [sp + 0x148]\n 33620: u64 [sp + 0x2b8] = a0\n 33624: a0 = u64 [sp + 0x150]\n 33628: u64 [sp + 0x2b0] = a0\n 33632: a0 = u64 [sp + 0x158]\n 33636: u64 [sp + 0x2a8] = a0\n 33640: a0 = u64 [sp + 0x160]\n 33644: u64 [sp + 0x2a0] = a0\n 33648: a0 = u64 [sp + 0x110]\n 33652: u64 [sp + 0x290] = a0\n 33656: a0 = sp + 0x2c0\n 33660: a1 = sp + 0x2a0\n 33664: a2 = sp + 0x280\n 33668: a3 = u64 [sp + 0x120]\n 33672: u64 [sp + 0x298] = a3\n 33676: ra = 384, jump @61\n      : @448 [@dyn 192] (gas: 10)\n 33682: a0 = u64 [sp + 0x190]\n 33686: a1 = u64 [sp + 0x188]\n 33690: a0 = a0 | a1\n 33693: a1 = 0xffffffe0\n 33703: a2 = u64 [sp + 0x180]\n 33707: a1 = a2 <u a1\n 33710: a2 = u64 [sp + 0x198]\n 33714: a1 = 0 if a2 != 0\n 33716: a1 = 0 if a0 != 0\n 33718: jump @464 if a1 == 0\n      : @449 (gas: 12)\n 33722: a0 = u64 [sp + 0x2d8]\n 33726: u64 [sp + 0x198] = a0\n 33730: a0 = u64 [sp + 0x2d0]\n 33734: u64 [sp + 0x190] = a0\n 33738: a0 = u64 [sp + 0x2c8]\n 33742: u64 [sp + 0x188] = a0\n 33746: s1 = u64 [sp + 0x2c0]\n 33750: u64 [sp + 0x180] = s1\n 33754: a0 = u64 [sp + 0xf8]\n 33758: i32 a0 = a0 + 0x20\n 33761: a1 = 0x20\n 33764: ra = 386, jump @0\n      : @450 [@dyn 193] (gas: 132)\n 33771: t2 = u64 [sp + 0x100]\n 33775: t0 = s1 <u t2\n 33778: a2 = u64 [sp + 0x178]\n 33782: a5 = u64 [sp + 0x188]\n 33786: a4 = a5 ^ a2\n 33789: a3 = a5 <u a2\n 33792: t1 = a5\n 33794: a3 = t0 if a4 == 0\n 33797: a4 = u64 [sp + 0x168]\n 33801: a1 = u64 [sp + 0x190]\n 33805: s1 = a1 - a4\n 33808: a4 = a1 <u a4\n 33811: a5 = u64 [sp + 0x170]\n 33815: a1 = u64 [sp + 0x198]\n 33819: a5 = a1 - a5\n 33822: a5 = a5 - a4\n 33825: a4 = s1 <u a3\n 33828: a5 = a5 - a4\n 33831: u64 [sp + 0x198] = a5\n 33835: ra = s1 - a3\n 33838: a3 = t1 - a2\n 33841: a4 = u64 [sp + 0x128]\n 33845: t1 = reverse a4\n 33847: a4 = u64 [sp + 0x130]\n 33851: a5 = reverse a4\n 33853: a4 = u64 [sp + 0x138]\n 33857: s1 = reverse a4\n 33859: a4 = u64 [sp + 0x140]\n 33863: a4 = reverse a4\n 33865: a3 = a3 - t0\n 33868: a1 = a4 >> 0x38\n 33871: u64 [sp + 0x130] = a1\n 33875: u8 [a0 + 0x1f] = a1\n 33878: a1 = u64 [sp + 0x180]\n 33882: t2 = a1 - t2\n 33885: a1 = a4 >> 0x30\n 33888: u64 [sp + 0x128] = a1\n 33892: u8 [a0 + 0x1e] = a1\n 33895: a1 = u64 [sp + 0x198]\n 33899: a3 = a3 | a1\n 33902: a1 = t2 | ra\n 33905: a1 = a1 | a3\n 33908: a2 = a3 | ra\n 33911: a3 = a4 >> 0x28\n 33914: u64 [sp + 0x110] = a3\n 33918: u8 [a0 + 0x1d] = a3\n 33921: a1 = a1 >> 0x20\n 33924: a2 = a2 << 0x20\n 33927: a1 = a1 | a2\n 33930: a2 = a4 >> 0x20\n 33933: u64 [sp + 0xf8] = a2\n 33937: u8 [a0 + 0x1c] = a2\n 33940: a2 = a4 >> 0x18\n 33943: u64 [sp + 0xe8] = a2\n 33947: u8 [a0 + 0x1b] = a2\n 33950: a2 = a4 >> 0x10\n 33953: u64 [sp + 0xe0] = a2\n 33957: u8 [a0 + 0x1a] = a2\n 33960: a2 = a4 >> 0x8\n 33963: u64 [sp + 0x138] = a2\n 33967: u8 [a0 + 0x19] = a2\n 33970: u64 [sp + 0x118] = a4\n 33974: u8 [a0 + 0x18] = a4\n 33977: u8 [a0 + 0x10] = s1\n 33980: a2 = s1 >> 0x38\n 33983: u64 [sp + 0xd0] = a2\n 33987: u8 [a0 + 0x17] = a2\n 33990: a2 = s1 >> 0x30\n 33993: u64 [sp + 0xc8] = a2\n 33997: u8 [a0 + 0x16] = a2\n 34000: a2 = s1 >> 0x28\n 34003: u64 [sp + 0xc0] = a2\n 34007: u8 [a0 + 0x15] = a2\n 34010: a2 = s1 >> 0x20\n 34013: u64 [sp + 0xb8] = a2\n 34017: u8 [a0 + 0x14] = a2\n 34020: a2 = s1 >> 0x18\n 34023: u64 [sp + 0xb0] = a2\n 34027: u8 [a0 + 0x13] = a2\n 34030: a2 = s1 >> 0x10\n 34033: u64 [sp + 0xa8] = a2\n 34037: u8 [a0 + 0x12] = a2\n 34040: u64 [sp + 0xd8] = s1\n 34044: s1 = s1 >> 0x8\n 34047: u8 [a0 + 0x11] = s1\n 34050: u8 [a0 + 0x8] = a5\n 34053: a2 = a5 >> 0x38\n 34056: u64 [sp + 0xa0] = a2\n 34060: u8 [a0 + 0xf] = a2\n 34063: a2 = a5 >> 0x30\n 34066: u64 [sp + 0x98] = a2\n 34070: u8 [a0 + 0xe] = a2\n 34073: a2 = a5 >> 0x28\n 34076: u64 [sp + 0x90] = a2\n 34080: u8 [a0 + 0xd] = a2\n 34083: a2 = a5 >> 0x20\n 34086: u64 [sp + 0x88] = a2\n 34090: u8 [a0 + 0xc] = a2\n 34093: a2 = a5 >> 0x18\n 34096: u64 [sp + 0x80] = a2\n 34100: u8 [a0 + 0xb] = a2\n 34103: a2 = a5 >> 0x10\n 34106: u64 [sp + 0x78] = a2\n 34109: u8 [a0 + 0xa] = a2\n 34112: u64 [sp + 0x100] = a5\n 34116: a5 = a5 >> 0x8\n 34119: u64 [sp + 0x70] = a5\n 34122: u8 [a0 + 0x9] = a5\n 34125: u8 [a0] = t1\n 34127: a2 = t1 >> 0x38\n 34130: u64 [sp + 0x68] = a2\n 34133: u8 [a0 + 0x7] = a2\n 34136: a2 = t1 >> 0x30\n 34139: u64 [sp + 0x60] = a2\n 34142: u8 [a0 + 0x6] = a2\n 34145: a2 = t1 >> 0x28\n 34148: u64 [sp + 0x58] = a2\n 34151: u8 [a0 + 0x5] = a2\n 34154: a2 = t1 >> 0x20\n 34157: u64 [sp + 0x50] = a2\n 34160: u8 [a0 + 0x4] = a2\n 34163: a2 = t1 >> 0x18\n 34166: u64 [sp + 0x48] = a2\n 34169: u8 [a0 + 0x3] = a2\n 34172: a2 = t1 >> 0x10\n 34175: u64 [sp + 0x40] = a2\n 34178: u8 [a0 + 0x2] = a2\n 34181: u64 [sp + 0x120] = t1\n 34185: a2 = t1 >> 0x8\n 34188: u64 [sp + 0x38] = a2\n 34191: u8 [a0 + 0x1] = a2\n 34194: jump @464 if a1 != 0\n      : @451 (gas: 5)\n 34198: u64 [sp + 0x30] = s1\n 34201: i32 a1 = t2 + 0\n 34203: a0 = u64 [sp + 0x108]\n 34207: s1 = t2\n 34209: ra = 388, jump @0\n      : @452 [@dyn 194] (gas: 31)\n 34216: u64 [sp + 760] = 0\n 34220: u64 [sp + 752] = 0\n 34224: u64 [sp + 744] = 0\n 34228: u64 [sp + 736] = 0\n 34232: u64 [sp + 792] = 0\n 34236: u64 [sp + 784] = 0\n 34240: u64 [sp + 776] = 0\n 34244: u64 [sp + 768] = 0\n 34248: u64 [sp + 824] = 0xffffffffffffffff\n 34253: u64 [sp + 816] = 0xffffffffffffffff\n 34258: u64 [sp + 808] = 0xffffffffffffffff\n 34263: u64 [sp + 800] = 0xffffffffffffffff\n 34268: a2 = sp + 0x2e0\n 34272: a2 = a2 << 0x20\n 34275: a2 = a2 >> 0x20\n 34278: a3 = sp + 0x320\n 34282: a3 = a3 << 0x20\n 34285: a2 = a2 | a3\n 34288: a0 = a0 << 0x20\n 34291: a0 = a0 >> 0x20\n 34294: a3 = s1 << 0x20\n 34297: a3 = a3 | a0\n 34300: a0 = sp + 0x300\n 34304: a0 = a0 << 0x20\n 34307: a1 = 0xffffffff\n 34317: a5 = a0 | a1\n 34320: a0 = 0xffffffffffffffff\n 34323: a1 = 0xffffffffffffffff\n 34326: a4 = 0xffffffffffffffff\n 34329: ecalli 9 // 'instantiate'\n 34331: fallthrough\n      : @453 (gas: 6)\n 34332: a0 = u32 [sp + 0x310]\n 34336: a1 = u64 [sp + 0x300]\n 34340: a2 = u64 [sp + 0x308]\n 34344: a3 = a1 | a0\n 34347: a3 = a3 | a2\n 34350: jump @465 if a3 == 0\n      : @454 (gas: 24)\n 34354: a2 = reverse a2\n 34356: a3 = a2 >> 0x20\n 34359: a1 = reverse a1\n 34361: a4 = a1 << 0x20\n 34364: a3 = a3 | a4\n 34367: a2 = a2 << 0x20\n 34370: a0 = reverse a0\n 34372: a0 = a0 >> 0x20\n 34375: a0 = a0 | a2\n 34378: a2 = a1 >> 0x20\n 34381: u64 [sp + 600] = 0\n 34385: u64 [sp + 0x178] = a0\n 34389: u64 [sp + 0x240] = a0\n 34393: u64 [sp + 632] = 0\n 34397: u64 [sp + 624] = 0\n 34401: u64 [sp + 616] = 0\n 34405: u64 [sp + 608] = 0\n 34409: u64 [sp + 0x10] = a3\n 34412: u64 [sp + 0x248] = a3\n 34416: a0 = sp + 0x260\n 34420: a1 = sp + 0x240\n 34424: u64 [sp + 0x170] = a2\n 34428: u64 [sp + 0x250] = a2\n 34432: ra = 390, jump @236\n      : @455 [@dyn 195] (gas: 11)\n 34438: i32 a0 = sp + 0x340\n 34442: ecalli 5 // 'caller'\n 34444: a0 = u32 [sp + 0x350]\n 34448: u64 [sp + 0x8] = a0\n 34451: a0 = u64 [sp + 0x348]\n 34455: u64 [sp] = a0\n 34457: a0 = u64 [sp + 0x340]\n 34461: u64 [sp + 0x168] = a0\n 34465: a0 = 0x40\n 34468: a1 = 0x20\n 34471: ra = 392, jump @0\n      : @456 [@dyn 196] (gas: 104)\n 34478: a1 = u8 [a0 + 0x11]\n 34481: a2 = u8 [a0 + 0x10]\n 34484: a3 = u8 [a0 + 0x12]\n 34487: a4 = u8 [a0 + 0x13]\n 34490: a1 = a1 << 0x8\n 34493: a1 = a1 | a2\n 34496: a3 = a3 << 0x10\n 34499: a4 = a4 << 0x18\n 34502: a3 = a3 | a4\n 34505: a1 = a1 | a3\n 34508: a2 = u8 [a0 + 0x15]\n 34511: a3 = u8 [a0 + 0x14]\n 34514: a4 = u8 [a0 + 0x16]\n 34517: a5 = u8 [a0 + 0x17]\n 34520: a2 = a2 << 0x8\n 34523: a2 = a2 | a3\n 34526: a4 = a4 << 0x10\n 34529: a5 = a5 << 0x18\n 34532: a4 = a4 | a5\n 34535: a2 = a2 | a4\n 34538: a2 = a2 << 0x20\n 34541: t0 = a2 | a1\n 34544: a2 = u8 [a0 + 0x1]\n 34547: a3 = u8 [a0]\n 34549: a4 = u8 [a0 + 0x2]\n 34552: a5 = u8 [a0 + 0x3]\n 34555: a2 = a2 << 0x8\n 34558: a2 = a2 | a3\n 34561: a4 = a4 << 0x10\n 34564: a5 = a5 << 0x18\n 34567: a4 = a4 | a5\n 34570: a2 = a2 | a4\n 34573: a3 = u8 [a0 + 0x5]\n 34576: a4 = u8 [a0 + 0x4]\n 34579: a5 = u8 [a0 + 0x6]\n 34582: s1 = u8 [a0 + 0x7]\n 34585: a3 = a3 << 0x8\n 34588: a3 = a3 | a4\n 34591: a5 = a5 << 0x10\n 34594: s1 = s1 << 0x18\n 34597: a5 = a5 | s1\n 34600: a3 = a3 | a5\n 34603: a3 = a3 << 0x20\n 34606: a2 = a2 | a3\n 34609: a3 = u8 [a0 + 0x19]\n 34612: a4 = u8 [a0 + 0x18]\n 34615: a5 = u8 [a0 + 0x1a]\n 34618: s1 = u8 [a0 + 0x1b]\n 34621: a3 = a3 << 0x8\n 34624: a3 = a3 | a4\n 34627: a5 = a5 << 0x10\n 34630: s1 = s1 << 0x18\n 34633: a5 = a5 | s1\n 34636: a3 = a3 | a5\n 34639: a4 = u8 [a0 + 0x1d]\n 34642: a5 = u8 [a0 + 0x1c]\n 34645: s1 = u8 [a0 + 0x1e]\n 34648: a1 = u8 [a0 + 0x1f]\n 34651: a4 = a4 << 0x8\n 34654: a4 = a4 | a5\n 34657: s1 = s1 << 0x10\n 34660: a1 = a1 << 0x18\n 34663: a1 = a1 | s1\n 34666: a1 = a1 | a4\n 34669: a1 = a1 << 0x20\n 34672: a3 = a3 | a1\n 34675: a1 = u8 [a0 + 0x9]\n 34678: a4 = u8 [a0 + 0x8]\n 34681: a5 = u8 [a0 + 0xa]\n 34684: s1 = u8 [a0 + 0xb]\n 34687: a1 = a1 << 0x8\n 34690: a1 = a1 | a4\n 34693: a5 = a5 << 0x10\n 34696: s1 = s1 << 0x18\n 34699: a5 = a5 | s1\n 34702: a1 = a1 | a5\n 34705: a4 = u8 [a0 + 0xd]\n 34708: a5 = u8 [a0 + 0xc]\n 34711: s1 = u8 [a0 + 0xe]\n 34714: a0 = u8 [a0 + 0xf]\n 34717: a4 = a4 << 0x8\n 34720: a4 = a4 | a5\n 34723: s1 = s1 << 0x10\n 34726: a0 = a0 << 0x18\n 34729: a0 = a0 | s1\n 34732: a0 = a0 | a4\n 34735: a0 = a0 << 0x20\n 34738: a0 = a0 | a1\n 34741: a4 = reverse a0\n 34743: a1 = reverse a3\n 34745: a2 = reverse a2\n 34747: a0 = reverse t0\n 34749: u64 [sp + 0x198] = a0\n 34753: u64 [sp + 0x188] = a2\n 34757: a0 = a0 | a2\n 34760: u64 [sp + 0x180] = a1\n 34764: a1 = a1 | a4\n 34767: a1 = a1 | a0\n 34770: a1 = a1 >> 0x20\n 34773: u64 [sp + 0x190] = a4\n 34777: a0 = a0 | a4\n 34780: a0 = a0 << 0x20\n 34783: a0 = a0 | a1\n 34786: jump @464 if a0 != 0\n      : @457 (gas: 20)\n 34790: s1 = u64 [sp + 0x180]\n 34794: a0 = s1 + 0x40\n 34797: u64 [sp + 0x28] = a0\n 34800: a0 = a0 <u s1\n 34803: a1 = u64 [sp + 0x198]\n 34807: a2 = a1 + a0\n 34810: u64 [sp + 0x18] = a2\n 34813: a1 = a2 <u a1\n 34816: a1 = a0 if a0 == 0\n 34819: a0 = u64 [sp + 0x190]\n 34823: a1 = a1 + a0\n 34826: u64 [sp + 0x20] = a1\n 34829: a0 = a1 <u a0\n 34832: a1 = u64 [sp + 0x188]\n 34836: a0 = a0 + a1\n 34839: u64 [sp + 0x108] = a0\n 34843: i32 a0 = s1 + 0\n 34845: a1 = 0x20\n 34848: u64 [sp + 0x140] = a0\n 34852: ra = 394, jump @0\n      : @458 [@dyn 197] (gas: 52)\n 34859: u8 [a0 + 31] = 0x40\n 34863: u8 [a0 + 30] = 0\n 34866: u8 [a0 + 29] = 0\n 34869: u8 [a0 + 28] = 0\n 34872: u8 [a0 + 27] = 0\n 34875: u8 [a0 + 26] = 0\n 34878: u8 [a0 + 25] = 0\n 34881: u8 [a0 + 24] = 0\n 34884: u8 [a0 + 23] = 0\n 34887: u8 [a0 + 22] = 0\n 34890: u8 [a0 + 21] = 0\n 34893: u8 [a0 + 20] = 0\n 34896: u8 [a0 + 19] = 0\n 34899: u8 [a0 + 18] = 0\n 34902: u8 [a0 + 17] = 0\n 34905: u8 [a0 + 16] = 0\n 34908: u8 [a0 + 15] = 0\n 34911: u8 [a0 + 14] = 0\n 34914: u8 [a0 + 13] = 0\n 34917: u8 [a0 + 12] = 0\n 34920: u8 [a0 + 11] = 0\n 34923: u8 [a0 + 10] = 0\n 34926: u8 [a0 + 9] = 0\n 34929: u8 [a0 + 8] = 0\n 34932: u8 [a0 + 7] = 0\n 34935: u8 [a0 + 6] = 0\n 34938: u8 [a0 + 5] = 0\n 34941: u8 [a0 + 4] = 0\n 34944: u8 [a0 + 3] = 0\n 34947: u8 [a0 + 2] = 0\n 34950: u8 [a0 + 1] = 0\n 34953: u8 [a0 + 0] = 0\n 34955: a0 = u64 [sp + 0x18]\n 34958: u64 [sp + 0x1e8] = a0\n 34962: a0 = u64 [sp + 0x28]\n 34965: u64 [sp + 0x1e0] = a0\n 34969: a0 = u64 [sp + 0x148]\n 34973: u64 [sp + 0x218] = a0\n 34977: a0 = u64 [sp + 0x150]\n 34981: u64 [sp + 0x210] = a0\n 34985: a0 = u64 [sp + 0x158]\n 34989: u64 [sp + 0x208] = a0\n 34993: a0 = u64 [sp + 0x160]\n 34997: u64 [sp + 0x200] = a0\n 35001: a0 = u64 [sp + 0x20]\n 35004: u64 [sp + 0x1f0] = a0\n 35008: a0 = sp + 0x220\n 35012: a1 = sp + 0x200\n 35016: a2 = sp + 0x1e0\n 35020: a3 = u64 [sp + 0x108]\n 35024: u64 [sp + 0x1f8] = a3\n 35028: ra = 396, jump @61\n      : @459 [@dyn 198] (gas: 9)\n 35034: a0 = u64 [sp + 0x190]\n 35038: a1 = u64 [sp + 0x188]\n 35042: a0 = a0 | a1\n 35045: a1 = 0xffffffe0\n 35055: a1 = s1 <u a1\n 35058: a2 = u64 [sp + 0x198]\n 35062: a1 = 0 if a2 != 0\n 35064: a1 = 0 if a0 != 0\n 35066: jump @464 if a1 == 0\n      : @460 (gas: 11)\n 35070: a0 = u64 [sp + 0x238]\n 35074: u64 [sp + 0x160] = a0\n 35078: a0 = u64 [sp + 0x230]\n 35082: u64 [sp + 0x158] = a0\n 35086: a0 = u64 [sp + 0x228]\n 35090: u64 [sp + 0x150] = a0\n 35094: s1 = u64 [sp + 0x220]\n 35098: a0 = u64 [sp + 0x140]\n 35102: i32 a0 = a0 + 0x20\n 35105: a1 = 0x20\n 35108: ra = 398, jump @0\n      : @461 [@dyn 199] (gas: 95)\n 35115: a1 = u64 [sp + 0xd8]\n 35119: u8 [a0 + 0x10] = a1\n 35122: a1 = u64 [sp + 0xa0]\n 35126: u8 [a0 + 0xf] = a1\n 35129: a1 = u64 [sp + 0x98]\n 35133: u8 [a0 + 0xe] = a1\n 35136: a1 = u64 [sp + 0x90]\n 35140: u8 [a0 + 0xd] = a1\n 35143: a1 = u64 [sp + 0x88]\n 35147: u8 [a0 + 0xc] = a1\n 35150: a1 = u64 [sp + 0x80]\n 35154: u8 [a0 + 0xb] = a1\n 35157: a1 = u64 [sp + 0x78]\n 35160: u8 [a0 + 0xa] = a1\n 35163: a1 = u64 [sp + 0x70]\n 35166: u8 [a0 + 0x9] = a1\n 35169: a1 = u64 [sp + 0x100]\n 35173: u8 [a0 + 0x8] = a1\n 35176: a1 = u64 [sp + 0x68]\n 35179: u8 [a0 + 0x7] = a1\n 35182: a1 = u64 [sp + 0x60]\n 35185: u8 [a0 + 0x6] = a1\n 35188: a1 = u64 [sp + 0x58]\n 35191: u8 [a0 + 0x5] = a1\n 35194: a1 = u64 [sp + 0x50]\n 35197: u8 [a0 + 0x4] = a1\n 35200: a1 = u64 [sp + 0x48]\n 35203: u8 [a0 + 0x3] = a1\n 35206: a1 = u64 [sp + 0x40]\n 35209: u8 [a0 + 0x2] = a1\n 35212: a1 = u64 [sp + 0x38]\n 35215: u8 [a0 + 0x1] = a1\n 35218: a1 = u64 [sp + 0x120]\n 35222: u8 [a0] = a1\n 35224: a1 = u64 [sp + 0x118]\n 35228: u8 [a0 + 0x18] = a1\n 35231: a1 = u64 [sp + 0xd0]\n 35235: u8 [a0 + 0x17] = a1\n 35238: a1 = u64 [sp + 0xc8]\n 35242: u8 [a0 + 0x16] = a1\n 35245: a1 = u64 [sp + 0xc0]\n 35249: u8 [a0 + 0x15] = a1\n 35252: a1 = u64 [sp + 0xb8]\n 35256: u8 [a0 + 0x14] = a1\n 35259: a1 = u64 [sp + 0xb0]\n 35263: u8 [a0 + 0x13] = a1\n 35266: a1 = u64 [sp + 0xa8]\n 35270: u8 [a0 + 0x12] = a1\n 35273: a1 = u64 [sp + 0x30]\n 35276: u8 [a0 + 0x11] = a1\n 35279: a1 = u64 [sp + 0x130]\n 35283: u8 [a0 + 0x1f] = a1\n 35286: a1 = u64 [sp + 0x128]\n 35290: u8 [a0 + 0x1e] = a1\n 35293: a1 = u64 [sp + 0x110]\n 35297: u8 [a0 + 0x1d] = a1\n 35300: a1 = u64 [sp + 0xf8]\n 35304: u8 [a0 + 0x1c] = a1\n 35307: a1 = u64 [sp + 0xe8]\n 35311: u8 [a0 + 0x1b] = a1\n 35314: a1 = u64 [sp + 0xe0]\n 35318: u8 [a0 + 0x1a] = a1\n 35321: t0 = u64 [sp + 0x180]\n 35325: t1 = s1\n 35327: a1 = s1 <u t0\n 35330: s1 = u64 [sp + 0x198]\n 35334: a4 = u64 [sp + 0x150]\n 35338: a2 = a4 ^ s1\n 35341: a3 = a4 <u s1\n 35344: t2 = a4\n 35346: a3 = a1 if a2 == 0\n 35349: a4 = u64 [sp + 0x190]\n 35353: a5 = u64 [sp + 0x158]\n 35357: a2 = a5 - a4\n 35360: ra = a5 <u a4\n 35363: a5 = u64 [sp + 0x188]\n 35367: a4 = u64 [sp + 0x160]\n 35371: a5 = a4 - a5\n 35374: a5 = a5 - ra\n 35377: a4 = a2 <u a3\n 35380: a5 = a5 - a4\n 35383: a2 = a2 - a3\n 35386: a3 = t2 - s1\n 35389: a3 = a3 - a1\n 35392: s1 = t1 - t0\n 35395: a3 = a3 | a5\n 35398: a1 = s1 | a2\n 35401: a1 = a1 | a3\n 35404: a2 = a2 | a3\n 35407: a1 = a1 >> 0x20\n 35410: a2 = a2 << 0x20\n 35413: a1 = a1 | a2\n 35416: a2 = u64 [sp + 0x138]\n 35420: u8 [a0 + 0x19] = a2\n 35423: jump @464 if a1 != 0\n      : @462 (gas: 18)\n 35427: a0 = u64 [sp + 0x168]\n 35431: a0 = reverse a0\n 35433: a0 = a0 << 0x20\n 35436: a1 = u64 [sp]\n 35438: a1 = reverse a1\n 35440: a2 = a1 >> 0x20\n 35443: a0 = a0 | a2\n 35446: u64 [sp + 0x190] = a0\n 35450: a1 = a1 << 0x20\n 35453: a0 = u64 [sp + 0x8]\n 35456: a0 = reverse a0\n 35458: a0 = a0 >> 0x20\n 35461: a0 = a0 | a1\n 35464: u64 [sp + 0x188] = a0\n 35468: i32 a1 = s1 + 0\n 35470: u64 [sp + 0x198] = a1\n 35474: a0 = u64 [sp + 0x140]\n 35478: ra = 400, jump @0\n      : @463 [@dyn 200] (gas: 46)\n 35485: a1 = u64 [0x20020]\n 35490: a2 = u64 [0x20028]\n 35495: a3 = u64 [0x20030]\n 35500: a4 = u64 [0x20038]\n 35505: u64 [sp + 0x378] = a1\n 35509: u64 [sp + 0x370] = a2\n 35513: u64 [sp + 0x368] = a3\n 35517: u64 [sp + 0x360] = a4\n 35521: a1 = u64 [sp + 0x188]\n 35525: a1 = reverse a1\n 35527: a2 = u64 [sp + 0x190]\n 35531: a2 = reverse a2\n 35533: a3 = u64 [sp + 0x168]\n 35537: a3 = a3 << 0x20\n 35540: u64 [sp + 0x388] = a3\n 35544: u64 [sp + 896] = 0\n 35548: u64 [sp + 0x390] = a2\n 35552: u64 [sp + 0x398] = a1\n 35556: a1 = u64 [sp + 0x170]\n 35560: a1 = reverse a1\n 35562: s1 = u64 [sp + 0x10]\n 35565: a2 = reverse s1\n 35567: a3 = u64 [sp + 0x178]\n 35571: a3 = reverse a3\n 35573: u64 [sp + 0x3b8] = a3\n 35577: u64 [sp + 0x3b0] = a2\n 35581: u64 [sp + 928] = 0\n 35585: u64 [sp + 0x3a8] = a1\n 35589: i32 a2 = a0 + 0\n 35591: i32 a0 = sp + 0x360\n 35595: a1 = 0x3\n 35598: a3 = u64 [sp + 0x198]\n 35602: ecalli 6 // 'deposit_event'\n 35604: a0 = u64 [sp + 0xf0]\n 35608: u64 [a0 + 24] = 0\n 35611: a1 = u64 [sp + 0x170]\n 35615: u64 [a0 + 0x10] = a1\n 35618: u64 [a0 + 0x8] = s1\n 35621: a1 = u64 [sp + 0x178]\n 35625: u64 [a0] = a1\n 35627: sp = s0 + 0xfffffffffffffc20\n 35631: ra = u64 [sp + 0x3d8]\n 35635: s0 = u64 [sp + 0x3d0]\n 35639: s1 = u64 [sp + 0x3c8]\n 35643: sp = sp + 0x3e0\n 35647: ret\n      : @464 (gas: 1)\n 35649: trap\n      : @465 (gas: 1)\n 35650: ra = 402, jump @212\n      : @466 [@dyn 201] (gas: 8)\n 35656: u64 [sp + 464] = 0\n 35660: u64 [sp + 456] = 0\n 35664: u64 [sp + 448] = 0\n 35668: a0 = 0x4e487b7100000000\n 35678: a1 = sp + 0x1c0\n 35682: u64 [sp + 0x1d8] = a0\n 35686: a0 = 0\n 35688: ra = 404, jump @8\n      : @467 [@dyn 202] (gas: 7)\n 35695: u64 [sp + 440] = 0\n 35699: u64 [sp + 432] = 0\n 35703: u64 [sp + 416] = 0x41\n 35708: a0 = 0x4\n 35711: a1 = sp + 0x1a0\n 35715: u64 [sp + 424] = 0\n 35719: ra = 406, jump @8\n      : @468 [@dyn 203] (gas: 3)\n 35726: a1 = 0x24\n 35729: a0 = 0\n 35731: ra = 408, jump @0\n      : @469 [@dyn 204] (gas: 7)\n 35738: i32 a1 = a0 + 0\n 35740: a0 = 0x1\n 35743: a2 = 0x24\n 35746: ecalli 13 // 'seal_return'\n 35748: a0 = 0\n 35750: ra = 0x19a\n 35754: jump @10\n      : @470 [export #0: 'call'] (gas: 2)\n 35758: a0 = 0\n 35760: ra = 410, jump @10\n      : @471 [@dyn 205] [export #1: 'deploy'] (gas: 2)\n 35767: a0 = 0x1\n 35770: ra = 412, jump @10\n      : @472 [@dyn 206] (gas: 27)\n 35777: sp = sp + 0xffffffffffffff80\n 35780: u64 [sp + 0x78] = ra\n 35783: u64 [sp + 0x70] = s0\n 35786: u64 [sp + 0x68] = s1\n 35789: s0 = sp + 0x80\n 35793: sp = sp & 0xfffffffffffffff0\n 35796: t0 = u64 [a1]\n 35798: t1 = u64 [a1 + 0x8]\n 35801: t2 = u64 [a1 + 0x10]\n 35804: a1 = u64 [a1 + 0x18]\n 35807: a3 = u64 [a2]\n 35809: a4 = u64 [a2 + 0x8]\n 35812: a5 = u64 [a2 + 0x10]\n 35815: a2 = u64 [a2 + 0x18]\n 35818: s1 = a0\n 35820: u64 [sp + 0x18] = a2\n 35823: u64 [sp + 0x10] = a5\n 35826: u64 [sp + 0x8] = a4\n 35829: u64 [sp] = a3\n 35831: u64 [sp + 0x38] = a1\n 35834: u64 [sp + 0x30] = t2\n 35837: u64 [sp + 0x28] = t1\n 35840: a0 = sp + 0x40\n 35843: a1 = sp + 0x20\n 35846: a2 = sp\n 35848: u64 [sp + 0x20] = t0\n 35851: ra = 414, jump @411\n      : @473 [@dyn 207] (gas: 14)\n 35857: a0 = u64 [sp + 0x50]\n 35860: a1 = u64 [sp + 0x58]\n 35863: a2 = u64 [sp + 0x40]\n 35866: a3 = u64 [sp + 0x48]\n 35869: u64 [s1 + 0x10] = a0\n 35872: u64 [s1 + 0x18] = a1\n 35875: u64 [s1] = a2\n 35877: u64 [s1 + 0x8] = a3\n 35880: sp = s0 + 0xffffffffffffff80\n 35883: ra = u64 [sp + 0x78]\n 35886: s0 = u64 [sp + 0x70]\n 35889: s1 = u64 [sp + 0x68]\n 35892: sp = sp + 0x80\n 35896: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"allMultiSigs(uint256)": "449092c8",
							"createMultiSig(address[],uint256)": "d46a09f1",
							"getAllMultiSigs()": "8274bf68",
							"getMyMultiSigs(address)": "382af14e",
							"registerExistingMultisig(address)": "0daee90f"
						}
					},
					"irOptimized": "/// @use-src 0:\"ReviveFactory.sol\"\nobject \"MultiSigFactory_253\" {\n    code {\n        {\n            /// @src 0:303:4366  \"contract MultiSigFactory {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"MultiSigFactory_253_deployed\"), datasize(\"MultiSigFactory_253_deployed\"))\n            return(_1, datasize(\"MultiSigFactory_253_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 0:\"ReviveFactory.sol\"\n    object \"MultiSigFactory_253_deployed\" {\n        code {\n            {\n                /// @src 0:303:4366  \"contract MultiSigFactory {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x0daee90f {\n                        external_fun_registerExistingMultisig()\n                    }\n                    case 0x382af14e { external_fun_getMyMultiSigs() }\n                    case 0x449092c8 { external_fun_allMultiSigs() }\n                    case 0x8274bf68 {\n                        external_fun_getAllMultiSigs()\n                    }\n                    case 0xd46a09f1 { external_fun_createMultiSig() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            { revert(0, 0) }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function abi_decode_tuple_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_registerExistingMultisig()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                fun_registerExistingMultisig(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function array_length_array_address_dyn(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_array_address_dyn_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_array_address_dyn(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function abi_encode_address_to_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encodeUpdatedPos_address(value0, pos) -> updatedPos\n            {\n                abi_encode_address_to_address(value0, pos)\n                updatedPos := add(pos, 0x20)\n            }\n            function array_nextElement_array_address_dyn(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_address_dyn(value, pos) -> end\n            {\n                let length := array_length_array_address_dyn(value)\n                pos := array_storeLengthForEncoding_array_address_dyn_fromStack(pos, length)\n                let baseRef := array_dataslot_array_address_dyn(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_address(elementValue0, pos)\n                    srcPtr := array_nextElement_array_address_dyn(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encode_array_address_dyn_memory_ptr(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_array_address_dyn(value0, tail)\n            }\n            function external_fun_getMyMultiSigs()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret := fun_getMyMultiSigs(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_address_dyn_memory_ptr(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_address_dyn_storage(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_address_dyn_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_address_dyn(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_address_dyn_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_address_dyn_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 19 @src 0:878:907  \"address[] public allMultiSigs\"\n            function getter_fun_allMultiSigs(key) -> ret\n            {\n                let slot := 0\n                let offset := 0\n                if iszero(lt(key, array_length_array_address_dyn_storage(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_address_dyn(slot, key)\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 0:303:4366  \"contract MultiSigFactory {...\"\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_allMultiSigs()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret := getter_fun_allMultiSigs(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function external_fun_getAllMultiSigs()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := fun_getAllMultiSigs()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_address_dyn_memory_ptr(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n            { revert(0, 0) }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_array_address_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n                size := add(size, 0x20)\n            }\n            function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n            { revert(0, 0) }\n            function abi_decode_available_length_array_address_dyn(offset, length, end) -> array\n            {\n                array := allocate_memory(array_allocation_size_array_address_dyn(length))\n                let dst := array\n                mstore(array, length)\n                dst := add(array, 0x20)\n                let srcEnd := add(offset, mul(length, 0x20))\n                if gt(srcEnd, end)\n                {\n                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n                }\n                let src := offset\n                for { } lt(src, srcEnd) { src := add(src, 0x20) }\n                {\n                    let elementPos := src\n                    mstore(dst, abi_decode_address(elementPos, end))\n                    dst := add(dst, 0x20)\n                }\n            }\n            function abi_decode_array_address_dyn(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                let length := calldataload(offset)\n                array := abi_decode_available_length_array_address_dyn(add(offset, 0x20), length, end)\n            }\n            function abi_decode_array_address_dynt_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := calldataload(add(headStart, 0))\n                if gt(offset, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value0 := abi_decode_array_address_dyn(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function external_fun_createMultiSig()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_array_address_dynt_uint256(4, calldatasize())\n                let ret := fun_createMultiSig(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_rational_by_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_rational_by(value)))\n            }\n            function convert_rational_by_to_address(value) -> converted\n            {\n                converted := convert_rational_by_to_uint160(value)\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_0400d57d7dcb81c8d59b1b1298f680cdaf2a06192e4d8bd9f5639fdb0cc41c0b(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Invalid multisig address\")\n            }\n            function abi_encode_stringliteral(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 24)\n                store_literal_in_memory_0400d57d7dcb81c8d59b1b1298f680cdaf2a06192e4d8bd9f5639fdb0cc41c0b(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_address_payable(value)\n            }\n            function convert_uint160_to_contract_MultiSigWallet(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_payable_to_contract_MultiSigWallet(value) -> converted\n            {\n                converted := convert_uint160_to_contract_MultiSigWallet(value)\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_contract_MultiSigWallet_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function convert_contract_MultiSigFactory_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(224, value) }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function validator_revert_bool(value)\n            {\n                if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n            }\n            function abi_decode_t_bool_fromMemory(offset, end) -> value\n            {\n                value := mload(offset)\n                validator_revert_bool(value)\n            }\n            function abi_decode_bool_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            function store_literal_in_memory_9f2297d921856760af725dee02fd73c73aca1ade59d4b9f8975ef4fa9eab4ae3(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Not a valid MultiSigWallet\")\n            }\n            function abi_encode_stringliteral_9f2297d921856760af725dee02fd73c73aca1ade59d4b9f8975ef4fa9eab4ae3(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 26)\n                store_literal_in_memory_9f2297d921856760af725dee02fd73c73aca1ade59d4b9f8975ef4fa9eab4ae3(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_9f22(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_9f2297d921856760af725dee02fd73c73aca1ade59d4b9f8975ef4fa9eab4ae3(tail)\n            }\n            function require_helper_stringliteral_9f22(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_9f22(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_array_array_address_dyn_storage_to_array_address_dyn_ptr(value) -> converted\n            { converted := value }\n            function array_dataslot_array_address_dyn_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_array_address_dyn_storage_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_address_dyn_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_address_dyn_storage_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_address_dyn_storage_ptr(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic20(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, sub(shl(160, 1), 1))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_address_to_address(slot, offset, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_dynamic20(sload(slot), offset, prepare_store_address(convertedValue)))\n            }\n            function array_push_from_address_to_array_address_dyn_storage_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_address_dyn_ptr(array, oldLen)\n                update_storage_value_address_to_address(slot, offset, value0)\n            }\n            /// @ast-id 135 @src 0:2252:2886  \"function registerExistingMultisig(address multisig) external {...\"\n            function fun_registerExistingMultisig(var_multisig)\n            {\n                /// @src 0:2331:2339  \"multisig\"\n                let _1 := var_multisig\n                let expr := _1\n                /// @src 0:2351:2352  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:2343:2353  \"address(0)\"\n                let expr_2 := convert_rational_by_to_address(expr_1)\n                /// @src 0:2331:2353  \"multisig != address(0)\"\n                let expr_3 := iszero(eq(cleanup_address(expr), cleanup_address(expr_2)))\n                /// @src 0:2323:2382  \"require(multisig != address(0), \\\"Invalid multisig address\\\")\"\n                require_helper_stringliteral(expr_3)\n                /// @src 0:2555:2560  \"false\"\n                let expr_4 := 0x00\n                /// @src 0:2540:2560  \"bool success = false\"\n                let var_success := expr_4\n                /// @src 0:2597:2605  \"multisig\"\n                let _2 := var_multisig\n                let expr_5 := _2\n                /// @src 0:2589:2606  \"payable(multisig)\"\n                let expr_6 := convert_address_to_address_payable(expr_5)\n                /// @src 0:2574:2607  \"MultiSigWallet(payable(multisig))\"\n                let expr_address := convert_address_payable_to_contract_MultiSigWallet(expr_6)\n                /// @src 0:2574:2615  \"MultiSigWallet(payable(multisig)).isOwner\"\n                let expr_95_address := convert_contract_MultiSigWallet_to_address(expr_address)\n                let expr_95_functionSelector := 0x2f54bf6e\n                /// @src 0:2624:2628  \"this\"\n                let expr_98_address := address()\n                /// @src 0:2616:2629  \"address(this)\"\n                let expr_7 := convert_contract_MultiSigFactory_to_address(expr_98_address)\n                /// @src 0:2574:2630  \"MultiSigWallet(payable(multisig)).isOwner(address(this))\"\n                let _3 := allocate_unbounded()\n                mstore(_3, shift_left(expr_95_functionSelector))\n                let _4 := abi_encode_tuple_address(add(_3, 4), expr_7)\n                let trySuccessCondition := staticcall(gas(), expr_95_address, _3, sub(_4, _3), _3, 32)\n                let expr_8\n                if trySuccessCondition\n                {\n                    let _5 := 32\n                    if gt(_5, returndatasize()) { _5 := returndatasize() }\n                    finalize_allocation(_3, _5)\n                    expr_8 := abi_decode_bool_fromMemory(_3, add(_3, _5))\n                }\n                /// @src 0:2570:2732  \"try MultiSigWallet(payable(multisig)).isOwner(address(this)) returns (bool) {...\"\n                switch iszero(trySuccessCondition)\n                case 0 {\n                    /// @src 0:2670:2674  \"true\"\n                    let expr_9 := 0x01\n                    /// @src 0:2660:2674  \"success = true\"\n                    var_success := expr_9\n                }\n                default /// @src 0:2570:2732  \"try MultiSigWallet(payable(multisig)).isOwner(address(this)) returns (bool) {...\"\n                {\n                    let _6 := 1\n                    if _6\n                    {\n                        /// @src 0:2716:2721  \"false\"\n                        let expr_10 := 0x00\n                        /// @src 0:2706:2721  \"success = false\"\n                        var_success := expr_10\n                    }\n                }\n                /// @src 0:2749:2756  \"success\"\n                let _7 := var_success\n                let expr_11 := _7\n                /// @src 0:2741:2787  \"require(success, \\\"Not a valid MultiSigWallet\\\")\"\n                require_helper_stringliteral_9f22(expr_11)\n                /// @src 0:2797:2809  \"allMultiSigs\"\n                let _8_slot := 0x00\n                let expr_122_slot := _8_slot\n                /// @src 0:2797:2814  \"allMultiSigs.push\"\n                let expr_124_self_slot := convert_array_array_address_dyn_storage_to_array_address_dyn_ptr(expr_122_slot)\n                /// @src 0:2815:2823  \"multisig\"\n                let _8 := var_multisig\n                let expr_12 := _8\n                /// @src 0:2797:2824  \"allMultiSigs.push(multisig)\"\n                array_push_from_address_to_array_address_dyn_storage_ptr(expr_124_self_slot, expr_12)\n                /// @src 0:2858:2868  \"msg.sender\"\n                let expr_13 := caller()\n                /// @src 0:2870:2878  \"multisig\"\n                let _9 := var_multisig\n                let expr_14 := _9\n                /// @src 0:2839:2879  \"MultiSigRegistered(msg.sender, multisig)\"\n                let _10 := 0x4efa4b67ce92db70034592f6523ffb5fd483a646da37c224dab34a1b0d247369\n                let _11 := convert_address_to_address(expr_13)\n                let _12 := convert_address_to_address(expr_14)\n                let _13 := allocate_unbounded()\n                let _14 := abi_encode_tuple(_13)\n                log3(_13, sub(_14, _13), _10, _11, _12)\n            }\n            /// @src 0:303:4366  \"contract MultiSigFactory {...\"\n            function zero_value_for_split_array_address_dyn() -> ret\n            { ret := 96 }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function increment_wrapping_uint256(value) -> ret\n            {\n                ret := cleanup_uint256(add(value, 1))\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function increment_uint256(value) -> ret\n            {\n                value := cleanup_uint256(value)\n                if eq(value, not(0)) { panic_error_0x11() }\n                ret := add(value, 1)\n            }\n            function allocate_memory_array_array_address_dyn(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_array_address_dyn(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_memory_chunk_address(dataStart, dataSizeInBytes)\n            {\n                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)\n            }\n            function allocate_and_zero_memory_array_array_address_dyn(length) -> memPtr\n            {\n                memPtr := allocate_memory_array_array_address_dyn(length)\n                let dataStart := memPtr\n                let dataSize := array_allocation_size_array_address_dyn(length)\n                dataStart := add(dataStart, 32)\n                dataSize := sub(dataSize, 32)\n                zero_memory_chunk_address(dataStart, dataSize)\n            }\n            function memory_array_index_access_address_dyn(baseRef, index) -> addr\n            {\n                if iszero(lt(index, array_length_array_address_dyn(baseRef))) { panic_error_0x32() }\n                let offset := mul(index, 32)\n                offset := add(offset, 32)\n                addr := add(baseRef, offset)\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, cleanup_address(value))\n            }\n            /// @ast-id 252 @src 0:3378:4364  \"function getMyMultiSigs(address owner)...\"\n            function fun_getMyMultiSigs(var_owner) -> var_myMultisigs_mpos\n            {\n                /// @src 0:3464:3492  \"address[] memory myMultisigs\"\n                let zero_array_address_dyn_memory_ptr_mpos := zero_value_for_split_array_address_dyn()\n                var_myMultisigs_mpos := zero_array_address_dyn_memory_ptr_mpos\n                /// @src 0:3524:3536  \"allMultiSigs\"\n                let _17_slot := 0x00\n                let expr_156_slot := _17_slot\n                /// @src 0:3524:3543  \"allMultiSigs.length\"\n                let expr := array_length_array_address_dyn_storage(expr_156_slot)\n                /// @src 0:3508:3543  \"uint256 total = allMultiSigs.length\"\n                let var_total := expr\n                /// @src 0:3649:3650  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:3633:3650  \"uint256 count = 0\"\n                let var_count := convert_rational_by_to_uint256(expr_1)\n                /// @src 0:3677:3678  \"0\"\n                let expr_2 := 0x00\n                /// @src 0:3665:3678  \"uint256 i = 0\"\n                let var_i := convert_rational_by_to_uint256(expr_2)\n                /// @src 0:3660:3934  \"for (uint256 i = 0; i < total; i++) {...\"\n                for { }\n                /** @src 0:3665:3678  \"uint256 i = 0\" */ 1\n                {\n                    /// @src 0:3691:3694  \"i++\"\n                    let _1 := var_i\n                    let _2 := increment_wrapping_uint256(_1)\n                    var_i := _2\n                }\n                {\n                    /// @src 0:3680:3681  \"i\"\n                    let _3 := var_i\n                    let expr_3 := _3\n                    /// @src 0:3684:3689  \"total\"\n                    let _4 := var_total\n                    let expr_4 := _4\n                    /// @src 0:3680:3689  \"i < total\"\n                    let expr_5 := lt(cleanup_uint256(expr_3), cleanup_uint256(expr_4))\n                    if iszero(expr_5) { break }\n                    /// @src 0:3823:3835  \"allMultiSigs\"\n                    let _22_slot := 0x00\n                    let expr_slot := _22_slot\n                    /// @src 0:3836:3837  \"i\"\n                    let _5 := var_i\n                    let expr_6 := _5\n                    /// @src 0:3823:3838  \"allMultiSigs[i]\"\n                    let _6, _7 := storage_array_index_access_address_dyn(expr_slot, expr_6)\n                    let _8 := read_from_storage_split_dynamic_address(_6, _7)\n                    let expr_7 := _8\n                    /// @src 0:3815:3839  \"payable(allMultiSigs[i])\"\n                    let expr_8 := convert_address_to_address_payable(expr_7)\n                    /// @src 0:3800:3840  \"MultiSigWallet(payable(allMultiSigs[i]))\"\n                    let expr_183_address := convert_address_payable_to_contract_MultiSigWallet(expr_8)\n                    /// @src 0:3773:3840  \"MultiSigWallet candidate = MultiSigWallet(payable(allMultiSigs[i]))\"\n                    let var_candidate_175_address := expr_183_address\n                    /// @src 0:3858:3867  \"candidate\"\n                    let _27_address := var_candidate_175_address\n                    let expr_185_address := _27_address\n                    /// @src 0:3858:3875  \"candidate.isOwner\"\n                    let expr_186_address := convert_contract_MultiSigWallet_to_address(expr_185_address)\n                    let expr_186_functionSelector := 0x2f54bf6e\n                    /// @src 0:3876:3881  \"owner\"\n                    let _9 := var_owner\n                    let expr_9 := _9\n                    /// @src 0:3858:3882  \"candidate.isOwner(owner)\"\n                    let _10 := allocate_unbounded()\n                    mstore(_10, shift_left(expr_186_functionSelector))\n                    let _11 := abi_encode_tuple_address(add(_10, 4), expr_9)\n                    let _12 := staticcall(gas(), expr_186_address, _10, sub(_11, _10), _10, 32)\n                    if iszero(_12) { revert_forward() }\n                    let expr_10\n                    if _12\n                    {\n                        let _13 := 32\n                        if gt(_13, returndatasize()) { _13 := returndatasize() }\n                        finalize_allocation(_10, _13)\n                        expr_10 := abi_decode_bool_fromMemory(_10, add(_10, _13))\n                    }\n                    /// @src 0:3854:3924  \"if (candidate.isOwner(owner)) {...\"\n                    if expr_10\n                    {\n                        /// @src 0:3902:3909  \"count++\"\n                        let _14 := var_count\n                        let _15 := increment_uint256(_14)\n                        var_count := _15\n                    }\n                }\n                /// @src 0:4028:4033  \"count\"\n                let _16 := var_count\n                let expr_11 := _16\n                /// @src 0:4014:4034  \"new address[](count)\"\n                let expr_201_mpos := allocate_and_zero_memory_array_array_address_dyn(expr_11)\n                /// @src 0:4000:4034  \"myMultisigs = new address[](count)\"\n                var_myMultisigs_mpos := expr_201_mpos\n                /// @src 0:4058:4059  \"0\"\n                let expr_12 := 0x00\n                /// @src 0:4044:4059  \"uint256 idx = 0\"\n                let var_idx := convert_rational_by_to_uint256(expr_12)\n                /// @src 0:4086:4087  \"0\"\n                let expr_13 := 0x00\n                /// @src 0:4074:4087  \"uint256 i = 0\"\n                let var_i_1 := convert_rational_by_to_uint256(expr_13)\n                /// @src 0:4069:4330  \"for (uint256 i = 0; i < total; i++) {...\"\n                for { }\n                /** @src 0:4074:4087  \"uint256 i = 0\" */ 1\n                {\n                    /// @src 0:4100:4103  \"i++\"\n                    let _17 := var_i_1\n                    let _18 := increment_wrapping_uint256(_17)\n                    var_i_1 := _18\n                }\n                {\n                    /// @src 0:4089:4090  \"i\"\n                    let _19 := var_i_1\n                    let expr_14 := _19\n                    /// @src 0:4093:4098  \"total\"\n                    let _20 := var_total\n                    let expr_15 := _20\n                    /// @src 0:4089:4098  \"i < total\"\n                    let expr_16 := lt(cleanup_uint256(expr_14), cleanup_uint256(expr_15))\n                    if iszero(expr_16) { break }\n                    /// @src 0:4169:4181  \"allMultiSigs\"\n                    let _41_slot := 0x00\n                    let expr_224_slot := _41_slot\n                    /// @src 0:4182:4183  \"i\"\n                    let _21 := var_i_1\n                    let expr_17 := _21\n                    /// @src 0:4169:4184  \"allMultiSigs[i]\"\n                    let _22, _23 := storage_array_index_access_address_dyn(expr_224_slot, expr_17)\n                    let _24 := read_from_storage_split_dynamic_address(_22, _23)\n                    let expr_18 := _24\n                    /// @src 0:4161:4185  \"payable(allMultiSigs[i])\"\n                    let expr_19 := convert_address_to_address_payable(expr_18)\n                    /// @src 0:4146:4186  \"MultiSigWallet(payable(allMultiSigs[i]))\"\n                    let expr_228_address := convert_address_payable_to_contract_MultiSigWallet(expr_19)\n                    /// @src 0:4119:4186  \"MultiSigWallet candidate = MultiSigWallet(payable(allMultiSigs[i]))\"\n                    let var_candidate_address := expr_228_address\n                    /// @src 0:4204:4213  \"candidate\"\n                    let _46_address := var_candidate_address\n                    let expr_230_address := _46_address\n                    /// @src 0:4204:4221  \"candidate.isOwner\"\n                    let expr_231_address := convert_contract_MultiSigWallet_to_address(expr_230_address)\n                    let expr_functionSelector := 0x2f54bf6e\n                    /// @src 0:4222:4227  \"owner\"\n                    let _25 := var_owner\n                    let expr_20 := _25\n                    /// @src 0:4204:4228  \"candidate.isOwner(owner)\"\n                    let _26 := allocate_unbounded()\n                    mstore(_26, shift_left(expr_functionSelector))\n                    let _27 := abi_encode_tuple_address(add(_26, 4), expr_20)\n                    let _28 := staticcall(gas(), expr_231_address, _26, sub(_27, _26), _26, 32)\n                    if iszero(_28) { revert_forward() }\n                    let expr_21\n                    if _28\n                    {\n                        let _29 := 32\n                        if gt(_29, returndatasize()) { _29 := returndatasize() }\n                        finalize_allocation(_26, _29)\n                        expr_21 := abi_decode_bool_fromMemory(_26, add(_26, _29))\n                    }\n                    /// @src 0:4200:4320  \"if (candidate.isOwner(owner)) {...\"\n                    if expr_21\n                    {\n                        /// @src 0:4267:4279  \"allMultiSigs\"\n                        let _52_slot := 0x00\n                        let expr_237_slot := _52_slot\n                        /// @src 0:4280:4281  \"i\"\n                        let _30 := var_i_1\n                        let expr_22 := _30\n                        /// @src 0:4267:4282  \"allMultiSigs[i]\"\n                        let _31, _32 := storage_array_index_access_address_dyn(expr_237_slot, expr_22)\n                        let _33 := read_from_storage_split_dynamic_address(_31, _32)\n                        let expr_23 := _33\n                        /// @src 0:4248:4259  \"myMultisigs\"\n                        let _57_mpos := var_myMultisigs_mpos\n                        let expr_234_mpos := _57_mpos\n                        /// @src 0:4260:4263  \"idx\"\n                        let _34 := var_idx\n                        let expr_24 := _34\n                        /// @src 0:4248:4282  \"myMultisigs[idx] = allMultiSigs[i]\"\n                        let _35 := expr_23\n                        write_to_memory_address(memory_array_index_access_address_dyn(expr_234_mpos, expr_24), _35)\n                        /// @src 0:4300:4305  \"idx++\"\n                        let _36 := var_idx\n                        let _37 := increment_uint256(_36)\n                        var_idx := _37\n                    }\n                }\n                /// @src 0:4346:4357  \"myMultisigs\"\n                let _62_mpos := var_myMultisigs_mpos\n                let expr_249_mpos := _62_mpos\n                /// @src 0:4339:4357  \"return myMultisigs\"\n                var_myMultisigs_mpos := expr_249_mpos\n                leave\n            }\n            /// @src 0:303:4366  \"contract MultiSigFactory {...\"\n            function array_storeLengthForEncoding_array_address_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function array_nextElement_array_address_dyn_storage(ptr) -> next\n            { next := add(ptr, 0x01) }\n            function abi_encode_array_address_dyn_storage(value, pos) -> end\n            {\n                let length := array_length_array_address_dyn_storage(value)\n                pos := array_storeLengthForEncoding_array_address_dyn(pos, length)\n                let baseRef := array_dataslot_array_address_dyn_storage(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := read_from_storage_offset_address(srcPtr)\n                    pos := abi_encodeUpdatedPos_address(elementValue0, pos)\n                    srcPtr := array_nextElement_array_address_dyn_storage(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encodeUpdatedPos_array_address_dyn_storage(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_array_address_dyn_storage(value0, pos)\n            }\n            function copy_array_from_storage_to_memory_array_address_dyn(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_array_address_dyn_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function convert_array_array_address_dyn_storage_to_array_address_dyn(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_array_address_dyn(value)\n            }\n            /// @ast-id 145 @src 0:3040:3144  \"function getAllMultiSigs() external view returns (address[] memory) {...\"\n            function fun_getAllMultiSigs() -> var_mpos\n            {\n                /// @src 0:3090:3106  \"address[] memory\"\n                let zero_array_address_dyn_mpos := zero_value_for_split_array_address_dyn()\n                var_mpos := zero_array_address_dyn_mpos\n                /// @src 0:3125:3137  \"allMultiSigs\"\n                let _slot := 0x00\n                let expr_142_slot := _slot\n                /// @src 0:3118:3137  \"return allMultiSigs\"\n                var_mpos := convert_array_array_address_dyn_storage_to_array_address_dyn(expr_142_slot)\n                leave\n            }\n            /// @src 0:303:4366  \"contract MultiSigFactory {...\"\n            function zero_value_for_split_address() -> ret\n            { ret := 0 }\n            function abi_encode_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_array_address_dyn_uint256(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_array_address_dyn(value0, tail)\n                abi_encode_uint256(value1, add(headStart, 32))\n            }\n            /// @ast-id 69 @src 0:1524:2116  \"function createMultiSig(address[] memory owners, uint256 required)...\"\n            function fun_createMultiSig(var_owners_mpos, var_required) -> var_multisig\n            {\n                /// @src 0:1625:1641  \"address multisig\"\n                let zero_address := zero_value_for_split_address()\n                var_multisig := zero_address\n                /// @src 0:1879:1885  \"owners\"\n                let _mpos := var_owners_mpos\n                let expr_mpos := _mpos\n                /// @src 0:1887:1895  \"required\"\n                let _1 := var_required\n                let expr := _1\n                /// @src 0:1860:1896  \"new MultiSigWallet(owners, required)\"\n                let _2 := allocate_unbounded()\n                let _3 := add(_2, datasize(\"MultiSigWallet_1291\"))\n                if or(gt(_3, 0xffffffffffffffff), lt(_3, _2)) { panic_error_0x41() }\n                datacopy(_2, dataoffset(\"MultiSigWallet_1291\"), datasize(\"MultiSigWallet_1291\"))\n                _3 := abi_encode_array_address_dyn_uint256(_3, expr_mpos, expr)\n                let expr_45_address := create(0, _2, sub(_3, _2))\n                if iszero(expr_45_address) { revert_forward() }\n                /// @src 0:1836:1896  \"MultiSigWallet wallet = new MultiSigWallet(owners, required)\"\n                let var_wallet_address := expr_45_address\n                /// @src 0:1925:1931  \"wallet\"\n                let _address := var_wallet_address\n                let expr_50_address := _address\n                /// @src 0:1917:1932  \"address(wallet)\"\n                let expr_1 := convert_contract_MultiSigWallet_to_address(expr_50_address)\n                /// @src 0:1906:1932  \"multisig = address(wallet)\"\n                var_multisig := expr_1\n                /// @src 0:1977:1989  \"allMultiSigs\"\n                let _71_slot := 0x00\n                let expr_54_slot := _71_slot\n                /// @src 0:1977:1994  \"allMultiSigs.push\"\n                let expr_self_slot := convert_array_array_address_dyn_storage_to_array_address_dyn_ptr(expr_54_slot)\n                /// @src 0:1995:2003  \"multisig\"\n                let _4 := var_multisig\n                let expr_2 := _4\n                /// @src 0:1977:2004  \"allMultiSigs.push(multisig)\"\n                array_push_from_address_to_array_address_dyn_storage_ptr(expr_self_slot, expr_2)\n                /// @src 0:2070:2080  \"msg.sender\"\n                let expr_3 := caller()\n                /// @src 0:2082:2090  \"multisig\"\n                let _5 := var_multisig\n                let expr_4 := _5\n                /// @src 0:2092:2098  \"owners\"\n                let _74_mpos := var_owners_mpos\n                let expr_64_mpos := _74_mpos\n                /// @src 0:2100:2108  \"required\"\n                let _6 := var_required\n                let expr_5 := _6\n                /// @src 0:2054:2109  \"MultiSigCreated(msg.sender, multisig, owners, required)\"\n                let _7 := 0x4fe3daf9045507ccb3c1a8cdbf17e14118e023e81ac9ec77527e49853a355abd\n                let _8 := convert_address_to_address(expr_3)\n                let _9 := convert_address_to_address(expr_4)\n                let _10 := allocate_unbounded()\n                let _11 := abi_encode_array_address_dyn_uint256(_10, expr_64_mpos, expr_5)\n                log3(_10, sub(_11, _10), _7, _8, _9)\n            }\n        }\n        /// @use-src 1:\"ReviveMultisig.sol\"\n        object \"MultiSigWallet_1291\" {\n            code {\n                {\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    mstore(64, memoryguard(0x80))\n                    if callvalue()\n                    {\n                        revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                    }\n                    let _1, _2 := copy_arguments_for_constructor_object_MultiSigWallet()\n                    constructor_MultiSigWallet(_1, _2)\n                    let _3 := allocate_unbounded()\n                    codecopy(_3, dataoffset(\"MultiSigWallet_1291_deployed\"), datasize(\"MultiSigWallet_1291_deployed\"))\n                    return(_3, datasize(\"MultiSigWallet_1291_deployed\"))\n                }\n                function allocate_unbounded() -> memPtr\n                { memPtr := mload(64) }\n                function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                { revert(0, 0) }\n                function round_up_to_mul_of(value) -> result\n                {\n                    result := and(add(value, 31), not(31))\n                }\n                function panic_error_0x41()\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                function finalize_allocation(memPtr, size)\n                {\n                    let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                    if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                    mstore(64, newFreePtr)\n                }\n                function allocate_memory(size) -> memPtr\n                {\n                    memPtr := allocate_unbounded()\n                    finalize_allocation(memPtr, size)\n                }\n                function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                { revert(0, 0) }\n                function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                { revert(0, 0) }\n                function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                { revert(0, 0) }\n                function array_allocation_size_array_address_dyn(length) -> size\n                {\n                    if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n                    size := mul(length, 0x20)\n                    size := add(size, 0x20)\n                }\n                function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n                { revert(0, 0) }\n                function cleanup_uint160(value) -> cleaned\n                {\n                    cleaned := and(value, sub(shl(160, 1), 1))\n                }\n                function cleanup_address(value) -> cleaned\n                {\n                    cleaned := cleanup_uint160(value)\n                }\n                function validator_revert_address(value)\n                {\n                    if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n                }\n                function abi_decode_address_fromMemory(offset, end) -> value\n                {\n                    value := mload(offset)\n                    validator_revert_address(value)\n                }\n                function abi_decode_available_length_array_address_dyn_fromMemory(offset, length, end) -> array\n                {\n                    array := allocate_memory(array_allocation_size_array_address_dyn(length))\n                    let dst := array\n                    mstore(array, length)\n                    dst := add(array, 0x20)\n                    let srcEnd := add(offset, mul(length, 0x20))\n                    if gt(srcEnd, end)\n                    {\n                        revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n                    }\n                    let src := offset\n                    for { } lt(src, srcEnd) { src := add(src, 0x20) }\n                    {\n                        let elementPos := src\n                        mstore(dst, abi_decode_address_fromMemory(elementPos, end))\n                        dst := add(dst, 0x20)\n                    }\n                }\n                function abi_decode_array_address_dyn_fromMemory(offset, end) -> array\n                {\n                    if iszero(slt(add(offset, 0x1f), end))\n                    {\n                        revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                    }\n                    let length := mload(offset)\n                    array := abi_decode_available_length_array_address_dyn_fromMemory(add(offset, 0x20), length, end)\n                }\n                function cleanup_uint256(value) -> cleaned\n                { cleaned := value }\n                function validator_revert_uint256(value)\n                {\n                    if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n                }\n                function abi_decode_uint256_fromMemory(offset, end) -> value\n                {\n                    value := mload(offset)\n                    validator_revert_uint256(value)\n                }\n                function abi_decode_array_address_dynt_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n                {\n                    if slt(sub(dataEnd, headStart), 64)\n                    {\n                        revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                    }\n                    let offset := mload(add(headStart, 0))\n                    if gt(offset, sub(shl(64, 1), 1))\n                    {\n                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                    }\n                    value0 := abi_decode_array_address_dyn_fromMemory(add(headStart, offset), dataEnd)\n                    let offset_1 := 32\n                    value1 := abi_decode_uint256_fromMemory(add(headStart, offset_1), dataEnd)\n                }\n                function copy_arguments_for_constructor_object_MultiSigWallet() -> ret_param, ret_param_1\n                {\n                    let programSize := datasize(\"MultiSigWallet_1291\")\n                    let argSize := sub(codesize(), programSize)\n                    let memoryDataOffset := allocate_memory(argSize)\n                    codecopy(memoryDataOffset, programSize, argSize)\n                    ret_param, ret_param_1 := abi_decode_array_address_dynt_uint256_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n                }\n                function array_length_array_address_dyn(value) -> length\n                { length := mload(value) }\n                function cleanup_t_rational_by(value) -> cleaned\n                { cleaned := value }\n                function identity(value) -> ret\n                { ret := value }\n                function convert_rational_by_to_uint256(value) -> converted\n                {\n                    converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n                }\n                /// @src 1:812:853  \"uint constant public MAX_OWNER_COUNT = 50\"\n                function constant_MAX_OWNER_COUNT() -> ret\n                {\n                    /// @src 1:851:853  \"50\"\n                    let expr := 0x32\n                    let _1 := convert_rational_by_to_uint256(expr)\n                    ret := _1\n                }\n                function cleanup_rational_by(value) -> cleaned\n                { cleaned := value }\n                function convert_t_rational_by_to_t_uint256(value) -> converted\n                {\n                    converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n                }\n                function require_helper(condition)\n                {\n                    if iszero(condition) { revert(0, 0) }\n                }\n                /// @ast-id 477 @src 1:2226:2451  \"modifier validRequirement(uint ownerCount, uint _required) {...\"\n                function modifier_validRequirement(var_owners_498_mpos, var_required)\n                {\n                    /// @src 1:2945:2952  \"_owners\"\n                    let _4_mpos := var_owners_498_mpos\n                    let expr_503_mpos := _4_mpos\n                    /// @src 1:2945:2959  \"_owners.length\"\n                    let expr := array_length_array_address_dyn(expr_503_mpos)\n                    let _1 := expr\n                    let var_ownerCount := _1\n                    /// @src 1:2961:2970  \"_required\"\n                    let _2 := var_required\n                    let expr_1 := _2\n                    let _3 := expr_1\n                    let var_required_1 := _3\n                    /// @src 1:2303:2313  \"ownerCount\"\n                    let _4 := var_ownerCount\n                    let expr_2 := _4\n                    /// @src 1:2317:2332  \"MAX_OWNER_COUNT\"\n                    let expr_3 := constant_MAX_OWNER_COUNT()\n                    /// @src 1:2303:2332  \"ownerCount <= MAX_OWNER_COUNT\"\n                    let expr_4 := iszero(gt(cleanup_uint256(expr_2), cleanup_uint256(expr_3)))\n                    /// @src 1:2303:2371  \"ownerCount <= MAX_OWNER_COUNT...\"\n                    let expr_5 := expr_4\n                    if expr_5\n                    {\n                        /// @src 1:2348:2357  \"_required\"\n                        let _5 := var_required_1\n                        let expr_6 := _5\n                        /// @src 1:2361:2371  \"ownerCount\"\n                        let _6 := var_ownerCount\n                        let expr_7 := _6\n                        /// @src 1:2348:2371  \"_required <= ownerCount\"\n                        let expr_8 := iszero(gt(cleanup_uint256(expr_6), cleanup_uint256(expr_7)))\n                        /// @src 1:2303:2371  \"ownerCount <= MAX_OWNER_COUNT...\"\n                        expr_5 := expr_8\n                    }\n                    /// @src 1:2303:2401  \"ownerCount <= MAX_OWNER_COUNT...\"\n                    let expr_9 := expr_5\n                    if expr_9\n                    {\n                        /// @src 1:2387:2396  \"_required\"\n                        let _7 := var_required_1\n                        let expr_10 := _7\n                        /// @src 1:2400:2401  \"0\"\n                        let expr_11 := 0x00\n                        /// @src 1:2387:2401  \"_required != 0\"\n                        let expr_12 := iszero(eq(cleanup_uint256(expr_10), convert_t_rational_by_to_t_uint256(expr_11)))\n                        /// @src 1:2303:2401  \"ownerCount <= MAX_OWNER_COUNT...\"\n                        expr_9 := expr_12\n                    }\n                    /// @src 1:2303:2432  \"ownerCount <= MAX_OWNER_COUNT...\"\n                    let expr_13 := expr_9\n                    if expr_13\n                    {\n                        /// @src 1:2417:2427  \"ownerCount\"\n                        let _8 := var_ownerCount\n                        let expr_14 := _8\n                        /// @src 1:2431:2432  \"0\"\n                        let expr_15 := 0x00\n                        /// @src 1:2417:2432  \"ownerCount != 0\"\n                        let expr_16 := iszero(eq(cleanup_uint256(expr_14), convert_t_rational_by_to_t_uint256(expr_15)))\n                        /// @src 1:2303:2432  \"ownerCount <= MAX_OWNER_COUNT...\"\n                        expr_13 := expr_16\n                    }\n                    /// @src 1:2295:2433  \"require(ownerCount <= MAX_OWNER_COUNT...\"\n                    require_helper(expr_13)\n                    /// @src 1:2443:2444  \"_\"\n                    fun_inner(var_owners_498_mpos, var_required)\n                }\n                /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                function increment_wrapping_uint256(value) -> ret\n                {\n                    ret := cleanup_uint256(add(value, 1))\n                }\n                function panic_error_0x32()\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                function memory_array_index_access_address_dyn(baseRef, index) -> addr\n                {\n                    if iszero(lt(index, array_length_array_address_dyn(baseRef))) { panic_error_0x32() }\n                    let offset := mul(index, 32)\n                    offset := add(offset, 32)\n                    addr := add(baseRef, offset)\n                }\n                function read_from_memoryt_address(ptr) -> returnValue\n                {\n                    let value := cleanup_address(mload(ptr))\n                    returnValue := value\n                }\n                function convert_uint160_to_uint160(value) -> converted\n                {\n                    converted := cleanup_uint160(identity(cleanup_uint160(value)))\n                }\n                function convert_uint160_to_address(value) -> converted\n                {\n                    converted := convert_uint160_to_uint160(value)\n                }\n                function convert_address_to_address(value) -> converted\n                {\n                    converted := convert_uint160_to_address(value)\n                }\n                function mapping_index_access_mapping_address_bool_of_address(slot, key) -> dataSlot\n                {\n                    mstore(0, convert_address_to_address(key))\n                    mstore(0x20, slot)\n                    dataSlot := keccak256(0, 0x40)\n                }\n                function shift_right_unsigned(value) -> newValue\n                { newValue := shr(0, value) }\n                function cleanup_from_storage_bool(value) -> cleaned\n                { cleaned := and(value, 0xff) }\n                function extract_from_storage_value_offset_bool(slot_value) -> value\n                {\n                    value := cleanup_from_storage_bool(shift_right_unsigned(slot_value))\n                }\n                function read_from_storage_split_offset_bool(slot) -> value\n                {\n                    value := extract_from_storage_value_offset_bool(sload(slot))\n                }\n                function cleanup_bool(value) -> cleaned\n                {\n                    cleaned := iszero(iszero(value))\n                }\n                function convert_rational_by_to_uint160(value) -> converted\n                {\n                    converted := cleanup_uint160(identity(cleanup_rational_by(value)))\n                }\n                function convert_rational_by_to_address(value) -> converted\n                {\n                    converted := convert_rational_by_to_uint160(value)\n                }\n                function shift_left(value) -> newValue\n                { newValue := shl(0, value) }\n                function update_byte_slice_shift_0(value, toInsert) -> result\n                {\n                    let mask := 255\n                    toInsert := shift_left(toInsert)\n                    value := and(value, not(mask))\n                    result := or(value, and(toInsert, mask))\n                }\n                function convert_bool_to_bool(value) -> converted\n                {\n                    converted := cleanup_bool(value)\n                }\n                function prepare_store_bool(value) -> ret\n                { ret := value }\n                function update_storage_value_offset_bool_to_bool(slot, value)\n                {\n                    let convertedValue := convert_bool_to_bool(value)\n                    sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n                }\n                function array_length_array_address_dyn_storage(value) -> length\n                { length := sload(value) }\n                function array_convert_length_to_size_array_address_dyn_storage(length) -> size\n                {\n                    size := length\n                    size := div(add(length, sub(1, 1)), 1)\n                }\n                function array_dataslot_array_address_dyn_storage(ptr) -> data\n                {\n                    data := ptr\n                    mstore(0, ptr)\n                    data := keccak256(0, 0x20)\n                }\n                function shift_left_dynamic(bits, value) -> newValue\n                { newValue := shl(bits, value) }\n                function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n                {\n                    let shiftBits := mul(shiftBytes, 8)\n                    let mask := shift_left_dynamic(shiftBits, not(0))\n                    toInsert := shift_left_dynamic(shiftBits, toInsert)\n                    value := and(value, not(mask))\n                    result := or(value, and(toInsert, mask))\n                }\n                function convert_uint256_to_uint256(value) -> converted\n                {\n                    converted := cleanup_uint256(identity(cleanup_uint256(value)))\n                }\n                function prepare_store_uint256(value) -> ret\n                { ret := value }\n                function update_storage_value_uint256_to_uint256(slot, offset, value)\n                {\n                    let convertedValue := convert_uint256_to_uint256(value)\n                    sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n                }\n                function zero_value_for_split_uint256() -> ret\n                { ret := 0 }\n                function storage_set_to_zero_uint256(slot, offset)\n                {\n                    let zero := zero_value_for_split_uint256()\n                    update_storage_value_uint256_to_uint256(slot, offset, zero)\n                }\n                function clear_storage_range_address(start, end)\n                {\n                    for { } lt(start, end) { start := add(start, 1) }\n                    {\n                        storage_set_to_zero_uint256(start, 0)\n                    }\n                }\n                function cleanup_storage_array_end_array_address_dyn(array, len, startIndex)\n                {\n                    if lt(startIndex, len)\n                    {\n                        let oldSlotCount := array_convert_length_to_size_array_address_dyn_storage(len)\n                        let newSlotCount := array_convert_length_to_size_array_address_dyn_storage(startIndex)\n                        let arrayDataStart := array_dataslot_array_address_dyn_storage(array)\n                        let deleteStart := add(arrayDataStart, newSlotCount)\n                        let deleteEnd := add(arrayDataStart, oldSlotCount)\n                        clear_storage_range_address(deleteStart, deleteEnd)\n                    }\n                }\n                function resize_array_array_address_dyn_storage(array, newLen)\n                {\n                    if gt(newLen, 18446744073709551616) { panic_error_0x41() }\n                    let oldLen := array_length_array_address_dyn_storage(array)\n                    sstore(array, newLen)\n                    cleanup_storage_array_end_array_address_dyn(array, oldLen, newLen)\n                }\n                function array_dataslot_array_address_dyn(ptr) -> data\n                {\n                    data := ptr\n                    data := add(ptr, 0x20)\n                }\n                function prepare_store_address(value) -> ret\n                { ret := value }\n                function copy_array_to_storage_from_array_address_dyn_to_array_address_dyn(dst, src)\n                {\n                    let length := array_length_array_address_dyn(src)\n                    if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n                    resize_array_array_address_dyn_storage(dst, length)\n                    let srcPtr := array_dataslot_array_address_dyn(src)\n                    let dstSlot := array_dataslot_array_address_dyn_storage(dst)\n                    let fullSlots := div(length, 1)\n                    let i := 0\n                    for { } lt(i, fullSlots) { i := add(i, 1) }\n                    {\n                        let dstSlotValue := 0\n                        let stackItem := read_from_memoryt_address(srcPtr)\n                        let itemValue := prepare_store_address(stackItem)\n                        dstSlotValue := itemValue\n                        srcPtr := add(srcPtr, 32)\n                        sstore(add(dstSlot, i), dstSlotValue)\n                    }\n                }\n                function update_storage_value_offset_array_address_dyn_to_array_address_dyn(slot, value)\n                {\n                    copy_array_to_storage_from_array_address_dyn_to_array_address_dyn(slot, value)\n                }\n                function update_byte_slice_shift(value, toInsert) -> result\n                {\n                    let mask := not(0)\n                    toInsert := shift_left(toInsert)\n                    value := and(value, not(mask))\n                    result := or(value, and(toInsert, mask))\n                }\n                function update_storage_value_offset_uint256_to_uint256(slot, value)\n                {\n                    let convertedValue := convert_uint256_to_uint256(value)\n                    sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n                }\n                /// @src 1:2866:3208  \"constructor(address[] memory _owners, uint _required)...\"\n                function fun_inner(var_owners_mpos, var__required)\n                {\n                    /// @src 1:2998:2999  \"0\"\n                    let expr := 0x00\n                    /// @src 1:2991:2999  \"uint i=0\"\n                    let var_i := convert_t_rational_by_to_t_uint256(expr)\n                    /// @src 1:2986:3146  \"for (uint i=0; i<_owners.length; i++) {...\"\n                    for { }\n                    /** @src 1:2991:2999  \"uint i=0\" */ 1\n                    {\n                        /// @src 1:3019:3022  \"i++\"\n                        let _1 := var_i\n                        let _2 := increment_wrapping_uint256(_1)\n                        var_i := _2\n                    }\n                    {\n                        /// @src 1:3001:3002  \"i\"\n                        let _3 := var_i\n                        let expr_1 := _3\n                        /// @src 1:3003:3010  \"_owners\"\n                        let _mpos := var_owners_mpos\n                        let expr_513_mpos := _mpos\n                        /// @src 1:3003:3017  \"_owners.length\"\n                        let expr_2 := array_length_array_address_dyn(expr_513_mpos)\n                        /// @src 1:3001:3017  \"i<_owners.length\"\n                        let expr_3 := lt(cleanup_uint256(expr_1), cleanup_uint256(expr_2))\n                        if iszero(expr_3) { break }\n                        /// @src 1:3047:3054  \"isOwner\"\n                        let _slot := 0x02\n                        let expr_slot := _slot\n                        /// @src 1:3055:3062  \"_owners\"\n                        let _19_mpos := var_owners_mpos\n                        let expr_521_mpos := _19_mpos\n                        /// @src 1:3063:3064  \"i\"\n                        let _4 := var_i\n                        let expr_4 := _4\n                        /// @src 1:3055:3065  \"_owners[i]\"\n                        let _5 := read_from_memoryt_address(memory_array_index_access_address_dyn(expr_521_mpos, expr_4))\n                        let expr_5 := _5\n                        /// @src 1:3047:3066  \"isOwner[_owners[i]]\"\n                        let _6 := mapping_index_access_mapping_address_bool_of_address(expr_slot, expr_5)\n                        let _7 := read_from_storage_split_offset_bool(_6)\n                        let expr_6 := _7\n                        /// @src 1:3046:3066  \"!isOwner[_owners[i]]\"\n                        let expr_7 := cleanup_bool(iszero(expr_6))\n                        /// @src 1:3046:3094  \"!isOwner[_owners[i]] && _owners[i] != address(0)\"\n                        let expr_8 := expr_7\n                        if expr_8\n                        {\n                            /// @src 1:3070:3077  \"_owners\"\n                            let _24_mpos := var_owners_mpos\n                            let expr_mpos := _24_mpos\n                            /// @src 1:3078:3079  \"i\"\n                            let _8 := var_i\n                            let expr_9 := _8\n                            /// @src 1:3070:3080  \"_owners[i]\"\n                            let _9 := read_from_memoryt_address(memory_array_index_access_address_dyn(expr_mpos, expr_9))\n                            let expr_10 := _9\n                            /// @src 1:3092:3093  \"0\"\n                            let expr_11 := 0x00\n                            /// @src 1:3084:3094  \"address(0)\"\n                            let expr_12 := convert_rational_by_to_address(expr_11)\n                            /// @src 1:3070:3094  \"_owners[i] != address(0)\"\n                            let expr_13 := iszero(eq(cleanup_address(expr_10), cleanup_address(expr_12)))\n                            /// @src 1:3046:3094  \"!isOwner[_owners[i]] && _owners[i] != address(0)\"\n                            expr_8 := expr_13\n                        }\n                        /// @src 1:3038:3095  \"require(!isOwner[_owners[i]] && _owners[i] != address(0))\"\n                        require_helper(expr_8)\n                        /// @src 1:3131:3135  \"true\"\n                        let expr_14 := 0x01\n                        /// @src 1:3109:3116  \"isOwner\"\n                        let _27_slot := 0x02\n                        let expr_537_slot := _27_slot\n                        /// @src 1:3117:3124  \"_owners\"\n                        let _28_mpos := var_owners_mpos\n                        let expr_538_mpos := _28_mpos\n                        /// @src 1:3125:3126  \"i\"\n                        let _10 := var_i\n                        let expr_15 := _10\n                        /// @src 1:3117:3127  \"_owners[i]\"\n                        let _11 := read_from_memoryt_address(memory_array_index_access_address_dyn(expr_538_mpos, expr_15))\n                        let expr_16 := _11\n                        /// @src 1:3109:3128  \"isOwner[_owners[i]]\"\n                        let _12 := mapping_index_access_mapping_address_bool_of_address(expr_537_slot, expr_16)\n                        /// @src 1:3109:3135  \"isOwner[_owners[i]] = true\"\n                        update_storage_value_offset_bool_to_bool(_12, expr_14)\n                    }\n                    /// @src 1:3164:3171  \"_owners\"\n                    let _32_mpos := var_owners_mpos\n                    let expr_548_mpos := _32_mpos\n                    /// @src 1:3155:3171  \"owners = _owners\"\n                    update_storage_value_offset_array_address_dyn_to_array_address_dyn(0x03, expr_548_mpos)\n                    /// @src 1:3192:3201  \"_required\"\n                    let _13 := var__required\n                    let expr_17 := _13\n                    /// @src 1:3181:3201  \"required = _required\"\n                    update_storage_value_offset_uint256_to_uint256(0x04, expr_17)\n                }\n                /// @ast-id 556 @src 1:2866:3208  \"constructor(address[] memory _owners, uint _required)...\"\n                function constructor_MultiSigWallet(var__owners_mpos, var_required)\n                {\n                    modifier_validRequirement(var__owners_mpos, var_required)\n                }\n            }\n            /// @use-src 1:\"ReviveMultisig.sol\"\n            object \"MultiSigWallet_1291_deployed\" {\n                code {\n                    {\n                        /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                        mstore(64, 128)\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let selector := shift_right_unsigned(calldataload(0))\n                            switch selector\n                            case 0x025e7c27 { external_fun_owners() }\n                            case 0x173825d9 { external_fun_removeOwner() }\n                            case 0x20ea8d86 {\n                                external_fun_revokeConfirmation()\n                            }\n                            case 0x2f54bf6e { external_fun_isOwner() }\n                            case 0x3411c81c { external_fun_confirmations() }\n                            case 0x54741525 {\n                                external_fun_getTransactionCount()\n                            }\n                            case 0x7065cb48 { external_fun_addOwner() }\n                            case 0x784547a7 { external_fun_isConfirmed() }\n                            case 0x8b51d13f {\n                                external_fun_getConfirmationCount()\n                            }\n                            case 0x9ace38c2 { external_fun_transactions() }\n                            case 0xa0e67e2b { external_fun_getOwners() }\n                            case 0xa8abe69a {\n                                external_fun_getTransactionIds()\n                            }\n                            case 0xb5dc40c3 {\n                                external_fun_getConfirmations()\n                            }\n                            case 0xb77bf600 {\n                                external_fun_transactionCount()\n                            }\n                            case 0xba51a6df {\n                                external_fun_changeRequirement()\n                            }\n                            case 0xc01a8c84 {\n                                external_fun_confirmTransaction()\n                            }\n                            case 0xc6427474 {\n                                external_fun_submitTransaction()\n                            }\n                            case 0xd74f8edd {\n                                external_fun_MAX_OWNER_COUNT()\n                            }\n                            case 0xdc8452cd { external_fun_required() }\n                            case 0xe20056e6 { external_fun_replaceOwner() }\n                            case 0xee22610b {\n                                external_fun_executeTransaction()\n                            }\n                            default { }\n                        }\n                        if iszero(calldatasize())\n                        {\n                            fun()\n                            stop()\n                        }\n                        revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n                    }\n                    function shift_right_unsigned(value) -> newValue\n                    { newValue := shr(224, value) }\n                    function allocate_unbounded() -> memPtr\n                    { memPtr := mload(64) }\n                    function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                    { revert(0, 0) }\n                    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                    { revert(0, 0) }\n                    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                    { revert(0, 0) }\n                    function cleanup_uint256(value) -> cleaned\n                    { cleaned := value }\n                    function validator_revert_uint256(value)\n                    {\n                        if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_uint256(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_uint256(value)\n                    }\n                    function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n                    {\n                        if slt(sub(dataEnd, headStart), 32)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                    }\n                    function panic_error_0x32()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x32)\n                        revert(0, 0x24)\n                    }\n                    function array_length_array_address_dyn_storage(value) -> length\n                    { length := sload(value) }\n                    function array_dataslot_array_address_dyn_storage(ptr) -> data\n                    {\n                        data := ptr\n                        mstore(0, ptr)\n                        data := keccak256(0, 0x20)\n                    }\n                    function storage_array_index_access_address_dyn(array, index) -> slot, offset\n                    {\n                        let arrayLength := array_length_array_address_dyn_storage(array)\n                        if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                        let dataArea := array_dataslot_array_address_dyn_storage(array)\n                        slot := add(dataArea, mul(index, 1))\n                        offset := 0\n                    }\n                    function shift_right_unsigned_dynamic(bits, value) -> newValue\n                    { newValue := shr(bits, value) }\n                    function cleanup_from_storage_address(value) -> cleaned\n                    {\n                        cleaned := and(value, sub(shl(160, 1), 1))\n                    }\n                    function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n                    {\n                        value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n                    }\n                    function read_from_storage_split_dynamic_address(slot, offset) -> value\n                    {\n                        value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n                    }\n                    /// @ast-id 319 @src 1:1062:1085  \"address[] public owners\"\n                    function getter_fun_owners(key) -> ret\n                    {\n                        let slot := 3\n                        let offset := 0\n                        if iszero(lt(key, array_length_array_address_dyn_storage(slot))) { revert(0, 0) }\n                        slot, offset := storage_array_index_access_address_dyn(slot, key)\n                        ret := read_from_storage_split_dynamic_address(slot, offset)\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function cleanup_uint160(value) -> cleaned\n                    {\n                        cleaned := and(value, sub(shl(160, 1), 1))\n                    }\n                    function cleanup_address(value) -> cleaned\n                    {\n                        cleaned := cleanup_uint160(value)\n                    }\n                    function abi_encode_address(value, pos)\n                    {\n                        mstore(pos, cleanup_address(value))\n                    }\n                    function abi_encode_tuple_address(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_address(value0, add(headStart, 0))\n                    }\n                    function external_fun_owners()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        let ret := getter_fun_owners(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple_address(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function validator_revert_address(value)\n                    {\n                        if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_address(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_address(value)\n                    }\n                    function abi_decode_tuple_address(headStart, dataEnd) -> value0\n                    {\n                        if slt(sub(dataEnd, headStart), 32)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                    }\n                    function abi_encode_tuple(headStart) -> tail\n                    { tail := add(headStart, 0) }\n                    function external_fun_removeOwner()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_address(4, calldatasize())\n                        fun_removeOwner(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_revokeConfirmation()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        fun_revokeConfirmation(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function identity(value) -> ret\n                    { ret := value }\n                    function convert_uint160_to_uint160(value) -> converted\n                    {\n                        converted := cleanup_uint160(identity(cleanup_uint160(value)))\n                    }\n                    function convert_uint160_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_uint160(value)\n                    }\n                    function convert_address_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_address(value)\n                    }\n                    function mapping_index_access_mapping_address_bool_of_address(slot, key) -> dataSlot\n                    {\n                        mstore(0, convert_address_to_address(key))\n                        mstore(0x20, slot)\n                        dataSlot := keccak256(0, 0x40)\n                    }\n                    function cleanup_from_storage_bool(value) -> cleaned\n                    { cleaned := and(value, 0xff) }\n                    function extract_from_storage_value_dynamict_bool(slot_value, offset) -> value\n                    {\n                        value := cleanup_from_storage_bool(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n                    }\n                    function read_from_storage_split_dynamic_bool(slot, offset) -> value\n                    {\n                        value := extract_from_storage_value_dynamict_bool(sload(slot), offset)\n                    }\n                    /// @ast-id 316 @src 1:1016:1056  \"mapping (address => bool) public isOwner\"\n                    function getter_fun_isOwner(key) -> ret\n                    {\n                        let slot := 2\n                        let offset := 0\n                        slot := mapping_index_access_mapping_address_bool_of_address(slot, key)\n                        ret := read_from_storage_split_dynamic_bool(slot, offset)\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function cleanup_bool(value) -> cleaned\n                    {\n                        cleaned := iszero(iszero(value))\n                    }\n                    function abi_encode_bool_to_bool(value, pos)\n                    {\n                        mstore(pos, cleanup_bool(value))\n                    }\n                    function abi_encode_bool(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_bool_to_bool(value0, add(headStart, 0))\n                    }\n                    function external_fun_isOwner()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_address(4, calldatasize())\n                        let ret := getter_fun_isOwner(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_bool(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function abi_decode_uint256t_address(headStart, dataEnd) -> value0, value1\n                    {\n                        if slt(sub(dataEnd, headStart), 64)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                        let offset_1 := 32\n                        value1 := abi_decode_address(add(headStart, offset_1), dataEnd)\n                    }\n                    function convert_uint256_to_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_uint256(value)))\n                    }\n                    function mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(slot, key) -> dataSlot\n                    {\n                        mstore(0, convert_uint256_to_uint256(key))\n                        mstore(0x20, slot)\n                        dataSlot := keccak256(0, 0x40)\n                    }\n                    /// @ast-id 312 @src 1:946:1010  \"mapping (uint => mapping (address => bool)) public confirmations\"\n                    function getter_fun_confirmations(key, key_1) -> ret\n                    {\n                        let slot := 1\n                        let offset := 0\n                        slot := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(slot, key)\n                        slot := mapping_index_access_mapping_address_bool_of_address(slot, key_1)\n                        ret := read_from_storage_split_dynamic_bool(slot, offset)\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function external_fun_confirmations()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param, param_1 := abi_decode_uint256t_address(4, calldatasize())\n                        let ret := getter_fun_confirmations(param, param_1)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_bool(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function validator_revert_bool(value)\n                    {\n                        if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_bool(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_bool(value)\n                    }\n                    function abi_decode_boolt_bool(headStart, dataEnd) -> value0, value1\n                    {\n                        if slt(sub(dataEnd, headStart), 64)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_bool(add(headStart, offset), dataEnd)\n                        let offset_1 := 32\n                        value1 := abi_decode_bool(add(headStart, offset_1), dataEnd)\n                    }\n                    function abi_encode_uint256_to_uint256_fromStack(value, pos)\n                    {\n                        mstore(pos, cleanup_uint256(value))\n                    }\n                    function abi_encode_uint256(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_uint256_to_uint256_fromStack(value0, add(headStart, 0))\n                    }\n                    function external_fun_getTransactionCount()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param, param_1 := abi_decode_boolt_bool(4, calldatasize())\n                        let ret := fun_getTransactionCount(param, param_1)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_addOwner()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_address(4, calldatasize())\n                        fun_addOwner(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_isConfirmed()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        let ret := fun_isConfirmed(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_bool(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_getConfirmationCount()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        let ret := fun_getConfirmationCount(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(slot, key) -> dataSlot\n                    {\n                        mstore(0, convert_uint256_to_uint256(key))\n                        mstore(0x20, slot)\n                        dataSlot := keccak256(0, 0x40)\n                    }\n                    function shift_right_0_unsigned(value) -> newValue\n                    { newValue := shr(0, value) }\n                    function extract_from_storage_value_offset_address(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_address(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_address(sload(slot))\n                    }\n                    function cleanup_from_storage_uint256(value) -> cleaned\n                    { cleaned := value }\n                    function extract_from_storage_value_offset_uint256(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_uint256(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_uint256(sload(slot))\n                    }\n                    function panic_error_0x22()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x22)\n                        revert(0, 0x24)\n                    }\n                    function extract_byte_array_length(data) -> length\n                    {\n                        length := div(data, 2)\n                        let outOfPlaceEncoding := and(data, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        if eq(outOfPlaceEncoding, lt(length, 32)) { panic_error_0x22() }\n                    }\n                    function array_storeLengthForEncoding_bytes_memory_ptr(pos, length) -> updated_pos\n                    {\n                        mstore(pos, length)\n                        updated_pos := add(pos, 0x20)\n                    }\n                    function array_dataslot_bytes_storage(ptr) -> data\n                    {\n                        data := ptr\n                        mstore(0, ptr)\n                        data := keccak256(0, 0x20)\n                    }\n                    function abi_encode_bytes_storage(value, pos) -> ret\n                    {\n                        let slotValue := sload(value)\n                        let length := extract_byte_array_length(slotValue)\n                        pos := array_storeLengthForEncoding_bytes_memory_ptr(pos, length)\n                        switch and(slotValue, 1)\n                        case 0 {\n                            mstore(pos, and(slotValue, not(0xff)))\n                            ret := add(pos, mul(0x20, iszero(iszero(length))))\n                        }\n                        case 1 {\n                            let dataPos := array_dataslot_bytes_storage(value)\n                            let i := 0\n                            for { } lt(i, length) { i := add(i, 0x20) }\n                            {\n                                mstore(add(pos, i), sload(dataPos))\n                                dataPos := add(dataPos, 1)\n                            }\n                            ret := add(pos, i)\n                        }\n                    }\n                    function abi_encodeUpdatedPos_bytes_storage(value0, pos) -> updatedPos\n                    {\n                        updatedPos := abi_encode_bytes_storage(value0, pos)\n                    }\n                    function round_up_to_mul_of(value) -> result\n                    {\n                        result := and(add(value, 31), not(31))\n                    }\n                    function panic_error_0x41()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(0, 0x24)\n                    }\n                    function finalize_allocation(memPtr, size)\n                    {\n                        let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                        mstore(64, newFreePtr)\n                    }\n                    function copy_array_from_storage_to_memory_bytes(slot) -> memPtr\n                    {\n                        memPtr := allocate_unbounded()\n                        let end := abi_encodeUpdatedPos_bytes_storage(slot, memPtr)\n                        finalize_allocation(memPtr, sub(end, memPtr))\n                    }\n                    function extract_from_storage_value_offset_bool(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_bool(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_bool(sload(slot))\n                    }\n                    /// @ast-id 306 @src 1:891:940  \"mapping (uint => Transaction) public transactions\"\n                    function getter_fun_transactions(key) -> ret, ret_1, ret_mpos, ret_2\n                    {\n                        let slot := 0\n                        slot := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(slot, key)\n                        ret := read_from_storage_split_offset_address(add(slot, 0))\n                        ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                        ret_mpos := copy_array_from_storage_to_memory_bytes(add(slot, 2))\n                        ret_2 := read_from_storage_split_offset_bool(add(slot, 3))\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function array_length_bytes(value) -> length\n                    { length := mload(value) }\n                    function array_storeLengthForEncoding_bytes(pos, length) -> updated_pos\n                    {\n                        mstore(pos, length)\n                        updated_pos := add(pos, 0x20)\n                    }\n                    function copy_memory_to_memory_with_cleanup(src, dst, length)\n                    {\n                        mcopy(dst, src, length)\n                        mstore(add(dst, length), 0)\n                    }\n                    function abi_encode_bytes(value, pos) -> end\n                    {\n                        let length := array_length_bytes(value)\n                        pos := array_storeLengthForEncoding_bytes(pos, length)\n                        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                        end := add(pos, round_up_to_mul_of(length))\n                    }\n                    function abi_encode_address_uint256_bytes_bool(headStart, value0, value1, value2, value3) -> tail\n                    {\n                        tail := add(headStart, 128)\n                        abi_encode_address(value0, add(headStart, 0))\n                        abi_encode_uint256_to_uint256_fromStack(value1, add(headStart, 32))\n                        mstore(add(headStart, 64), sub(tail, headStart))\n                        tail := abi_encode_bytes(value2, tail)\n                        abi_encode_bool_to_bool(value3, add(headStart, 96))\n                    }\n                    function external_fun_transactions()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        let ret, ret_1, ret_2, ret_3 := getter_fun_transactions(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_address_uint256_bytes_bool(memPos, ret, ret_1, ret_2, ret_3)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function abi_decode(headStart, dataEnd)\n                    {\n                        if slt(sub(dataEnd, headStart), 0)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                    }\n                    function array_length_array_address_dyn(value) -> length\n                    { length := mload(value) }\n                    function array_storeLengthForEncoding_array_address_dyn_fromStack(pos, length) -> updated_pos\n                    {\n                        mstore(pos, length)\n                        updated_pos := add(pos, 0x20)\n                    }\n                    function array_dataslot_array_address_dyn(ptr) -> data\n                    {\n                        data := ptr\n                        data := add(ptr, 0x20)\n                    }\n                    function abi_encode_address_to_address(value, pos)\n                    {\n                        mstore(pos, cleanup_address(value))\n                    }\n                    function abi_encodeUpdatedPos_address(value0, pos) -> updatedPos\n                    {\n                        abi_encode_address_to_address(value0, pos)\n                        updatedPos := add(pos, 0x20)\n                    }\n                    function array_nextElement_array_address_dyn(ptr) -> next\n                    { next := add(ptr, 0x20) }\n                    function abi_encode_array_address_dyn(value, pos) -> end\n                    {\n                        let length := array_length_array_address_dyn(value)\n                        pos := array_storeLengthForEncoding_array_address_dyn_fromStack(pos, length)\n                        let baseRef := array_dataslot_array_address_dyn(value)\n                        let srcPtr := baseRef\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 1) }\n                        {\n                            let elementValue0 := mload(srcPtr)\n                            pos := abi_encodeUpdatedPos_address(elementValue0, pos)\n                            srcPtr := array_nextElement_array_address_dyn(srcPtr)\n                        }\n                        end := pos\n                    }\n                    function abi_encode_array_address_dyn_memory_ptr(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_array_address_dyn(value0, tail)\n                    }\n                    function external_fun_getOwners()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := fun_getOwners()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_array_address_dyn_memory_ptr(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function abi_decode_uint256t_uint256t_boolt_bool(headStart, dataEnd) -> value0, value1, value2, value3\n                    {\n                        if slt(sub(dataEnd, headStart), 128)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                        let offset_1 := 32\n                        value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                        let offset_2 := 64\n                        value2 := abi_decode_bool(add(headStart, offset_2), dataEnd)\n                        let offset_3 := 96\n                        value3 := abi_decode_bool(add(headStart, offset_3), dataEnd)\n                    }\n                    function array_length_array_uint256_dyn(value) -> length\n                    { length := mload(value) }\n                    function array_storeLengthForEncoding_array_uint256_dyn(pos, length) -> updated_pos\n                    {\n                        mstore(pos, length)\n                        updated_pos := add(pos, 0x20)\n                    }\n                    function array_dataslot_array_uint256_dyn(ptr) -> data\n                    {\n                        data := ptr\n                        data := add(ptr, 0x20)\n                    }\n                    function abi_encode_uint256_to_uint256(value, pos)\n                    {\n                        mstore(pos, cleanup_uint256(value))\n                    }\n                    function abi_encodeUpdatedPos_uint256(value0, pos) -> updatedPos\n                    {\n                        abi_encode_uint256_to_uint256(value0, pos)\n                        updatedPos := add(pos, 0x20)\n                    }\n                    function array_nextElement_array_uint256_dyn(ptr) -> next\n                    { next := add(ptr, 0x20) }\n                    function abi_encode_array_uint256_dyn_memory_ptr(value, pos) -> end\n                    {\n                        let length := array_length_array_uint256_dyn(value)\n                        pos := array_storeLengthForEncoding_array_uint256_dyn(pos, length)\n                        let baseRef := array_dataslot_array_uint256_dyn(value)\n                        let srcPtr := baseRef\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 1) }\n                        {\n                            let elementValue0 := mload(srcPtr)\n                            pos := abi_encodeUpdatedPos_uint256(elementValue0, pos)\n                            srcPtr := array_nextElement_array_uint256_dyn(srcPtr)\n                        }\n                        end := pos\n                    }\n                    function abi_encode_array_uint256_dyn(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_array_uint256_dyn_memory_ptr(value0, tail)\n                    }\n                    function external_fun_getTransactionIds()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param, param_1, param_2, param_3 := abi_decode_uint256t_uint256t_boolt_bool(4, calldatasize())\n                        let ret := fun_getTransactionIds(param, param_1, param_2, param_3)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_array_uint256_dyn(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_getConfirmations()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        let ret := fun_getConfirmations(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_array_address_dyn_memory_ptr(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n                    {\n                        value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n                    }\n                    function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n                    {\n                        value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n                    }\n                    /// @ast-id 323 @src 1:1117:1145  \"uint public transactionCount\"\n                    function getter_fun_transactionCount() -> ret\n                    {\n                        let slot := 5\n                        let offset := 0\n                        ret := read_from_storage_split_dynamic_uint256(slot, offset)\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function external_fun_transactionCount()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_transactionCount()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_changeRequirement()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        fun_changeRequirement(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_confirmTransaction()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        fun_confirmTransaction(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                    { revert(0, 0) }\n                    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                    { revert(0, 0) }\n                    function allocate_memory(size) -> memPtr\n                    {\n                        memPtr := allocate_unbounded()\n                        finalize_allocation(memPtr, size)\n                    }\n                    function array_allocation_size_bytes(length) -> size\n                    {\n                        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                        size := round_up_to_mul_of(length)\n                        size := add(size, 0x20)\n                    }\n                    function copy_calldata_to_memory_with_cleanup(src, dst, length)\n                    {\n                        calldatacopy(dst, src, length)\n                        mstore(add(dst, length), 0)\n                    }\n                    function abi_decode_available_length_bytes(src, length, end) -> array\n                    {\n                        array := allocate_memory(array_allocation_size_bytes(length))\n                        mstore(array, length)\n                        let dst := add(array, 0x20)\n                        if gt(add(src, length), end)\n                        {\n                            revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                        }\n                        copy_calldata_to_memory_with_cleanup(src, dst, length)\n                    }\n                    function abi_decode_bytes(offset, end) -> array\n                    {\n                        if iszero(slt(add(offset, 0x1f), end))\n                        {\n                            revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                        }\n                        let length := calldataload(offset)\n                        array := abi_decode_available_length_bytes(add(offset, 0x20), length, end)\n                    }\n                    function abi_decode_addresst_uint256t_bytes(headStart, dataEnd) -> value0, value1, value2\n                    {\n                        if slt(sub(dataEnd, headStart), 96)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                        let offset_1 := 32\n                        value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                        let offset_2 := calldataload(add(headStart, 64))\n                        if gt(offset_2, 0xffffffffffffffff)\n                        {\n                            revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                        }\n                        value2 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n                    }\n                    function external_fun_submitTransaction()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param, param_1, param_2 := abi_decode_addresst_uint256t_bytes(4, calldatasize())\n                        let ret := fun_submitTransaction(param, param_1, param_2)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function cleanup_rational_by_1(value) -> cleaned\n                    { cleaned := value }\n                    function convert_rational_by_to_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_rational_by_1(value)))\n                    }\n                    /// @src 1:812:853  \"uint constant public MAX_OWNER_COUNT = 50\"\n                    function constant_MAX_OWNER_COUNT() -> ret\n                    {\n                        /// @src 1:851:853  \"50\"\n                        let expr := 0x32\n                        let _1 := convert_rational_by_to_uint256(expr)\n                        ret := _1\n                    }\n                    /// @ast-id 301 @src 1:812:853  \"uint constant public MAX_OWNER_COUNT = 50\"\n                    function getter_fun_MAX_OWNER_COUNT() -> ret\n                    {\n                        ret := constant_MAX_OWNER_COUNT()\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function external_fun_MAX_OWNER_COUNT()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_MAX_OWNER_COUNT()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    /// @ast-id 321 @src 1:1091:1111  \"uint public required\"\n                    function getter_fun_required() -> ret\n                    {\n                        let slot := 4\n                        let offset := 0\n                        ret := read_from_storage_split_dynamic_uint256(slot, offset)\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function external_fun_required()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_required()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function abi_decode_addresst_address(headStart, dataEnd) -> value0, value1\n                    {\n                        if slt(sub(dataEnd, headStart), 64)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                        let offset_1 := 32\n                        value1 := abi_decode_address(add(headStart, offset_1), dataEnd)\n                    }\n                    function external_fun_replaceOwner()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param, param_1 := abi_decode_addresst_address(4, calldatasize())\n                        fun_replaceOwner(param, param_1)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_executeTransaction()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        fun_executeTransaction(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n                    { revert(0, 0) }\n                    function convert_contract_MultiSigWallet_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_address(value)\n                    }\n                    function require_helper(condition)\n                    {\n                        if iszero(condition) { revert(0, 0) }\n                    }\n                    /// @ast-id 346 @src 1:1309:1395  \"modifier onlyWallet() {...\"\n                    function modifier_onlyWallet_600(var_owner)\n                    {\n                        /// @src 1:1349:1359  \"msg.sender\"\n                        let expr := caller()\n                        /// @src 1:1371:1375  \"this\"\n                        let expr_address := address()\n                        /// @src 1:1363:1376  \"address(this)\"\n                        let expr_1 := convert_contract_MultiSigWallet_to_address(expr_address)\n                        /// @src 1:1349:1376  \"msg.sender == address(this)\"\n                        let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                        /// @src 1:1341:1377  \"require(msg.sender == address(this))\"\n                        require_helper(expr_2)\n                        /// @src 1:1387:1388  \"_\"\n                        modifier_ownerExists_603(var_owner)\n                    }\n                    /// @ast-id 371 @src 1:1501:1588  \"modifier ownerExists(address owner) {...\"\n                    function modifier_ownerExists_603(var_owner)\n                    {\n                        /// @src 1:3830:3835  \"owner\"\n                        let _1 := var_owner\n                        let expr := _1\n                        let _2 := expr\n                        let var_owner_1 := _2\n                        /// @src 1:1555:1562  \"isOwner\"\n                        let _4_slot := 0x02\n                        let expr_364_slot := _4_slot\n                        /// @src 1:1563:1568  \"owner\"\n                        let _3 := var_owner_1\n                        let expr_1 := _3\n                        /// @src 1:1555:1569  \"isOwner[owner]\"\n                        let _4 := mapping_index_access_mapping_address_bool_of_address(expr_364_slot, expr_1)\n                        let _5 := read_from_storage_split_offset_bool(_4)\n                        let expr_2 := _5\n                        /// @src 1:1547:1570  \"require(isOwner[owner])\"\n                        require_helper(expr_2)\n                        /// @src 1:1580:1581  \"_\"\n                        fun_removeOwner_inner(var_owner)\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function shift_left(value) -> newValue\n                    { newValue := shl(0, value) }\n                    function update_byte_slice_shift_0(value, toInsert) -> result\n                    {\n                        let mask := 255\n                        toInsert := shift_left(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function convert_bool_to_bool(value) -> converted\n                    {\n                        converted := cleanup_bool(value)\n                    }\n                    function prepare_store_bool(value) -> ret\n                    { ret := value }\n                    function update_storage_value_offset_bool_to_bool(slot, value)\n                    {\n                        let convertedValue := convert_bool_to_bool(value)\n                        sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n                    }\n                    function cleanup_t_rational_by(value) -> cleaned\n                    { cleaned := value }\n                    function convert_rational_0_by_1_to_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n                    }\n                    function increment_wrapping_uint256(value) -> ret\n                    {\n                        ret := cleanup_uint256(add(value, 1))\n                    }\n                    function cleanup_rational_by(value) -> cleaned\n                    { cleaned := value }\n                    function convert_t_rational_by_to_t_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n                    }\n                    function panic_error_0x11()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x11)\n                        revert(0, 0x24)\n                    }\n                    function checked_sub_uint256(x, y) -> diff\n                    {\n                        x := cleanup_uint256(x)\n                        y := cleanup_uint256(y)\n                        diff := sub(x, y)\n                        if gt(diff, x) { panic_error_0x11() }\n                    }\n                    function shift_left_dynamic(bits, value) -> newValue\n                    { newValue := shl(bits, value) }\n                    function update_byte_slice_dynamic20(value, shiftBytes, toInsert) -> result\n                    {\n                        let shiftBits := mul(shiftBytes, 8)\n                        let mask := shift_left_dynamic(shiftBits, sub(shl(160, 1), 1))\n                        toInsert := shift_left_dynamic(shiftBits, toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function prepare_store_address(value) -> ret\n                    { ret := value }\n                    function update_storage_value_address_to_address(slot, offset, value)\n                    {\n                        let convertedValue := convert_address_to_address(value)\n                        sstore(slot, update_byte_slice_dynamic20(sload(slot), offset, prepare_store_address(convertedValue)))\n                    }\n                    function convert_array_array_address_dyn_storage_to_array_address_dyn_ptr(value) -> converted\n                    { converted := value }\n                    function panic_error_0x31()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x31)\n                        revert(0, 0x24)\n                    }\n                    function array_length_array_address_dyn_storage_ptr(value) -> length\n                    { length := sload(value) }\n                    function array_dataslot_array_address_dyn_storage_ptr(ptr) -> data\n                    {\n                        data := ptr\n                        mstore(0, ptr)\n                        data := keccak256(0, 0x20)\n                    }\n                    function storage_array_index_access_address_dyn_ptr(array, index) -> slot, offset\n                    {\n                        let arrayLength := array_length_array_address_dyn_storage_ptr(array)\n                        if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                        let dataArea := array_dataslot_array_address_dyn_storage_ptr(array)\n                        slot := add(dataArea, mul(index, 1))\n                        offset := 0\n                    }\n                    function zero_value_for_split_address() -> ret\n                    { ret := 0 }\n                    function storage_set_to_zero_address(slot, offset)\n                    {\n                        let zero := zero_value_for_split_address()\n                        update_storage_value_address_to_address(slot, offset, zero)\n                    }\n                    function array_pop_array_address_dyn_storage_ptr(array)\n                    {\n                        let oldLen := array_length_array_address_dyn_storage_ptr(array)\n                        if iszero(oldLen) { panic_error_0x31() }\n                        let newLen := sub(oldLen, 1)\n                        let slot, offset := storage_array_index_access_address_dyn_ptr(array, newLen)\n                        storage_set_to_zero_address(slot, offset)\n                        sstore(array, newLen)\n                    }\n                    /// @src 1:3740:4199  \"function removeOwner(address owner)...\"\n                    function fun_removeOwner_inner(var_owner)\n                    {\n                        /// @src 1:3868:3873  \"false\"\n                        let expr := 0x00\n                        /// @src 1:3851:3858  \"isOwner\"\n                        let _8_slot := 0x02\n                        let expr_605_slot := _8_slot\n                        /// @src 1:3859:3864  \"owner\"\n                        let _1 := var_owner\n                        let expr_1 := _1\n                        /// @src 1:3851:3865  \"isOwner[owner]\"\n                        let _2 := mapping_index_access_mapping_address_bool_of_address(expr_605_slot, expr_1)\n                        /// @src 1:3851:3873  \"isOwner[owner] = false\"\n                        update_storage_value_offset_bool_to_bool(_2, expr)\n                        /// @src 1:3895:3896  \"0\"\n                        let expr_2 := 0x00\n                        /// @src 1:3888:3896  \"uint i=0\"\n                        let var_i := convert_rational_0_by_1_to_uint256(expr_2)\n                        /// @src 1:3883:4053  \"for (uint i=0; i<owners.length - 1; i++)...\"\n                        for { }\n                        /** @src 1:3888:3896  \"uint i=0\" */ 1\n                        {\n                            /// @src 1:3919:3922  \"i++\"\n                            let _3 := var_i\n                            let _4 := increment_wrapping_uint256(_3)\n                            var_i := _4\n                        }\n                        {\n                            /// @src 1:3898:3899  \"i\"\n                            let _5 := var_i\n                            let expr_3 := _5\n                            /// @src 1:3900:3906  \"owners\"\n                            let _14_slot := 0x03\n                            let expr_616_slot := _14_slot\n                            /// @src 1:3900:3913  \"owners.length\"\n                            let expr_4 := array_length_array_address_dyn_storage(expr_616_slot)\n                            /// @src 1:3916:3917  \"1\"\n                            let expr_5 := 0x01\n                            /// @src 1:3900:3917  \"owners.length - 1\"\n                            let expr_6 := checked_sub_uint256(expr_4, convert_t_rational_by_to_t_uint256(expr_5))\n                            /// @src 1:3898:3917  \"i<owners.length - 1\"\n                            let expr_7 := lt(cleanup_uint256(expr_3), cleanup_uint256(expr_6))\n                            if iszero(expr_7) { break }\n                            /// @src 1:3940:3946  \"owners\"\n                            let _15_slot := 0x03\n                            let expr_624_slot := _15_slot\n                            /// @src 1:3947:3948  \"i\"\n                            let _6 := var_i\n                            let expr_8 := _6\n                            /// @src 1:3940:3949  \"owners[i]\"\n                            let _7, _8 := storage_array_index_access_address_dyn(expr_624_slot, expr_8)\n                            let _9 := read_from_storage_split_dynamic_address(_7, _8)\n                            let expr_9 := _9\n                            /// @src 1:3953:3958  \"owner\"\n                            let _10 := var_owner\n                            let expr_10 := _10\n                            /// @src 1:3940:3958  \"owners[i] == owner\"\n                            let expr_11 := eq(cleanup_address(expr_9), cleanup_address(expr_10))\n                            /// @src 1:3936:4053  \"if (owners[i] == owner) {...\"\n                            if expr_11\n                            {\n                                /// @src 1:3990:3996  \"owners\"\n                                let _21_slot := 0x03\n                                let expr_632_slot := _21_slot\n                                /// @src 1:3997:4003  \"owners\"\n                                let _22_slot := 0x03\n                                let expr_633_slot := _22_slot\n                                /// @src 1:3997:4010  \"owners.length\"\n                                let expr_12 := array_length_array_address_dyn_storage(expr_633_slot)\n                                /// @src 1:4013:4014  \"1\"\n                                let expr_13 := 0x01\n                                /// @src 1:3997:4014  \"owners.length - 1\"\n                                let expr_14 := checked_sub_uint256(expr_12, convert_t_rational_by_to_t_uint256(expr_13))\n                                /// @src 1:3990:4015  \"owners[owners.length - 1]\"\n                                let _11, _12 := storage_array_index_access_address_dyn(expr_632_slot, expr_14)\n                                let _13 := read_from_storage_split_dynamic_address(_11, _12)\n                                let expr_15 := _13\n                                /// @src 1:3978:3984  \"owners\"\n                                let _26_slot := 0x03\n                                let expr_629_slot := _26_slot\n                                /// @src 1:3985:3986  \"i\"\n                                let _14 := var_i\n                                let expr_16 := _14\n                                /// @src 1:3978:3987  \"owners[i]\"\n                                let _15, _16 := storage_array_index_access_address_dyn(expr_629_slot, expr_16)\n                                /// @src 1:3978:4015  \"owners[i] = owners[owners.length - 1]\"\n                                update_storage_value_address_to_address(_15, _16, expr_15)\n                                /// @src 1:4033:4038  \"break\"\n                                break\n                            }\n                        }\n                        /// @src 1:4062:4068  \"owners\"\n                        let _30_slot := 0x03\n                        let expr_644_slot := _30_slot\n                        /// @src 1:4062:4072  \"owners.pop\"\n                        let expr_self_slot := convert_array_array_address_dyn_storage_to_array_address_dyn_ptr(expr_644_slot)\n                        array_pop_array_address_dyn_storage_ptr(expr_self_slot)\n                        /// @src 1:4088:4096  \"required\"\n                        let _17 := read_from_storage_split_offset_uint256(0x04)\n                        let expr_17 := _17\n                        /// @src 1:4099:4105  \"owners\"\n                        let _32_slot := 0x03\n                        let expr_650_slot := _32_slot\n                        /// @src 1:4099:4112  \"owners.length\"\n                        let expr_18 := array_length_array_address_dyn_storage(expr_650_slot)\n                        /// @src 1:4088:4112  \"required > owners.length\"\n                        let expr_19 := gt(cleanup_uint256(expr_17), cleanup_uint256(expr_18))\n                        /// @src 1:4084:4158  \"if (required > owners.length)...\"\n                        if expr_19\n                        {\n                            /// @src 1:4144:4150  \"owners\"\n                            let _33_slot := 0x03\n                            let expr_654_slot := _33_slot\n                            /// @src 1:4144:4157  \"owners.length\"\n                            let expr_20 := array_length_array_address_dyn_storage(expr_654_slot)\n                            fun_changeRequirement(expr_20)\n                        }\n                        /// @src 1:4186:4191  \"owner\"\n                        let _18 := var_owner\n                        let expr_21 := _18\n                        /// @src 1:4173:4192  \"OwnerRemoval(owner)\"\n                        let _19 := 0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90\n                        let _20 := convert_address_to_address(expr_21)\n                        let _21 := allocate_unbounded()\n                        let _22 := abi_encode_tuple(_21)\n                        log2(_21, sub(_22, _21), _19, _20)\n                    }\n                    /// @ast-id 664 @src 1:3740:4199  \"function removeOwner(address owner)...\"\n                    function fun_removeOwner(var_owner)\n                    {\n                        modifier_onlyWallet_600(var_owner)\n                    }\n                    /// @ast-id 371 @src 1:1501:1588  \"modifier ownerExists(address owner) {...\"\n                    function modifier_ownerExists(var_transactionId)\n                    {\n                        /// @src 1:6429:6439  \"msg.sender\"\n                        let expr := caller()\n                        let _1 := expr\n                        let var_owner := _1\n                        /// @src 1:1555:1562  \"isOwner\"\n                        let _40_slot := 0x02\n                        let expr_slot := _40_slot\n                        /// @src 1:1563:1568  \"owner\"\n                        let _2 := var_owner\n                        let expr_1 := _2\n                        /// @src 1:1555:1569  \"isOwner[owner]\"\n                        let _3 := mapping_index_access_mapping_address_bool_of_address(expr_slot, expr_1)\n                        let _4 := read_from_storage_split_offset_bool(_3)\n                        let expr_2 := _4\n                        /// @src 1:1547:1570  \"require(isOwner[owner])\"\n                        require_helper(expr_2)\n                        /// @src 1:1580:1581  \"_\"\n                        modifier_confirmed(var_transactionId)\n                    }\n                    /// @ast-id 405 @src 1:1737:1863  \"modifier confirmed(uint transactionId, address owner) {...\"\n                    function modifier_confirmed(var_transactionId)\n                    {\n                        /// @src 1:6459:6472  \"transactionId\"\n                        let _1 := var_transactionId\n                        let expr := _1\n                        let _2 := expr\n                        let var_transactionId_1 := _2\n                        /// @src 1:6474:6484  \"msg.sender\"\n                        let expr_1 := caller()\n                        let _3 := expr_1\n                        let var_owner := _3\n                        /// @src 1:1809:1822  \"confirmations\"\n                        let _47_slot := 0x01\n                        let expr_396_slot := _47_slot\n                        /// @src 1:1823:1836  \"transactionId\"\n                        let _4 := var_transactionId_1\n                        let expr_2 := _4\n                        /// @src 1:1809:1837  \"confirmations[transactionId]\"\n                        let _5 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_396_slot, expr_2)\n                        let _50_slot := _5\n                        let expr_398_slot := _50_slot\n                        /// @src 1:1838:1843  \"owner\"\n                        let _6 := var_owner\n                        let expr_3 := _6\n                        /// @src 1:1809:1844  \"confirmations[transactionId][owner]\"\n                        let _7 := mapping_index_access_mapping_address_bool_of_address(expr_398_slot, expr_3)\n                        let _8 := read_from_storage_split_offset_bool(_7)\n                        let expr_4 := _8\n                        /// @src 1:1801:1845  \"require(confirmations[transactionId][owner])\"\n                        require_helper(expr_4)\n                        /// @src 1:1855:1856  \"_\"\n                        modifier_notExecuted(var_transactionId)\n                    }\n                    /// @ast-id 436 @src 1:2005:2120  \"modifier notExecuted(uint transactionId) {...\"\n                    function modifier_notExecuted(var_transactionId)\n                    {\n                        /// @src 1:6506:6519  \"transactionId\"\n                        let _1 := var_transactionId\n                        let expr := _1\n                        let _2 := expr\n                        let var_transactionId_1 := _2\n                        /// @src 1:2065:2077  \"transactions\"\n                        let _56_slot := 0x00\n                        let expr_427_slot := _56_slot\n                        /// @src 1:2078:2091  \"transactionId\"\n                        let _3 := var_transactionId_1\n                        let expr_1 := _3\n                        /// @src 1:2065:2092  \"transactions[transactionId]\"\n                        let _4 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_427_slot, expr_1)\n                        let _59_slot := _4\n                        let expr_slot := _59_slot\n                        /// @src 1:2065:2101  \"transactions[transactionId].executed\"\n                        let _5 := add(expr_slot, 3)\n                        let _6 := read_from_storage_split_offset_bool(_5)\n                        let expr_2 := _6\n                        /// @src 1:2064:2101  \"!transactions[transactionId].executed\"\n                        let expr_3 := cleanup_bool(iszero(expr_2))\n                        /// @src 1:2056:2102  \"require(!transactions[transactionId].executed)\"\n                        require_helper(expr_3)\n                        /// @src 1:2112:2113  \"_\"\n                        fun_revokeConfirmation_inner(var_transactionId)\n                    }\n                    /// @src 1:6346:6642  \"function revokeConfirmation(uint transactionId)...\"\n                    function fun_revokeConfirmation_inner(var_transactionId)\n                    {\n                        /// @src 1:6578:6583  \"false\"\n                        let expr := 0x00\n                        /// @src 1:6535:6548  \"confirmations\"\n                        let _62_slot := 0x01\n                        let expr_830_slot := _62_slot\n                        /// @src 1:6549:6562  \"transactionId\"\n                        let _1 := var_transactionId\n                        let expr_1 := _1\n                        /// @src 1:6535:6563  \"confirmations[transactionId]\"\n                        let _2 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_830_slot, expr_1)\n                        let _65_slot := _2\n                        let expr_834_slot := _65_slot\n                        /// @src 1:6564:6574  \"msg.sender\"\n                        let expr_2 := caller()\n                        /// @src 1:6535:6575  \"confirmations[transactionId][msg.sender]\"\n                        let _3 := mapping_index_access_mapping_address_bool_of_address(expr_834_slot, expr_2)\n                        /// @src 1:6535:6583  \"confirmations[transactionId][msg.sender] = false\"\n                        update_storage_value_offset_bool_to_bool(_3, expr)\n                        /// @src 1:6609:6619  \"msg.sender\"\n                        let expr_3 := caller()\n                        /// @src 1:6621:6634  \"transactionId\"\n                        let _4 := var_transactionId\n                        let expr_4 := _4\n                        /// @src 1:6598:6635  \"Revocation(msg.sender, transactionId)\"\n                        let _5 := 0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9\n                        let _6 := convert_address_to_address(expr_3)\n                        let _7 := convert_uint256_to_uint256(expr_4)\n                        let _8 := allocate_unbounded()\n                        let _9 := abi_encode_tuple(_8)\n                        log3(_8, sub(_9, _8), _5, _6, _7)\n                    }\n                    /// @ast-id 846 @src 1:6346:6642  \"function revokeConfirmation(uint transactionId)...\"\n                    function fun_revokeConfirmation(var_transactionId)\n                    {\n                        modifier_ownerExists(var_transactionId)\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function zero_value_for_split_uint256() -> ret\n                    { ret := 0 }\n                    function checked_add_uint256(x, y) -> sum\n                    {\n                        x := cleanup_uint256(x)\n                        y := cleanup_uint256(y)\n                        sum := add(x, y)\n                        if gt(x, sum) { panic_error_0x11() }\n                    }\n                    /// @ast-id 1089 @src 1:10675:10990  \"function getTransactionCount(bool pending, bool executed)...\"\n                    function fun_getTransactionCount(var_pending, var_executed) -> var_count\n                    {\n                        /// @src 1:10778:10788  \"uint count\"\n                        let zero_uint256 := zero_value_for_split_uint256()\n                        var_count := zero_uint256\n                        /// @src 1:10816:10817  \"0\"\n                        let expr := 0x00\n                        /// @src 1:10809:10817  \"uint i=0\"\n                        let var_i := convert_rational_0_by_1_to_uint256(expr)\n                        /// @src 1:10804:10983  \"for (uint i=0; i<transactionCount; i++)...\"\n                        for { }\n                        /** @src 1:10809:10817  \"uint i=0\" */ 1\n                        {\n                            /// @src 1:10839:10842  \"i++\"\n                            let _1 := var_i\n                            let _2 := increment_wrapping_uint256(_1)\n                            var_i := _2\n                        }\n                        {\n                            /// @src 1:10819:10820  \"i\"\n                            let _3 := var_i\n                            let expr_1 := _3\n                            /// @src 1:10821:10837  \"transactionCount\"\n                            let _4 := read_from_storage_split_offset_uint256(0x05)\n                            let expr_2 := _4\n                            /// @src 1:10819:10837  \"i<transactionCount\"\n                            let expr_3 := lt(cleanup_uint256(expr_1), cleanup_uint256(expr_2))\n                            if iszero(expr_3) { break }\n                            /// @src 1:10863:10870  \"pending\"\n                            let _5 := var_pending\n                            let expr_4 := _5\n                            /// @src 1:10863:10899  \"pending && !transactions[i].executed\"\n                            let expr_5 := expr_4\n                            if expr_5\n                            {\n                                /// @src 1:10875:10887  \"transactions\"\n                                let _79_slot := 0x00\n                                let expr_1069_slot := _79_slot\n                                /// @src 1:10888:10889  \"i\"\n                                let _6 := var_i\n                                let expr_6 := _6\n                                /// @src 1:10875:10890  \"transactions[i]\"\n                                let _7 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_1069_slot, expr_6)\n                                let _82_slot := _7\n                                let expr_1071_slot := _82_slot\n                                /// @src 1:10875:10899  \"transactions[i].executed\"\n                                let _8 := add(expr_1071_slot, 3)\n                                let _9 := read_from_storage_split_offset_bool(_8)\n                                let expr_7 := _9\n                                /// @src 1:10874:10899  \"!transactions[i].executed\"\n                                let expr_8 := cleanup_bool(iszero(expr_7))\n                                /// @src 1:10863:10899  \"pending && !transactions[i].executed\"\n                                expr_5 := expr_8\n                            }\n                            /// @src 1:10863:10955  \"pending && !transactions[i].executed...\"\n                            let expr_9 := expr_5\n                            if iszero(expr_9)\n                            {\n                                /// @src 1:10919:10927  \"executed\"\n                                let _10 := var_executed\n                                let expr_10 := _10\n                                /// @src 1:10919:10955  \"executed && transactions[i].executed\"\n                                let expr_11 := expr_10\n                                if expr_11\n                                {\n                                    /// @src 1:10931:10943  \"transactions\"\n                                    let _86_slot := 0x00\n                                    let expr_1076_slot := _86_slot\n                                    /// @src 1:10944:10945  \"i\"\n                                    let _11 := var_i\n                                    let expr_12 := _11\n                                    /// @src 1:10931:10946  \"transactions[i]\"\n                                    let _12 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_1076_slot, expr_12)\n                                    let _89_slot := _12\n                                    let expr_1078_slot := _89_slot\n                                    /// @src 1:10931:10955  \"transactions[i].executed\"\n                                    let _13 := add(expr_1078_slot, 3)\n                                    let _14 := read_from_storage_split_offset_bool(_13)\n                                    let expr_13 := _14\n                                    /// @src 1:10919:10955  \"executed && transactions[i].executed\"\n                                    expr_11 := expr_13\n                                }\n                                /// @src 1:10863:10955  \"pending && !transactions[i].executed...\"\n                                expr_9 := expr_11\n                            }\n                            /// @src 1:10856:10983  \"if (   pending && !transactions[i].executed...\"\n                            if expr_9\n                            {\n                                /// @src 1:10982:10983  \"1\"\n                                let expr_14 := 0x01\n                                /// @src 1:10973:10983  \"count += 1\"\n                                let _15 := convert_t_rational_by_to_t_uint256(expr_14)\n                                let _16 := var_count\n                                let expr_15 := checked_add_uint256(_16, _15)\n                                var_count := expr_15\n                            }\n                        }\n                    }\n                    /// @ast-id 346 @src 1:1309:1395  \"modifier onlyWallet() {...\"\n                    function modifier_onlyWallet(var_owner)\n                    {\n                        /// @src 1:1349:1359  \"msg.sender\"\n                        let expr := caller()\n                        /// @src 1:1371:1375  \"this\"\n                        let expr_address := address()\n                        /// @src 1:1363:1376  \"address(this)\"\n                        let expr_1 := convert_contract_MultiSigWallet_to_address(expr_address)\n                        /// @src 1:1349:1376  \"msg.sender == address(this)\"\n                        let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                        /// @src 1:1341:1377  \"require(msg.sender == address(this))\"\n                        require_helper(expr_2)\n                        /// @src 1:1387:1388  \"_\"\n                        modifier_ownerDoesNotExist(var_owner)\n                    }\n                    /// @ast-id 359 @src 1:1401:1495  \"modifier ownerDoesNotExist(address owner) {...\"\n                    function modifier_ownerDoesNotExist(var_owner)\n                    {\n                        /// @src 1:3428:3433  \"owner\"\n                        let _1 := var_owner\n                        let expr := _1\n                        let _2 := expr\n                        let var_owner_1 := _2\n                        /// @src 1:1462:1469  \"isOwner\"\n                        let _96_slot := 0x02\n                        let expr_351_slot := _96_slot\n                        /// @src 1:1470:1475  \"owner\"\n                        let _3 := var_owner_1\n                        let expr_1 := _3\n                        /// @src 1:1462:1476  \"isOwner[owner]\"\n                        let _4 := mapping_index_access_mapping_address_bool_of_address(expr_351_slot, expr_1)\n                        let _5 := read_from_storage_split_offset_bool(_4)\n                        let expr_2 := _5\n                        /// @src 1:1461:1476  \"!isOwner[owner]\"\n                        let expr_3 := cleanup_bool(iszero(expr_2))\n                        /// @src 1:1453:1477  \"require(!isOwner[owner])\"\n                        require_helper(expr_3)\n                        /// @src 1:1487:1488  \"_\"\n                        modifier_notNull(var_owner)\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function convert_rational_by_to_uint160(value) -> converted\n                    {\n                        converted := cleanup_uint160(identity(cleanup_t_rational_by(value)))\n                    }\n                    function convert_rational_by_to_address(value) -> converted\n                    {\n                        converted := convert_rational_by_to_uint160(value)\n                    }\n                    /// @ast-id 451 @src 1:2126:2220  \"modifier notNull(address _address) {...\"\n                    function modifier_notNull(var_owner)\n                    {\n                        /// @src 1:3451:3456  \"owner\"\n                        let _1 := var_owner\n                        let expr := _1\n                        let _2 := expr\n                        let var__address := _2\n                        /// @src 1:2179:2187  \"_address\"\n                        let _3 := var__address\n                        let expr_1 := _3\n                        /// @src 1:2199:2200  \"0\"\n                        let expr_2 := 0x00\n                        /// @src 1:2191:2201  \"address(0)\"\n                        let expr_3 := convert_rational_by_to_address(expr_2)\n                        /// @src 1:2179:2201  \"_address != address(0)\"\n                        let expr_4 := iszero(eq(cleanup_address(expr_1), cleanup_address(expr_3)))\n                        /// @src 1:2171:2202  \"require(_address != address(0))\"\n                        require_helper(expr_4)\n                        /// @src 1:2212:2213  \"_\"\n                        modifier_validRequirement_575(var_owner)\n                    }\n                    /// @ast-id 477 @src 1:2226:2451  \"modifier validRequirement(uint ownerCount, uint _required) {...\"\n                    function modifier_validRequirement_575(var_owner)\n                    {\n                        /// @src 1:3483:3489  \"owners\"\n                        let _103_slot := 0x03\n                        let expr_570_slot := _103_slot\n                        /// @src 1:3483:3496  \"owners.length\"\n                        let expr := array_length_array_address_dyn_storage(expr_570_slot)\n                        /// @src 1:3499:3500  \"1\"\n                        let expr_1 := 0x01\n                        /// @src 1:3483:3500  \"owners.length + 1\"\n                        let expr_2 := checked_add_uint256(expr, convert_t_rational_by_to_t_uint256(expr_1))\n                        let _1 := expr_2\n                        let var_ownerCount := _1\n                        /// @src 1:3502:3510  \"required\"\n                        let _2 := read_from_storage_split_offset_uint256(0x04)\n                        let expr_3 := _2\n                        let _3 := expr_3\n                        let var__required := _3\n                        /// @src 1:2303:2313  \"ownerCount\"\n                        let _4 := var_ownerCount\n                        let expr_4 := _4\n                        /// @src 1:2317:2332  \"MAX_OWNER_COUNT\"\n                        let expr_5 := constant_MAX_OWNER_COUNT()\n                        /// @src 1:2303:2332  \"ownerCount <= MAX_OWNER_COUNT\"\n                        let expr_6 := iszero(gt(cleanup_uint256(expr_4), cleanup_uint256(expr_5)))\n                        /// @src 1:2303:2371  \"ownerCount <= MAX_OWNER_COUNT...\"\n                        let expr_7 := expr_6\n                        if expr_7\n                        {\n                            /// @src 1:2348:2357  \"_required\"\n                            let _5 := var__required\n                            let expr_8 := _5\n                            /// @src 1:2361:2371  \"ownerCount\"\n                            let _6 := var_ownerCount\n                            let expr_9 := _6\n                            /// @src 1:2348:2371  \"_required <= ownerCount\"\n                            let expr_10 := iszero(gt(cleanup_uint256(expr_8), cleanup_uint256(expr_9)))\n                            /// @src 1:2303:2371  \"ownerCount <= MAX_OWNER_COUNT...\"\n                            expr_7 := expr_10\n                        }\n                        /// @src 1:2303:2401  \"ownerCount <= MAX_OWNER_COUNT...\"\n                        let expr_11 := expr_7\n                        if expr_11\n                        {\n                            /// @src 1:2387:2396  \"_required\"\n                            let _7 := var__required\n                            let expr_12 := _7\n                            /// @src 1:2400:2401  \"0\"\n                            let expr_13 := 0x00\n                            /// @src 1:2387:2401  \"_required != 0\"\n                            let expr_14 := iszero(eq(cleanup_uint256(expr_12), convert_rational_0_by_1_to_uint256(expr_13)))\n                            /// @src 1:2303:2401  \"ownerCount <= MAX_OWNER_COUNT...\"\n                            expr_11 := expr_14\n                        }\n                        /// @src 1:2303:2432  \"ownerCount <= MAX_OWNER_COUNT...\"\n                        let expr_15 := expr_11\n                        if expr_15\n                        {\n                            /// @src 1:2417:2427  \"ownerCount\"\n                            let _8 := var_ownerCount\n                            let expr_16 := _8\n                            /// @src 1:2431:2432  \"0\"\n                            let expr_17 := 0x00\n                            /// @src 1:2417:2432  \"ownerCount != 0\"\n                            let expr_18 := iszero(eq(cleanup_uint256(expr_16), convert_rational_0_by_1_to_uint256(expr_17)))\n                            /// @src 1:2303:2432  \"ownerCount <= MAX_OWNER_COUNT...\"\n                            expr_15 := expr_18\n                        }\n                        /// @src 1:2295:2433  \"require(ownerCount <= MAX_OWNER_COUNT...\"\n                        require_helper(expr_15)\n                        /// @src 1:2443:2444  \"_\"\n                        fun_addOwner_inner(var_owner)\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function array_push_from_address_to_array_address_dyn_storage_ptr(array, value0)\n                    {\n                        let oldLen := sload(array)\n                        if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                        sstore(array, add(oldLen, 1))\n                        let slot, offset := storage_array_index_access_address_dyn_ptr(array, oldLen)\n                        update_storage_value_address_to_address(slot, offset, value0)\n                    }\n                    /// @src 1:3335:3617  \"function addOwner(address owner)...\"\n                    function fun_addOwner_inner(var_owner)\n                    {\n                        /// @src 1:3543:3547  \"true\"\n                        let expr := 0x01\n                        /// @src 1:3526:3533  \"isOwner\"\n                        let _112_slot := 0x02\n                        let expr_577_slot := _112_slot\n                        /// @src 1:3534:3539  \"owner\"\n                        let _1 := var_owner\n                        let expr_1 := _1\n                        /// @src 1:3526:3540  \"isOwner[owner]\"\n                        let _2 := mapping_index_access_mapping_address_bool_of_address(expr_577_slot, expr_1)\n                        /// @src 1:3526:3547  \"isOwner[owner] = true\"\n                        update_storage_value_offset_bool_to_bool(_2, expr)\n                        /// @src 1:3557:3563  \"owners\"\n                        let _115_slot := 0x03\n                        let expr_583_slot := _115_slot\n                        /// @src 1:3557:3568  \"owners.push\"\n                        let expr_585_self_slot := convert_array_array_address_dyn_storage_to_array_address_dyn_ptr(expr_583_slot)\n                        /// @src 1:3569:3574  \"owner\"\n                        let _3 := var_owner\n                        let expr_2 := _3\n                        /// @src 1:3557:3575  \"owners.push(owner)\"\n                        array_push_from_address_to_array_address_dyn_storage_ptr(expr_585_self_slot, expr_2)\n                        /// @src 1:3604:3609  \"owner\"\n                        let _4 := var_owner\n                        let expr_3 := _4\n                        /// @src 1:3590:3610  \"OwnerAddition(owner)\"\n                        let _5 := 0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d\n                        let _6 := convert_address_to_address(expr_3)\n                        let _7 := allocate_unbounded()\n                        let _8 := abi_encode_tuple(_7)\n                        log2(_7, sub(_8, _7), _5, _6)\n                    }\n                    /// @ast-id 594 @src 1:3335:3617  \"function addOwner(address owner)...\"\n                    function fun_addOwner(var_owner)\n                    {\n                        modifier_onlyWallet(var_owner)\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function zero_value_for_split_bool() -> ret\n                    { ret := 0 }\n                    /// @ast-id 976 @src 1:8791:9146  \"function isConfirmed(uint transactionId)...\"\n                    function fun_isConfirmed(var_transactionId) -> var\n                    {\n                        /// @src 1:8877:8881  \"bool\"\n                        let zero_bool := zero_value_for_split_bool()\n                        var := zero_bool\n                        /// @src 1:8910:8911  \"0\"\n                        let expr := 0x00\n                        /// @src 1:8897:8911  \"uint count = 0\"\n                        let var_count := convert_rational_0_by_1_to_uint256(expr)\n                        /// @src 1:8933:8934  \"0\"\n                        let expr_1 := 0x00\n                        /// @src 1:8926:8934  \"uint i=0\"\n                        let var_i := convert_rational_0_by_1_to_uint256(expr_1)\n                        /// @src 1:8921:9118  \"for (uint i=0; i<owners.length; i++) {...\"\n                        for { }\n                        /** @src 1:8926:8934  \"uint i=0\" */ 1\n                        {\n                            /// @src 1:8953:8956  \"i++\"\n                            let _1 := var_i\n                            let _2 := increment_wrapping_uint256(_1)\n                            var_i := _2\n                        }\n                        {\n                            /// @src 1:8936:8937  \"i\"\n                            let _3 := var_i\n                            let expr_2 := _3\n                            /// @src 1:8938:8944  \"owners\"\n                            let _126_slot := 0x03\n                            let expr_947_slot := _126_slot\n                            /// @src 1:8938:8951  \"owners.length\"\n                            let expr_3 := array_length_array_address_dyn_storage(expr_947_slot)\n                            /// @src 1:8936:8951  \"i<owners.length\"\n                            let expr_4 := lt(cleanup_uint256(expr_2), cleanup_uint256(expr_3))\n                            if iszero(expr_4) { break }\n                            /// @src 1:8976:8989  \"confirmations\"\n                            let _127_slot := 0x01\n                            let expr_953_slot := _127_slot\n                            /// @src 1:8990:9003  \"transactionId\"\n                            let _4 := var_transactionId\n                            let expr_5 := _4\n                            /// @src 1:8976:9004  \"confirmations[transactionId]\"\n                            let _5 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_953_slot, expr_5)\n                            let _130_slot := _5\n                            let expr_955_slot := _130_slot\n                            /// @src 1:9005:9011  \"owners\"\n                            let _131_slot := 0x03\n                            let expr_956_slot := _131_slot\n                            /// @src 1:9012:9013  \"i\"\n                            let _6 := var_i\n                            let expr_6 := _6\n                            /// @src 1:9005:9014  \"owners[i]\"\n                            let _7, _8 := storage_array_index_access_address_dyn(expr_956_slot, expr_6)\n                            let _9 := read_from_storage_split_dynamic_address(_7, _8)\n                            let expr_7 := _9\n                            /// @src 1:8976:9015  \"confirmations[transactionId][owners[i]]\"\n                            let _10 := mapping_index_access_mapping_address_bool_of_address(expr_955_slot, expr_7)\n                            let _11 := read_from_storage_split_offset_bool(_10)\n                            let expr_8 := _11\n                            /// @src 1:8972:9043  \"if (confirmations[transactionId][owners[i]])...\"\n                            if expr_8\n                            {\n                                /// @src 1:9042:9043  \"1\"\n                                let expr_9 := 0x01\n                                /// @src 1:9033:9043  \"count += 1\"\n                                let _12 := convert_t_rational_by_to_t_uint256(expr_9)\n                                let _13 := var_count\n                                let expr_10 := checked_add_uint256(_13, _12)\n                                var_count := expr_10\n                            }\n                            /// @src 1:9061:9066  \"count\"\n                            let _14 := var_count\n                            let expr_11 := _14\n                            /// @src 1:9070:9078  \"required\"\n                            let _15 := read_from_storage_split_offset_uint256(0x04)\n                            let expr_12 := _15\n                            /// @src 1:9061:9078  \"count == required\"\n                            let expr_13 := eq(cleanup_uint256(expr_11), cleanup_uint256(expr_12))\n                            /// @src 1:9057:9107  \"if (count == required)...\"\n                            if expr_13\n                            {\n                                /// @src 1:9103:9107  \"true\"\n                                let expr_14 := 0x01\n                                /// @src 1:9096:9107  \"return true\"\n                                var := expr_14\n                                leave\n                            }\n                        }\n                        /// @src 1:9134:9139  \"false\"\n                        let expr_15 := 0x00\n                        /// @src 1:9127:9139  \"return false\"\n                        var := expr_15\n                        leave\n                    }\n                    /// @ast-id 1048 @src 1:10159:10407  \"function getConfirmationCount(uint transactionId)...\"\n                    function fun_getConfirmationCount(var_transactionId) -> var_count\n                    {\n                        /// @src 1:10254:10264  \"uint count\"\n                        let zero_uint256 := zero_value_for_split_uint256()\n                        var_count := zero_uint256\n                        /// @src 1:10292:10293  \"0\"\n                        let expr := 0x00\n                        /// @src 1:10285:10293  \"uint i=0\"\n                        let var_i := convert_rational_0_by_1_to_uint256(expr)\n                        /// @src 1:10280:10400  \"for (uint i=0; i<owners.length; i++)...\"\n                        for { }\n                        /** @src 1:10285:10293  \"uint i=0\" */ 1\n                        {\n                            /// @src 1:10312:10315  \"i++\"\n                            let _1 := var_i\n                            let _2 := increment_wrapping_uint256(_1)\n                            var_i := _2\n                        }\n                        {\n                            /// @src 1:10295:10296  \"i\"\n                            let _3 := var_i\n                            let expr_1 := _3\n                            /// @src 1:10297:10303  \"owners\"\n                            let _146_slot := 0x03\n                            let expr_1028_slot := _146_slot\n                            /// @src 1:10297:10310  \"owners.length\"\n                            let expr_2 := array_length_array_address_dyn_storage(expr_1028_slot)\n                            /// @src 1:10295:10310  \"i<owners.length\"\n                            let expr_3 := lt(cleanup_uint256(expr_1), cleanup_uint256(expr_2))\n                            if iszero(expr_3) { break }\n                            /// @src 1:10333:10346  \"confirmations\"\n                            let _147_slot := 0x01\n                            let expr_1034_slot := _147_slot\n                            /// @src 1:10347:10360  \"transactionId\"\n                            let _4 := var_transactionId\n                            let expr_4 := _4\n                            /// @src 1:10333:10361  \"confirmations[transactionId]\"\n                            let _5 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_1034_slot, expr_4)\n                            let _150_slot := _5\n                            let expr_1036_slot := _150_slot\n                            /// @src 1:10362:10368  \"owners\"\n                            let _151_slot := 0x03\n                            let expr_1037_slot := _151_slot\n                            /// @src 1:10369:10370  \"i\"\n                            let _6 := var_i\n                            let expr_5 := _6\n                            /// @src 1:10362:10371  \"owners[i]\"\n                            let _7, _8 := storage_array_index_access_address_dyn(expr_1037_slot, expr_5)\n                            let _9 := read_from_storage_split_dynamic_address(_7, _8)\n                            let expr_6 := _9\n                            /// @src 1:10333:10372  \"confirmations[transactionId][owners[i]]\"\n                            let _10 := mapping_index_access_mapping_address_bool_of_address(expr_1036_slot, expr_6)\n                            let _11 := read_from_storage_split_offset_bool(_10)\n                            let expr_7 := _11\n                            /// @src 1:10329:10400  \"if (confirmations[transactionId][owners[i]])...\"\n                            if expr_7\n                            {\n                                /// @src 1:10399:10400  \"1\"\n                                let expr_8 := 0x01\n                                /// @src 1:10390:10400  \"count += 1\"\n                                let _12 := convert_t_rational_by_to_t_uint256(expr_8)\n                                let _13 := var_count\n                                let expr_9 := checked_add_uint256(_13, _12)\n                                var_count := expr_9\n                            }\n                        }\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function zero_value_for_split_array_address_dyn() -> ret\n                    { ret := 96 }\n                    function array_storeLengthForEncoding_array_address_dyn(pos, length) -> updated_pos\n                    {\n                        mstore(pos, length)\n                        updated_pos := add(pos, 0x20)\n                    }\n                    function read_from_storage_offset_address(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_address(sload(slot))\n                    }\n                    function array_nextElement_array_address_dyn_storage(ptr) -> next\n                    { next := add(ptr, 0x01) }\n                    function abi_encode_array_address_dyn_storage(value, pos) -> end\n                    {\n                        let length := array_length_array_address_dyn_storage(value)\n                        pos := array_storeLengthForEncoding_array_address_dyn(pos, length)\n                        let baseRef := array_dataslot_array_address_dyn_storage(value)\n                        let srcPtr := baseRef\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 1) }\n                        {\n                            let elementValue0 := read_from_storage_offset_address(srcPtr)\n                            pos := abi_encodeUpdatedPos_address(elementValue0, pos)\n                            srcPtr := array_nextElement_array_address_dyn_storage(srcPtr)\n                        }\n                        end := pos\n                    }\n                    function abi_encodeUpdatedPos_array_address_dyn_storage(value0, pos) -> updatedPos\n                    {\n                        updatedPos := abi_encode_array_address_dyn_storage(value0, pos)\n                    }\n                    function copy_array_from_storage_to_memory_array_address_dyn(slot) -> memPtr\n                    {\n                        memPtr := allocate_unbounded()\n                        let end := abi_encodeUpdatedPos_array_address_dyn_storage(slot, memPtr)\n                        finalize_allocation(memPtr, sub(end, memPtr))\n                    }\n                    function convert_array_array_address_dyn_storage_to_array_address_dyn(value) -> converted\n                    {\n                        converted := copy_array_from_storage_to_memory_array_address_dyn(value)\n                    }\n                    /// @ast-id 1099 @src 1:11074:11192  \"function getOwners()...\"\n                    function fun_getOwners() -> var_mpos\n                    {\n                        /// @src 1:11140:11156  \"address[] memory\"\n                        let zero_array_address_dyn_memory_ptr_mpos := zero_value_for_split_array_address_dyn()\n                        var_mpos := zero_array_address_dyn_memory_ptr_mpos\n                        /// @src 1:11179:11185  \"owners\"\n                        let _161_slot := 0x03\n                        let expr_1096_slot := _161_slot\n                        /// @src 1:11172:11185  \"return owners\"\n                        var_mpos := convert_array_array_address_dyn_storage_to_array_address_dyn(expr_1096_slot)\n                        leave\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function zero_value_for_split_array_uint256_dyn() -> ret\n                    { ret := 96 }\n                    function array_allocation_size_array_uint256_dyn(length) -> size\n                    {\n                        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                        size := mul(length, 0x20)\n                        size := add(size, 0x20)\n                    }\n                    function allocate_memory_array_array_uint256_dyn(length) -> memPtr\n                    {\n                        let allocSize := array_allocation_size_array_uint256_dyn(length)\n                        memPtr := allocate_memory(allocSize)\n                        mstore(memPtr, length)\n                    }\n                    function zero_memory_chunk_uint256(dataStart, dataSizeInBytes)\n                    {\n                        calldatacopy(dataStart, calldatasize(), dataSizeInBytes)\n                    }\n                    function allocate_and_zero_memory_array_array_uint256_dyn(length) -> memPtr\n                    {\n                        memPtr := allocate_memory_array_array_uint256_dyn(length)\n                        let dataStart := memPtr\n                        let dataSize := array_allocation_size_array_uint256_dyn(length)\n                        dataStart := add(dataStart, 32)\n                        dataSize := sub(dataSize, 32)\n                        zero_memory_chunk_uint256(dataStart, dataSize)\n                    }\n                    function memory_array_index_access_uint256_dyn(baseRef, index) -> addr\n                    {\n                        if iszero(lt(index, array_length_array_uint256_dyn(baseRef))) { panic_error_0x32() }\n                        let offset := mul(index, 32)\n                        offset := add(offset, 32)\n                        addr := add(baseRef, offset)\n                    }\n                    function write_to_memory_uint256(memPtr, value)\n                    {\n                        mstore(memPtr, cleanup_uint256(value))\n                    }\n                    function read_from_memoryt_uint256(ptr) -> returnValue\n                    {\n                        let value := cleanup_uint256(mload(ptr))\n                        returnValue := value\n                    }\n                    /// @ast-id 1290 @src 1:12329:13008  \"function getTransactionIds(uint from, uint to, bool pending, bool executed)...\"\n                    function fun_getTransactionIds(var_from, var_to, var_pending, var_executed) -> var_transactionIds_mpos\n                    {\n                        /// @src 1:12450:12479  \"uint[] memory _transactionIds\"\n                        let zero_array_uint256_dyn_mpos := zero_value_for_split_array_uint256_dyn()\n                        var_transactionIds_mpos := zero_array_uint256_dyn_mpos\n                        /// @src 1:12541:12557  \"transactionCount\"\n                        let _1 := read_from_storage_split_offset_uint256(0x05)\n                        let expr := _1\n                        /// @src 1:12530:12558  \"new uint[](transactionCount)\"\n                        let expr_1212_mpos := allocate_and_zero_memory_array_array_uint256_dyn(expr)\n                        /// @src 1:12495:12558  \"uint[] memory transactionIdsTemp = new uint[](transactionCount)\"\n                        let var_transactionIdsTemp_mpos := expr_1212_mpos\n                        /// @src 1:12581:12582  \"0\"\n                        let expr_1 := 0x00\n                        /// @src 1:12568:12582  \"uint count = 0\"\n                        let var_count := convert_rational_0_by_1_to_uint256(expr_1)\n                        /// @src 1:12592:12598  \"uint i\"\n                        let var_i\n                        let zero_uint256 := zero_value_for_split_uint256()\n                        var_i := zero_uint256\n                        /// @src 1:12615:12616  \"0\"\n                        let expr_2 := 0x00\n                        /// @src 1:12613:12616  \"i=0\"\n                        let _2 := convert_rational_0_by_1_to_uint256(expr_2)\n                        var_i := _2\n                        /// @src 1:12608:12858  \"for (i=0; i<transactionCount; i++)...\"\n                        for { }\n                        /** @src 1:12613:12616  \"i=0\" */ 1\n                        {\n                            /// @src 1:12638:12641  \"i++\"\n                            let _3 := var_i\n                            let _4 := increment_wrapping_uint256(_3)\n                            var_i := _4\n                        }\n                        {\n                            /// @src 1:12618:12619  \"i\"\n                            let _5 := var_i\n                            let expr_3 := _5\n                            /// @src 1:12620:12636  \"transactionCount\"\n                            let _6 := read_from_storage_split_offset_uint256(0x05)\n                            let expr_4 := _6\n                            /// @src 1:12618:12636  \"i<transactionCount\"\n                            let expr_5 := lt(cleanup_uint256(expr_3), cleanup_uint256(expr_4))\n                            if iszero(expr_5) { break }\n                            /// @src 1:12662:12669  \"pending\"\n                            let _7 := var_pending\n                            let expr_6 := _7\n                            /// @src 1:12662:12698  \"pending && !transactions[i].executed\"\n                            let expr_7 := expr_6\n                            if expr_7\n                            {\n                                /// @src 1:12674:12686  \"transactions\"\n                                let _171_slot := 0x00\n                                let expr_1232_slot := _171_slot\n                                /// @src 1:12687:12688  \"i\"\n                                let _8 := var_i\n                                let expr_8 := _8\n                                /// @src 1:12674:12689  \"transactions[i]\"\n                                let _9 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_1232_slot, expr_8)\n                                let _174_slot := _9\n                                let expr_1234_slot := _174_slot\n                                /// @src 1:12674:12698  \"transactions[i].executed\"\n                                let _10 := add(expr_1234_slot, 3)\n                                let _11 := read_from_storage_split_offset_bool(_10)\n                                let expr_9 := _11\n                                /// @src 1:12673:12698  \"!transactions[i].executed\"\n                                let expr_10 := cleanup_bool(iszero(expr_9))\n                                /// @src 1:12662:12698  \"pending && !transactions[i].executed\"\n                                expr_7 := expr_10\n                            }\n                            /// @src 1:12662:12754  \"pending && !transactions[i].executed...\"\n                            let expr_11 := expr_7\n                            if iszero(expr_11)\n                            {\n                                /// @src 1:12718:12726  \"executed\"\n                                let _12 := var_executed\n                                let expr_12 := _12\n                                /// @src 1:12718:12754  \"executed && transactions[i].executed\"\n                                let expr_13 := expr_12\n                                if expr_13\n                                {\n                                    /// @src 1:12730:12742  \"transactions\"\n                                    let _178_slot := 0x00\n                                    let expr_1239_slot := _178_slot\n                                    /// @src 1:12743:12744  \"i\"\n                                    let _13 := var_i\n                                    let expr_14 := _13\n                                    /// @src 1:12730:12745  \"transactions[i]\"\n                                    let _14 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_1239_slot, expr_14)\n                                    let _181_slot := _14\n                                    let expr_1241_slot := _181_slot\n                                    /// @src 1:12730:12754  \"transactions[i].executed\"\n                                    let _15 := add(expr_1241_slot, 3)\n                                    let _16 := read_from_storage_split_offset_bool(_15)\n                                    let expr_15 := _16\n                                    /// @src 1:12718:12754  \"executed && transactions[i].executed\"\n                                    expr_13 := expr_15\n                                }\n                                /// @src 1:12662:12754  \"pending && !transactions[i].executed...\"\n                                expr_11 := expr_13\n                            }\n                            /// @src 1:12655:12858  \"if (   pending && !transactions[i].executed...\"\n                            if expr_11\n                            {\n                                /// @src 1:12814:12815  \"i\"\n                                let _17 := var_i\n                                let expr_16 := _17\n                                /// @src 1:12786:12804  \"transactionIdsTemp\"\n                                let _185_mpos := var_transactionIdsTemp_mpos\n                                let expr_1245_mpos := _185_mpos\n                                /// @src 1:12805:12810  \"count\"\n                                let _18 := var_count\n                                let expr_17 := _18\n                                /// @src 1:12786:12815  \"transactionIdsTemp[count] = i\"\n                                let _19 := expr_16\n                                write_to_memory_uint256(memory_array_index_access_uint256_dyn(expr_1245_mpos, expr_17), _19)\n                                /// @src 1:12842:12843  \"1\"\n                                let expr_18 := 0x01\n                                /// @src 1:12833:12843  \"count += 1\"\n                                let _20 := convert_t_rational_by_to_t_uint256(expr_18)\n                                let _21 := var_count\n                                let expr_19 := checked_add_uint256(_21, _20)\n                                var_count := expr_19\n                            }\n                        }\n                        /// @src 1:12896:12898  \"to\"\n                        let _22 := var_to\n                        let expr_20 := _22\n                        /// @src 1:12901:12905  \"from\"\n                        let _23 := var_from\n                        let expr_21 := _23\n                        /// @src 1:12896:12905  \"to - from\"\n                        let expr_22 := checked_sub_uint256(expr_20, expr_21)\n                        /// @src 1:12885:12906  \"new uint[](to - from)\"\n                        let expr_1265_mpos := allocate_and_zero_memory_array_array_uint256_dyn(expr_22)\n                        /// @src 1:12867:12906  \"_transactionIds = new uint[](to - from)\"\n                        var_transactionIds_mpos := expr_1265_mpos\n                        /// @src 1:12923:12927  \"from\"\n                        let _24 := var_from\n                        let expr_23 := _24\n                        /// @src 1:12921:12927  \"i=from\"\n                        var_i := expr_23\n                        /// @src 1:12916:13001  \"for (i=from; i<to; i++)...\"\n                        for { }\n                        /** @src 1:12921:12927  \"i=from\" */ 1\n                        {\n                            /// @src 1:12935:12938  \"i++\"\n                            let _25 := var_i\n                            let _26 := increment_wrapping_uint256(_25)\n                            var_i := _26\n                        }\n                        {\n                            /// @src 1:12929:12930  \"i\"\n                            let _27 := var_i\n                            let expr_24 := _27\n                            /// @src 1:12931:12933  \"to\"\n                            let _28 := var_to\n                            let expr_25 := _28\n                            /// @src 1:12929:12933  \"i<to\"\n                            let expr_26 := lt(cleanup_uint256(expr_24), cleanup_uint256(expr_25))\n                            if iszero(expr_26) { break }\n                            /// @src 1:12980:12998  \"transactionIdsTemp\"\n                            let _198_mpos := var_transactionIdsTemp_mpos\n                            let expr_1283_mpos := _198_mpos\n                            /// @src 1:12999:13000  \"i\"\n                            let _29 := var_i\n                            let expr_27 := _29\n                            /// @src 1:12980:13001  \"transactionIdsTemp[i]\"\n                            let _30 := read_from_memoryt_uint256(memory_array_index_access_uint256_dyn(expr_1283_mpos, expr_27))\n                            let expr_28 := _30\n                            /// @src 1:12952:12967  \"_transactionIds\"\n                            let _201_mpos := var_transactionIds_mpos\n                            let expr_1278_mpos := _201_mpos\n                            /// @src 1:12968:12969  \"i\"\n                            let _31 := var_i\n                            let expr_29 := _31\n                            /// @src 1:12972:12976  \"from\"\n                            let _32 := var_from\n                            let expr_30 := _32\n                            /// @src 1:12968:12976  \"i - from\"\n                            let expr_31 := checked_sub_uint256(expr_29, expr_30)\n                            /// @src 1:12952:13001  \"_transactionIds[i - from] = transactionIdsTemp[i]\"\n                            let _33 := expr_28\n                            write_to_memory_uint256(memory_array_index_access_uint256_dyn(expr_1278_mpos, expr_31), _33)\n                        }\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function array_allocation_size_array_address_dyn(length) -> size\n                    {\n                        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                        size := mul(length, 0x20)\n                        size := add(size, 0x20)\n                    }\n                    function allocate_memory_array_array_address_dyn(length) -> memPtr\n                    {\n                        let allocSize := array_allocation_size_array_address_dyn(length)\n                        memPtr := allocate_memory(allocSize)\n                        mstore(memPtr, length)\n                    }\n                    function zero_memory_chunk_address(dataStart, dataSizeInBytes)\n                    {\n                        calldatacopy(dataStart, calldatasize(), dataSizeInBytes)\n                    }\n                    function allocate_and_zero_memory_array_array_address_dyn(length) -> memPtr\n                    {\n                        memPtr := allocate_memory_array_array_address_dyn(length)\n                        let dataStart := memPtr\n                        let dataSize := array_allocation_size_array_address_dyn(length)\n                        dataStart := add(dataStart, 32)\n                        dataSize := sub(dataSize, 32)\n                        zero_memory_chunk_address(dataStart, dataSize)\n                    }\n                    function memory_array_index_access_address_dyn(baseRef, index) -> addr\n                    {\n                        if iszero(lt(index, array_length_array_address_dyn(baseRef))) { panic_error_0x32() }\n                        let offset := mul(index, 32)\n                        offset := add(offset, 32)\n                        addr := add(baseRef, offset)\n                    }\n                    function write_to_memory_address(memPtr, value)\n                    {\n                        mstore(memPtr, cleanup_address(value))\n                    }\n                    function read_from_memoryt_address(ptr) -> returnValue\n                    {\n                        let value := cleanup_address(mload(ptr))\n                        returnValue := value\n                    }\n                    /// @ast-id 1188 @src 1:11386:11964  \"function getConfirmations(uint transactionId)...\"\n                    function fun_getConfirmations(var_transactionId) -> var_confirmations_mpos\n                    {\n                        /// @src 1:11477:11508  \"address[] memory _confirmations\"\n                        let zero_array_address_dyn_mpos := zero_value_for_split_array_address_dyn()\n                        var_confirmations_mpos := zero_array_address_dyn_mpos\n                        /// @src 1:11575:11581  \"owners\"\n                        let _206_slot := 0x03\n                        let expr_1116_slot := _206_slot\n                        /// @src 1:11575:11588  \"owners.length\"\n                        let expr := array_length_array_address_dyn_storage(expr_1116_slot)\n                        /// @src 1:11561:11589  \"new address[](owners.length)\"\n                        let expr_1118_mpos := allocate_and_zero_memory_array_array_address_dyn(expr)\n                        /// @src 1:11524:11589  \"address[] memory confirmationsTemp = new address[](owners.length)\"\n                        let var_confirmationsTemp_mpos := expr_1118_mpos\n                        /// @src 1:11612:11613  \"0\"\n                        let expr_1 := 0x00\n                        /// @src 1:11599:11613  \"uint count = 0\"\n                        let var_count := convert_rational_0_by_1_to_uint256(expr_1)\n                        /// @src 1:11623:11629  \"uint i\"\n                        let var_i\n                        let zero_uint256 := zero_value_for_split_uint256()\n                        var_i := zero_uint256\n                        /// @src 1:11646:11647  \"0\"\n                        let expr_2 := 0x00\n                        /// @src 1:11644:11647  \"i=0\"\n                        let _1 := convert_rational_0_by_1_to_uint256(expr_2)\n                        var_i := _1\n                        /// @src 1:11639:11825  \"for (i=0; i<owners.length; i++)...\"\n                        for { }\n                        /** @src 1:11644:11647  \"i=0\" */ 1\n                        {\n                            /// @src 1:11666:11669  \"i++\"\n                            let _2 := var_i\n                            let _3 := increment_wrapping_uint256(_2)\n                            var_i := _3\n                        }\n                        {\n                            /// @src 1:11649:11650  \"i\"\n                            let _4 := var_i\n                            let expr_3 := _4\n                            /// @src 1:11651:11657  \"owners\"\n                            let _212_slot := 0x03\n                            let expr_1132_slot := _212_slot\n                            /// @src 1:11651:11664  \"owners.length\"\n                            let expr_4 := array_length_array_address_dyn_storage(expr_1132_slot)\n                            /// @src 1:11649:11664  \"i<owners.length\"\n                            let expr_5 := lt(cleanup_uint256(expr_3), cleanup_uint256(expr_4))\n                            if iszero(expr_5) { break }\n                            /// @src 1:11687:11700  \"confirmations\"\n                            let _213_slot := 0x01\n                            let expr_1138_slot := _213_slot\n                            /// @src 1:11701:11714  \"transactionId\"\n                            let _5 := var_transactionId\n                            let expr_6 := _5\n                            /// @src 1:11687:11715  \"confirmations[transactionId]\"\n                            let _6 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_1138_slot, expr_6)\n                            let _216_slot := _6\n                            let expr_1140_slot := _216_slot\n                            /// @src 1:11716:11722  \"owners\"\n                            let _217_slot := 0x03\n                            let expr_1141_slot := _217_slot\n                            /// @src 1:11723:11724  \"i\"\n                            let _7 := var_i\n                            let expr_7 := _7\n                            /// @src 1:11716:11725  \"owners[i]\"\n                            let _8, _9 := storage_array_index_access_address_dyn(expr_1141_slot, expr_7)\n                            let _10 := read_from_storage_split_dynamic_address(_8, _9)\n                            let expr_8 := _10\n                            /// @src 1:11687:11726  \"confirmations[transactionId][owners[i]]\"\n                            let _11 := mapping_index_access_mapping_address_bool_of_address(expr_1140_slot, expr_8)\n                            let _12 := read_from_storage_split_offset_bool(_11)\n                            let expr_9 := _12\n                            /// @src 1:11683:11825  \"if (confirmations[transactionId][owners[i]]) {...\"\n                            if expr_9\n                            {\n                                /// @src 1:11773:11779  \"owners\"\n                                let _224_slot := 0x03\n                                let expr_1148_slot := _224_slot\n                                /// @src 1:11780:11781  \"i\"\n                                let _13 := var_i\n                                let expr_10 := _13\n                                /// @src 1:11773:11782  \"owners[i]\"\n                                let _14, _15 := storage_array_index_access_address_dyn(expr_1148_slot, expr_10)\n                                let _16 := read_from_storage_split_dynamic_address(_14, _15)\n                                let expr_11 := _16\n                                /// @src 1:11746:11763  \"confirmationsTemp\"\n                                let _229_mpos := var_confirmationsTemp_mpos\n                                let expr_mpos := _229_mpos\n                                /// @src 1:11764:11769  \"count\"\n                                let _17 := var_count\n                                let expr_12 := _17\n                                /// @src 1:11746:11782  \"confirmationsTemp[count] = owners[i]\"\n                                let _18 := expr_11\n                                write_to_memory_address(memory_array_index_access_address_dyn(expr_mpos, expr_12), _18)\n                                /// @src 1:11809:11810  \"1\"\n                                let expr_13 := 0x01\n                                /// @src 1:11800:11810  \"count += 1\"\n                                let _19 := convert_t_rational_by_to_t_uint256(expr_13)\n                                let _20 := var_count\n                                let expr_14 := checked_add_uint256(_20, _19)\n                                var_count := expr_14\n                            }\n                        }\n                        /// @src 1:11865:11870  \"count\"\n                        let _21 := var_count\n                        let expr_15 := _21\n                        /// @src 1:11851:11871  \"new address[](count)\"\n                        let expr_1165_mpos := allocate_and_zero_memory_array_array_address_dyn(expr_15)\n                        /// @src 1:11834:11871  \"_confirmations = new address[](count)\"\n                        var_confirmations_mpos := expr_1165_mpos\n                        /// @src 1:11888:11889  \"0\"\n                        let expr_16 := 0x00\n                        /// @src 1:11886:11889  \"i=0\"\n                        let _22 := convert_rational_0_by_1_to_uint256(expr_16)\n                        var_i := _22\n                        /// @src 1:11881:11957  \"for (i=0; i<count; i++)...\"\n                        for { }\n                        /** @src 1:11886:11889  \"i=0\" */ 1\n                        {\n                            /// @src 1:11900:11903  \"i++\"\n                            let _23 := var_i\n                            let _24 := increment_wrapping_uint256(_23)\n                            var_i := _24\n                        }\n                        {\n                            /// @src 1:11891:11892  \"i\"\n                            let _25 := var_i\n                            let expr_17 := _25\n                            /// @src 1:11893:11898  \"count\"\n                            let _26 := var_count\n                            let expr_18 := _26\n                            /// @src 1:11891:11898  \"i<count\"\n                            let expr_19 := lt(cleanup_uint256(expr_17), cleanup_uint256(expr_18))\n                            if iszero(expr_19) { break }\n                            /// @src 1:11937:11954  \"confirmationsTemp\"\n                            let _241_mpos := var_confirmationsTemp_mpos\n                            let expr_1181_mpos := _241_mpos\n                            /// @src 1:11955:11956  \"i\"\n                            let _27 := var_i\n                            let expr_20 := _27\n                            /// @src 1:11937:11957  \"confirmationsTemp[i]\"\n                            let _28 := read_from_memoryt_address(memory_array_index_access_address_dyn(expr_1181_mpos, expr_20))\n                            let expr_21 := _28\n                            /// @src 1:11917:11931  \"_confirmations\"\n                            let _mpos := var_confirmations_mpos\n                            let expr_1178_mpos := _mpos\n                            /// @src 1:11932:11933  \"i\"\n                            let _29 := var_i\n                            let expr_22 := _29\n                            /// @src 1:11917:11957  \"_confirmations[i] = confirmationsTemp[i]\"\n                            let _30 := expr_21\n                            write_to_memory_address(memory_array_index_access_address_dyn(expr_1178_mpos, expr_22), _30)\n                        }\n                    }\n                    /// @ast-id 346 @src 1:1309:1395  \"modifier onlyWallet() {...\"\n                    function modifier_onlyWallet_733(var_required)\n                    {\n                        /// @src 1:1349:1359  \"msg.sender\"\n                        let expr := caller()\n                        /// @src 1:1371:1375  \"this\"\n                        let expr_address := address()\n                        /// @src 1:1363:1376  \"address(this)\"\n                        let expr_1 := convert_contract_MultiSigWallet_to_address(expr_address)\n                        /// @src 1:1349:1376  \"msg.sender == address(this)\"\n                        let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                        /// @src 1:1341:1377  \"require(msg.sender == address(this))\"\n                        require_helper(expr_2)\n                        /// @src 1:1387:1388  \"_\"\n                        modifier_validRequirement(var_required)\n                    }\n                    /// @ast-id 477 @src 1:2226:2451  \"modifier validRequirement(uint ownerCount, uint _required) {...\"\n                    function modifier_validRequirement(var_required)\n                    {\n                        /// @src 1:5133:5139  \"owners\"\n                        let _247_slot := 0x03\n                        let expr_735_slot := _247_slot\n                        /// @src 1:5133:5146  \"owners.length\"\n                        let expr := array_length_array_address_dyn_storage(expr_735_slot)\n                        let _1 := expr\n                        let var_ownerCount := _1\n                        /// @src 1:5148:5157  \"_required\"\n                        let _2 := var_required\n                        let expr_1 := _2\n                        let _3 := expr_1\n                        let var_required_1 := _3\n                        /// @src 1:2303:2313  \"ownerCount\"\n                        let _4 := var_ownerCount\n                        let expr_2 := _4\n                        /// @src 1:2317:2332  \"MAX_OWNER_COUNT\"\n                        let expr_3 := constant_MAX_OWNER_COUNT()\n                        /// @src 1:2303:2332  \"ownerCount <= MAX_OWNER_COUNT\"\n                        let expr_4 := iszero(gt(cleanup_uint256(expr_2), cleanup_uint256(expr_3)))\n                        /// @src 1:2303:2371  \"ownerCount <= MAX_OWNER_COUNT...\"\n                        let expr_5 := expr_4\n                        if expr_5\n                        {\n                            /// @src 1:2348:2357  \"_required\"\n                            let _5 := var_required_1\n                            let expr_6 := _5\n                            /// @src 1:2361:2371  \"ownerCount\"\n                            let _6 := var_ownerCount\n                            let expr_7 := _6\n                            /// @src 1:2348:2371  \"_required <= ownerCount\"\n                            let expr_8 := iszero(gt(cleanup_uint256(expr_6), cleanup_uint256(expr_7)))\n                            /// @src 1:2303:2371  \"ownerCount <= MAX_OWNER_COUNT...\"\n                            expr_5 := expr_8\n                        }\n                        /// @src 1:2303:2401  \"ownerCount <= MAX_OWNER_COUNT...\"\n                        let expr_9 := expr_5\n                        if expr_9\n                        {\n                            /// @src 1:2387:2396  \"_required\"\n                            let _7 := var_required_1\n                            let expr_10 := _7\n                            /// @src 1:2400:2401  \"0\"\n                            let expr_11 := 0x00\n                            /// @src 1:2387:2401  \"_required != 0\"\n                            let expr_12 := iszero(eq(cleanup_uint256(expr_10), convert_rational_0_by_1_to_uint256(expr_11)))\n                            /// @src 1:2303:2401  \"ownerCount <= MAX_OWNER_COUNT...\"\n                            expr_9 := expr_12\n                        }\n                        /// @src 1:2303:2432  \"ownerCount <= MAX_OWNER_COUNT...\"\n                        let expr_13 := expr_9\n                        if expr_13\n                        {\n                            /// @src 1:2417:2427  \"ownerCount\"\n                            let _8 := var_ownerCount\n                            let expr_14 := _8\n                            /// @src 1:2431:2432  \"0\"\n                            let expr_15 := 0x00\n                            /// @src 1:2417:2432  \"ownerCount != 0\"\n                            let expr_16 := iszero(eq(cleanup_uint256(expr_14), convert_rational_0_by_1_to_uint256(expr_15)))\n                            /// @src 1:2303:2432  \"ownerCount <= MAX_OWNER_COUNT...\"\n                            expr_13 := expr_16\n                        }\n                        /// @src 1:2295:2433  \"require(ownerCount <= MAX_OWNER_COUNT...\"\n                        require_helper(expr_13)\n                        /// @src 1:2443:2444  \"_\"\n                        fun_changeRequirement_inner(var_required)\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function update_byte_slice_shift(value, toInsert) -> result\n                    {\n                        let mask := not(0)\n                        toInsert := shift_left(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function prepare_store_uint256(value) -> ret\n                    { ret := value }\n                    function update_storage_value_offset_uint256_to_uint256(slot, value)\n                    {\n                        let convertedValue := convert_uint256_to_uint256(value)\n                        sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n                    }\n                    /// @src 1:5031:5243  \"function changeRequirement(uint _required)...\"\n                    function fun_changeRequirement_inner(var_required)\n                    {\n                        /// @src 1:5184:5193  \"_required\"\n                        let _1 := var_required\n                        let expr := _1\n                        /// @src 1:5173:5193  \"required = _required\"\n                        update_storage_value_offset_uint256_to_uint256(0x04, expr)\n                        /// @src 1:5226:5235  \"_required\"\n                        let _2 := var_required\n                        let expr_1 := _2\n                        /// @src 1:5208:5236  \"RequirementChange(_required)\"\n                        let _3 := 0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a\n                        let _4 := allocate_unbounded()\n                        let _5 := abi_encode_uint256(_4, expr_1)\n                        log1(_4, sub(_5, _4), _3)\n                    }\n                    /// @ast-id 749 @src 1:5031:5243  \"function changeRequirement(uint _required)...\"\n                    function fun_changeRequirement(var_required)\n                    {\n                        modifier_onlyWallet_733(var_required)\n                    }\n                    /// @ast-id 371 @src 1:1501:1588  \"modifier ownerExists(address owner) {...\"\n                    function modifier_ownerExists_782(var_transactionId)\n                    {\n                        /// @src 1:5956:5966  \"msg.sender\"\n                        let expr := caller()\n                        let _1 := expr\n                        let var_owner := _1\n                        /// @src 1:1555:1562  \"isOwner\"\n                        let _262_slot := 0x02\n                        let expr_slot := _262_slot\n                        /// @src 1:1563:1568  \"owner\"\n                        let _2 := var_owner\n                        let expr_1 := _2\n                        /// @src 1:1555:1569  \"isOwner[owner]\"\n                        let _3 := mapping_index_access_mapping_address_bool_of_address(expr_slot, expr_1)\n                        let _4 := read_from_storage_split_offset_bool(_3)\n                        let expr_2 := _4\n                        /// @src 1:1547:1570  \"require(isOwner[owner])\"\n                        require_helper(expr_2)\n                        /// @src 1:1580:1581  \"_\"\n                        modifier_transactionExists(var_transactionId)\n                    }\n                    /// @ast-id 389 @src 1:1594:1731  \"modifier transactionExists(uint transactionId) {...\"\n                    function modifier_transactionExists(var_transactionId)\n                    {\n                        /// @src 1:5994:6007  \"transactionId\"\n                        let _1 := var_transactionId\n                        let expr := _1\n                        let _2 := expr\n                        let var_transactionId_1 := _2\n                        /// @src 1:1659:1671  \"transactions\"\n                        let _268_slot := 0x00\n                        let expr_376_slot := _268_slot\n                        /// @src 1:1672:1685  \"transactionId\"\n                        let _3 := var_transactionId_1\n                        let expr_1 := _3\n                        /// @src 1:1659:1686  \"transactions[transactionId]\"\n                        let _4 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_376_slot, expr_1)\n                        let _271_slot := _4\n                        let expr_378_slot := _271_slot\n                        /// @src 1:1659:1698  \"transactions[transactionId].destination\"\n                        let _5 := add(expr_378_slot, 0)\n                        let _6 := read_from_storage_split_offset_address(_5)\n                        let expr_2 := _6\n                        /// @src 1:1710:1711  \"0\"\n                        let expr_3 := 0x00\n                        /// @src 1:1702:1712  \"address(0)\"\n                        let expr_4 := convert_rational_by_to_address(expr_3)\n                        /// @src 1:1659:1712  \"transactions[transactionId].destination != address(0)\"\n                        let expr_5 := iszero(eq(cleanup_address(expr_2), cleanup_address(expr_4)))\n                        /// @src 1:1651:1713  \"require(transactions[transactionId].destination != address(0))\"\n                        require_helper(expr_5)\n                        /// @src 1:1723:1724  \"_\"\n                        modifier_notConfirmed(var_transactionId)\n                    }\n                    /// @ast-id 422 @src 1:1869:1999  \"modifier notConfirmed(uint transactionId, address owner) {...\"\n                    function modifier_notConfirmed(var_transactionId)\n                    {\n                        /// @src 1:6030:6043  \"transactionId\"\n                        let _1 := var_transactionId\n                        let expr := _1\n                        let _2 := expr\n                        let var_transactionId_1 := _2\n                        /// @src 1:6045:6055  \"msg.sender\"\n                        let expr_1 := caller()\n                        let _3 := expr_1\n                        let var_owner := _3\n                        /// @src 1:1945:1958  \"confirmations\"\n                        let _277_slot := 0x01\n                        let expr_412_slot := _277_slot\n                        /// @src 1:1959:1972  \"transactionId\"\n                        let _4 := var_transactionId_1\n                        let expr_2 := _4\n                        /// @src 1:1945:1973  \"confirmations[transactionId]\"\n                        let _5 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_412_slot, expr_2)\n                        let _280_slot := _5\n                        let expr_414_slot := _280_slot\n                        /// @src 1:1974:1979  \"owner\"\n                        let _6 := var_owner\n                        let expr_3 := _6\n                        /// @src 1:1945:1980  \"confirmations[transactionId][owner]\"\n                        let _7 := mapping_index_access_mapping_address_bool_of_address(expr_414_slot, expr_3)\n                        let _8 := read_from_storage_split_offset_bool(_7)\n                        let expr_4 := _8\n                        /// @src 1:1944:1980  \"!confirmations[transactionId][owner]\"\n                        let expr_5 := cleanup_bool(iszero(expr_4))\n                        /// @src 1:1936:1981  \"require(!confirmations[transactionId][owner])\"\n                        require_helper(expr_5)\n                        /// @src 1:1991:1992  \"_\"\n                        fun_confirmTransaction_inner(var_transactionId)\n                    }\n                    /// @src 1:5873:6222  \"function confirmTransaction(uint transactionId)...\"\n                    function fun_confirmTransaction_inner(var_transactionId)\n                    {\n                        /// @src 1:6114:6118  \"true\"\n                        let expr := 0x01\n                        /// @src 1:6071:6084  \"confirmations\"\n                        let _284_slot := 0x01\n                        let expr_792_slot := _284_slot\n                        /// @src 1:6085:6098  \"transactionId\"\n                        let _1 := var_transactionId\n                        let expr_1 := _1\n                        /// @src 1:6071:6099  \"confirmations[transactionId]\"\n                        let _2 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_792_slot, expr_1)\n                        let _slot := _2\n                        let expr_796_slot := _slot\n                        /// @src 1:6100:6110  \"msg.sender\"\n                        let expr_2 := caller()\n                        /// @src 1:6071:6111  \"confirmations[transactionId][msg.sender]\"\n                        let _3 := mapping_index_access_mapping_address_bool_of_address(expr_796_slot, expr_2)\n                        /// @src 1:6071:6118  \"confirmations[transactionId][msg.sender] = true\"\n                        update_storage_value_offset_bool_to_bool(_3, expr)\n                        /// @src 1:6146:6156  \"msg.sender\"\n                        let expr_3 := caller()\n                        /// @src 1:6158:6171  \"transactionId\"\n                        let _4 := var_transactionId\n                        let expr_4 := _4\n                        /// @src 1:6133:6172  \"Confirmation(msg.sender, transactionId)\"\n                        let _5 := 0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef\n                        let _6 := convert_address_to_address(expr_3)\n                        let _7 := convert_uint256_to_uint256(expr_4)\n                        let _8 := allocate_unbounded()\n                        let _9 := abi_encode_tuple(_8)\n                        log3(_8, sub(_9, _8), _5, _6, _7)\n                        /// @src 1:6201:6214  \"transactionId\"\n                        let _10 := var_transactionId\n                        let expr_5 := _10\n                        fun_executeTransaction(expr_5)\n                    }\n                    /// @ast-id 812 @src 1:5873:6222  \"function confirmTransaction(uint transactionId)...\"\n                    function fun_confirmTransaction(var_transactionId)\n                    {\n                        modifier_ownerExists_782(var_transactionId)\n                    }\n                    /// @ast-id 774 @src 1:5516:5767  \"function submitTransaction(address destination, uint value, bytes memory data)...\"\n                    function fun_submitTransaction(var_destination, var_value, var_data_756_mpos) -> var_transactionId\n                    {\n                        /// @src 1:5627:5645  \"uint transactionId\"\n                        let zero_uint256 := zero_value_for_split_uint256()\n                        var_transactionId := zero_uint256\n                        /// @src 1:5692:5703  \"destination\"\n                        let _1 := var_destination\n                        let expr := _1\n                        /// @src 1:5705:5710  \"value\"\n                        let _2 := var_value\n                        let expr_1 := _2\n                        /// @src 1:5712:5716  \"data\"\n                        let _299_mpos := var_data_756_mpos\n                        let expr_765_mpos := _299_mpos\n                        /// @src 1:5677:5717  \"addTransaction(destination, value, data)\"\n                        let expr_2 := fun_addTransaction(expr, expr_1, expr_765_mpos)\n                        /// @src 1:5661:5717  \"transactionId = addTransaction(destination, value, data)\"\n                        var_transactionId := expr_2\n                        /// @src 1:5746:5759  \"transactionId\"\n                        let _3 := var_transactionId\n                        let expr_3 := _3\n                        fun_confirmTransaction(expr_3)\n                    }\n                    /// @ast-id 346 @src 1:1309:1395  \"modifier onlyWallet() {...\"\n                    function modifier_onlyWallet_672(var_owner, var_newOwner)\n                    {\n                        /// @src 1:1349:1359  \"msg.sender\"\n                        let expr := caller()\n                        /// @src 1:1371:1375  \"this\"\n                        let expr_address := address()\n                        /// @src 1:1363:1376  \"address(this)\"\n                        let expr_1 := convert_contract_MultiSigWallet_to_address(expr_address)\n                        /// @src 1:1349:1376  \"msg.sender == address(this)\"\n                        let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                        /// @src 1:1341:1377  \"require(msg.sender == address(this))\"\n                        require_helper(expr_2)\n                        /// @src 1:1387:1388  \"_\"\n                        modifier_ownerExists_675(var_owner, var_newOwner)\n                    }\n                    /// @ast-id 371 @src 1:1501:1588  \"modifier ownerExists(address owner) {...\"\n                    function modifier_ownerExists_675(var_owner, var_newOwner)\n                    {\n                        /// @src 1:4510:4515  \"owner\"\n                        let _1 := var_owner\n                        let expr := _1\n                        let _2 := expr\n                        let var_owner_1 := _2\n                        /// @src 1:1555:1562  \"isOwner\"\n                        let _303_slot := 0x02\n                        let expr_slot := _303_slot\n                        /// @src 1:1563:1568  \"owner\"\n                        let _3 := var_owner_1\n                        let expr_1 := _3\n                        /// @src 1:1555:1569  \"isOwner[owner]\"\n                        let _4 := mapping_index_access_mapping_address_bool_of_address(expr_slot, expr_1)\n                        let _5 := read_from_storage_split_offset_bool(_4)\n                        let expr_2 := _5\n                        /// @src 1:1547:1570  \"require(isOwner[owner])\"\n                        require_helper(expr_2)\n                        /// @src 1:1580:1581  \"_\"\n                        modifier_ownerDoesNotExist_678(var_owner, var_newOwner)\n                    }\n                    /// @ast-id 359 @src 1:1401:1495  \"modifier ownerDoesNotExist(address owner) {...\"\n                    function modifier_ownerDoesNotExist_678(var_owner, var_newOwner)\n                    {\n                        /// @src 1:4543:4551  \"newOwner\"\n                        let _1 := var_newOwner\n                        let expr := _1\n                        let _2 := expr\n                        let var_owner_1 := _2\n                        /// @src 1:1462:1469  \"isOwner\"\n                        let _309_slot := 0x02\n                        let expr_slot := _309_slot\n                        /// @src 1:1470:1475  \"owner\"\n                        let _3 := var_owner_1\n                        let expr_1 := _3\n                        /// @src 1:1462:1476  \"isOwner[owner]\"\n                        let _4 := mapping_index_access_mapping_address_bool_of_address(expr_slot, expr_1)\n                        let _5 := read_from_storage_split_offset_bool(_4)\n                        let expr_2 := _5\n                        /// @src 1:1461:1476  \"!isOwner[owner]\"\n                        let expr_3 := cleanup_bool(iszero(expr_2))\n                        /// @src 1:1453:1477  \"require(!isOwner[owner])\"\n                        require_helper(expr_3)\n                        /// @src 1:1487:1488  \"_\"\n                        fun_replaceOwner_inner(var_owner, var_newOwner)\n                    }\n                    /// @src 1:4401:4860  \"function replaceOwner(address owner, address newOwner)...\"\n                    function fun_replaceOwner_inner(var_owner, var_newOwner)\n                    {\n                        /// @src 1:4579:4580  \"0\"\n                        let expr := 0x00\n                        /// @src 1:4572:4580  \"uint i=0\"\n                        let var_i := convert_rational_0_by_1_to_uint256(expr)\n                        /// @src 1:4567:4716  \"for (uint i=0; i<owners.length; i++)...\"\n                        for { }\n                        /** @src 1:4572:4580  \"uint i=0\" */ 1\n                        {\n                            /// @src 1:4599:4602  \"i++\"\n                            let _1 := var_i\n                            let _2 := increment_wrapping_uint256(_1)\n                            var_i := _2\n                        }\n                        {\n                            /// @src 1:4582:4583  \"i\"\n                            let _3 := var_i\n                            let expr_1 := _3\n                            /// @src 1:4584:4590  \"owners\"\n                            let _316_slot := 0x03\n                            let expr_685_slot := _316_slot\n                            /// @src 1:4584:4597  \"owners.length\"\n                            let expr_2 := array_length_array_address_dyn_storage(expr_685_slot)\n                            /// @src 1:4582:4597  \"i<owners.length\"\n                            let expr_3 := lt(cleanup_uint256(expr_1), cleanup_uint256(expr_2))\n                            if iszero(expr_3) { break }\n                            /// @src 1:4620:4626  \"owners\"\n                            let _317_slot := 0x03\n                            let expr_691_slot := _317_slot\n                            /// @src 1:4627:4628  \"i\"\n                            let _4 := var_i\n                            let expr_4 := _4\n                            /// @src 1:4620:4629  \"owners[i]\"\n                            let _5, _6 := storage_array_index_access_address_dyn(expr_691_slot, expr_4)\n                            let _7 := read_from_storage_split_dynamic_address(_5, _6)\n                            let expr_5 := _7\n                            /// @src 1:4633:4638  \"owner\"\n                            let _8 := var_owner\n                            let expr_6 := _8\n                            /// @src 1:4620:4638  \"owners[i] == owner\"\n                            let expr_7 := eq(cleanup_address(expr_5), cleanup_address(expr_6))\n                            /// @src 1:4616:4716  \"if (owners[i] == owner) {...\"\n                            if expr_7\n                            {\n                                /// @src 1:4670:4678  \"newOwner\"\n                                let _9 := var_newOwner\n                                let expr_8 := _9\n                                /// @src 1:4658:4664  \"owners\"\n                                let _324_slot := 0x03\n                                let expr_696_slot := _324_slot\n                                /// @src 1:4665:4666  \"i\"\n                                let _10 := var_i\n                                let expr_9 := _10\n                                /// @src 1:4658:4667  \"owners[i]\"\n                                let _11, _12 := storage_array_index_access_address_dyn(expr_696_slot, expr_9)\n                                /// @src 1:4658:4678  \"owners[i] = newOwner\"\n                                update_storage_value_address_to_address(_11, _12, expr_8)\n                                /// @src 1:4696:4701  \"break\"\n                                break\n                            }\n                        }\n                        /// @src 1:4742:4747  \"false\"\n                        let expr_10 := 0x00\n                        /// @src 1:4725:4732  \"isOwner\"\n                        let _328_slot := 0x02\n                        let expr_706_slot := _328_slot\n                        /// @src 1:4733:4738  \"owner\"\n                        let _13 := var_owner\n                        let expr_11 := _13\n                        /// @src 1:4725:4739  \"isOwner[owner]\"\n                        let _14 := mapping_index_access_mapping_address_bool_of_address(expr_706_slot, expr_11)\n                        /// @src 1:4725:4747  \"isOwner[owner] = false\"\n                        update_storage_value_offset_bool_to_bool(_14, expr_10)\n                        /// @src 1:4777:4781  \"true\"\n                        let expr_12 := 0x01\n                        /// @src 1:4757:4764  \"isOwner\"\n                        let _331_slot := 0x02\n                        let expr_712_slot := _331_slot\n                        /// @src 1:4765:4773  \"newOwner\"\n                        let _15 := var_newOwner\n                        let expr_13 := _15\n                        /// @src 1:4757:4774  \"isOwner[newOwner]\"\n                        let _16 := mapping_index_access_mapping_address_bool_of_address(expr_712_slot, expr_13)\n                        /// @src 1:4757:4781  \"isOwner[newOwner] = true\"\n                        update_storage_value_offset_bool_to_bool(_16, expr_12)\n                        /// @src 1:4809:4814  \"owner\"\n                        let _17 := var_owner\n                        let expr_14 := _17\n                        /// @src 1:4796:4815  \"OwnerRemoval(owner)\"\n                        let _18 := 0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90\n                        let _19 := convert_address_to_address(expr_14)\n                        let _20 := allocate_unbounded()\n                        let _21 := abi_encode_tuple(_20)\n                        log2(_20, sub(_21, _20), _18, _19)\n                        /// @src 1:4844:4852  \"newOwner\"\n                        let _22 := var_newOwner\n                        let expr_15 := _22\n                        /// @src 1:4830:4853  \"OwnerAddition(newOwner)\"\n                        let _23 := 0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d\n                        let _24 := convert_address_to_address(expr_15)\n                        let _25 := allocate_unbounded()\n                        let _26 := abi_encode_tuple(_25)\n                        log2(_25, sub(_26, _25), _23, _24)\n                    }\n                    /// @ast-id 727 @src 1:4401:4860  \"function replaceOwner(address owner, address newOwner)...\"\n                    function fun_replaceOwner(var_owner, var_newOwner)\n                    {\n                        modifier_onlyWallet_672(var_owner, var_newOwner)\n                    }\n                    /// @ast-id 371 @src 1:1501:1588  \"modifier ownerExists(address owner) {...\"\n                    function modifier_ownerExists_854(var_transactionId)\n                    {\n                        /// @src 1:6839:6849  \"msg.sender\"\n                        let expr := caller()\n                        let _1 := expr\n                        let var_owner := _1\n                        /// @src 1:1555:1562  \"isOwner\"\n                        let _345_slot := 0x02\n                        let expr_slot := _345_slot\n                        /// @src 1:1563:1568  \"owner\"\n                        let _2 := var_owner\n                        let expr_1 := _2\n                        /// @src 1:1555:1569  \"isOwner[owner]\"\n                        let _3 := mapping_index_access_mapping_address_bool_of_address(expr_slot, expr_1)\n                        let _4 := read_from_storage_split_offset_bool(_3)\n                        let expr_2 := _4\n                        /// @src 1:1547:1570  \"require(isOwner[owner])\"\n                        require_helper(expr_2)\n                        /// @src 1:1580:1581  \"_\"\n                        modifier_confirmed_859(var_transactionId)\n                    }\n                    /// @ast-id 405 @src 1:1737:1863  \"modifier confirmed(uint transactionId, address owner) {...\"\n                    function modifier_confirmed_859(var_transactionId)\n                    {\n                        /// @src 1:6869:6882  \"transactionId\"\n                        let _1 := var_transactionId\n                        let expr := _1\n                        let _2 := expr\n                        let var_transactionId_1 := _2\n                        /// @src 1:6884:6894  \"msg.sender\"\n                        let expr_1 := caller()\n                        let _3 := expr_1\n                        let var_owner := _3\n                        /// @src 1:1809:1822  \"confirmations\"\n                        let _352_slot := 0x01\n                        let expr_slot := _352_slot\n                        /// @src 1:1823:1836  \"transactionId\"\n                        let _4 := var_transactionId_1\n                        let expr_2 := _4\n                        /// @src 1:1809:1837  \"confirmations[transactionId]\"\n                        let _5 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_slot, expr_2)\n                        let _355_slot := _5\n                        let expr_slot_1 := _355_slot\n                        /// @src 1:1838:1843  \"owner\"\n                        let _6 := var_owner\n                        let expr_3 := _6\n                        /// @src 1:1809:1844  \"confirmations[transactionId][owner]\"\n                        let _7 := mapping_index_access_mapping_address_bool_of_address(expr_slot_1, expr_3)\n                        let _8 := read_from_storage_split_offset_bool(_7)\n                        let expr_4 := _8\n                        /// @src 1:1801:1845  \"require(confirmations[transactionId][owner])\"\n                        require_helper(expr_4)\n                        /// @src 1:1855:1856  \"_\"\n                        modifier_notExecuted_862(var_transactionId)\n                    }\n                    /// @ast-id 436 @src 1:2005:2120  \"modifier notExecuted(uint transactionId) {...\"\n                    function modifier_notExecuted_862(var_transactionId)\n                    {\n                        /// @src 1:6916:6929  \"transactionId\"\n                        let _1 := var_transactionId\n                        let expr := _1\n                        let _2 := expr\n                        let var_transactionId_1 := _2\n                        /// @src 1:2065:2077  \"transactions\"\n                        let _361_slot := 0x00\n                        let expr_slot := _361_slot\n                        /// @src 1:2078:2091  \"transactionId\"\n                        let _3 := var_transactionId_1\n                        let expr_1 := _3\n                        /// @src 1:2065:2092  \"transactions[transactionId]\"\n                        let _4 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_slot, expr_1)\n                        let _364_slot := _4\n                        let expr_slot_1 := _364_slot\n                        /// @src 1:2065:2101  \"transactions[transactionId].executed\"\n                        let _5 := add(expr_slot_1, 3)\n                        let _6 := read_from_storage_split_offset_bool(_5)\n                        let expr_2 := _6\n                        /// @src 1:2064:2101  \"!transactions[transactionId].executed\"\n                        let expr_3 := cleanup_bool(iszero(expr_2))\n                        /// @src 1:2056:2102  \"require(!transactions[transactionId].executed)\"\n                        require_helper(expr_3)\n                        /// @src 1:2112:2113  \"_\"\n                        fun_executeTransaction_inner(var_transactionId)\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function convert_struct_Transaction_storage_to_struct_Transaction_ptr(value) -> converted\n                    { converted := value }\n                    function array_length_bytes_storage(value) -> length\n                    {\n                        length := sload(value)\n                        length := extract_byte_array_length(length)\n                    }\n                    function convert_array_bytes_storage_to_bytes(value) -> converted\n                    {\n                        converted := copy_array_from_storage_to_memory_bytes(value)\n                    }\n                    /// @src 1:6756:7352  \"function executeTransaction(uint transactionId)...\"\n                    function fun_executeTransaction_inner(var_transactionId)\n                    {\n                        /// @src 1:6961:6974  \"transactionId\"\n                        let _1 := var_transactionId\n                        let expr := _1\n                        /// @src 1:6949:6975  \"isConfirmed(transactionId)\"\n                        let expr_1 := fun_isConfirmed(expr)\n                        /// @src 1:6945:7346  \"if (isConfirmed(transactionId)) {...\"\n                        if expr_1\n                        {\n                            /// @src 1:7017:7029  \"transactions\"\n                            let _368_slot := 0x00\n                            let expr_870_slot := _368_slot\n                            /// @src 1:7030:7043  \"transactionId\"\n                            let _2 := var_transactionId\n                            let expr_2 := _2\n                            /// @src 1:7017:7044  \"transactions[transactionId]\"\n                            let _3 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_870_slot, expr_2)\n                            let _371_slot := _3\n                            let expr_872_slot := _371_slot\n                            /// @src 1:6991:7044  \"Transaction storage txn = transactions[transactionId]\"\n                            let var_txn_slot := convert_struct_Transaction_storage_to_struct_Transaction_ptr(expr_872_slot)\n                            /// @src 1:7073:7077  \"true\"\n                            let expr_3 := 0x01\n                            /// @src 1:7058:7061  \"txn\"\n                            let _372_slot := var_txn_slot\n                            let expr_874_slot := _372_slot\n                            /// @src 1:7058:7070  \"txn.executed\"\n                            let _4 := add(expr_874_slot, 3)\n                            /// @src 1:7058:7077  \"txn.executed = true\"\n                            update_storage_value_offset_bool_to_bool(_4, expr_3)\n                            /// @src 1:7109:7112  \"txn\"\n                            let _374_slot := var_txn_slot\n                            let expr_881_slot := _374_slot\n                            /// @src 1:7109:7124  \"txn.destination\"\n                            let _5 := add(expr_881_slot, 0)\n                            let _6 := read_from_storage_split_offset_address(_5)\n                            let expr_4 := _6\n                            /// @src 1:7126:7129  \"txn\"\n                            let _377_slot := var_txn_slot\n                            let expr_883_slot := _377_slot\n                            /// @src 1:7126:7135  \"txn.value\"\n                            let _7 := add(expr_883_slot, 1)\n                            let _8 := read_from_storage_split_offset_uint256(_7)\n                            let expr_5 := _8\n                            /// @src 1:7137:7140  \"txn\"\n                            let _380_slot := var_txn_slot\n                            let expr_885_slot := _380_slot\n                            /// @src 1:7137:7145  \"txn.data\"\n                            let _9 := add(expr_885_slot, 2)\n                            let _382_slot := _9\n                            let expr_886_slot := _382_slot\n                            /// @src 1:7137:7152  \"txn.data.length\"\n                            let expr_6 := array_length_bytes_storage(expr_886_slot)\n                            /// @src 1:7154:7157  \"txn\"\n                            let _383_slot := var_txn_slot\n                            let expr_888_slot := _383_slot\n                            /// @src 1:7154:7162  \"txn.data\"\n                            let _10 := add(expr_888_slot, 2)\n                            let _385_slot := _10\n                            let expr_889_slot := _385_slot\n                            /// @src 1:7095:7163  \"external_call(txn.destination, txn.value, txn.data.length, txn.data)\"\n                            let _386_mpos := convert_array_bytes_storage_to_bytes(expr_889_slot)\n                            let expr_7 := fun_external_call(expr_4, expr_5, expr_6, _386_mpos)\n                            /// @src 1:7091:7336  \"if (external_call(txn.destination, txn.value, txn.data.length, txn.data))...\"\n                            switch expr_7\n                            case 0 {\n                                /// @src 1:7269:7282  \"transactionId\"\n                                let _11 := var_transactionId\n                                let expr_8 := _11\n                                /// @src 1:7252:7283  \"ExecutionFailure(transactionId)\"\n                                let _12 := 0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236\n                                let _13 := convert_uint256_to_uint256(expr_8)\n                                let _14 := allocate_unbounded()\n                                let _15 := abi_encode_tuple(_14)\n                                log2(_14, sub(_15, _14), _12, _13)\n                                /// @src 1:7316:7321  \"false\"\n                                let expr_9 := 0x00\n                                /// @src 1:7301:7304  \"txn\"\n                                let _392_slot := var_txn_slot\n                                let expr_899_slot := _392_slot\n                                /// @src 1:7301:7313  \"txn.executed\"\n                                let _16 := add(expr_899_slot, 3)\n                                /// @src 1:7301:7321  \"txn.executed = false\"\n                                update_storage_value_offset_bool_to_bool(_16, expr_9)\n                            }\n                            default /// @src 1:7091:7336  \"if (external_call(txn.destination, txn.value, txn.data.length, txn.data))...\"\n                            {\n                                /// @src 1:7196:7209  \"transactionId\"\n                                let _17 := var_transactionId\n                                let expr_10 := _17\n                                /// @src 1:7186:7210  \"Execution(transactionId)\"\n                                let _18 := 0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75\n                                let _19 := convert_uint256_to_uint256(expr_10)\n                                let _20 := allocate_unbounded()\n                                let _21 := abi_encode_tuple(_20)\n                                log2(_20, sub(_21, _20), _18, _19)\n                            }\n                        }\n                    }\n                    /// @ast-id 910 @src 1:6756:7352  \"function executeTransaction(uint transactionId)...\"\n                    function fun_executeTransaction(var_transactionId)\n                    {\n                        modifier_ownerExists_854(var_transactionId)\n                    }\n                    /// @ast-id 494 @src 1:2513:2623  \"receive() external payable {...\"\n                    function fun()\n                    {\n                        /// @src 1:2554:2563  \"msg.value\"\n                        let expr := callvalue()\n                        /// @src 1:2566:2567  \"0\"\n                        let expr_1 := 0x00\n                        /// @src 1:2554:2567  \"msg.value > 0\"\n                        let expr_2 := gt(cleanup_uint256(expr), convert_rational_0_by_1_to_uint256(expr_1))\n                        /// @src 1:2550:2616  \"if (msg.value > 0)...\"\n                        if expr_2\n                        {\n                            /// @src 1:2594:2604  \"msg.sender\"\n                            let expr_3 := caller()\n                            /// @src 1:2606:2615  \"msg.value\"\n                            let expr_4 := callvalue()\n                            /// @src 1:2586:2616  \"Deposit(msg.sender, msg.value)\"\n                            let _1 := 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c\n                            let _2 := convert_address_to_address(expr_3)\n                            let _3 := allocate_unbounded()\n                            let _4 := abi_encode_uint256(_3, expr_4)\n                            log2(_3, sub(_4, _3), _1, _2)\n                        }\n                    }\n                    /// @ast-id 451 @src 1:2126:2220  \"modifier notNull(address _address) {...\"\n                    function modifier_notNull_987(var_transactionId, var_destination, var_value, var_data_mpos) -> _1\n                    {\n                        _1 := var_transactionId\n                        /// @src 1:9602:9613  \"destination\"\n                        let _2 := var_destination\n                        let expr := _2\n                        let _3 := expr\n                        let var_address := _3\n                        /// @src 1:2179:2187  \"_address\"\n                        let _4 := var_address\n                        let expr_1 := _4\n                        /// @src 1:2199:2200  \"0\"\n                        let expr_2 := 0x00\n                        /// @src 1:2191:2201  \"address(0)\"\n                        let expr_3 := convert_rational_by_to_address(expr_2)\n                        /// @src 1:2179:2201  \"_address != address(0)\"\n                        let expr_4 := iszero(eq(cleanup_address(expr_1), cleanup_address(expr_3)))\n                        /// @src 1:2171:2202  \"require(_address != address(0))\"\n                        require_helper(expr_4)\n                        /// @src 1:2212:2213  \"_\"\n                        _1 := fun_addTransaction_inner(var_transactionId, var_destination, var_value, var_data_mpos)\n                    }\n                    /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                    function allocate_memory_struct_struct_Transaction_storage_ptr() -> memPtr\n                    {\n                        memPtr := allocate_memory(128)\n                    }\n                    function write_to_memory_bytes(memPtr, value)\n                    { mstore(memPtr, value) }\n                    function write_to_memory_bool(memPtr, value)\n                    {\n                        mstore(memPtr, cleanup_bool(value))\n                    }\n                    function update_byte_slice_20_shift(value, toInsert) -> result\n                    {\n                        let mask := sub(shl(160, 1), 1)\n                        toInsert := shift_left(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function update_storage_value_offset_address_to_address(slot, value)\n                    {\n                        let convertedValue := convert_address_to_address(value)\n                        sstore(slot, update_byte_slice_20_shift(sload(slot), prepare_store_address(convertedValue)))\n                    }\n                    function read_from_memoryt_bytes(memPtr) -> value\n                    { value := mload(memPtr) }\n                    function divide_by_ceil(value) -> result\n                    {\n                        result := div(add(value, 31), 32)\n                    }\n                    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n                    {\n                        let shiftBits := mul(shiftBytes, 8)\n                        let mask := shift_left_dynamic(shiftBits, not(0))\n                        toInsert := shift_left_dynamic(shiftBits, toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function update_storage_value_uint256_to_uint256(slot, offset, value)\n                    {\n                        let convertedValue := convert_uint256_to_uint256(value)\n                        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n                    }\n                    function storage_set_to_zero_uint256(slot, offset)\n                    {\n                        let zero := zero_value_for_split_uint256()\n                        update_storage_value_uint256_to_uint256(slot, offset, zero)\n                    }\n                    function clear_storage_range_bytes1(start, end)\n                    {\n                        for { } lt(start, end) { start := add(start, 1) }\n                        {\n                            storage_set_to_zero_uint256(start, 0)\n                        }\n                    }\n                    function clean_up_bytearray_end_slots_bytes_storage(array, len, startIndex)\n                    {\n                        if gt(len, 31)\n                        {\n                            let dataArea := array_dataslot_bytes_storage(array)\n                            let deleteStart := add(dataArea, divide_by_ceil(startIndex))\n                            if lt(startIndex, 32) { deleteStart := dataArea }\n                            clear_storage_range_bytes1(deleteStart, add(dataArea, divide_by_ceil(len)))\n                        }\n                    }\n                    function mask_bytes_dynamic(data, bytes) -> result\n                    {\n                        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n                        result := and(data, mask)\n                    }\n                    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n                    {\n                        data := mask_bytes_dynamic(data, len)\n                        used := or(data, mul(2, len))\n                    }\n                    function copy_byte_array_to_storage_from_bytes_to_bytes(slot, src)\n                    {\n                        let newLen := array_length_bytes(src)\n                        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                        let oldLen := extract_byte_array_length(sload(slot))\n                        clean_up_bytearray_end_slots_bytes_storage(slot, oldLen, newLen)\n                        let srcOffset := 0\n                        srcOffset := 0x20\n                        switch gt(newLen, 31)\n                        case 1 {\n                            let loopEnd := and(newLen, not(0x1f))\n                            let dstPtr := array_dataslot_bytes_storage(slot)\n                            let i := 0\n                            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                            {\n                                sstore(dstPtr, mload(add(src, srcOffset)))\n                                dstPtr := add(dstPtr, 1)\n                                srcOffset := add(srcOffset, 32)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(src, srcOffset))\n                                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                            }\n                            sstore(slot, add(mul(newLen, 2), 1))\n                        }\n                        default {\n                            let value := 0\n                            if newLen\n                            {\n                                value := mload(add(src, srcOffset))\n                            }\n                            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                        }\n                    }\n                    function update_storage_value_offset_bytes_to_bytes(slot, value)\n                    {\n                        copy_byte_array_to_storage_from_bytes_to_bytes(slot, value)\n                    }\n                    function read_from_memoryt_bool(ptr) -> returnValue\n                    {\n                        let value := cleanup_bool(mload(ptr))\n                        returnValue := value\n                    }\n                    function copy_struct_to_storage_from_struct_Transaction_to_struct_Transaction(slot, value)\n                    {\n                        let memberSlot := add(slot, 0)\n                        let memberSrcPtr := add(value, 0)\n                        let memberValue := read_from_memoryt_address(memberSrcPtr)\n                        update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                        let memberSlot_1 := add(slot, 1)\n                        let memberSrcPtr_1 := add(value, 32)\n                        let memberValue_1 := read_from_memoryt_uint256(memberSrcPtr_1)\n                        update_storage_value_offset_uint256_to_uint256(memberSlot_1, memberValue_1)\n                        let memberSlot_2 := add(slot, 2)\n                        let memberSrcPtr_2 := add(value, 64)\n                        let memberValue_2 := read_from_memoryt_bytes(memberSrcPtr_2)\n                        update_storage_value_offset_bytes_to_bytes(memberSlot_2, memberValue_2)\n                        let memberSlot_3 := add(slot, 3)\n                        let memberSrcPtr_3 := add(value, 96)\n                        let memberValue_3 := read_from_memoryt_bool(memberSrcPtr_3)\n                        update_storage_value_offset_bool_to_bool(memberSlot_3, memberValue_3)\n                    }\n                    function update_storage_value_offset_struct_Transaction_to_struct_Transaction(slot, value)\n                    {\n                        copy_struct_to_storage_from_struct_Transaction_to_struct_Transaction(slot, value)\n                    }\n                    /// @src 1:9493:9956  \"function addTransaction(address destination, uint value, bytes memory data)...\"\n                    function fun_addTransaction_inner(_1, var_destination, var_value, var_data_mpos) -> var_transactionId\n                    {\n                        var_transactionId := _1\n                        /// @src 1:9682:9698  \"transactionCount\"\n                        let _2 := read_from_storage_split_offset_uint256(0x05)\n                        let expr := _2\n                        /// @src 1:9666:9698  \"transactionId = transactionCount\"\n                        var_transactionId := expr\n                        /// @src 1:9777:9788  \"destination\"\n                        let _3 := var_destination\n                        let expr_1 := _3\n                        /// @src 1:9809:9814  \"value\"\n                        let _4 := var_value\n                        let expr_2 := _4\n                        /// @src 1:9834:9838  \"data\"\n                        let _412_mpos := var_data_mpos\n                        let expr_1001_mpos := _412_mpos\n                        /// @src 1:9862:9867  \"false\"\n                        let expr_3 := 0x00\n                        /// @src 1:9738:9878  \"Transaction({...\"\n                        let expr_1003_mpos := allocate_memory_struct_struct_Transaction_storage_ptr()\n                        write_to_memory_address(add(expr_1003_mpos, 0), expr_1)\n                        write_to_memory_uint256(add(expr_1003_mpos, 32), expr_2)\n                        write_to_memory_bytes(add(expr_1003_mpos, 64), expr_1001_mpos)\n                        write_to_memory_bool(add(expr_1003_mpos, 96), expr_3)\n                        /// @src 1:9708:9720  \"transactions\"\n                        let _413_slot := 0x00\n                        let expr_995_slot := _413_slot\n                        /// @src 1:9721:9734  \"transactionId\"\n                        let _5 := var_transactionId\n                        let expr_4 := _5\n                        /// @src 1:9708:9735  \"transactions[transactionId]\"\n                        let _6 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_995_slot, expr_4)\n                        /// @src 1:9708:9878  \"transactions[transactionId] = Transaction({...\"\n                        update_storage_value_offset_struct_Transaction_to_struct_Transaction(_6, expr_1003_mpos)\n                        /// @src 1:9908:9909  \"1\"\n                        let expr_5 := 0x01\n                        /// @src 1:9888:9909  \"transactionCount += 1\"\n                        let _7 := convert_t_rational_by_to_t_uint256(expr_5)\n                        let _8 := read_from_storage_split_offset_uint256(0x05)\n                        let expr_6 := checked_add_uint256(_8, _7)\n                        update_storage_value_offset_uint256_to_uint256(0x05, expr_6)\n                        /// @src 1:9935:9948  \"transactionId\"\n                        let _9 := var_transactionId\n                        let expr_7 := _9\n                        /// @src 1:9924:9949  \"Submission(transactionId)\"\n                        let _10 := 0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51\n                        let _11 := convert_uint256_to_uint256(expr_7)\n                        let _12 := allocate_unbounded()\n                        let _13 := abi_encode_tuple(_12)\n                        log2(_12, sub(_13, _12), _10, _11)\n                    }\n                    /// @ast-id 1015 @src 1:9493:9956  \"function addTransaction(address destination, uint value, bytes memory data)...\"\n                    function fun_addTransaction(var_destination, var_value, var_data_mpos) -> var_transactionId\n                    {\n                        /// @src 1:9632:9650  \"uint transactionId\"\n                        let zero_t_uint256 := zero_value_for_split_uint256()\n                        var_transactionId := zero_t_uint256\n                        var_transactionId := modifier_notNull_987(var_transactionId, var_destination, var_value, var_data_mpos)\n                    }\n                    /// @ast-id 930 @src 1:7529:8640  \"function external_call(address destination, uint value, uint dataLength, bytes memory data) private returns (bool) {...\"\n                    function fun_external_call(var_destination, var_value, var_dataLength, var_data_918_mpos) -> var_\n                    {\n                        /// @src 1:7638:7642  \"bool\"\n                        let zero_bool := zero_value_for_split_bool()\n                        var_ := zero_bool\n                        /// @src 1:7654:7665  \"bool result\"\n                        let var_result\n                        let zero_t_bool := zero_value_for_split_bool()\n                        var_result := zero_t_bool\n                        /// @src 1:7675:8611  \"assembly {...\"\n                        let usr$x := mload(0x40)\n                        let usr$d := add(var_data_918_mpos, 32)\n                        var_result := call(sub(gas(), 34710), var_destination, var_value, usr$d, var_dataLength, usr$x, 0)\n                        /// @src 1:8627:8633  \"result\"\n                        let _1 := var_result\n                        let expr := _1\n                        /// @src 1:8620:8633  \"return result\"\n                        var_ := expr\n                        leave\n                    }\n                }\n                data \".metadata\" hex\"a2646970667358221220c1e097ac6a04424b64b53ed30b41dbbd4192bb252a315851416c57f38579739464736f6c634300081c0033\"\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220ac10541b9b0b5333de1ad40b2b793205be7ffbc07d621d6dae29bde12b336ec764736f6c634300081c0033\"\n    }\n}\n",
					"hash": "25de0b4381590bc324f0fba850849e15cb37ece3c318770b981035029fd80595",
					"factoryDependencies": {
						"efb43cdd260ef1f3af9e6d26e8bb98438a1d02f7bde54135d27981fa757bfb54": "ReviveMultisig.sol:MultiSigWallet"
					}
				}
			},
			"ReviveMultisig.sol": {
				"MultiSigWallet": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_owners",
									"type": "address[]"
								},
								{
									"internalType": "uint256",
									"name": "_required",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "transactionId",
									"type": "uint256"
								}
							],
							"name": "Confirmation",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "transactionId",
									"type": "uint256"
								}
							],
							"name": "Execution",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "transactionId",
									"type": "uint256"
								}
							],
							"name": "ExecutionFailure",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnerAddition",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnerRemoval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "required",
									"type": "uint256"
								}
							],
							"name": "RequirementChange",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "transactionId",
									"type": "uint256"
								}
							],
							"name": "Revocation",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "transactionId",
									"type": "uint256"
								}
							],
							"name": "Submission",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "MAX_OWNER_COUNT",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "addOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_required",
									"type": "uint256"
								}
							],
							"name": "changeRequirement",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "transactionId",
									"type": "uint256"
								}
							],
							"name": "confirmTransaction",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "confirmations",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "transactionId",
									"type": "uint256"
								}
							],
							"name": "executeTransaction",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "transactionId",
									"type": "uint256"
								}
							],
							"name": "getConfirmationCount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "count",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "transactionId",
									"type": "uint256"
								}
							],
							"name": "getConfirmations",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "_confirmations",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getOwners",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "pending",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "executed",
									"type": "bool"
								}
							],
							"name": "getTransactionCount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "count",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "from",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "to",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "pending",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "executed",
									"type": "bool"
								}
							],
							"name": "getTransactionIds",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "_transactionIds",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "transactionId",
									"type": "uint256"
								}
							],
							"name": "isConfirmed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "isOwner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "owners",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "removeOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "replaceOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "required",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "transactionId",
									"type": "uint256"
								}
							],
							"name": "revokeConfirmation",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "destination",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "submitTransaction",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "transactionId",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "transactionCount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "transactions",
							"outputs": [
								{
									"internalType": "address",
									"name": "destination",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"internalType": "bool",
									"name": "executed",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Stefan George - <stefan.george@consensys.net>\",\"kind\":\"dev\",\"methods\":{\"addOwner(address)\":{\"details\":\"Allows to add a new owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of new owner.\"}},\"changeRequirement(uint256)\":{\"details\":\"Allows to change the number of required confirmations. Transaction has to be sent by wallet.\",\"params\":{\"_required\":\"Number of required confirmations.\"}},\"confirmTransaction(uint256)\":{\"details\":\"Allows an owner to confirm a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"constructor\":{\"details\":\"Contract constructor sets initial owners and required number of confirmations.\",\"params\":{\"_owners\":\"List of initial owners.\",\"_required\":\"Number of required confirmations.\"}},\"executeTransaction(uint256)\":{\"details\":\"Allows anyone to execute a confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"getConfirmationCount(uint256)\":{\"details\":\"Returns number of confirmations of a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"returns\":{\"count\":\"Number of confirmations.\"}},\"getConfirmations(uint256)\":{\"details\":\"Returns array with owner addresses, which confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"returns\":{\"_confirmations\":\"Returns array of owner addresses.\"}},\"getOwners()\":{\"details\":\"Returns list of owners.\",\"returns\":{\"_0\":\"List of owner addresses.\"}},\"getTransactionCount(bool,bool)\":{\"details\":\"Returns total number of transactions after filers are applied.\",\"params\":{\"executed\":\"Include executed transactions.\",\"pending\":\"Include pending transactions.\"},\"returns\":{\"count\":\"Total number of transactions after filters are applied.\"}},\"getTransactionIds(uint256,uint256,bool,bool)\":{\"details\":\"Returns list of transaction IDs in defined range.\",\"params\":{\"executed\":\"Include executed transactions.\",\"from\":\"Index start position of transaction array.\",\"pending\":\"Include pending transactions.\",\"to\":\"Index end position of transaction array.\"},\"returns\":{\"_transactionIds\":\"Returns array of transaction IDs.\"}},\"isConfirmed(uint256)\":{\"details\":\"Returns the confirmation status of a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"returns\":{\"_0\":\"Confirmation status.\"}},\"removeOwner(address)\":{\"details\":\"Allows to remove an owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of owner.\"}},\"replaceOwner(address,address)\":{\"details\":\"Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\",\"params\":{\"newOwner\":\"Address of new owner.\",\"owner\":\"Address of owner to be replaced.\"}},\"revokeConfirmation(uint256)\":{\"details\":\"Allows an owner to revoke a confirmation for a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"submitTransaction(address,uint256,bytes)\":{\"details\":\"Allows an owner to submit and confirm a transaction.\",\"params\":{\"data\":\"Transaction data payload.\",\"destination\":\"Transaction target address.\",\"value\":\"Transaction ether value.\"},\"returns\":{\"transactionId\":\"Returns transaction ID.\"}}},\"title\":\"Multisignature wallet - Allows multiple parties to agree on transactions before execution.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ReviveMultisig.sol\":\"MultiSigWallet\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"ReviveMultisig.sol\":{\"keccak256\":\"0x0c476d614863f66084f80b06e0439ae86da05a147d956ac65c765c13afb067ec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f115ad5b1bc6ff5a9cc95057bff1f904e67b49cd5640a01e99f0704c412ad3ed\",\"dweb:/ipfs/QmRZ94NnU5dZmh5kf6CwzyEKfCRmLCALRtafcUtn6CK4WN\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"author": "Stefan George - <stefan.george@consensys.net>",
						"kind": "dev",
						"methods": {
							"addOwner(address)": {
								"details": "Allows to add a new owner. Transaction has to be sent by wallet.",
								"params": {
									"owner": "Address of new owner."
								}
							},
							"changeRequirement(uint256)": {
								"details": "Allows to change the number of required confirmations. Transaction has to be sent by wallet.",
								"params": {
									"_required": "Number of required confirmations."
								}
							},
							"confirmTransaction(uint256)": {
								"details": "Allows an owner to confirm a transaction.",
								"params": {
									"transactionId": "Transaction ID."
								}
							},
							"constructor": {
								"details": "Contract constructor sets initial owners and required number of confirmations.",
								"params": {
									"_owners": "List of initial owners.",
									"_required": "Number of required confirmations."
								}
							},
							"executeTransaction(uint256)": {
								"details": "Allows anyone to execute a confirmed transaction.",
								"params": {
									"transactionId": "Transaction ID."
								}
							},
							"getConfirmationCount(uint256)": {
								"details": "Returns number of confirmations of a transaction.",
								"params": {
									"transactionId": "Transaction ID."
								},
								"returns": {
									"count": "Number of confirmations."
								}
							},
							"getConfirmations(uint256)": {
								"details": "Returns array with owner addresses, which confirmed transaction.",
								"params": {
									"transactionId": "Transaction ID."
								},
								"returns": {
									"_confirmations": "Returns array of owner addresses."
								}
							},
							"getOwners()": {
								"details": "Returns list of owners.",
								"returns": {
									"_0": "List of owner addresses."
								}
							},
							"getTransactionCount(bool,bool)": {
								"details": "Returns total number of transactions after filers are applied.",
								"params": {
									"executed": "Include executed transactions.",
									"pending": "Include pending transactions."
								},
								"returns": {
									"count": "Total number of transactions after filters are applied."
								}
							},
							"getTransactionIds(uint256,uint256,bool,bool)": {
								"details": "Returns list of transaction IDs in defined range.",
								"params": {
									"executed": "Include executed transactions.",
									"from": "Index start position of transaction array.",
									"pending": "Include pending transactions.",
									"to": "Index end position of transaction array."
								},
								"returns": {
									"_transactionIds": "Returns array of transaction IDs."
								}
							},
							"isConfirmed(uint256)": {
								"details": "Returns the confirmation status of a transaction.",
								"params": {
									"transactionId": "Transaction ID."
								},
								"returns": {
									"_0": "Confirmation status."
								}
							},
							"removeOwner(address)": {
								"details": "Allows to remove an owner. Transaction has to be sent by wallet.",
								"params": {
									"owner": "Address of owner."
								}
							},
							"replaceOwner(address,address)": {
								"details": "Allows to replace an owner with a new owner. Transaction has to be sent by wallet.",
								"params": {
									"newOwner": "Address of new owner.",
									"owner": "Address of owner to be replaced."
								}
							},
							"revokeConfirmation(uint256)": {
								"details": "Allows an owner to revoke a confirmation for a transaction.",
								"params": {
									"transactionId": "Transaction ID."
								}
							},
							"submitTransaction(address,uint256,bytes)": {
								"details": "Allows an owner to submit and confirm a transaction.",
								"params": {
									"data": "Transaction data payload.",
									"destination": "Transaction target address.",
									"value": "Transaction ether value."
								},
								"returns": {
									"transactionId": "Returns transaction ID."
								}
							}
						},
						"title": "Multisignature wallet - Allows multiple parties to agree on transactions before execution.",
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 306,
								"contract": "ReviveMultisig.sol:MultiSigWallet",
								"label": "transactions",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_uint256,t_struct(Transaction)332_storage)"
							},
							{
								"astId": 312,
								"contract": "ReviveMultisig.sol:MultiSigWallet",
								"label": "confirmations",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
							},
							{
								"astId": 316,
								"contract": "ReviveMultisig.sol:MultiSigWallet",
								"label": "isOwner",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 319,
								"contract": "ReviveMultisig.sol:MultiSigWallet",
								"label": "owners",
								"offset": 0,
								"slot": "3",
								"type": "t_array(t_address)dyn_storage"
							},
							{
								"astId": 321,
								"contract": "ReviveMultisig.sol:MultiSigWallet",
								"label": "required",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 323,
								"contract": "ReviveMultisig.sol:MultiSigWallet",
								"label": "transactionCount",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes_storage": {
								"encoding": "bytes",
								"label": "bytes",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => mapping(address => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_bool)"
							},
							"t_mapping(t_uint256,t_struct(Transaction)332_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct MultiSigWallet.Transaction)",
								"numberOfBytes": "32",
								"value": "t_struct(Transaction)332_storage"
							},
							"t_struct(Transaction)332_storage": {
								"encoding": "inplace",
								"label": "struct MultiSigWallet.Transaction",
								"members": [
									{
										"astId": 325,
										"contract": "ReviveMultisig.sol:MultiSigWallet",
										"label": "destination",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 327,
										"contract": "ReviveMultisig.sol:MultiSigWallet",
										"label": "value",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 329,
										"contract": "ReviveMultisig.sol:MultiSigWallet",
										"label": "data",
										"offset": 0,
										"slot": "2",
										"type": "t_bytes_storage"
									},
									{
										"astId": 331,
										"contract": "ReviveMultisig.sol:MultiSigWallet",
										"label": "executed",
										"offset": 0,
										"slot": "3",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "128"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 352/65904 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 35701\n// Code size = 113407 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20160]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20160] = a1\n    42: a1 = 0x20170\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20170\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 1)\n    64: jump @22 if a0 == a1\n      : @9 (gas: 9)\n    67: a3 = a1 << 0x20\n    70: a3 = a3 >> 0x20\n    73: a4 = a0 << 0x20\n    76: a4 = a4 >> 0x20\n    79: a4 = a4 + a2\n    82: a3 = a3 - a4\n    85: a4 = a2 << 0x1\n    88: a4 = -a4\n    90: jump @15 if a4 >=u a3\n      : @10 (gas: 1)\n    93: jump @19 if a0 >=u a1\n      : @11 (gas: 1)\n    96: jump @22 if a2 == 0\n      : @12 (gas: 3)\n    99: a2 = a2 + a0\n   102: a3 = a0\n   104: fallthrough\n      : @13 (gas: 6)\n   105: a4 = u8 [a1]\n   107: a1 = a1 + 0x1\n   110: a5 = a3 + 0x1\n   113: u8 [a3] = a4\n   115: a3 = a5\n   117: jump @13 if a5 != a2\n      : @14 (gas: 1)\n   120: jump @22\n      : @15 (gas: 1)\n   122: jump @22 if a2 == 0\n      : @16 (gas: 3)\n   125: a2 = a2 + a0\n   128: a3 = a0\n   130: fallthrough\n      : @17 (gas: 6)\n   131: a4 = u8 [a1]\n   133: a1 = a1 + 0x1\n   136: a5 = a3 + 0x1\n   139: u8 [a3] = a4\n   141: a3 = a5\n   143: jump @17 if a5 != a2\n      : @18 (gas: 1)\n   146: jump @22\n      : @19 (gas: 1)\n   148: jump @22 if a2 == 0\n      : @20 (gas: 2)\n   151: i32 a3 = a2 + 0xffffffffffffffff\n   154: fallthrough\n      : @21 (gas: 7)\n   155: a4 = a1 + a3\n   158: a4 = u8 [a4]\n   160: a2 = a2 + 0xffffffffffffffff\n   163: a5 = a0 + a3\n   166: u8 [a5] = a4\n   168: i32 a3 = a3 + 0xffffffffffffffff\n   171: jump @21 if a2 != 0\n      : @22 (gas: 1)\n   174: ret\n      : @23 (gas: 13)\n   176: sp = sp + 0xffffffffffffffd8\n   179: u64 [sp + 0x20] = ra\n   182: u64 [sp + 0x18] = s0\n   185: u64 [sp + 0x10] = s1\n   188: a2 = u64 [a1]\n   190: u64 [sp + 0x8] = a2\n   193: a2 = u64 [a1 + 0x8]\n   196: u64 [sp] = a2\n   198: s0 = u64 [a1 + 0x10]\n   201: s1 = u64 [a1 + 0x18]\n   204: i32 a0 = a0 + 0\n   206: a1 = 0x20\n   209: ra = 2, jump @0\n      : @24 [@dyn 1] (gas: 71)\n   214: a1 = reverse s1\n   216: a2 = reverse s0\n   218: a3 = u64 [sp]\n   220: a3 = reverse a3\n   222: a4 = u64 [sp + 0x8]\n   225: a4 = reverse a4\n   227: u8 [a0 + 0x18] = a4\n   230: u8 [a0 + 0x10] = a3\n   233: u8 [a0 + 0x8] = a2\n   236: u8 [a0] = a1\n   238: a5 = a4 >> 0x38\n   241: u8 [a0 + 0x1f] = a5\n   244: a5 = a4 >> 0x30\n   247: u8 [a0 + 0x1e] = a5\n   250: a5 = a4 >> 0x28\n   253: u8 [a0 + 0x1d] = a5\n   256: a5 = a4 >> 0x20\n   259: u8 [a0 + 0x1c] = a5\n   262: a5 = a4 >> 0x18\n   265: u8 [a0 + 0x1b] = a5\n   268: a5 = a4 >> 0x10\n   271: u8 [a0 + 0x1a] = a5\n   274: a4 = a4 >> 0x8\n   277: u8 [a0 + 0x19] = a4\n   280: a4 = a3 >> 0x38\n   283: u8 [a0 + 0x17] = a4\n   286: a4 = a3 >> 0x30\n   289: u8 [a0 + 0x16] = a4\n   292: a4 = a3 >> 0x28\n   295: u8 [a0 + 0x15] = a4\n   298: a4 = a3 >> 0x20\n   301: u8 [a0 + 0x14] = a4\n   304: a4 = a3 >> 0x18\n   307: u8 [a0 + 0x13] = a4\n   310: a4 = a3 >> 0x10\n   313: u8 [a0 + 0x12] = a4\n   316: a3 = a3 >> 0x8\n   319: u8 [a0 + 0x11] = a3\n   322: a3 = a2 >> 0x38\n   325: u8 [a0 + 0xf] = a3\n   328: a3 = a2 >> 0x30\n   331: u8 [a0 + 0xe] = a3\n   334: a3 = a2 >> 0x28\n   337: u8 [a0 + 0xd] = a3\n   340: a3 = a2 >> 0x20\n   343: u8 [a0 + 0xc] = a3\n   346: a3 = a2 >> 0x18\n   349: u8 [a0 + 0xb] = a3\n   352: a3 = a2 >> 0x10\n   355: u8 [a0 + 0xa] = a3\n   358: a2 = a2 >> 0x8\n   361: u8 [a0 + 0x9] = a2\n   364: a2 = a1 >> 0x38\n   367: u8 [a0 + 0x7] = a2\n   370: a2 = a1 >> 0x30\n   373: u8 [a0 + 0x6] = a2\n   376: a2 = a1 >> 0x28\n   379: u8 [a0 + 0x5] = a2\n   382: a2 = a1 >> 0x20\n   385: u8 [a0 + 0x4] = a2\n   388: a2 = a1 >> 0x18\n   391: u8 [a0 + 0x3] = a2\n   394: a2 = a1 >> 0x10\n   397: u8 [a0 + 0x2] = a2\n   400: a1 = a1 >> 0x8\n   403: u8 [a0 + 0x1] = a1\n   406: ra = u64 [sp + 0x20]\n   409: s0 = u64 [sp + 0x18]\n   412: s1 = u64 [sp + 0x10]\n   415: sp = sp + 0x28\n   418: ret\n      : @25 (gas: 6)\n   420: sp = sp + 0xfffffffffffffff0\n   423: u64 [sp + 0x8] = ra\n   426: u64 [sp] = s0\n   428: s0 = a0 & 0x1\n   431: ecalli 4 // 'call_data_size'\n   433: fallthrough\n      : @26 (gas: 2)\n   434: u32 [0x20164] = a0\n   439: jump @28 if s0 == 0\n      : @27 (gas: 1)\n   442: ra = 4, jump @29\n      : @28 [@dyn 2] (gas: 1)\n   446: ra = 6, jump @54\n      : @29 [@dyn 3] (gas: 9)\n   451: sp = sp + 0xfffffffffffffe60\n   455: u64 [sp + 0x198] = ra\n   459: u64 [sp + 0x190] = s0\n   463: u64 [sp + 0x188] = s1\n   467: s0 = sp + 0x1a0\n   471: sp = sp & 0xffffffffffffffe0\n   474: a0 = 0x40\n   477: a1 = 0x20\n   480: ra = 8, jump @0\n      : @30 [@dyn 4] (gas: 39)\n   485: u8 [a0 + 31] = 0x80\n   490: u8 [a0 + 30] = 0\n   493: u8 [a0 + 29] = 0\n   496: u8 [a0 + 28] = 0\n   499: u8 [a0 + 27] = 0\n   502: u8 [a0 + 26] = 0\n   505: u8 [a0 + 25] = 0\n   508: u8 [a0 + 24] = 0\n   511: u8 [a0 + 23] = 0\n   514: u8 [a0 + 22] = 0\n   517: u8 [a0 + 21] = 0\n   520: u8 [a0 + 20] = 0\n   523: u8 [a0 + 19] = 0\n   526: u8 [a0 + 18] = 0\n   529: u8 [a0 + 17] = 0\n   532: u8 [a0 + 16] = 0\n   535: u8 [a0 + 15] = 0\n   538: u8 [a0 + 14] = 0\n   541: u8 [a0 + 13] = 0\n   544: u8 [a0 + 12] = 0\n   547: u8 [a0 + 11] = 0\n   550: u8 [a0 + 10] = 0\n   553: u8 [a0 + 9] = 0\n   556: u8 [a0 + 8] = 0\n   559: u8 [a0 + 7] = 0\n   562: u8 [a0 + 6] = 0\n   565: u8 [a0 + 5] = 0\n   568: u8 [a0 + 4] = 0\n   571: u8 [a0 + 3] = 0\n   574: u8 [a0 + 2] = 0\n   577: u8 [a0 + 1] = 0\n   580: u8 [a0 + 0] = 0\n   582: u64 [sp + 376] = 0\n   586: u64 [sp + 352] = 0\n   590: u64 [sp + 360] = 0\n   594: u64 [sp + 368] = 0\n   598: i32 a0 = sp + 0x160\n   602: ecalli 13 // 'value_transferred'\n   604: fallthrough\n      : @31 (gas: 8)\n   605: a0 = u64 [sp + 0x170]\n   609: a1 = u64 [sp + 0x178]\n   613: a2 = u64 [sp + 0x168]\n   617: a3 = u64 [sp + 0x160]\n   621: a1 = a1 | a2\n   624: a0 = a0 | a3\n   627: a0 = a0 | a1\n   630: jump @46 if a0 != 0\n      : @32 (gas: 12)\n   634: a0 = i32 [0x20164]\n   639: u64 [sp + 0x58] = a0\n   642: a0 = a0 << 0x20\n   645: a2 = a0 >> 0x20\n   648: u64 [sp + 312] = 0\n   652: u64 [sp + 304] = 0\n   656: u64 [sp + 296] = 0\n   660: a0 = sp + 0x140\n   664: a1 = sp + 0x120\n   668: u64 [sp + 0x50] = a2\n   671: u64 [sp + 0x120] = a2\n   675: ra = 10, jump @114\n      : @33 [@dyn 5] (gas: 12)\n   680: a4 = u64 [sp + 0x158]\n   684: s1 = u64 [sp + 0x150]\n   688: a3 = u64 [sp + 0x148]\n   692: a2 = u64 [sp + 0x140]\n   696: a0 = a3 | a4\n   699: a1 = a2 | s1\n   702: a1 = a1 | a0\n   705: a1 = a1 >> 0x20\n   708: a0 = a0 | s1\n   711: a0 = a0 << 0x20\n   714: a0 = a0 | a1\n   717: jump @45 if a0 != 0\n      : @34 (gas: 6)\n   721: i32 a0 = a2 + 0\n   723: a1 = u64 [sp + 0x58]\n   726: u64 [sp + 0x38] = a2\n   729: u64 [sp + 0x40] = a3\n   732: u64 [sp + 0x48] = a4\n   735: ra = 12, jump @0\n      : @35 [@dyn 6] (gas: 29)\n   740: i32 a0 = a0 + 0\n   742: a1 = u64 [sp + 0x58]\n   745: a2 = 0\n   747: ecalli 2 // 'call_data_copy'\n   749: a0 = u64 [sp + 0x50]\n   752: a2 = u64 [sp + 0x38]\n   755: a0 = a0 + a2\n   758: a1 = a0 <u a2\n   761: t1 = a2\n   763: a4 = u64 [sp + 0x40]\n   766: a2 = a4 + a1\n   769: a3 = a2 <u a4\n   772: a3 = a1 if a1 == 0\n   775: a3 = a3 + s1\n   778: a1 = a3 <u s1\n   781: a5 = u64 [sp + 0x48]\n   784: t0 = a5 + a1\n   787: u64 [sp + 0xa8] = a2\n   791: u64 [sp + 0xa0] = a0\n   795: u64 [sp + 0xd8] = a5\n   799: u64 [sp + 0xd0] = s1\n   803: u64 [sp + 0xc8] = a4\n   807: u64 [sp + 0xc0] = t1\n   811: u64 [sp + 0xb0] = a3\n   815: a0 = sp + 0xe0\n   819: a1 = sp + 0xc0\n   823: a2 = sp + 0xa0\n   827: u64 [sp + 0xb8] = t0\n   831: ra = 14, jump @162\n      : @36 [@dyn 7] (gas: 12)\n   836: a3 = u64 [sp + 0xf0]\n   840: a2 = u64 [sp + 0xf8]\n   844: a4 = u64 [sp + 0xe8]\n   848: a5 = u64 [sp + 0xe0]\n   852: a0 = a4 | a2\n   855: a1 = a5 | a3\n   858: a1 = a1 | a0\n   861: a1 = a1 >> 0x20\n   864: a0 = a0 | a3\n   867: a0 = a0 << 0x20\n   870: a0 = a0 | a1\n   873: jump @45 if a0 != 0\n      : @37 (gas: 14)\n   877: u64 [sp + 0x40] = a4\n   880: u64 [sp + 0x48] = a3\n   883: u64 [sp + 0x50] = a2\n   886: a0 = u64 [sp + 0x118]\n   890: u64 [sp + 0x30] = a0\n   893: a0 = u64 [sp + 0x110]\n   897: u64 [sp + 0x58] = a0\n   900: a0 = u64 [sp + 0x108]\n   904: u64 [sp + 0x10] = a0\n   907: s1 = u64 [sp + 0x100]\n   911: u64 [sp + 0x38] = a5\n   914: i32 a0 = a5 + 0\n   916: a1 = 0x20\n   919: ra = 16, jump @0\n      : @38 [@dyn 8] (gas: 108)\n   924: t1 = s1\n   926: t0 = u64 [sp + 0x10]\n   929: a1 = u8 [a0 + 0x1]\n   932: a2 = u8 [a0]\n   934: a3 = u8 [a0 + 0x2]\n   937: a4 = u8 [a0 + 0x3]\n   940: a1 = a1 << 0x8\n   943: a1 = a1 | a2\n   946: a3 = a3 << 0x10\n   949: a4 = a4 << 0x18\n   952: a3 = a3 | a4\n   955: a1 = a1 | a3\n   958: a2 = u8 [a0 + 0x5]\n   961: a3 = u8 [a0 + 0x4]\n   964: a4 = u8 [a0 + 0x6]\n   967: a5 = u8 [a0 + 0x7]\n   970: a2 = a2 << 0x8\n   973: a2 = a2 | a3\n   976: a4 = a4 << 0x10\n   979: a5 = a5 << 0x18\n   982: a4 = a4 | a5\n   985: a2 = a2 | a4\n   988: a2 = a2 << 0x20\n   991: t2 = a2 | a1\n   994: a1 = u8 [a0 + 0x9]\n   997: a2 = u8 [a0 + 0x8]\n  1000: a3 = u8 [a0 + 0xa]\n  1003: a4 = u8 [a0 + 0xb]\n  1006: a1 = a1 << 0x8\n  1009: a1 = a1 | a2\n  1012: a3 = a3 << 0x10\n  1015: a4 = a4 << 0x18\n  1018: a3 = a3 | a4\n  1021: a1 = a1 | a3\n  1024: a2 = u8 [a0 + 0xd]\n  1027: a3 = u8 [a0 + 0xc]\n  1030: a4 = u8 [a0 + 0xe]\n  1033: a5 = u8 [a0 + 0xf]\n  1036: a2 = a2 << 0x8\n  1039: a2 = a2 | a3\n  1042: a4 = a4 << 0x10\n  1045: a5 = a5 << 0x18\n  1048: a4 = a4 | a5\n  1051: a2 = a2 | a4\n  1054: a2 = a2 << 0x20\n  1057: s1 = a2 | a1\n  1060: a1 = u8 [a0 + 0x11]\n  1063: a2 = u8 [a0 + 0x10]\n  1066: a3 = u8 [a0 + 0x12]\n  1069: a4 = u8 [a0 + 0x13]\n  1072: a1 = a1 << 0x8\n  1075: a1 = a1 | a2\n  1078: a3 = a3 << 0x10\n  1081: a4 = a4 << 0x18\n  1084: a3 = a3 | a4\n  1087: a1 = a1 | a3\n  1090: a2 = u8 [a0 + 0x15]\n  1093: a3 = u8 [a0 + 0x14]\n  1096: a4 = u8 [a0 + 0x16]\n  1099: a5 = u8 [a0 + 0x17]\n  1102: a2 = a2 << 0x8\n  1105: a2 = a2 | a3\n  1108: a4 = a4 << 0x10\n  1111: a5 = a5 << 0x18\n  1114: a4 = a4 | a5\n  1117: a2 = a2 | a4\n  1120: a2 = a2 << 0x20\n  1123: a3 = a2 | a1\n  1126: a1 = u8 [a0 + 0x19]\n  1129: a2 = u8 [a0 + 0x18]\n  1132: a4 = u8 [a0 + 0x1a]\n  1135: a5 = u8 [a0 + 0x1b]\n  1138: a1 = a1 << 0x8\n  1141: a1 = a1 | a2\n  1144: a4 = a4 << 0x10\n  1147: a5 = a5 << 0x18\n  1150: a4 = a4 | a5\n  1153: a1 = a1 | a4\n  1156: a2 = u8 [a0 + 0x1d]\n  1159: a4 = u8 [a0 + 0x1c]\n  1162: a5 = u8 [a0 + 0x1e]\n  1165: a0 = u8 [a0 + 0x1f]\n  1168: a2 = a2 << 0x8\n  1171: a2 = a2 | a4\n  1174: a5 = a5 << 0x10\n  1177: a0 = a0 << 0x18\n  1180: a0 = a0 | a5\n  1183: a0 = a0 | a2\n  1186: a0 = a0 << 0x20\n  1189: ra = a0 | a1\n  1192: a2 = reverse ra\n  1194: u64 [sp + 0x18] = a3\n  1197: a1 = reverse a3\n  1199: u64 [sp + 0x20] = s1\n  1202: a4 = reverse s1\n  1204: u64 [sp + 0x28] = t2\n  1207: a5 = reverse t2\n  1209: a3 = a5 >u 0\n  1211: s1 = a4 >u 0\n  1213: s1 = a3 if a5 != 0\n  1216: a3 = a1 >u 0\n  1218: a0 = a2 <u 0x33\n  1221: a0 = a0 ^ 0x1\n  1224: a0 = a3 if a1 != 0\n  1227: a3 = a4 | a5\n  1230: a0 = s1 if a3 != 0\n  1233: s1 = u64 [sp + 0x30]\n  1236: jump @46 if a0 != 0\n      : @39 (gas: 15)\n  1240: a0 = a2 <u t1\n  1243: a2 = a1 ^ t0\n  1246: a1 = a1 <u t0\n  1249: a1 = a0 if a2 == 0\n  1252: a0 = u64 [sp + 0x58]\n  1255: t2 = t1\n  1257: t1 = t0\n  1259: t0 = a4 <u a0\n  1262: a2 = a5 ^ s1\n  1265: a3 = a5 <u s1\n  1268: a3 = t0 if a2 == 0\n  1271: a0 = a0 ^ a4\n  1274: a0 = a0 | a2\n  1277: a3 = a1 if a0 == 0\n  1280: jump @46 if a3 != 0\n      : @40 (gas: 5)\n  1284: a0 = u64 [sp + 0x58]\n  1287: a0 = t2 | a0\n  1290: a1 = t1 | s1\n  1293: a0 = a0 | a1\n  1296: jump @46 if a0 == 0\n      : @41 (gas: 7)\n  1300: a0 = u64 [sp + 0x28]\n  1303: a1 = u64 [sp + 0x18]\n  1306: a0 = a0 | a1\n  1309: a1 = u64 [sp + 0x20]\n  1312: a1 = a1 | ra\n  1315: a0 = a0 | a1\n  1318: jump @46 if a0 == 0\n      : @42 (gas: 16)\n  1322: u64 [sp + 0x60] = t2\n  1325: a0 = u64 [sp + 0x38]\n  1328: u64 [sp + 0x80] = a0\n  1332: u64 [sp + 0x68] = t1\n  1335: a0 = u64 [sp + 0x40]\n  1338: u64 [sp + 0x88] = a0\n  1342: a0 = u64 [sp + 0x58]\n  1345: u64 [sp + 0x70] = a0\n  1348: a0 = u64 [sp + 0x48]\n  1351: u64 [sp + 0x90] = a0\n  1355: u64 [sp + 0x78] = s1\n  1358: a0 = sp + 0x80\n  1362: a1 = sp + 0x60\n  1365: a2 = u64 [sp + 0x50]\n  1368: u64 [sp + 0x98] = a2\n  1372: ra = 18, jump @221\n      : @43 [@dyn 9] (gas: 3)\n  1377: a0 = 0x40\n  1380: a1 = 0x20\n  1383: ra = 20, jump @0\n      : @44 [@dyn 10] (gas: 100)\n  1388: a1 = u8 [a0 + 0x11]\n  1391: a2 = u8 [a0 + 0x10]\n  1394: a3 = u8 [a0 + 0x12]\n  1397: a4 = u8 [a0 + 0x13]\n  1400: a1 = a1 << 0x8\n  1403: a1 = a1 | a2\n  1406: a3 = a3 << 0x10\n  1409: a4 = a4 << 0x18\n  1412: a3 = a3 | a4\n  1415: a1 = a1 | a3\n  1418: a2 = u8 [a0 + 0x15]\n  1421: a3 = u8 [a0 + 0x14]\n  1424: a4 = u8 [a0 + 0x16]\n  1427: a5 = u8 [a0 + 0x17]\n  1430: a2 = a2 << 0x8\n  1433: a2 = a2 | a3\n  1436: a4 = a4 << 0x10\n  1439: a5 = a5 << 0x18\n  1442: a4 = a4 | a5\n  1445: a2 = a2 | a4\n  1448: a2 = a2 << 0x20\n  1451: t0 = a2 | a1\n  1454: a2 = u8 [a0 + 0x1]\n  1457: a3 = u8 [a0]\n  1459: a4 = u8 [a0 + 0x2]\n  1462: a5 = u8 [a0 + 0x3]\n  1465: a2 = a2 << 0x8\n  1468: a2 = a2 | a3\n  1471: a4 = a4 << 0x10\n  1474: a5 = a5 << 0x18\n  1477: a4 = a4 | a5\n  1480: a2 = a2 | a4\n  1483: a3 = u8 [a0 + 0x5]\n  1486: a4 = u8 [a0 + 0x4]\n  1489: a5 = u8 [a0 + 0x6]\n  1492: s1 = u8 [a0 + 0x7]\n  1495: a3 = a3 << 0x8\n  1498: a3 = a3 | a4\n  1501: a5 = a5 << 0x10\n  1504: s1 = s1 << 0x18\n  1507: a5 = a5 | s1\n  1510: a3 = a3 | a5\n  1513: a3 = a3 << 0x20\n  1516: a2 = a2 | a3\n  1519: a3 = u8 [a0 + 0x19]\n  1522: a4 = u8 [a0 + 0x18]\n  1525: a5 = u8 [a0 + 0x1a]\n  1528: s1 = u8 [a0 + 0x1b]\n  1531: a3 = a3 << 0x8\n  1534: a3 = a3 | a4\n  1537: a5 = a5 << 0x10\n  1540: s1 = s1 << 0x18\n  1543: a5 = a5 | s1\n  1546: a3 = a3 | a5\n  1549: a4 = u8 [a0 + 0x1d]\n  1552: a5 = u8 [a0 + 0x1c]\n  1555: s1 = u8 [a0 + 0x1e]\n  1558: a1 = u8 [a0 + 0x1f]\n  1561: a4 = a4 << 0x8\n  1564: a4 = a4 | a5\n  1567: s1 = s1 << 0x10\n  1570: a1 = a1 << 0x18\n  1573: a1 = a1 | s1\n  1576: a1 = a1 | a4\n  1579: a1 = a1 << 0x20\n  1582: a3 = a3 | a1\n  1585: a1 = u8 [a0 + 0x9]\n  1588: a4 = u8 [a0 + 0x8]\n  1591: a5 = u8 [a0 + 0xa]\n  1594: s1 = u8 [a0 + 0xb]\n  1597: a1 = a1 << 0x8\n  1600: a1 = a1 | a4\n  1603: a5 = a5 << 0x10\n  1606: s1 = s1 << 0x18\n  1609: a5 = a5 | s1\n  1612: a1 = a1 | a5\n  1615: a4 = u8 [a0 + 0xd]\n  1618: a5 = u8 [a0 + 0xc]\n  1621: s1 = u8 [a0 + 0xe]\n  1624: a0 = u8 [a0 + 0xf]\n  1627: a4 = a4 << 0x8\n  1630: a4 = a4 | a5\n  1633: s1 = s1 << 0x10\n  1636: a0 = a0 << 0x18\n  1639: a0 = a0 | s1\n  1642: a0 = a0 | a4\n  1645: a0 = a0 << 0x20\n  1648: a0 = a0 | a1\n  1651: a0 = reverse a0\n  1653: s1 = reverse a3\n  1655: a1 = reverse a2\n  1657: a2 = reverse t0\n  1659: a1 = a1 | a2\n  1662: a2 = s1 | a0\n  1665: a2 = a2 | a1\n  1668: a2 = a2 >> 0x20\n  1671: a0 = a0 | a1\n  1674: a0 = a0 << 0x20\n  1677: a0 = a0 | a2\n  1680: jump @48 if a0 == 0\n      : @45 (gas: 1)\n  1683: trap\n      : @46 (gas: 3)\n  1684: a0 = 0\n  1686: a1 = 0\n  1688: ra = 22, jump @0\n      : @47 [@dyn 11] (gas: 5)\n  1693: i32 a1 = a0 + 0\n  1695: a0 = 0x1\n  1698: a2 = 0\n  1700: ecalli 10 // 'seal_return'\n  1702: fallthrough\n      : @48 (gas: 4)\n  1703: i32 s1 = s1 + 0\n  1705: a0 = s1\n  1707: a1 = 0\n  1709: ra = 24, jump @0\n      : @49 [@dyn 12] (gas: 5)\n  1714: i32 a0 = a0 + 0\n  1716: a1 = 0\n  1718: a2 = 0\n  1720: ecalli 2 // 'call_data_copy'\n  1722: fallthrough\n      : @50 (gas: 2)\n  1723: a1 = i32 [0x20168]\n  1728: jump @52 if a1 == 0\n      : @51 (gas: 4)\n  1731: a0 = 0x30170\n  1736: i32 a0 = a0 + 0\n  1738: ecalli 11 // 'set_immutable_data'\n  1740: fallthrough\n      : @52 (gas: 3)\n  1741: a0 = s1\n  1743: a1 = 0\n  1745: ra = 26, jump @0\n      : @53 [@dyn 13] (gas: 6)\n  1750: i32 a1 = a0 + 0\n  1752: a0 = 0\n  1754: a2 = 0\n  1756: ra = 0x1c\n  1759: ecalli 10 // 'seal_return'\n  1761: fallthrough\n      : @54 [@dyn 14] (gas: 9)\n  1762: sp = sp + 0xffffffffffffffc0\n  1765: u64 [sp + 0x38] = ra\n  1768: u64 [sp + 0x30] = s0\n  1771: u64 [sp + 0x28] = s1\n  1774: s0 = sp + 0x40\n  1777: sp = sp & 0xffffffffffffffe0\n  1780: a0 = 0x40\n  1783: a1 = 0x20\n  1786: ra = 30, jump @0\n      : @55 [@dyn 15] (gas: 35)\n  1791: u8 [a0 + 31] = 0x80\n  1796: u8 [a0 + 30] = 0\n  1799: u8 [a0 + 29] = 0\n  1802: u8 [a0 + 28] = 0\n  1805: u8 [a0 + 27] = 0\n  1808: u8 [a0 + 26] = 0\n  1811: u8 [a0 + 25] = 0\n  1814: u8 [a0 + 24] = 0\n  1817: u8 [a0 + 23] = 0\n  1820: u8 [a0 + 22] = 0\n  1823: u8 [a0 + 21] = 0\n  1826: u8 [a0 + 20] = 0\n  1829: u8 [a0 + 19] = 0\n  1832: u8 [a0 + 18] = 0\n  1835: u8 [a0 + 17] = 0\n  1838: u8 [a0 + 16] = 0\n  1841: u8 [a0 + 15] = 0\n  1844: u8 [a0 + 14] = 0\n  1847: u8 [a0 + 13] = 0\n  1850: u8 [a0 + 12] = 0\n  1853: u8 [a0 + 11] = 0\n  1856: u8 [a0 + 10] = 0\n  1859: u8 [a0 + 9] = 0\n  1862: u8 [a0 + 8] = 0\n  1865: u8 [a0 + 7] = 0\n  1868: u8 [a0 + 3] = 0\n  1871: s1 = 0x20164\n  1876: u8 [a0 + 2] = 0\n  1879: u8 [a0 + 1] = 0\n  1882: u8 [a0 + 0] = 0\n  1884: a1 = i32 [0x20164]\n  1889: u8 [a0 + 6] = 0\n  1892: u8 [a0 + 5] = 0\n  1895: u8 [a0 + 4] = 0\n  1898: jump @107 if a1 <u 4\n      : @56 (gas: 5)\n  1903: i32 a0 = sp + 0\n  1905: a1 = 0\n  1907: ra = 0x20\n  1910: ecalli 3 // 'call_data_load'\n  1912: fallthrough\n      : @57 [@dyn 16] (gas: 2)\n  1913: a0 = i32 [sp + 0x1c]\n  1916: jump @64 if a0 <=s 3699659468\n      : @58 (gas: 1)\n  1923: jump @70 if a0 <=s 552242565\n      : @59 (gas: 3)\n  1931: a1 = 0x54741000\n  1937: a2 = 0x54741524\n  1943: jump @80 if a2 <s a0\n      : @60 (gas: 1)\n  1947: jump @97 if a0 == 552242566\n      : @61 (gas: 1)\n  1955: jump @102 if a0 == 794083182\n      : @62 (gas: 1)\n  1963: jump @106 if a0 != 873580572\n      : @63 (gas: 14)\n  1971: ra = 0x22\n  1974: sp = sp + 0xfffffffffffffec0\n  1978: u64 [sp + 0x138] = ra\n  1982: u64 [sp + 0x130] = s0\n  1986: u64 [sp + 0x128] = s1\n  1990: s0 = sp + 0x140\n  1994: sp = sp & 0xffffffffffffffe0\n  1997: u64 [sp + 280] = 0\n  2001: u64 [sp + 272] = 0\n  2005: u64 [sp + 264] = 0\n  2009: u64 [sp + 256] = 0\n  2013: i32 a0 = sp + 0x100\n  2017: ecalli 13 // 'value_transferred'\n  2019: jump @376\n      : @64 [@dyn 17] (gas: 1)\n  2022: jump @75 if a0 >s 3078354431\n      : @65 (gas: 2)\n  2029: a2 = 0xffffffffa0e67e2a\n  2035: jump @87 if a2 >=s a0\n      : @66 (gas: 1)\n  2039: jump @95 if a0 == 2699460139\n      : @67 (gas: 1)\n  2047: jump @100 if a0 == 2829837978\n      : @68 (gas: 1)\n  2055: jump @106 if a0 != 3051110595\n      : @69 (gas: 1)\n  2063: ra = 36, jump @627\n      : @70 [@dyn 18] (gas: 2)\n  2069: a2 = 0xffffffffee22610a\n  2075: jump @84 if a2 >=s a0\n      : @71 (gas: 1)\n  2079: jump @93 if a0 == 3995230475\n      : @72 (gas: 1)\n  2087: jump @94 if a0 == 39746599\n      : @73 (gas: 1)\n  2095: jump @106 if a0 != 389555673\n      : @74 (gas: 14)\n  2103: ra = 0x26\n  2106: sp = sp + 0xffffffffffffff20\n  2110: u64 [sp + 0xd8] = ra\n  2114: u64 [sp + 0xd0] = s0\n  2118: u64 [sp + 0xc8] = s1\n  2122: s0 = sp + 0xe0\n  2126: sp = sp & 0xffffffffffffffe0\n  2129: u64 [sp + 120] = 0\n  2132: u64 [sp + 112] = 0\n  2135: u64 [sp + 104] = 0\n  2138: u64 [sp + 96] = 0\n  2141: i32 a0 = sp + 0x60\n  2144: ecalli 13 // 'value_transferred'\n  2146: jump @316\n      : @75 [@dyn 19] (gas: 2)\n  2149: a2 = 0xffffffffc01a8c83\n  2155: jump @90 if a2 >=s a0\n      : @76 (gas: 1)\n  2159: jump @96 if a0 == 3222965380\n      : @77 (gas: 1)\n  2167: jump @101 if a0 == 3326243956\n      : @78 (gas: 1)\n  2175: jump @106 if a0 != 3612315357\n      : @79 (gas: 14)\n  2183: ra = 0x28\n  2186: sp = sp + 0xffffffffffffffc0\n  2189: u64 [sp + 0x38] = ra\n  2192: u64 [sp + 0x30] = s0\n  2195: u64 [sp + 0x28] = s1\n  2198: s0 = sp + 0x40\n  2201: sp = sp & 0xffffffffffffffe0\n  2204: u64 [sp + 24] = 0\n  2207: u64 [sp + 16] = 0\n  2210: u64 [sp + 8] = 0\n  2213: u64 [sp + 0] = 0\n  2215: i32 a0 = sp + 0\n  2217: ecalli 13 // 'value_transferred'\n  2219: jump @748\n      : @80 [@dyn 20] (gas: 2)\n  2223: i32 a1 = a1 + 0x525\n  2227: jump @98 if a0 == a1\n      : @81 (gas: 1)\n  2231: jump @103 if a0 == 1885719368\n      : @82 (gas: 1)\n  2239: jump @106 if a0 != 2017806247\n      : @83 (gas: 1)\n  2247: ra = 42, jump @441\n      : @84 [@dyn 21] (gas: 1)\n  2252: jump @99 if a0 == 3699659469\n      : @85 (gas: 1)\n  2260: jump @106 if a0 != 3791673062\n      : @86 (gas: 1)\n  2268: ra = 44, jump @780\n      : @87 [@dyn 22] (gas: 1)\n  2274: jump @104 if a0 == 2337395007\n      : @88 (gas: 1)\n  2282: jump @106 if a0 != 2597206210\n      : @89 (gas: 14)\n  2290: ra = 0x2e\n  2293: sp = sp + 0xfffffffffffffda0\n  2297: u64 [sp + 0x258] = ra\n  2301: u64 [sp + 0x250] = s0\n  2305: u64 [sp + 0x248] = s1\n  2309: s0 = sp + 0x260\n  2313: sp = sp & 0xffffffffffffffe0\n  2316: u64 [sp + 536] = 0\n  2320: u64 [sp + 528] = 0\n  2324: u64 [sp + 520] = 0\n  2328: u64 [sp + 512] = 0\n  2332: i32 a0 = sp + 0x200\n  2336: ecalli 13 // 'value_transferred'\n  2338: jump @532\n      : @90 [@dyn 23] (gas: 1)\n  2341: jump @105 if a0 == 3078354432\n      : @91 (gas: 1)\n  2349: jump @106 if a0 != 3125913311\n      : @92 (gas: 1)\n  2357: ra = 48, jump @652\n      : @93 [@dyn 24] (gas: 1)\n  2363: ra = 50, jump @793\n      : @94 [@dyn 25] (gas: 14)\n  2369: ra = 0x34\n  2372: sp = sp + 0xffffffffffffff40\n  2376: u64 [sp + 0xb8] = ra\n  2380: u64 [sp + 0xb0] = s0\n  2384: u64 [sp + 0xa8] = s1\n  2388: s0 = sp + 0xc0\n  2392: sp = sp & 0xffffffffffffffe0\n  2395: u64 [sp + 120] = 0\n  2398: u64 [sp + 112] = 0\n  2401: u64 [sp + 104] = 0\n  2404: u64 [sp + 96] = 0\n  2407: i32 a0 = sp + 0x60\n  2410: ecalli 13 // 'value_transferred'\n  2412: jump @289\n      : @95 [@dyn 26] (gas: 14)\n  2415: ra = 0x36\n  2418: sp = sp + 0xfffffffffffffec0\n  2422: u64 [sp + 0x138] = ra\n  2426: u64 [sp + 0x130] = s0\n  2430: u64 [sp + 0x128] = s1\n  2434: s0 = sp + 0x140\n  2438: sp = sp & 0xffffffffffffffe0\n  2441: u64 [sp + 280] = 0\n  2445: u64 [sp + 272] = 0\n  2449: u64 [sp + 264] = 0\n  2453: u64 [sp + 256] = 0\n  2457: i32 a0 = sp + 0x100\n  2461: ecalli 13 // 'value_transferred'\n  2463: jump @565\n      : @96 [@dyn 27] (gas: 1)\n  2467: ra = 56, jump @663\n      : @97 [@dyn 28] (gas: 1)\n  2473: ra = 58, jump @331\n      : @98 [@dyn 29] (gas: 14)\n  2478: ra = 0x3c\n  2481: sp = sp + 0xfffffffffffffec0\n  2485: u64 [sp + 0x138] = ra\n  2489: u64 [sp + 0x130] = s0\n  2493: u64 [sp + 0x128] = s1\n  2497: s0 = sp + 0x140\n  2501: sp = sp & 0xffffffffffffffe0\n  2504: u64 [sp + 280] = 0\n  2508: u64 [sp + 272] = 0\n  2512: u64 [sp + 264] = 0\n  2516: u64 [sp + 256] = 0\n  2520: i32 a0 = sp + 0x100\n  2524: ecalli 13 // 'value_transferred'\n  2526: jump @414\n      : @99 [@dyn 30] (gas: 14)\n  2529: ra = 0x3e\n  2532: sp = sp + 0xffffffffffffff60\n  2536: u64 [sp + 0x98] = ra\n  2540: u64 [sp + 0x90] = s0\n  2544: u64 [sp + 0x88] = s1\n  2548: s0 = sp + 0xa0\n  2552: sp = sp & 0xffffffffffffffe0\n  2555: u64 [sp + 56] = 0\n  2558: u64 [sp + 48] = 0\n  2561: u64 [sp + 40] = 0\n  2564: u64 [sp + 32] = 0\n  2567: i32 a0 = sp + 0x20\n  2570: ecalli 13 // 'value_transferred'\n  2572: jump @759\n      : @100 [@dyn 31] (gas: 14)\n  2576: ra = 0x40\n  2579: sp = sp + 0xfffffffffffffdc0\n  2583: u64 [sp + 0x238] = ra\n  2587: u64 [sp + 0x230] = s0\n  2591: u64 [sp + 0x228] = s1\n  2595: s0 = sp + 0x240\n  2599: sp = sp & 0xffffffffffffffe0\n  2602: u64 [sp + 536] = 0\n  2606: u64 [sp + 528] = 0\n  2610: u64 [sp + 520] = 0\n  2614: u64 [sp + 512] = 0\n  2618: i32 a0 = sp + 0x200\n  2622: ecalli 13 // 'value_transferred'\n  2624: jump @615\n      : @101 [@dyn 32] (gas: 1)\n  2628: ra = 66, jump @733\n      : @102 [@dyn 33] (gas: 14)\n  2634: ra = 0x44\n  2637: sp = sp + 0xffffffffffffff60\n  2641: u64 [sp + 0x98] = ra\n  2645: u64 [sp + 0x90] = s0\n  2649: u64 [sp + 0x88] = s1\n  2653: s0 = sp + 0xa0\n  2657: sp = sp & 0xffffffffffffffe0\n  2660: u64 [sp + 56] = 0\n  2663: u64 [sp + 48] = 0\n  2666: u64 [sp + 40] = 0\n  2669: u64 [sp + 32] = 0\n  2672: i32 a0 = sp + 0x20\n  2675: ecalli 13 // 'value_transferred'\n  2677: jump @343\n      : @103 [@dyn 34] (gas: 1)\n  2680: ra = 70, jump @425\n      : @104 [@dyn 35] (gas: 1)\n  2685: ra = 72, jump @453\n      : @105 [@dyn 36] (gas: 14)\n  2690: ra = 0x4a\n  2693: sp = sp + 0xffffffffffffff60\n  2697: u64 [sp + 0x98] = ra\n  2701: u64 [sp + 0x90] = s0\n  2705: u64 [sp + 0x88] = s1\n  2709: s0 = sp + 0xa0\n  2713: sp = sp & 0xffffffffffffffe0\n  2716: u64 [sp + 56] = 0\n  2719: u64 [sp + 48] = 0\n  2722: u64 [sp + 40] = 0\n  2725: u64 [sp + 32] = 0\n  2728: i32 a0 = sp + 0x20\n  2731: ecalli 13 // 'value_transferred'\n  2733: jump @642\n      : @106 [@dyn 37] (gas: 2)\n  2737: a1 = i32 [s1]\n  2739: fallthrough\n      : @107 (gas: 1)\n  2740: jump @109 if a1 == 0\n      : @108 (gas: 1)\n  2743: ra = 76, jump @123\n      : @109 [@dyn 38] (gas: 15)\n  2748: ra = 0x4e\n  2751: sp = sp + 0xffffffffffffff20\n  2755: u64 [sp + 0xd8] = ra\n  2759: u64 [sp + 0xd0] = s0\n  2763: u64 [sp + 0xc8] = s1\n  2767: s0 = sp + 0xe0\n  2771: sp = sp & 0xffffffffffffffe0\n  2774: s1 = sp\n  2776: u64 [s1 + 88] = 0\n  2779: u64 [s1 + 80] = 0\n  2782: u64 [s1 + 72] = 0\n  2785: u64 [s1 + 64] = 0\n  2788: i32 a0 = s1 + 0x40\n  2791: ecalli 13 // 'value_transferred'\n  2793: jump @1345\n      : @110 [@dyn 39] (gas: 3)\n  2797: a0 = 0\n  2799: a1 = 0\n  2801: ra = 80, jump @0\n      : @111 [@dyn 40] (gas: 6)\n  2806: i32 a1 = a0 + 0\n  2808: a0 = 0\n  2810: a2 = 0\n  2812: ra = 0x52\n  2815: ecalli 10 // 'seal_return'\n  2817: fallthrough\n      : @112 [@dyn 41] (gas: 7)\n  2818: sp = sp + 0xfffffffffffffff0\n  2821: u64 [sp + 0x8] = ra\n  2824: u64 [sp] = s0\n  2826: s0 = a0\n  2828: a0 = 0x40\n  2831: a1 = 0x20\n  2834: ra = 84, jump @0\n      : @113 [@dyn 42] (gas: 100)\n  2839: a1 = u8 [a0 + 0x1]\n  2842: a2 = u8 [a0]\n  2844: a3 = u8 [a0 + 0x2]\n  2847: a4 = u8 [a0 + 0x3]\n  2850: a1 = a1 << 0x8\n  2853: a1 = a1 | a2\n  2856: a3 = a3 << 0x10\n  2859: a4 = a4 << 0x18\n  2862: a3 = a3 | a4\n  2865: a1 = a1 | a3\n  2868: a2 = u8 [a0 + 0x5]\n  2871: a3 = u8 [a0 + 0x4]\n  2874: a4 = u8 [a0 + 0x6]\n  2877: a5 = u8 [a0 + 0x7]\n  2880: a2 = a2 << 0x8\n  2883: a2 = a2 | a3\n  2886: a4 = a4 << 0x10\n  2889: a5 = a5 << 0x18\n  2892: a4 = a4 | a5\n  2895: a2 = a2 | a4\n  2898: a2 = a2 << 0x20\n  2901: t0 = a2 | a1\n  2904: a2 = u8 [a0 + 0x9]\n  2907: a3 = u8 [a0 + 0x8]\n  2910: a4 = u8 [a0 + 0xa]\n  2913: a5 = u8 [a0 + 0xb]\n  2916: a2 = a2 << 0x8\n  2919: a2 = a2 | a3\n  2922: a4 = a4 << 0x10\n  2925: a5 = a5 << 0x18\n  2928: a4 = a4 | a5\n  2931: a2 = a2 | a4\n  2934: a3 = u8 [a0 + 0xd]\n  2937: a4 = u8 [a0 + 0xc]\n  2940: a5 = u8 [a0 + 0xe]\n  2943: a1 = u8 [a0 + 0xf]\n  2946: a3 = a3 << 0x8\n  2949: a3 = a3 | a4\n  2952: a5 = a5 << 0x10\n  2955: a1 = a1 << 0x18\n  2958: a1 = a1 | a5\n  2961: a1 = a1 | a3\n  2964: a1 = a1 << 0x20\n  2967: t1 = a1 | a2\n  2970: a1 = u8 [a0 + 0x11]\n  2973: a3 = u8 [a0 + 0x10]\n  2976: a4 = u8 [a0 + 0x12]\n  2979: a5 = u8 [a0 + 0x13]\n  2982: a1 = a1 << 0x8\n  2985: a1 = a1 | a3\n  2988: a4 = a4 << 0x10\n  2991: a5 = a5 << 0x18\n  2994: a4 = a4 | a5\n  2997: a1 = a1 | a4\n  3000: a3 = u8 [a0 + 0x15]\n  3003: a4 = u8 [a0 + 0x14]\n  3006: a5 = u8 [a0 + 0x16]\n  3009: a2 = u8 [a0 + 0x17]\n  3012: a3 = a3 << 0x8\n  3015: a3 = a3 | a4\n  3018: a5 = a5 << 0x10\n  3021: a2 = a2 << 0x18\n  3024: a2 = a2 | a5\n  3027: a2 = a2 | a3\n  3030: a2 = a2 << 0x20\n  3033: a3 = a2 | a1\n  3036: a1 = u8 [a0 + 0x19]\n  3039: a2 = u8 [a0 + 0x18]\n  3042: a4 = u8 [a0 + 0x1a]\n  3045: a5 = u8 [a0 + 0x1b]\n  3048: a1 = a1 << 0x8\n  3051: a1 = a1 | a2\n  3054: a4 = a4 << 0x10\n  3057: a5 = a5 << 0x18\n  3060: a4 = a4 | a5\n  3063: a1 = a1 | a4\n  3066: a2 = u8 [a0 + 0x1d]\n  3069: a4 = u8 [a0 + 0x1c]\n  3072: a5 = u8 [a0 + 0x1e]\n  3075: a0 = u8 [a0 + 0x1f]\n  3078: a2 = a2 << 0x8\n  3081: a2 = a2 | a4\n  3084: a5 = a5 << 0x10\n  3087: a0 = a0 << 0x18\n  3090: a0 = a0 | a5\n  3093: a0 = a0 | a2\n  3096: a0 = a0 << 0x20\n  3099: a0 = a0 | a1\n  3102: a0 = reverse a0\n  3104: a1 = reverse a3\n  3106: a2 = reverse t1\n  3108: a3 = reverse t0\n  3110: u64 [s0 + 0x18] = a3\n  3113: u64 [s0 + 0x10] = a2\n  3116: u64 [s0 + 0x8] = a1\n  3119: u64 [s0] = a0\n  3121: ra = u64 [sp + 0x8]\n  3124: s0 = u64 [sp]\n  3126: sp = sp + 0x10\n  3129: ret\n      : @114 (gas: 18)\n  3131: sp = sp + 0xffffffffffffff60\n  3135: u64 [sp + 0x98] = ra\n  3139: u64 [sp + 0x90] = s0\n  3143: u64 [sp + 0x88] = s1\n  3147: s0 = sp + 0xa0\n  3151: sp = sp & 0xfffffffffffffff0\n  3154: a2 = u64 [a1 + 0x18]\n  3157: u64 [sp + 0x30] = a2\n  3160: a2 = u64 [a1 + 0x10]\n  3163: u64 [sp + 0x28] = a2\n  3166: a2 = u64 [a1 + 0x8]\n  3169: u64 [sp + 0x20] = a2\n  3172: a1 = u64 [a1]\n  3174: u64 [sp + 0x18] = a1\n  3177: u64 [sp + 0x38] = a0\n  3180: a0 = 0x40\n  3183: a1 = 0x20\n  3186: ra = 86, jump @0\n      : @115 [@dyn 43] (gas: 130)\n  3191: a1 = u8 [a0 + 0x19]\n  3194: a2 = u8 [a0 + 0x18]\n  3197: a3 = u8 [a0 + 0x1a]\n  3200: a4 = u8 [a0 + 0x1b]\n  3203: a1 = a1 << 0x8\n  3206: a1 = a1 | a2\n  3209: a3 = a3 << 0x10\n  3212: a4 = a4 << 0x18\n  3215: a3 = a3 | a4\n  3218: a1 = a1 | a3\n  3221: a2 = u8 [a0 + 0x1d]\n  3224: a3 = u8 [a0 + 0x1c]\n  3227: a4 = u8 [a0 + 0x1e]\n  3230: a5 = u8 [a0 + 0x1f]\n  3233: a2 = a2 << 0x8\n  3236: a2 = a2 | a3\n  3239: a4 = a4 << 0x10\n  3242: a5 = a5 << 0x18\n  3245: a4 = a4 | a5\n  3248: a2 = a2 | a4\n  3251: a2 = a2 << 0x20\n  3254: t0 = a2 | a1\n  3257: a2 = u8 [a0 + 0x11]\n  3260: a3 = u8 [a0 + 0x10]\n  3263: a4 = u8 [a0 + 0x12]\n  3266: a5 = u8 [a0 + 0x13]\n  3269: a2 = a2 << 0x8\n  3272: a2 = a2 | a3\n  3275: a4 = a4 << 0x10\n  3278: a5 = a5 << 0x18\n  3281: a4 = a4 | a5\n  3284: a2 = a2 | a4\n  3287: a3 = u8 [a0 + 0x15]\n  3290: a4 = u8 [a0 + 0x14]\n  3293: a5 = u8 [a0 + 0x16]\n  3296: s1 = u8 [a0 + 0x17]\n  3299: a3 = a3 << 0x8\n  3302: a3 = a3 | a4\n  3305: a5 = a5 << 0x10\n  3308: s1 = s1 << 0x18\n  3311: a5 = a5 | s1\n  3314: a3 = a3 | a5\n  3317: a3 = a3 << 0x20\n  3320: a2 = a2 | a3\n  3323: a3 = u8 [a0 + 0x9]\n  3326: a4 = u8 [a0 + 0x8]\n  3329: a5 = u8 [a0 + 0xa]\n  3332: s1 = u8 [a0 + 0xb]\n  3335: a3 = a3 << 0x8\n  3338: a3 = a3 | a4\n  3341: a5 = a5 << 0x10\n  3344: s1 = s1 << 0x18\n  3347: a5 = a5 | s1\n  3350: a3 = a3 | a5\n  3353: a4 = u8 [a0 + 0xd]\n  3356: a5 = u8 [a0 + 0xc]\n  3359: s1 = u8 [a0 + 0xe]\n  3362: a1 = u8 [a0 + 0xf]\n  3365: a4 = a4 << 0x8\n  3368: a4 = a4 | a5\n  3371: s1 = s1 << 0x10\n  3374: a1 = a1 << 0x18\n  3377: a1 = a1 | s1\n  3380: a1 = a1 | a4\n  3383: a1 = a1 << 0x20\n  3386: a3 = a3 | a1\n  3389: a1 = u8 [a0 + 0x1]\n  3392: a4 = u8 [a0]\n  3394: a5 = u8 [a0 + 0x2]\n  3397: s1 = u8 [a0 + 0x3]\n  3400: a1 = a1 << 0x8\n  3403: a1 = a1 | a4\n  3406: a5 = a5 << 0x10\n  3409: s1 = s1 << 0x18\n  3412: a5 = a5 | s1\n  3415: a1 = a1 | a5\n  3418: a4 = u8 [a0 + 0x5]\n  3421: a5 = u8 [a0 + 0x4]\n  3424: s1 = u8 [a0 + 0x6]\n  3427: a0 = u8 [a0 + 0x7]\n  3430: a4 = a4 << 0x8\n  3433: a4 = a4 | a5\n  3436: s1 = s1 << 0x10\n  3439: a0 = a0 << 0x18\n  3442: a0 = a0 | s1\n  3445: a0 = a0 | a4\n  3448: a0 = a0 << 0x20\n  3451: a0 = a0 | a1\n  3454: t1 = reverse a0\n  3456: t2 = reverse a3\n  3458: s1 = reverse a2\n  3460: a5 = reverse t0\n  3462: a1 = u64 [sp + 0x18]\n  3465: a0 = a1 + 0x1f\n  3468: a1 = a0 <u a1\n  3471: a3 = u64 [sp + 0x20]\n  3474: a2 = a3 + a1\n  3477: a3 = a2 <u a3\n  3480: a3 = a1 if a1 == 0\n  3483: a1 = u64 [sp + 0x28]\n  3486: a3 = a3 + a1\n  3489: a1 = a3 <u a1\n  3492: a4 = u64 [sp + 0x30]\n  3495: a1 = a1 + a4\n  3498: a0 = a0 & 0xffffffffffffffe0\n  3501: a0 = a0 + a5\n  3504: u64 [sp + 0x28] = a5\n  3507: u64 [sp + 0x10] = a0\n  3510: a4 = a0 <u a5\n  3513: a2 = a2 + s1\n  3516: a5 = a2 + a4\n  3519: a2 = a5 ^ s1\n  3522: u64 [sp + 0x30] = s1\n  3525: a0 = a5 <u s1\n  3528: a0 = a4 if a2 == 0\n  3531: a3 = a3 + t2\n  3534: a4 = a3 + a0\n  3537: s1 = a4 <u a3\n  3540: a2 = a3 <u t2\n  3543: a1 = a1 + t1\n  3546: a1 = a1 + a2\n  3549: s1 = s1 + a1\n  3552: a1 = a4 >u 0\n  3554: a2 = s1 >u 0\n  3556: a2 = a1 if s1 == 0\n  3559: a1 = a4 | s1\n  3562: u64 [sp + 0x8] = a5\n  3565: a3 = a5 >u 0\n  3567: a3 = a2 if a1 != 0\n  3570: jump @119 if a3 != 0\n      : @116 (gas: 8)\n  3574: a1 = a4 <u t2\n  3577: a2 = s1 ^ t1\n  3580: a3 = s1 <u t1\n  3583: a3 = a1 if a2 == 0\n  3586: a1 = a4 ^ t2\n  3589: a1 = a1 | a2\n  3592: a0 = a3 if a1 != 0\n  3595: jump @119 if a0 != 0\n      : @117 (gas: 6)\n  3599: a0 = 0x40\n  3602: a1 = 0x20\n  3605: u64 [sp + 0x20] = t2\n  3608: u64 [sp + 0x18] = t1\n  3611: u64 [sp] = a4\n  3613: ra = 88, jump @0\n      : @118 [@dyn 44] (gas: 82)\n  3618: a1 = reverse s1\n  3620: a2 = u64 [sp]\n  3622: a2 = reverse a2\n  3624: a3 = u64 [sp + 0x8]\n  3627: a3 = reverse a3\n  3629: a4 = u64 [sp + 0x10]\n  3632: a4 = reverse a4\n  3634: u8 [a0 + 0x18] = a4\n  3637: a5 = a4 >> 0x38\n  3640: u8 [a0 + 0x1f] = a5\n  3643: a5 = a4 >> 0x30\n  3646: u8 [a0 + 0x1e] = a5\n  3649: a5 = a4 >> 0x28\n  3652: u8 [a0 + 0x1d] = a5\n  3655: a5 = a4 >> 0x20\n  3658: u8 [a0 + 0x1c] = a5\n  3661: a5 = a4 >> 0x18\n  3664: u8 [a0 + 0x1b] = a5\n  3667: a5 = a4 >> 0x10\n  3670: u8 [a0 + 0x1a] = a5\n  3673: a4 = a4 >> 0x8\n  3676: u8 [a0 + 0x19] = a4\n  3679: u8 [a0 + 0x10] = a3\n  3682: a4 = a3 >> 0x38\n  3685: u8 [a0 + 0x17] = a4\n  3688: a4 = a3 >> 0x30\n  3691: u8 [a0 + 0x16] = a4\n  3694: a4 = a3 >> 0x28\n  3697: u8 [a0 + 0x15] = a4\n  3700: a4 = a3 >> 0x20\n  3703: u8 [a0 + 0x14] = a4\n  3706: a4 = a3 >> 0x18\n  3709: u8 [a0 + 0x13] = a4\n  3712: a4 = a3 >> 0x10\n  3715: u8 [a0 + 0x12] = a4\n  3718: a3 = a3 >> 0x8\n  3721: u8 [a0 + 0x11] = a3\n  3724: u8 [a0 + 0x8] = a2\n  3727: a3 = a2 >> 0x38\n  3730: u8 [a0 + 0xf] = a3\n  3733: a3 = a2 >> 0x30\n  3736: u8 [a0 + 0xe] = a3\n  3739: a3 = a2 >> 0x28\n  3742: u8 [a0 + 0xd] = a3\n  3745: a3 = a2 >> 0x20\n  3748: u8 [a0 + 0xc] = a3\n  3751: a3 = a2 >> 0x18\n  3754: u8 [a0 + 0xb] = a3\n  3757: a3 = a2 >> 0x10\n  3760: u8 [a0 + 0xa] = a3\n  3763: a2 = a2 >> 0x8\n  3766: u8 [a0 + 0x9] = a2\n  3769: u8 [a0] = a1\n  3771: a2 = a1 >> 0x38\n  3774: u8 [a0 + 0x7] = a2\n  3777: a2 = a1 >> 0x30\n  3780: u8 [a0 + 0x6] = a2\n  3783: a2 = a1 >> 0x28\n  3786: u8 [a0 + 0x5] = a2\n  3789: a2 = a1 >> 0x20\n  3792: u8 [a0 + 0x4] = a2\n  3795: a2 = a1 >> 0x18\n  3798: u8 [a0 + 0x3] = a2\n  3801: a2 = a1 >> 0x10\n  3804: u8 [a0 + 0x2] = a2\n  3807: a1 = a1 >> 0x8\n  3810: u8 [a0 + 0x1] = a1\n  3813: a0 = u64 [sp + 0x38]\n  3816: a1 = u64 [sp + 0x28]\n  3819: u64 [a0] = a1\n  3821: a1 = u64 [sp + 0x18]\n  3824: u64 [a0 + 0x18] = a1\n  3827: a1 = u64 [sp + 0x30]\n  3830: u64 [a0 + 0x8] = a1\n  3833: a1 = u64 [sp + 0x20]\n  3836: u64 [a0 + 0x10] = a1\n  3839: sp = s0 + 0xffffffffffffff60\n  3843: ra = u64 [sp + 0x98]\n  3847: s0 = u64 [sp + 0x90]\n  3851: s1 = u64 [sp + 0x88]\n  3855: sp = sp + 0xa0\n  3859: ret\n      : @119 (gas: 8)\n  3861: u64 [sp + 112] = 0\n  3864: u64 [sp + 104] = 0\n  3867: u64 [sp + 96] = 0\n  3870: a0 = 0x4e487b7100000000\n  3880: a1 = sp + 0x60\n  3883: u64 [sp + 0x78] = a0\n  3886: a0 = 0\n  3888: ra = 90, jump @23\n      : @120 [@dyn 45] (gas: 7)\n  3893: u64 [sp + 88] = 0\n  3896: u64 [sp + 80] = 0\n  3899: u64 [sp + 64] = 0x41\n  3903: a0 = 0x4\n  3906: a1 = sp + 0x40\n  3909: u64 [sp + 72] = 0\n  3912: ra = 92, jump @23\n      : @121 [@dyn 46] (gas: 3)\n  3917: a1 = 0x24\n  3920: a0 = 0\n  3922: ra = 94, jump @0\n      : @122 [@dyn 47] (gas: 6)\n  3927: i32 a1 = a0 + 0\n  3929: a0 = 0x1\n  3932: a2 = 0x24\n  3935: ra = 0x60\n  3938: ecalli 10 // 'seal_return'\n  3940: fallthrough\n      : @123 [@dyn 48] (gas: 5)\n  3941: sp = sp + 0xfffffffffffffff8\n  3944: u64 [sp] = ra\n  3946: a0 = 0\n  3948: a1 = 0\n  3950: ra = 98, jump @0\n      : @124 [@dyn 49] (gas: 6)\n  3955: i32 a1 = a0 + 0\n  3957: a0 = 0x1\n  3960: a2 = 0\n  3962: ra = 0x64\n  3965: ecalli 10 // 'seal_return'\n  3967: fallthrough\n      : @125 [@dyn 50] (gas: 7)\n  3968: a4 = u64 [a1 + 0x18]\n  3971: a3 = u64 [a1 + 0x10]\n  3974: a2 = u64 [a1 + 0x8]\n  3977: t0 = a3 | a4\n  3980: a5 = a2 <u 0x1\n  3983: a5 = 0 if t0 != 0\n  3985: jump @127 if a5 == 0\n      : @126 (gas: 24)\n  3988: a1 = u64 [a1]\n  3990: a5 = a3 >> 0x3b\n  3993: a4 = a4 << 0x5\n  3996: t0 = a4 | a5\n  3999: a5 = a2 >> 0x3b\n  4002: a3 = a3 << 0x5\n  4005: a3 = a3 | a5\n  4008: a5 = a1 >> 0x3b\n  4011: a2 = a2 << 0x5\n  4014: a2 = a2 | a5\n  4017: a1 = a1 << 0x5\n  4020: a5 = a1 + 0x20\n  4023: a1 = a5 <u a1\n  4026: a4 = a2 + a1\n  4029: a2 = a4 <u a2\n  4032: a2 = a1 if a1 == 0\n  4035: a2 = a2 + a3\n  4038: a1 = a2 <u a3\n  4041: a1 = a1 + t0\n  4044: u64 [a0] = a5\n  4046: u64 [a0 + 0x8] = a4\n  4049: u64 [a0 + 0x10] = a2\n  4052: u64 [a0 + 0x18] = a1\n  4055: ret\n      : @127 (gas: 13)\n  4057: sp = sp + 0xffffffffffffffb0\n  4060: u64 [sp + 0x48] = ra\n  4063: u64 [sp + 0x40] = s0\n  4066: s0 = sp + 0x50\n  4069: sp = sp & 0xfffffffffffffff0\n  4072: u64 [sp + 48] = 0\n  4075: u64 [sp + 40] = 0\n  4078: u64 [sp + 32] = 0\n  4081: a0 = 0x4e487b7100000000\n  4091: a1 = sp + 0x20\n  4094: u64 [sp + 0x38] = a0\n  4097: a0 = 0\n  4099: ra = 102, jump @23\n      : @128 [@dyn 51] (gas: 7)\n  4104: u64 [sp + 24] = 0\n  4107: u64 [sp + 16] = 0\n  4110: u64 [sp + 0] = 0x41\n  4113: a0 = 0x4\n  4116: a1 = sp\n  4118: u64 [sp + 8] = 0\n  4121: ra = 104, jump @23\n      : @129 [@dyn 52] (gas: 3)\n  4126: a1 = 0x24\n  4129: a0 = 0\n  4131: ra = 106, jump @0\n      : @130 [@dyn 53] (gas: 6)\n  4136: i32 a1 = a0 + 0\n  4138: a0 = 0x1\n  4141: a2 = 0x24\n  4144: ra = 0x6c\n  4147: ecalli 10 // 'seal_return'\n  4149: fallthrough\n      : @131 [@dyn 54] (gas: 8)\n  4150: a2 = u32 [a1 + 0x10]\n  4153: a3 = u64 [a1 + 0x8]\n  4156: a1 = u64 [a1]\n  4158: u64 [a0 + 24] = 0\n  4161: u64 [a0 + 0x10] = a2\n  4164: u64 [a0 + 0x8] = a3\n  4167: u64 [a0] = a1\n  4169: ret\n      : @132 (gas: 14)\n  4171: sp = sp + 0xfffffffffffffeb0\n  4175: u64 [sp + 0x148] = ra\n  4179: u64 [sp + 0x140] = s0\n  4183: u64 [sp + 0x138] = s1\n  4187: s0 = sp + 0x150\n  4191: sp = sp & 0xfffffffffffffff0\n  4194: t1 = u64 [a2 + 0x18]\n  4197: a4 = u64 [a2 + 0x10]\n  4200: s1 = u64 [a2 + 0x8]\n  4203: t0 = a4 | t1\n  4206: a5 = s1 <u 0x1\n  4209: a5 = 0 if t0 != 0\n  4211: u64 [sp] = a0\n  4213: jump @149 if a5 == 0\n      : @133 (gas: 50)\n  4217: a5 = u64 [a2]\n  4219: a0 = a4 >> 0x3b\n  4222: u64 [sp + 0x88] = t1\n  4226: a2 = t1 << 0x5\n  4229: t0 = a2 | a0\n  4232: a0 = s1 >> 0x3b\n  4235: u64 [sp + 0x80] = a4\n  4239: a2 = a4 << 0x5\n  4242: a0 = a0 | a2\n  4245: a2 = a5 >> 0x3b\n  4248: u64 [sp + 0x78] = s1\n  4251: s1 = s1 << 0x5\n  4254: a2 = a2 | s1\n  4257: u64 [sp + 0x70] = a5\n  4260: a5 = a5 << 0x5\n  4263: t1 = a5 + 0x20\n  4266: u64 [sp + 0x28] = a5\n  4269: a4 = t1 <u a5\n  4272: s1 = a2 + a4\n  4275: u64 [sp + 0x48] = a2\n  4278: a5 = s1 <u a2\n  4281: a5 = a4 if a4 == 0\n  4284: a2 = u64 [a3 + 0x18]\n  4287: u64 [sp + 0x40] = a2\n  4290: a2 = u64 [a3 + 0x10]\n  4293: u64 [sp + 0x58] = a2\n  4296: a2 = u64 [a3 + 0x8]\n  4299: u64 [sp + 0x30] = a2\n  4302: a2 = u64 [a3]\n  4304: u64 [sp + 0x38] = a2\n  4307: a2 = u64 [a1 + 0x18]\n  4310: u64 [sp + 0xa0] = a2\n  4314: a2 = u64 [a1 + 0x10]\n  4317: u64 [sp + 0x98] = a2\n  4321: a2 = u64 [a1 + 0x8]\n  4324: u64 [sp + 0x90] = a2\n  4328: a1 = u64 [a1]\n  4330: u64 [sp + 0xa8] = a1\n  4334: a5 = a5 + a0\n  4337: u64 [sp + 0x60] = a0\n  4340: a1 = a5 <u a0\n  4343: u64 [sp + 0x68] = t0\n  4346: a2 = t0 + a1\n  4349: u64 [sp + 0xf0] = t1\n  4353: u64 [sp + 0xf8] = s1\n  4357: u64 [sp + 0x100] = a5\n  4361: a0 = sp + 0x110\n  4365: a1 = sp + 0xf0\n  4369: u64 [sp + 0x108] = a2\n  4373: ra = 110, jump @114\n      : @134 [@dyn 55] (gas: 15)\n  4378: a0 = u64 [sp + 0x128]\n  4382: a2 = u64 [sp + 0x120]\n  4386: a1 = u64 [sp + 0x118]\n  4390: a3 = u64 [sp + 0x110]\n  4394: u64 [sp + 0x20] = a0\n  4397: u64 [sp + 0x10] = a1\n  4400: a0 = a0 | a1\n  4403: a1 = a3 | a2\n  4406: a1 = a1 | a0\n  4409: a1 = a1 >> 0x20\n  4412: u64 [sp + 0x18] = a2\n  4415: a0 = a0 | a2\n  4418: a0 = a0 << 0x20\n  4421: a0 = a0 | a1\n  4424: jump @146 if a0 != 0\n      : @135 (gas: 4)\n  4428: u64 [sp + 0x8] = a3\n  4431: i32 a0 = a3 + 0\n  4433: a1 = 0x20\n  4436: ra = 112, jump @0\n      : @136 [@dyn 56] (gas: 110)\n  4441: a1 = u64 [sp + 0x28]\n  4444: a5 = u64 [sp + 0xa8]\n  4448: a5 = a5 + a1\n  4451: a1 = a5 <u a1\n  4454: t1 = u64 [sp + 0x90]\n  4458: a3 = u64 [sp + 0x48]\n  4461: a2 = a3 + t1\n  4464: a4 = a2 + a1\n  4467: s1 = a4 ^ a3\n  4470: a2 = a4 <u a3\n  4473: a2 = a1 if s1 == 0\n  4476: a1 = u64 [sp + 0x30]\n  4479: a3 = a4 ^ a1\n  4482: u64 [sp + 0x48] = a4\n  4485: a4 = a1 <u a4\n  4488: u64 [sp + 0x50] = a5\n  4491: a1 = u64 [sp + 0x38]\n  4494: a1 = a1 <u a5\n  4497: a1 = a4 if a3 != 0\n  4500: t2 = u64 [sp + 0x98]\n  4504: a4 = u64 [sp + 0x60]\n  4507: a3 = a4 + t2\n  4510: a4 = a3 <u a4\n  4513: t0 = u64 [sp + 0xa0]\n  4517: a5 = u64 [sp + 0x68]\n  4520: a5 = a5 + t0\n  4523: a4 = a4 + a5\n  4526: a5 = a3 + a2\n  4529: a2 = a5 <u a3\n  4532: s1 = a4 + a2\n  4535: a3 = u64 [sp + 0x40]\n  4538: a2 = s1 ^ a3\n  4541: a3 = a3 <u s1\n  4544: ra = u64 [sp + 0x58]\n  4547: a4 = ra <u a5\n  4550: a3 = a4 if a2 == 0\n  4553: a4 = a5 ^ ra\n  4556: a2 = a2 | a4\n  4559: a1 = a3 if a2 != 0\n  4562: a2 = u64 [sp + 0x70]\n  4565: a2 = reverse a2\n  4567: a3 = a2 >> 0x38\n  4570: u8 [a0 + 0x1f] = a3\n  4573: a3 = a2 >> 0x30\n  4576: u8 [a0 + 0x1e] = a3\n  4579: a3 = a2 >> 0x28\n  4582: u8 [a0 + 0x1d] = a3\n  4585: a3 = a2 >> 0x20\n  4588: u8 [a0 + 0x1c] = a3\n  4591: a3 = a2 >> 0x18\n  4594: u8 [a0 + 0x1b] = a3\n  4597: a3 = a2 >> 0x10\n  4600: u8 [a0 + 0x1a] = a3\n  4603: a3 = a2 >> 0x8\n  4606: u8 [a0 + 0x19] = a3\n  4609: a3 = u64 [sp + 0x78]\n  4612: a3 = reverse a3\n  4614: u8 [a0 + 0x18] = a2\n  4617: a2 = a3 >> 0x38\n  4620: u8 [a0 + 0x17] = a2\n  4623: a2 = a3 >> 0x30\n  4626: u8 [a0 + 0x16] = a2\n  4629: a2 = a3 >> 0x28\n  4632: u8 [a0 + 0x15] = a2\n  4635: a2 = a3 >> 0x20\n  4638: u8 [a0 + 0x14] = a2\n  4641: a2 = a3 >> 0x18\n  4644: u8 [a0 + 0x13] = a2\n  4647: a2 = a3 >> 0x10\n  4650: u8 [a0 + 0x12] = a2\n  4653: a2 = u64 [sp + 0x80]\n  4657: a2 = reverse a2\n  4659: u8 [a0 + 0x10] = a3\n  4662: a3 = a3 >> 0x8\n  4665: u8 [a0 + 0x11] = a3\n  4668: a3 = a2 >> 0x38\n  4671: u8 [a0 + 0xf] = a3\n  4674: a3 = a2 >> 0x30\n  4677: u8 [a0 + 0xe] = a3\n  4680: a3 = a2 >> 0x28\n  4683: u8 [a0 + 0xd] = a3\n  4686: a3 = a2 >> 0x20\n  4689: u8 [a0 + 0xc] = a3\n  4692: a3 = a2 >> 0x18\n  4695: u8 [a0 + 0xb] = a3\n  4698: a3 = a2 >> 0x10\n  4701: u8 [a0 + 0xa] = a3\n  4704: a3 = u64 [sp + 0x88]\n  4708: a3 = reverse a3\n  4710: u8 [a0 + 0x8] = a2\n  4713: a2 = a2 >> 0x8\n  4716: u8 [a0 + 0x9] = a2\n  4719: a2 = a3 >> 0x38\n  4722: u8 [a0 + 0x7] = a2\n  4725: a2 = a3 >> 0x30\n  4728: u8 [a0 + 0x6] = a2\n  4731: a2 = a3 >> 0x28\n  4734: u8 [a0 + 0x5] = a2\n  4737: a2 = a3 >> 0x20\n  4740: u8 [a0 + 0x4] = a2\n  4743: a2 = a3 >> 0x18\n  4746: u8 [a0 + 0x3] = a2\n  4749: a2 = a3 >> 0x10\n  4752: u8 [a0 + 0x2] = a2\n  4755: u8 [a0] = a3\n  4757: a3 = a3 >> 0x8\n  4760: u8 [a0 + 0x1] = a3\n  4763: a4 = t0\n  4765: t0 = u64 [sp + 0xa8]\n  4769: jump @147 if a1 != 0\n      : @137 (gas: 16)\n  4773: a0 = u64 [sp + 0x50]\n  4776: a0 = t0 <u a0\n  4779: a2 = u64 [sp + 0x48]\n  4782: a1 = a2 ^ t1\n  4785: a2 = t1 <u a2\n  4788: a2 = a0 if a1 == 0\n  4791: a0 = t2 <u a5\n  4794: a1 = s1 ^ a4\n  4797: u64 [sp + 0x38] = s1\n  4800: a3 = a4 <u s1\n  4803: a3 = a0 if a1 == 0\n  4806: u64 [sp + 0x40] = a5\n  4809: a0 = a5 ^ t2\n  4812: a0 = a0 | a1\n  4815: a3 = a2 if a0 == 0\n  4818: jump @145 if a3 == 0\n      : @138 (gas: 10)\n  4822: a0 = 0x100000000\n  4832: u64 [sp + 0x30] = a0\n  4835: a0 = 0xffffffe0\n  4845: u64 [sp + 0x28] = a0\n  4848: a2 = u64 [sp + 0x8]\n  4851: a5 = u64 [sp + 0x10]\n  4854: a1 = u64 [sp + 0x18]\n  4857: a0 = u64 [sp + 0x20]\n  4860: u64 [sp + 0x88] = a0\n  4864: fallthrough\n      : @139 (gas: 14)\n  4865: u64 [sp + 0x70] = a5\n  4868: u64 [sp + 0x78] = a2\n  4871: u64 [sp + 0x80] = a1\n  4875: a0 = t0 | t2\n  4878: u64 [sp + 0xa0] = a4\n  4882: u64 [sp + 0x90] = t1\n  4886: a1 = t1 | a4\n  4889: a0 = a0 | a1\n  4892: a0 = a0 >> 0x20\n  4895: u64 [sp + 0x98] = t2\n  4899: a1 = a1 | t2\n  4902: a1 = a1 << 0x20\n  4905: a0 = a0 | a1\n  4908: jump @146 if a0 != 0\n      : @140 (gas: 4)\n  4912: u64 [sp + 0xa8] = t0\n  4916: i32 a0 = t0 + 0\n  4918: a1 = 0x20\n  4921: ra = 114, jump @0\n      : @141 [@dyn 57] (gas: 54)\n  4926: a1 = u8 [a0 + 0x9]\n  4929: a2 = u8 [a0 + 0x8]\n  4932: a3 = u8 [a0 + 0xa]\n  4935: a4 = u8 [a0 + 0xb]\n  4938: a1 = a1 << 0x8\n  4941: a1 = a1 | a2\n  4944: a3 = a3 << 0x10\n  4947: a4 = a4 << 0x18\n  4950: a3 = a3 | a4\n  4953: a1 = a1 | a3\n  4956: a2 = u8 [a0 + 0xd]\n  4959: a3 = u8 [a0 + 0xc]\n  4962: a4 = u8 [a0 + 0xe]\n  4965: a5 = u8 [a0 + 0xf]\n  4968: a2 = a2 << 0x8\n  4971: a2 = a2 | a3\n  4974: a4 = a4 << 0x10\n  4977: a5 = a5 << 0x18\n  4980: a4 = a4 | a5\n  4983: a2 = a2 | a4\n  4986: a2 = a2 << 0x20\n  4989: s1 = a2 | a1\n  4992: a1 = u8 [a0 + 0x1]\n  4995: a2 = u8 [a0]\n  4997: a3 = u8 [a0 + 0x2]\n  5000: a4 = u8 [a0 + 0x3]\n  5003: a1 = a1 << 0x8\n  5006: a1 = a1 | a2\n  5009: a3 = a3 << 0x10\n  5012: a4 = a4 << 0x18\n  5015: a3 = a3 | a4\n  5018: a1 = a1 | a3\n  5021: a2 = u8 [a0 + 0x5]\n  5024: a3 = u8 [a0 + 0x4]\n  5027: a4 = u8 [a0 + 0x6]\n  5030: a5 = u8 [a0 + 0x7]\n  5033: a2 = a2 << 0x8\n  5036: a2 = a2 | a3\n  5039: a4 = a4 << 0x10\n  5042: a5 = a5 << 0x18\n  5045: a4 = a4 | a5\n  5048: a2 = a2 | a4\n  5051: a2 = a2 << 0x20\n  5054: a4 = a2 | a1\n  5057: a1 = reverse a4\n  5059: a2 = reverse s1\n  5061: a3 = u64 [sp + 0x30]\n  5064: a3 = a3 ^ a2\n  5067: a3 = a3 | a1\n  5070: a2 = a2 >> 0x20\n  5073: a2 = a2 <u 0x1\n  5076: a2 = 0 if a1 != 0\n  5078: a2 = 0 if a3 == 0\n  5080: jump @147 if a2 == 0\n      : @142 (gas: 12)\n  5084: u64 [sp + 0x60] = a4\n  5087: u64 [sp + 0x68] = s1\n  5090: a3 = u64 [sp + 0x88]\n  5094: a4 = u64 [sp + 0x80]\n  5098: a1 = a4 | a3\n  5101: a2 = u64 [sp + 0x28]\n  5104: a5 = u64 [sp + 0x78]\n  5107: a2 = a5 <u a2\n  5110: s1 = u64 [sp + 0x70]\n  5113: a2 = 0 if s1 != 0\n  5115: a2 = 0 if a1 != 0\n  5117: jump @146 if a2 == 0\n      : @143 (gas: 61)\n  5121: a2 = a5 + 0x20\n  5124: a1 = a2 <u a5\n  5127: t0 = a2\n  5129: u64 [sp + 0x58] = a2\n  5132: a2 = s1 + a1\n  5135: u64 [sp + 0x78] = a2\n  5138: a2 = a2 <u s1\n  5141: a2 = a1 if a1 == 0\n  5144: a2 = a2 + a4\n  5147: u64 [sp + 0x70] = a2\n  5150: a1 = a2 <u a4\n  5153: a3 = a3 + a1\n  5156: u64 [sp + 0x88] = a3\n  5160: a1 = u8 [a0 + 0x19]\n  5163: a2 = u8 [a0 + 0x18]\n  5166: a3 = u8 [a0 + 0x1a]\n  5169: a4 = u8 [a0 + 0x1b]\n  5172: a1 = a1 << 0x8\n  5175: a1 = a1 | a2\n  5178: a3 = a3 << 0x10\n  5181: a4 = a4 << 0x18\n  5184: a3 = a3 | a4\n  5187: a1 = a1 | a3\n  5190: a2 = u8 [a0 + 0x1d]\n  5193: a3 = u8 [a0 + 0x1c]\n  5196: a4 = u8 [a0 + 0x1e]\n  5199: a5 = u8 [a0 + 0x1f]\n  5202: a2 = a2 << 0x8\n  5205: a2 = a2 | a3\n  5208: a4 = a4 << 0x10\n  5211: a5 = a5 << 0x18\n  5214: a4 = a4 | a5\n  5217: a2 = a2 | a4\n  5220: a2 = a2 << 0x20\n  5223: a1 = a1 | a2\n  5226: u64 [sp + 0x80] = a1\n  5230: a1 = u8 [a0 + 0x11]\n  5233: a2 = u8 [a0 + 0x10]\n  5236: a3 = u8 [a0 + 0x12]\n  5239: a4 = u8 [a0 + 0x13]\n  5242: a1 = a1 << 0x8\n  5245: a1 = a1 | a2\n  5248: a3 = a3 << 0x10\n  5251: a4 = a4 << 0x18\n  5254: a3 = a3 | a4\n  5257: a1 = a1 | a3\n  5260: a2 = u8 [a0 + 0x15]\n  5263: a3 = u8 [a0 + 0x14]\n  5266: a4 = u8 [a0 + 0x16]\n  5269: a0 = u8 [a0 + 0x17]\n  5272: a2 = a2 << 0x8\n  5275: a2 = a2 | a3\n  5278: a4 = a4 << 0x10\n  5281: a0 = a0 << 0x18\n  5284: a0 = a0 | a4\n  5287: a0 = a0 | a2\n  5290: a0 = a0 << 0x20\n  5293: s1 = a0 | a1\n  5296: i32 a0 = t0 + 0\n  5298: a1 = 0x20\n  5301: ra = 116, jump @0\n      : @144 [@dyn 58] (gas: 94)\n  5306: a1 = u64 [sp + 0xa8]\n  5310: t0 = a1 + 0x20\n  5313: a4 = t0 <u a1\n  5316: a2 = u64 [sp + 0x90]\n  5320: t1 = a2 + a4\n  5323: a1 = u64 [sp + 0x50]\n  5326: a5 = t0 <u a1\n  5329: a3 = u64 [sp + 0x48]\n  5332: a1 = t1 ^ a3\n  5335: a3 = t1 <u a3\n  5338: a3 = a5 if a1 == 0\n  5341: a1 = t1 <u a2\n  5344: a1 = a4 if a4 == 0\n  5347: a2 = u64 [sp + 0x98]\n  5351: t2 = a2 + a1\n  5354: a1 = t2 <u a2\n  5357: a4 = u64 [sp + 0xa0]\n  5361: a4 = a4 + a1\n  5364: ra = u64 [sp + 0x40]\n  5367: a1 = t2 <u ra\n  5370: a2 = u64 [sp + 0x38]\n  5373: a5 = a4 ^ a2\n  5376: a2 = a4 <u a2\n  5379: a2 = a1 if a5 == 0\n  5382: a1 = t2 ^ ra\n  5385: a1 = a1 | a5\n  5388: a3 = a2 if a1 != 0\n  5391: a2 = u64 [sp + 0x68]\n  5394: a1 = a2 >> 0x38\n  5397: u8 [a0 + 0xf] = a1\n  5400: a1 = a2 >> 0x30\n  5403: u8 [a0 + 0xe] = a1\n  5406: a1 = a2 >> 0x28\n  5409: u8 [a0 + 0xd] = a1\n  5412: a1 = a2 >> 0x20\n  5415: u8 [a0 + 0xc] = a1\n  5418: a1 = a2 >> 0x18\n  5421: u8 [a0 + 0xb] = a1\n  5424: a1 = a2 >> 0x10\n  5427: u8 [a0 + 0xa] = a1\n  5430: a1 = a2 >> 0x8\n  5433: u8 [a0 + 0x9] = a1\n  5436: u8 [a0 + 0x8] = a2\n  5439: a2 = u64 [sp + 0x60]\n  5442: a1 = a2 >> 0x38\n  5445: u8 [a0 + 0x7] = a1\n  5448: a1 = a2 >> 0x30\n  5451: u8 [a0 + 0x6] = a1\n  5454: a1 = a2 >> 0x28\n  5457: u8 [a0 + 0x5] = a1\n  5460: a1 = a2 >> 0x20\n  5463: u8 [a0 + 0x4] = a1\n  5466: a1 = a2 >> 0x18\n  5469: u8 [a0 + 0x3] = a1\n  5472: a1 = a2 >> 0x10\n  5475: u8 [a0 + 0x2] = a1\n  5478: a1 = a2 >> 0x8\n  5481: u8 [a0 + 0x1] = a1\n  5484: u8 [a0] = a2\n  5486: a1 = s1 >> 0x38\n  5489: u8 [a0 + 0x17] = a1\n  5492: a1 = s1 >> 0x30\n  5495: u8 [a0 + 0x16] = a1\n  5498: a1 = s1 >> 0x28\n  5501: u8 [a0 + 0x15] = a1\n  5504: a1 = s1 >> 0x20\n  5507: u8 [a0 + 0x14] = a1\n  5510: a1 = s1 >> 0x18\n  5513: u8 [a0 + 0x13] = a1\n  5516: a1 = s1 >> 0x10\n  5519: u8 [a0 + 0x12] = a1\n  5522: u8 [a0 + 0x10] = s1\n  5525: s1 = s1 >> 0x8\n  5528: u8 [a0 + 0x11] = s1\n  5531: a2 = u64 [sp + 0x80]\n  5535: a1 = a2 >> 0x38\n  5538: u8 [a0 + 0x1f] = a1\n  5541: a1 = a2 >> 0x30\n  5544: u8 [a0 + 0x1e] = a1\n  5547: a1 = a2 >> 0x28\n  5550: u8 [a0 + 0x1d] = a1\n  5553: a1 = a2 >> 0x20\n  5556: u8 [a0 + 0x1c] = a1\n  5559: a1 = a2 >> 0x18\n  5562: u8 [a0 + 0x1b] = a1\n  5565: a1 = a2 >> 0x10\n  5568: u8 [a0 + 0x1a] = a1\n  5571: u8 [a0 + 0x18] = a2\n  5574: a1 = a2 >> 0x8\n  5577: u8 [a0 + 0x19] = a1\n  5580: a2 = u64 [sp + 0x58]\n  5583: a5 = u64 [sp + 0x78]\n  5586: a1 = u64 [sp + 0x70]\n  5589: jump @139 if a3 != 0\n      : @145 (gas: 15)\n  5593: a0 = u64 [sp]\n  5595: a1 = u64 [sp + 0x8]\n  5598: u64 [a0] = a1\n  5600: a1 = u64 [sp + 0x10]\n  5603: u64 [a0 + 0x8] = a1\n  5606: a1 = u64 [sp + 0x18]\n  5609: u64 [a0 + 0x10] = a1\n  5612: a1 = u64 [sp + 0x20]\n  5615: u64 [a0 + 0x18] = a1\n  5618: sp = s0 + 0xfffffffffffffeb0\n  5622: ra = u64 [sp + 0x148]\n  5626: s0 = u64 [sp + 0x140]\n  5630: s1 = u64 [sp + 0x138]\n  5634: sp = sp + 0x150\n  5638: ret\n      : @146 (gas: 1)\n  5640: trap\n      : @147 (gas: 3)\n  5641: a0 = 0\n  5643: a1 = 0\n  5645: ra = 118, jump @0\n      : @148 [@dyn 59] (gas: 5)\n  5650: i32 a1 = a0 + 0\n  5652: a0 = 0x1\n  5655: a2 = 0\n  5657: ecalli 10 // 'seal_return'\n  5659: fallthrough\n      : @149 (gas: 8)\n  5660: u64 [sp + 224] = 0\n  5664: u64 [sp + 216] = 0\n  5668: u64 [sp + 208] = 0\n  5672: a0 = 0x4e487b7100000000\n  5682: a1 = sp + 0xd0\n  5686: u64 [sp + 0xe8] = a0\n  5690: a0 = 0\n  5692: ra = 120, jump @23\n      : @150 [@dyn 60] (gas: 7)\n  5697: u64 [sp + 200] = 0\n  5701: u64 [sp + 192] = 0\n  5705: u64 [sp + 176] = 0x41\n  5710: a0 = 0x4\n  5713: a1 = sp + 0xb0\n  5717: u64 [sp + 184] = 0\n  5721: ra = 122, jump @23\n      : @151 [@dyn 61] (gas: 3)\n  5726: a1 = 0x24\n  5729: a0 = 0\n  5731: ra = 124, jump @0\n      : @152 [@dyn 62] (gas: 6)\n  5736: i32 a1 = a0 + 0\n  5738: a0 = 0x1\n  5741: a2 = 0x24\n  5744: ra = 0x7e\n  5747: ecalli 10 // 'seal_return'\n  5749: fallthrough\n      : @153 [@dyn 63] (gas: 37)\n  5750: sp = sp + 0xffffffffffffff20\n  5754: u64 [sp + 0xd8] = ra\n  5758: u64 [sp + 0xd0] = s0\n  5762: u64 [sp + 0xc8] = s1\n  5766: s0 = sp + 0xe0\n  5770: sp = sp & 0xfffffffffffffff0\n  5773: ra = u64 [a1]\n  5775: t1 = u64 [a2 + 0x8]\n  5778: t2 = u64 [a1 + 0x8]\n  5781: a4 = u64 [a2]\n  5783: a3 = ra + 0x1f\n  5786: t0 = a3 <u ra\n  5789: a5 = t2 + t0\n  5792: u64 [sp + 0x20] = a4\n  5795: a3 = a3 <u a4\n  5798: s1 = a5 ^ t1\n  5801: a4 = a5 <u t1\n  5804: a4 = a3 if s1 == 0\n  5807: s1 = u64 [a1 + 0x10]\n  5810: u64 [sp + 0x38] = t2\n  5813: a3 = a5 <u t2\n  5816: a3 = t0 if t0 == 0\n  5819: t0 = u64 [a2 + 0x18]\n  5822: a5 = u64 [a1 + 0x18]\n  5825: t2 = u64 [a2 + 0x10]\n  5828: a3 = a3 + s1\n  5831: a1 = a3 <u s1\n  5834: u64 [sp + 0x30] = a5\n  5837: a1 = a1 + a5\n  5840: a2 = a1 ^ t0\n  5843: a1 = a1 <s t0\n  5846: a5 = a3 <u t2\n  5849: a1 = a5 if a2 == 0\n  5852: a3 = a3 ^ t2\n  5855: a2 = a2 | a3\n  5858: a4 = a1 if a2 != 0\n  5861: jump @159 if a4 == 0\n      : @154 (gas: 15)\n  5865: u64 [sp] = t2\n  5867: u64 [sp + 0x8] = t0\n  5870: u64 [sp + 0x18] = a0\n  5873: u64 [sp + 0x28] = t1\n  5876: a0 = ra | s1\n  5879: a1 = u64 [sp + 0x38]\n  5882: a2 = u64 [sp + 0x30]\n  5885: a1 = a1 | a2\n  5888: a0 = a0 | a1\n  5891: a0 = a0 >> 0x20\n  5894: u64 [sp + 0x10] = s1\n  5897: a1 = a1 | s1\n  5900: a1 = a1 << 0x20\n  5903: a0 = a0 | a1\n  5906: jump @158 if a0 != 0\n      : @155 (gas: 4)\n  5910: i32 a0 = ra + 0\n  5912: a1 = 0x20\n  5915: s1 = ra\n  5917: ra = 128, jump @0\n      : @156 [@dyn 64] (gas: 124)\n  5923: a1 = u8 [a0 + 0x1]\n  5926: a2 = u8 [a0]\n  5928: a3 = u8 [a0 + 0x2]\n  5931: a4 = u8 [a0 + 0x3]\n  5934: a1 = a1 << 0x8\n  5937: a1 = a1 | a2\n  5940: a3 = a3 << 0x10\n  5943: a4 = a4 << 0x18\n  5946: a3 = a3 | a4\n  5949: a1 = a1 | a3\n  5952: a2 = u8 [a0 + 0x5]\n  5955: a3 = u8 [a0 + 0x4]\n  5958: a4 = u8 [a0 + 0x6]\n  5961: a5 = u8 [a0 + 0x7]\n  5964: a2 = a2 << 0x8\n  5967: a2 = a2 | a3\n  5970: a4 = a4 << 0x10\n  5973: a5 = a5 << 0x18\n  5976: a4 = a4 | a5\n  5979: a2 = a2 | a4\n  5982: a2 = a2 << 0x20\n  5985: t0 = a2 | a1\n  5988: a2 = u8 [a0 + 0x9]\n  5991: a3 = u8 [a0 + 0x8]\n  5994: a4 = u8 [a0 + 0xa]\n  5997: a5 = u8 [a0 + 0xb]\n  6000: a2 = a2 << 0x8\n  6003: a2 = a2 | a3\n  6006: a4 = a4 << 0x10\n  6009: a5 = a5 << 0x18\n  6012: a4 = a4 | a5\n  6015: a2 = a2 | a4\n  6018: a3 = u8 [a0 + 0xd]\n  6021: a4 = u8 [a0 + 0xc]\n  6024: a5 = u8 [a0 + 0xe]\n  6027: a1 = u8 [a0 + 0xf]\n  6030: a3 = a3 << 0x8\n  6033: a3 = a3 | a4\n  6036: a5 = a5 << 0x10\n  6039: a1 = a1 << 0x18\n  6042: a1 = a1 | a5\n  6045: a1 = a1 | a3\n  6048: a1 = a1 << 0x20\n  6051: t1 = a1 | a2\n  6054: a1 = u8 [a0 + 0x11]\n  6057: a3 = u8 [a0 + 0x10]\n  6060: a4 = u8 [a0 + 0x12]\n  6063: a5 = u8 [a0 + 0x13]\n  6066: a1 = a1 << 0x8\n  6069: a1 = a1 | a3\n  6072: a4 = a4 << 0x10\n  6075: a5 = a5 << 0x18\n  6078: a4 = a4 | a5\n  6081: a1 = a1 | a4\n  6084: a3 = u8 [a0 + 0x15]\n  6087: a4 = u8 [a0 + 0x14]\n  6090: a5 = u8 [a0 + 0x16]\n  6093: a2 = u8 [a0 + 0x17]\n  6096: a3 = a3 << 0x8\n  6099: a3 = a3 | a4\n  6102: a5 = a5 << 0x10\n  6105: a2 = a2 << 0x18\n  6108: a2 = a2 | a5\n  6111: a2 = a2 | a3\n  6114: a2 = a2 << 0x20\n  6117: a3 = a2 | a1\n  6120: a1 = u8 [a0 + 0x19]\n  6123: a2 = u8 [a0 + 0x18]\n  6126: a4 = u8 [a0 + 0x1a]\n  6129: a5 = u8 [a0 + 0x1b]\n  6132: a1 = a1 << 0x8\n  6135: a1 = a1 | a2\n  6138: a4 = a4 << 0x10\n  6141: a5 = a5 << 0x18\n  6144: a4 = a4 | a5\n  6147: a1 = a1 | a4\n  6150: a2 = u8 [a0 + 0x1d]\n  6153: a4 = u8 [a0 + 0x1c]\n  6156: a5 = u8 [a0 + 0x1e]\n  6159: a0 = u8 [a0 + 0x1f]\n  6162: a2 = a2 << 0x8\n  6165: a2 = a2 | a4\n  6168: a5 = a5 << 0x10\n  6171: a0 = a0 << 0x18\n  6174: a0 = a0 | a5\n  6177: a0 = a0 | a2\n  6180: a0 = a0 << 0x20\n  6183: a0 = a0 | a1\n  6186: t2 = reverse a0\n  6188: ra = reverse a3\n  6190: a1 = reverse t1\n  6192: a2 = reverse t0\n  6194: a3 = s1 + 0x20\n  6197: a5 = a3 <u s1\n  6200: a0 = u64 [sp + 0x38]\n  6203: a4 = a0 + a5\n  6206: s1 = a4 <u a0\n  6209: s1 = a5 if a5 == 0\n  6212: a0 = u64 [sp + 0x10]\n  6215: s1 = s1 + a0\n  6218: a5 = s1 <u a0\n  6221: a0 = u64 [sp + 0x30]\n  6224: a5 = a5 + a0\n  6227: a0 = u64 [sp + 0x8]\n  6230: u64 [sp + 0x58] = a0\n  6233: a0 = u64 [sp]\n  6235: u64 [sp + 0x50] = a0\n  6238: a0 = u64 [sp + 0x28]\n  6241: u64 [sp + 0x48] = a0\n  6244: a0 = u64 [sp + 0x20]\n  6247: u64 [sp + 0x40] = a0\n  6250: u64 [sp + 0x88] = a4\n  6254: u64 [sp + 0x80] = a3\n  6258: u64 [sp + 0x90] = s1\n  6262: u64 [sp + 0x98] = a5\n  6266: u64 [sp + 0x78] = a2\n  6269: u64 [sp + 0x70] = a1\n  6272: u64 [sp + 0x68] = ra\n  6275: a0 = sp + 0xa0\n  6279: a1 = sp + 0x80\n  6283: a2 = sp + 0x60\n  6286: a3 = sp + 0x40\n  6289: u64 [sp + 0x60] = t2\n  6292: ra = 130, jump @132\n      : @157 [@dyn 65] (gas: 15)\n  6298: a0 = u64 [sp + 0xb0]\n  6302: a1 = u64 [sp + 0xb8]\n  6306: a2 = u64 [sp + 0xa0]\n  6310: a3 = u64 [sp + 0xa8]\n  6314: a4 = u64 [sp + 0x18]\n  6317: u64 [a4 + 0x10] = a0\n  6320: u64 [a4 + 0x18] = a1\n  6323: u64 [a4] = a2\n  6325: u64 [a4 + 0x8] = a3\n  6328: sp = s0 + 0xffffffffffffff20\n  6332: ra = u64 [sp + 0xd8]\n  6336: s0 = u64 [sp + 0xd0]\n  6340: s1 = u64 [sp + 0xc8]\n  6344: sp = sp + 0xe0\n  6348: ret\n      : @158 (gas: 1)\n  6350: trap\n      : @159 (gas: 3)\n  6351: a0 = 0\n  6353: a1 = 0\n  6355: ra = 132, jump @0\n      : @160 [@dyn 66] (gas: 6)\n  6361: i32 a1 = a0 + 0\n  6363: a0 = 0x1\n  6366: a2 = 0\n  6368: ra = 0x86\n  6372: ecalli 10 // 'seal_return'\n  6374: fallthrough\n      : @161 [@dyn 67] (gas: 9)\n  6375: a2 = u64 [a1 + 0x18]\n  6378: a3 = u64 [a1 + 0x10]\n  6381: a4 = u64 [a1 + 0x8]\n  6384: a1 = u64 [a1]\n  6386: u64 [a0 + 0x18] = a2\n  6389: u64 [a0 + 0x10] = a3\n  6392: u64 [a0 + 0x8] = a4\n  6395: u64 [a0] = a1\n  6397: ret\n      : @162 (gas: 42)\n  6399: sp = sp + 0xfffffffffffffef0\n  6403: u64 [sp + 0x108] = ra\n  6407: u64 [sp + 0x100] = s0\n  6411: u64 [sp + 0xf8] = s1\n  6415: s0 = sp + 0x110\n  6419: sp = sp & 0xfffffffffffffff0\n  6422: s1 = u64 [a2 + 0x8]\n  6425: t0 = u64 [a1 + 0x8]\n  6428: a5 = u64 [a2]\n  6430: t1 = u64 [a1]\n  6432: ra = u64 [a2 + 0x10]\n  6435: a4 = s1 ^ t0\n  6438: a3 = s1 <u t0\n  6441: t2 = a5 <u t1\n  6444: a3 = t2 if a4 == 0\n  6447: u64 [sp + 0x60] = s1\n  6450: a4 = s1 - t0\n  6453: a4 = a4 - t2\n  6456: u64 [sp + 0x58] = a5\n  6459: a5 = a5 - t1\n  6462: a5 = a5 <u 0x40\n  6465: a5 = a5 ^ 0x1\n  6468: t2 = u64 [a1 + 0x10]\n  6471: s1 = a4 >u 0\n  6473: a5 = s1 if a4 != 0\n  6476: a4 = u64 [a2 + 0x18]\n  6479: s1 = u64 [a1 + 0x18]\n  6482: a1 = ra - t2\n  6485: a2 = a1 - a3\n  6488: a1 = a1 <u a3\n  6491: u64 [sp + 0x50] = ra\n  6494: a3 = ra <u t2\n  6497: u64 [sp + 0x38] = a4\n  6500: a4 = a4 - s1\n  6503: a4 = a4 - a3\n  6506: a4 = a4 - a1\n  6509: a1 = a4 >s 0\n  6511: a3 = a2 >u 0\n  6513: a3 = a1 if a4 != 0\n  6516: a2 = a2 | a4\n  6519: a5 = a3 if a2 != 0\n  6522: jump @174 if a5 == 0\n      : @163 (gas: 12)\n  6526: u64 [sp + 0x28] = a0\n  6529: a0 = t1 | t2\n  6532: u64 [sp + 0x68] = t0\n  6535: u64 [sp + 0x40] = s1\n  6538: a1 = t0 | s1\n  6541: a0 = a0 | a1\n  6544: a0 = a0 >> 0x20\n  6547: u64 [sp + 0x48] = t2\n  6550: a1 = a1 | t2\n  6553: a1 = a1 << 0x20\n  6556: a0 = a0 | a1\n  6559: jump @173 if a0 != 0\n      : @164 (gas: 5)\n  6563: i32 a0 = t1 + 0\n  6565: a1 = 0x20\n  6568: u64 [sp + 0x8] = a0\n  6571: u64 [sp + 0x30] = t1\n  6574: ra = 136, jump @0\n      : @165 [@dyn 68] (gas: 73)\n  6580: a1 = u8 [a0 + 0x9]\n  6583: a2 = u8 [a0 + 0x8]\n  6586: a3 = u8 [a0 + 0xa]\n  6589: a4 = u8 [a0 + 0xb]\n  6592: a1 = a1 << 0x8\n  6595: a1 = a1 | a2\n  6598: a3 = a3 << 0x10\n  6601: a4 = a4 << 0x18\n  6604: a3 = a3 | a4\n  6607: a1 = a1 | a3\n  6610: a2 = u8 [a0 + 0xd]\n  6613: a3 = u8 [a0 + 0xc]\n  6616: a4 = u8 [a0 + 0xe]\n  6619: a5 = u8 [a0 + 0xf]\n  6622: a2 = a2 << 0x8\n  6625: a2 = a2 | a3\n  6628: a4 = a4 << 0x10\n  6631: a5 = a5 << 0x18\n  6634: a4 = a4 | a5\n  6637: a2 = a2 | a4\n  6640: a2 = a2 << 0x20\n  6643: t0 = a2 | a1\n  6646: a2 = u8 [a0 + 0x1]\n  6649: a3 = u8 [a0]\n  6651: a4 = u8 [a0 + 0x2]\n  6654: a5 = u8 [a0 + 0x3]\n  6657: a2 = a2 << 0x8\n  6660: a2 = a2 | a3\n  6663: a4 = a4 << 0x10\n  6666: a5 = a5 << 0x18\n  6669: a4 = a4 | a5\n  6672: a2 = a2 | a4\n  6675: a3 = u8 [a0 + 0x5]\n  6678: a4 = u8 [a0 + 0x4]\n  6681: a5 = u8 [a0 + 0x6]\n  6684: s1 = u8 [a0 + 0x7]\n  6687: a3 = a3 << 0x8\n  6690: a3 = a3 | a4\n  6693: a5 = a5 << 0x10\n  6696: s1 = s1 << 0x18\n  6699: a5 = a5 | s1\n  6702: a3 = a3 | a5\n  6705: a3 = a3 << 0x20\n  6708: a2 = a2 | a3\n  6711: a3 = u8 [a0 + 0x11]\n  6714: a4 = u8 [a0 + 0x10]\n  6717: a5 = u8 [a0 + 0x12]\n  6720: s1 = u8 [a0 + 0x13]\n  6723: a3 = a3 << 0x8\n  6726: a3 = a3 | a4\n  6729: a5 = a5 << 0x10\n  6732: s1 = s1 << 0x18\n  6735: a5 = a5 | s1\n  6738: a3 = a3 | a5\n  6741: a4 = u8 [a0 + 0x15]\n  6744: a5 = u8 [a0 + 0x14]\n  6747: s1 = u8 [a0 + 0x16]\n  6750: a1 = u8 [a0 + 0x17]\n  6753: a4 = a4 << 0x8\n  6756: a4 = a4 | a5\n  6759: s1 = s1 << 0x10\n  6762: a1 = a1 << 0x18\n  6765: a1 = a1 | s1\n  6768: a1 = a1 | a4\n  6771: a1 = a1 << 0x20\n  6774: a1 = a1 | a3\n  6777: a3 = reverse a1\n  6779: t1 = reverse a2\n  6781: a1 = reverse t0\n  6783: a4 = a1 | t1\n  6786: a5 = a3 <u 0x1\n  6789: a5 = 0 if a4 != 0\n  6791: jump @174 if a5 == 0\n      : @166 (gas: 65)\n  6795: a4 = u8 [a0 + 0x19]\n  6798: a5 = u8 [a0 + 0x18]\n  6801: s1 = u8 [a0 + 0x1a]\n  6804: a2 = u8 [a0 + 0x1b]\n  6807: a4 = a4 << 0x8\n  6810: a4 = a4 | a5\n  6813: s1 = s1 << 0x10\n  6816: a2 = a2 << 0x18\n  6819: a2 = a2 | s1\n  6822: a2 = a2 | a4\n  6825: a4 = u8 [a0 + 0x1d]\n  6828: a5 = u8 [a0 + 0x1c]\n  6831: s1 = u8 [a0 + 0x1e]\n  6834: a0 = u8 [a0 + 0x1f]\n  6837: a4 = a4 << 0x8\n  6840: a4 = a4 | a5\n  6843: s1 = s1 << 0x10\n  6846: a0 = a0 << 0x18\n  6849: a0 = a0 | s1\n  6852: a0 = a0 | a4\n  6855: a0 = a0 << 0x20\n  6858: a0 = a0 | a2\n  6861: a0 = reverse a0\n  6863: t0 = u64 [sp + 0x30]\n  6866: t0 = t0 + a0\n  6869: a0 = t0 <u a0\n  6872: a2 = u64 [sp + 0x68]\n  6875: a2 = a2 + a3\n  6878: t2 = a2 + a0\n  6881: a2 = t2 ^ a3\n  6884: s1 = t2 <u a3\n  6887: s1 = a0 if a2 == 0\n  6890: a0 = u64 [sp + 0x48]\n  6893: a0 = a0 + a1\n  6896: s1 = s1 + a0\n  6899: a2 = s1 <u a0\n  6902: a0 = a0 <u a1\n  6905: a1 = u64 [sp + 0x40]\n  6908: t1 = t1 + a1\n  6911: a0 = a0 + t1\n  6914: ra = a0 + a2\n  6917: a0 = t0 + 0x1f\n  6920: a1 = a0 <u t0\n  6923: a2 = t2 + a1\n  6926: a3 = a2 <u t2\n  6929: a3 = a1 if a1 == 0\n  6932: t1 = s1 + a3\n  6935: a1 = t1 <u s1\n  6938: a1 = a1 + ra\n  6941: a5 = u64 [sp + 0x60]\n  6944: a4 = a2 ^ a5\n  6947: a2 = a2 <u a5\n  6950: a5 = u64 [sp + 0x58]\n  6953: a0 = a0 <u a5\n  6956: a0 = a2 if a4 != 0\n  6959: a5 = u64 [sp + 0x50]\n  6962: a2 = t1 <u a5\n  6965: a4 = u64 [sp + 0x38]\n  6968: a3 = a1 ^ a4\n  6971: a1 = a1 <s a4\n  6974: a1 = a2 if a3 == 0\n  6977: a2 = t1 ^ a5\n  6980: a2 = a2 | a3\n  6983: a0 = a1 if a2 != 0\n  6986: jump @175 if a0 == 0\n      : @167 (gas: 11)\n  6990: a0 = t0 | s1\n  6993: u64 [sp + 0x20] = t2\n  6996: u64 [sp + 0x10] = ra\n  6999: a1 = t2 | ra\n  7002: a0 = a0 | a1\n  7005: a0 = a0 >> 0x20\n  7008: u64 [sp + 0x18] = s1\n  7011: a1 = a1 | s1\n  7014: a1 = a1 << 0x20\n  7017: a0 = a0 | a1\n  7020: jump @173 if a0 != 0\n      : @168 (gas: 4)\n  7024: i32 a0 = t0 + 0\n  7026: a1 = 0x20\n  7029: s1 = t0\n  7031: ra = 138, jump @0\n      : @169 [@dyn 69] (gas: 124)\n  7037: a1 = u8 [a0 + 0x1]\n  7040: a2 = u8 [a0]\n  7042: a3 = u8 [a0 + 0x2]\n  7045: a4 = u8 [a0 + 0x3]\n  7048: a1 = a1 << 0x8\n  7051: a1 = a1 | a2\n  7054: a3 = a3 << 0x10\n  7057: a4 = a4 << 0x18\n  7060: a3 = a3 | a4\n  7063: a1 = a1 | a3\n  7066: a2 = u8 [a0 + 0x5]\n  7069: a3 = u8 [a0 + 0x4]\n  7072: a4 = u8 [a0 + 0x6]\n  7075: a5 = u8 [a0 + 0x7]\n  7078: a2 = a2 << 0x8\n  7081: a2 = a2 | a3\n  7084: a4 = a4 << 0x10\n  7087: a5 = a5 << 0x18\n  7090: a4 = a4 | a5\n  7093: a2 = a2 | a4\n  7096: a2 = a2 << 0x20\n  7099: t0 = a2 | a1\n  7102: a2 = u8 [a0 + 0x9]\n  7105: a3 = u8 [a0 + 0x8]\n  7108: a4 = u8 [a0 + 0xa]\n  7111: a5 = u8 [a0 + 0xb]\n  7114: a2 = a2 << 0x8\n  7117: a2 = a2 | a3\n  7120: a4 = a4 << 0x10\n  7123: a5 = a5 << 0x18\n  7126: a4 = a4 | a5\n  7129: a2 = a2 | a4\n  7132: a3 = u8 [a0 + 0xd]\n  7135: a4 = u8 [a0 + 0xc]\n  7138: a5 = u8 [a0 + 0xe]\n  7141: a1 = u8 [a0 + 0xf]\n  7144: a3 = a3 << 0x8\n  7147: a3 = a3 | a4\n  7150: a5 = a5 << 0x10\n  7153: a1 = a1 << 0x18\n  7156: a1 = a1 | a5\n  7159: a1 = a1 | a3\n  7162: a1 = a1 << 0x20\n  7165: t1 = a1 | a2\n  7168: a1 = u8 [a0 + 0x11]\n  7171: a3 = u8 [a0 + 0x10]\n  7174: a4 = u8 [a0 + 0x12]\n  7177: a5 = u8 [a0 + 0x13]\n  7180: a1 = a1 << 0x8\n  7183: a1 = a1 | a3\n  7186: a4 = a4 << 0x10\n  7189: a5 = a5 << 0x18\n  7192: a4 = a4 | a5\n  7195: a1 = a1 | a4\n  7198: a3 = u8 [a0 + 0x15]\n  7201: a4 = u8 [a0 + 0x14]\n  7204: a5 = u8 [a0 + 0x16]\n  7207: a2 = u8 [a0 + 0x17]\n  7210: a3 = a3 << 0x8\n  7213: a3 = a3 | a4\n  7216: a5 = a5 << 0x10\n  7219: a2 = a2 << 0x18\n  7222: a2 = a2 | a5\n  7225: a2 = a2 | a3\n  7228: a2 = a2 << 0x20\n  7231: a3 = a2 | a1\n  7234: a1 = u8 [a0 + 0x19]\n  7237: a2 = u8 [a0 + 0x18]\n  7240: a4 = u8 [a0 + 0x1a]\n  7243: a5 = u8 [a0 + 0x1b]\n  7246: a1 = a1 << 0x8\n  7249: a1 = a1 | a2\n  7252: a4 = a4 << 0x10\n  7255: a5 = a5 << 0x18\n  7258: a4 = a4 | a5\n  7261: a1 = a1 | a4\n  7264: a2 = u8 [a0 + 0x1d]\n  7267: a4 = u8 [a0 + 0x1c]\n  7270: a5 = u8 [a0 + 0x1e]\n  7273: a0 = u8 [a0 + 0x1f]\n  7276: a2 = a2 << 0x8\n  7279: a2 = a2 | a4\n  7282: a5 = a5 << 0x10\n  7285: a0 = a0 << 0x18\n  7288: a0 = a0 | a5\n  7291: a0 = a0 | a2\n  7294: a0 = a0 << 0x20\n  7297: a0 = a0 | a1\n  7300: t2 = reverse a0\n  7302: ra = reverse a3\n  7304: a1 = reverse t1\n  7306: a2 = reverse t0\n  7308: a3 = s1 + 0x20\n  7311: a5 = a3 <u s1\n  7314: a0 = u64 [sp + 0x20]\n  7317: a4 = a0 + a5\n  7320: s1 = a4 <u a0\n  7323: s1 = a5 if a5 == 0\n  7326: a0 = u64 [sp + 0x18]\n  7329: s1 = s1 + a0\n  7332: a5 = s1 <u a0\n  7335: a0 = u64 [sp + 0x10]\n  7338: a5 = a5 + a0\n  7341: a0 = u64 [sp + 0x38]\n  7344: u64 [sp + 0x88] = a0\n  7348: a0 = u64 [sp + 0x50]\n  7351: u64 [sp + 0x80] = a0\n  7355: a0 = u64 [sp + 0x60]\n  7358: u64 [sp + 0x78] = a0\n  7361: a0 = u64 [sp + 0x58]\n  7364: u64 [sp + 0x70] = a0\n  7367: u64 [sp + 0xb8] = a4\n  7371: u64 [sp + 0xb0] = a3\n  7375: u64 [sp + 0xc0] = s1\n  7379: u64 [sp + 0xc8] = a5\n  7383: u64 [sp + 0xa8] = a2\n  7387: u64 [sp + 0xa0] = a1\n  7391: u64 [sp + 0x98] = ra\n  7395: a0 = sp + 0xd0\n  7399: a1 = sp + 0xb0\n  7403: a2 = sp + 0x90\n  7407: a3 = sp + 0x70\n  7410: u64 [sp + 0x90] = t2\n  7414: ra = 140, jump @132\n      : @170 [@dyn 70] (gas: 10)\n  7420: a0 = u64 [sp + 0x48]\n  7423: a1 = u64 [sp + 0x40]\n  7426: a0 = a0 | a1\n  7429: a1 = 0xffffffe0\n  7439: a2 = u64 [sp + 0x30]\n  7442: a1 = a2 <u a1\n  7445: a2 = u64 [sp + 0x68]\n  7448: a1 = 0 if a2 != 0\n  7450: a1 = 0 if a0 != 0\n  7452: jump @173 if a1 == 0\n      : @171 (gas: 12)\n  7456: a0 = u64 [sp + 0xe8]\n  7460: u64 [sp + 0x50] = a0\n  7463: a0 = u64 [sp + 0xe0]\n  7467: u64 [sp + 0x58] = a0\n  7470: a0 = u64 [sp + 0xd8]\n  7474: u64 [sp + 0x60] = a0\n  7477: a0 = u64 [sp + 0xd0]\n  7481: u64 [sp + 0x68] = a0\n  7484: a0 = u64 [sp + 0x8]\n  7487: i32 a0 = a0 + 0x20\n  7490: a1 = 0x20\n  7493: ra = 142, jump @0\n      : @172 [@dyn 71] (gas: 111)\n  7499: a1 = u8 [a0 + 0x1]\n  7502: a2 = u8 [a0]\n  7504: a3 = u8 [a0 + 0x2]\n  7507: a4 = u8 [a0 + 0x3]\n  7510: a1 = a1 << 0x8\n  7513: a1 = a1 | a2\n  7516: a3 = a3 << 0x10\n  7519: a4 = a4 << 0x18\n  7522: a3 = a3 | a4\n  7525: a1 = a1 | a3\n  7528: a2 = u8 [a0 + 0x5]\n  7531: a3 = u8 [a0 + 0x4]\n  7534: a4 = u8 [a0 + 0x6]\n  7537: a5 = u8 [a0 + 0x7]\n  7540: a2 = a2 << 0x8\n  7543: a2 = a2 | a3\n  7546: a4 = a4 << 0x10\n  7549: a5 = a5 << 0x18\n  7552: a4 = a4 | a5\n  7555: a2 = a2 | a4\n  7558: a2 = a2 << 0x20\n  7561: t0 = a2 | a1\n  7564: a2 = u8 [a0 + 0x9]\n  7567: a3 = u8 [a0 + 0x8]\n  7570: a4 = u8 [a0 + 0xa]\n  7573: a5 = u8 [a0 + 0xb]\n  7576: a2 = a2 << 0x8\n  7579: a2 = a2 | a3\n  7582: a4 = a4 << 0x10\n  7585: a5 = a5 << 0x18\n  7588: a4 = a4 | a5\n  7591: a2 = a2 | a4\n  7594: a3 = u8 [a0 + 0xd]\n  7597: a4 = u8 [a0 + 0xc]\n  7600: a5 = u8 [a0 + 0xe]\n  7603: s1 = u8 [a0 + 0xf]\n  7606: a3 = a3 << 0x8\n  7609: a3 = a3 | a4\n  7612: a5 = a5 << 0x10\n  7615: s1 = s1 << 0x18\n  7618: a5 = a5 | s1\n  7621: a3 = a3 | a5\n  7624: a3 = a3 << 0x20\n  7627: a2 = a2 | a3\n  7630: a3 = u8 [a0 + 0x11]\n  7633: a4 = u8 [a0 + 0x10]\n  7636: a5 = u8 [a0 + 0x12]\n  7639: s1 = u8 [a0 + 0x13]\n  7642: a3 = a3 << 0x8\n  7645: a3 = a3 | a4\n  7648: a5 = a5 << 0x10\n  7651: s1 = s1 << 0x18\n  7654: a5 = a5 | s1\n  7657: a3 = a3 | a5\n  7660: a4 = u8 [a0 + 0x15]\n  7663: a5 = u8 [a0 + 0x14]\n  7666: s1 = u8 [a0 + 0x16]\n  7669: a1 = u8 [a0 + 0x17]\n  7672: a4 = a4 << 0x8\n  7675: a4 = a4 | a5\n  7678: s1 = s1 << 0x10\n  7681: a1 = a1 << 0x18\n  7684: a1 = a1 | s1\n  7687: a1 = a1 | a4\n  7690: a1 = a1 << 0x20\n  7693: a3 = a3 | a1\n  7696: a1 = u8 [a0 + 0x19]\n  7699: a4 = u8 [a0 + 0x18]\n  7702: a5 = u8 [a0 + 0x1a]\n  7705: s1 = u8 [a0 + 0x1b]\n  7708: a1 = a1 << 0x8\n  7711: a1 = a1 | a4\n  7714: a5 = a5 << 0x10\n  7717: s1 = s1 << 0x18\n  7720: a5 = a5 | s1\n  7723: a1 = a1 | a5\n  7726: a4 = u8 [a0 + 0x1d]\n  7729: a5 = u8 [a0 + 0x1c]\n  7732: s1 = u8 [a0 + 0x1e]\n  7735: a0 = u8 [a0 + 0x1f]\n  7738: a4 = a4 << 0x8\n  7741: a4 = a4 | a5\n  7744: s1 = s1 << 0x10\n  7747: a0 = a0 << 0x18\n  7750: a0 = a0 | s1\n  7753: a0 = a0 | a4\n  7756: a0 = a0 << 0x20\n  7759: a0 = a0 | a1\n  7762: a4 = u64 [sp + 0x28]\n  7765: a1 = u64 [sp + 0x50]\n  7768: u64 [a4 + 0x18] = a1\n  7771: a1 = u64 [sp + 0x58]\n  7774: u64 [a4 + 0x10] = a1\n  7777: a1 = u64 [sp + 0x60]\n  7780: u64 [a4 + 0x8] = a1\n  7783: a1 = u64 [sp + 0x68]\n  7786: u64 [a4] = a1\n  7788: a1 = reverse t0\n  7790: u64 [a4 + 0x38] = a1\n  7793: a1 = reverse a2\n  7795: u64 [a4 + 0x30] = a1\n  7798: a1 = reverse a3\n  7800: u64 [a4 + 0x28] = a1\n  7803: a0 = reverse a0\n  7805: u64 [a4 + 0x20] = a0\n  7808: sp = s0 + 0xfffffffffffffef0\n  7812: ra = u64 [sp + 0x108]\n  7816: s0 = u64 [sp + 0x100]\n  7820: s1 = u64 [sp + 0xf8]\n  7824: sp = sp + 0x110\n  7828: ret\n      : @173 (gas: 1)\n  7830: trap\n      : @174 (gas: 4)\n  7831: a0 = 0\n  7833: a1 = 0\n  7835: ra = 0x90\n  7839: jump @0\n      : @175 (gas: 2)\n  7842: a1 = 0\n  7844: ra = 144, jump @0\n      : @176 [@dyn 72] (gas: 6)\n  7850: i32 a1 = a0 + 0\n  7852: a0 = 0x1\n  7855: a2 = 0\n  7857: ra = 0x92\n  7861: ecalli 10 // 'seal_return'\n  7863: fallthrough\n      : @177 [@dyn 73] (gas: 19)\n  7864: sp = sp + 0xfffffffffffffef0\n  7868: u64 [sp + 0x108] = ra\n  7872: u64 [sp + 0x100] = s0\n  7876: u64 [sp + 0xf8] = s1\n  7880: s0 = sp + 0x110\n  7884: sp = sp & 0xfffffffffffffff0\n  7887: a1 = i32 [0x20164]\n  7892: u64 [sp + 0x28] = a0\n  7895: s1 = a1\n  7897: a0 = a1 << 0x20\n  7900: a2 = a0 >> 0x20\n  7903: u64 [sp + 200] = 0\n  7907: u64 [sp + 192] = 0\n  7911: u64 [sp + 184] = 0\n  7915: a0 = sp + 0xd0\n  7919: a1 = sp + 0xb0\n  7923: u64 [sp + 0x20] = a2\n  7926: u64 [sp + 0xb0] = a2\n  7930: ra = 148, jump @114\n      : @178 [@dyn 74] (gas: 15)\n  7936: a1 = u64 [sp + 0xe8]\n  7940: a3 = u64 [sp + 0xe0]\n  7944: a0 = u64 [sp + 0xd8]\n  7948: a2 = u64 [sp + 0xd0]\n  7952: u64 [sp + 0x18] = a0\n  7955: u64 [sp + 0x8] = a1\n  7958: a0 = a0 | a1\n  7961: a1 = a2 | a3\n  7964: a1 = a1 | a0\n  7967: a1 = a1 >> 0x20\n  7970: u64 [sp + 0x10] = a3\n  7973: a0 = a0 | a3\n  7976: a0 = a0 << 0x20\n  7979: a0 = a0 | a1\n  7982: jump @182 if a0 != 0\n      : @179 (gas: 4)\n  7986: i32 a0 = a2 + 0\n  7988: a1 = s1\n  7990: u64 [sp] = a2\n  7992: ra = 150, jump @0\n      : @180 [@dyn 75] (gas: 30)\n  7998: i32 a0 = a0 + 0\n  8000: a1 = s1\n  8002: a2 = 0\n  8004: ecalli 2 // 'call_data_copy'\n  8006: a0 = u64 [sp + 0x20]\n  8009: a2 = u64 [sp]\n  8011: a0 = a0 + a2\n  8014: a1 = a0 <u a2\n  8017: t1 = a2\n  8019: a5 = u64 [sp + 0x18]\n  8022: a2 = a5 + a1\n  8025: a3 = a2 <u a5\n  8028: a3 = a1 if a1 == 0\n  8031: s1 = u64 [sp + 0x10]\n  8034: a3 = a3 + s1\n  8037: a1 = a3 <u s1\n  8040: a4 = u64 [sp + 0x8]\n  8043: t0 = a4 + a1\n  8046: u64 [sp + 0x38] = a2\n  8049: u64 [sp + 0x30] = a0\n  8052: u64 [sp + 0x68] = a4\n  8055: u64 [sp + 0x60] = s1\n  8058: u64 [sp + 0x58] = a5\n  8061: u64 [sp + 0x50] = t1\n  8064: u64 [sp + 0x40] = a3\n  8067: a0 = sp + 0x70\n  8070: a1 = sp + 0x50\n  8073: a2 = sp + 0x30\n  8076: u64 [sp + 0x48] = t0\n  8079: ra = 152, jump @162\n      : @181 [@dyn 76] (gas: 23)\n  8085: t0 = u64 [sp + 0x78]\n  8088: t1 = u64 [sp + 0x70]\n  8091: a2 = u64 [sp + 0x88]\n  8095: a3 = u64 [sp + 0x80]\n  8099: a4 = u64 [sp + 0xa0]\n  8103: a5 = u64 [sp + 0xa8]\n  8107: s1 = u64 [sp + 0x90]\n  8111: a0 = u64 [sp + 0x98]\n  8115: a1 = u64 [sp + 0x28]\n  8118: u64 [a1 + 0x30] = a4\n  8121: u64 [a1 + 0x38] = a5\n  8124: u64 [a1 + 0x20] = s1\n  8127: u64 [a1 + 0x28] = a0\n  8130: u64 [a1 + 0x10] = a3\n  8133: u64 [a1 + 0x18] = a2\n  8136: u64 [a1] = t1\n  8138: u64 [a1 + 0x8] = t0\n  8141: sp = s0 + 0xfffffffffffffef0\n  8145: ra = u64 [sp + 0x108]\n  8149: s0 = u64 [sp + 0x100]\n  8153: s1 = u64 [sp + 0xf8]\n  8157: sp = sp + 0x110\n  8161: ret\n      : @182 (gas: 1)\n  8163: trap\n      : @183 (gas: 28)\n  8164: sp = sp + 0xffffffffffffff20\n  8168: u64 [sp + 0xd8] = ra\n  8172: u64 [sp + 0xd0] = s0\n  8176: u64 [sp + 0xc8] = s1\n  8180: s0 = sp + 0xe0\n  8184: sp = sp & 0xffffffffffffffe0\n  8187: a3 = u64 [a2]\n  8189: t2 = u64 [a1]\n  8191: a4 = u64 [a2 + 0x8]\n  8194: ra = u64 [a1 + 0x8]\n  8197: t0 = u64 [a2 + 0x10]\n  8200: t1 = u64 [a1 + 0x10]\n  8203: s1 = u64 [a2 + 0x18]\n  8206: a5 = u64 [a1 + 0x18]\n  8209: a1 = a4 ^ ra\n  8212: u64 [sp + 0x50] = a4\n  8215: a2 = a4 <u ra\n  8218: u64 [sp + 0x58] = a3\n  8221: a3 = a3 <u t2\n  8224: a3 = a2 if a1 != 0\n  8227: a1 = s1 ^ a5\n  8230: a2 = s1 <u a5\n  8233: a4 = t0 <u t1\n  8236: a4 = a2 if a1 != 0\n  8239: a2 = t0 ^ t1\n  8242: a1 = a1 | a2\n  8245: a3 = a4 if a1 != 0\n  8248: jump @191 if a3 == 0\n      : @184 (gas: 17)\n  8252: a1 = u64 [a0 + 0x18]\n  8255: u64 [sp + 0x8] = a1\n  8258: a1 = u64 [a0 + 0x10]\n  8261: u64 [sp + 0x10] = a1\n  8264: a1 = u64 [a0 + 0x8]\n  8267: u64 [sp + 0x18] = a1\n  8270: a0 = u64 [a0]\n  8272: u64 [sp + 0x30] = a0\n  8275: a1 = 0x20\n  8278: a0 = 0\n  8280: u64 [sp + 0x48] = a5\n  8283: u64 [sp + 0x40] = t1\n  8286: u64 [sp + 0x20] = t0\n  8289: u64 [sp + 0x28] = s1\n  8292: u64 [sp + 0x38] = t2\n  8295: s1 = ra\n  8297: ra = 154, jump @0\n      : @185 [@dyn 77] (gas: 71)\n  8303: a1 = u64 [sp + 0x8]\n  8306: a1 = reverse a1\n  8308: a2 = u64 [sp + 0x10]\n  8311: a2 = reverse a2\n  8313: a3 = u64 [sp + 0x18]\n  8316: a3 = reverse a3\n  8318: a4 = u64 [sp + 0x30]\n  8321: a4 = reverse a4\n  8323: a5 = a4 >> 0x38\n  8326: u8 [a0 + 0x1f] = a5\n  8329: a5 = a4 >> 0x30\n  8332: u8 [a0 + 0x1e] = a5\n  8335: a5 = a4 >> 0x28\n  8338: u8 [a0 + 0x1d] = a5\n  8341: a5 = a4 >> 0x20\n  8344: u8 [a0 + 0x1c] = a5\n  8347: a5 = a4 >> 0x18\n  8350: u8 [a0 + 0x1b] = a5\n  8353: a5 = a4 >> 0x10\n  8356: u8 [a0 + 0x1a] = a5\n  8359: a5 = a4 >> 0x8\n  8362: u8 [a0 + 0x19] = a5\n  8365: u8 [a0 + 0x18] = a4\n  8368: u8 [a0 + 0x10] = a3\n  8371: a4 = a3 >> 0x38\n  8374: u8 [a0 + 0x17] = a4\n  8377: a4 = a3 >> 0x30\n  8380: u8 [a0 + 0x16] = a4\n  8383: a4 = a3 >> 0x28\n  8386: u8 [a0 + 0x15] = a4\n  8389: a4 = a3 >> 0x20\n  8392: u8 [a0 + 0x14] = a4\n  8395: a4 = a3 >> 0x18\n  8398: u8 [a0 + 0x13] = a4\n  8401: a4 = a3 >> 0x10\n  8404: u8 [a0 + 0x12] = a4\n  8407: a3 = a3 >> 0x8\n  8410: u8 [a0 + 0x11] = a3\n  8413: u8 [a0 + 0x8] = a2\n  8416: a3 = a2 >> 0x38\n  8419: u8 [a0 + 0xf] = a3\n  8422: a3 = a2 >> 0x30\n  8425: u8 [a0 + 0xe] = a3\n  8428: a3 = a2 >> 0x28\n  8431: u8 [a0 + 0xd] = a3\n  8434: a3 = a2 >> 0x20\n  8437: u8 [a0 + 0xc] = a3\n  8440: a3 = a2 >> 0x18\n  8443: u8 [a0 + 0xb] = a3\n  8446: a3 = a2 >> 0x10\n  8449: u8 [a0 + 0xa] = a3\n  8452: a2 = a2 >> 0x8\n  8455: u8 [a0 + 0x9] = a2\n  8458: u8 [a0] = a1\n  8460: a2 = a1 >> 0x38\n  8463: u8 [a0 + 0x7] = a2\n  8466: a2 = a1 >> 0x30\n  8469: u8 [a0 + 0x6] = a2\n  8472: a2 = a1 >> 0x28\n  8475: u8 [a0 + 0x5] = a2\n  8478: a2 = a1 >> 0x20\n  8481: u8 [a0 + 0x4] = a2\n  8484: a2 = a1 >> 0x18\n  8487: u8 [a0 + 0x3] = a2\n  8490: a2 = a1 >> 0x10\n  8493: u8 [a0 + 0x2] = a2\n  8496: a1 = a1 >> 0x8\n  8499: u8 [a0 + 0x1] = a1\n  8502: a1 = 0x20\n  8505: a0 = 0\n  8507: ra = 156, jump @0\n      : @186 [@dyn 78] (gas: 5)\n  8513: i32 a0 = a0 + 0\n  8515: i32 a2 = sp + 0xa0\n  8519: a1 = 0x20\n  8522: ecalli 8 // 'hash_keccak_256'\n  8524: fallthrough\n      : @187 (gas: 57)\n  8525: a0 = u64 [sp + 0xb8]\n  8529: a1 = u64 [sp + 0xb0]\n  8533: a2 = reverse a0\n  8535: a1 = reverse a1\n  8537: a0 = u64 [sp + 0x50]\n  8540: a0 = a0 + a1\n  8543: t1 = u64 [sp + 0x58]\n  8546: t1 = t1 + a2\n  8549: a3 = t1 <u a2\n  8552: a5 = a0 + a3\n  8555: a4 = a5 ^ a1\n  8558: a0 = a5 <u a1\n  8561: a0 = a3 if a4 == 0\n  8564: a3 = a1 + s1\n  8567: t2 = u64 [sp + 0x38]\n  8570: t2 = t2 + a2\n  8573: a2 = t2 <u a2\n  8576: ra = a3 + a2\n  8579: a3 = u64 [sp + 0xa8]\n  8583: a4 = u64 [sp + 0xa0]\n  8587: s1 = ra ^ a1\n  8590: a1 = ra <u a1\n  8593: a1 = a2 if s1 == 0\n  8596: a2 = reverse a4\n  8598: a3 = reverse a3\n  8600: a4 = u64 [sp + 0x20]\n  8603: a4 = a4 + a3\n  8606: t0 = u64 [sp + 0x28]\n  8609: t0 = t0 + a2\n  8612: s1 = a4 <u a3\n  8615: t0 = t0 + s1\n  8618: a0 = a0 + a4\n  8621: s1 = a0 <u a4\n  8624: a4 = a0\n  8626: s1 = s1 + t0\n  8629: a0 = u64 [sp + 0x40]\n  8632: a0 = a0 + a3\n  8635: t0 = a0 + a1\n  8638: a1 = u64 [sp + 0x48]\n  8641: a2 = a2 + a1\n  8644: a1 = t0 <u a0\n  8647: a0 = a0 <u a3\n  8650: a0 = a0 + a2\n  8653: a3 = a0 + a1\n  8656: a0 = a5 ^ ra\n  8659: a1 = a5 <u ra\n  8662: a2 = t1 <u t2\n  8665: a2 = a1 if a0 != 0\n  8668: a0 = a4 <u t0\n  8671: a1 = s1 ^ a3\n  8674: u64 [sp + 0x40] = a3\n  8677: a3 = s1 <u a3\n  8680: a3 = a0 if a1 == 0\n  8683: a0 = a4 ^ t0\n  8686: a0 = a0 | a1\n  8689: a2 = a3 if a0 != 0\n  8692: jump @191 if a2 == 0\n      : @188 (gas: 5)\n  8696: a0 = a4\n  8698: u64 [sp + 0x38] = t2\n  8701: u64 [sp + 0x30] = ra\n  8704: u64 [sp + 0x28] = t0\n  8707: fallthrough\n      : @189 (gas: 36)\n  8708: u64 [sp + 0x48] = a0\n  8711: u64 [sp + 0x50] = a5\n  8714: u64 [sp + 0x58] = t1\n  8717: u64 [sp + 0x90] = a0\n  8721: u64 [sp + 0x88] = a5\n  8725: u64 [sp + 0x80] = t1\n  8729: u64 [sp + 0x98] = s1\n  8733: u64 [sp + 184] = 0\n  8737: u64 [sp + 176] = 0\n  8741: u64 [sp + 168] = 0\n  8745: u64 [sp + 160] = 0\n  8749: u32 [sp + 96] = 0x20\n  8753: i32 a1 = sp + 0x80\n  8757: i32 a3 = sp + 0xa0\n  8761: i32 a4 = sp + 0x60\n  8764: a2 = 0xffffffffffffffff\n  8767: a0 = 0\n  8769: ecalli 7 // 'get_storage'\n  8771: u64 [sp + 0x98] = s1\n  8775: a0 = u64 [sp + 0x48]\n  8778: u64 [sp + 0x90] = a0\n  8782: a0 = u64 [sp + 0x50]\n  8785: u64 [sp + 0x88] = a0\n  8789: a0 = u64 [sp + 0x58]\n  8792: u64 [sp + 0x80] = a0\n  8796: u64 [sp + 184] = 0\n  8800: u64 [sp + 176] = 0\n  8804: u64 [sp + 168] = 0\n  8808: u64 [sp + 160] = 0\n  8812: i32 a1 = sp + 0x80\n  8816: i32 a3 = sp + 0xa0\n  8820: a2 = 0xffffffffffffffff\n  8823: a4 = 0x20\n  8826: a0 = 0\n  8828: ecalli 12 // 'set_storage'\n  8830: fallthrough\n      : @190 (gas: 27)\n  8831: t0 = u64 [sp + 0x28]\n  8834: ra = u64 [sp + 0x30]\n  8837: t2 = u64 [sp + 0x38]\n  8840: a5 = u64 [sp + 0x50]\n  8843: t1 = u64 [sp + 0x58]\n  8846: t1 = t1 + 0x1\n  8849: a0 = t1 <u 0x1\n  8852: a5 = a5 + a0\n  8855: a0 = t1 | a5\n  8858: a0 = a0 <u 0x1\n  8861: a1 = u64 [sp + 0x48]\n  8864: a0 = a0 + a1\n  8867: a1 = a0 <u a1\n  8870: s1 = s1 + a1\n  8873: a1 = t1 <u t2\n  8876: a2 = a5 ^ ra\n  8879: a3 = a5 <u ra\n  8882: a3 = a1 if a2 == 0\n  8885: a1 = a0 <u t0\n  8888: a4 = u64 [sp + 0x40]\n  8891: a2 = s1 ^ a4\n  8894: a4 = s1 <u a4\n  8897: a4 = a1 if a2 == 0\n  8900: a1 = a0 ^ t0\n  8903: a1 = a1 | a2\n  8906: a4 = a3 if a1 == 0\n  8909: jump @189 if a4 != 0\n      : @191 (gas: 6)\n  8913: sp = s0 + 0xffffffffffffff20\n  8917: ra = u64 [sp + 0xd8]\n  8921: s0 = u64 [sp + 0xd0]\n  8925: s1 = u64 [sp + 0xc8]\n  8929: sp = sp + 0xe0\n  8933: ret\n      : @192 (gas: 20)\n  8935: sp = sp + 0xfffffffffffffe80\n  8939: u64 [sp + 0x178] = ra\n  8943: u64 [sp + 0x170] = s0\n  8947: u64 [sp + 0x168] = s1\n  8951: s0 = sp + 0x180\n  8955: sp = sp & 0xffffffffffffffe0\n  8958: s1 = u64 [a1 + 0x8]\n  8961: a4 = u64 [a1 + 0x18]\n  8964: a3 = u64 [a1]\n  8966: a5 = u64 [a1 + 0x10]\n  8969: a1 = s1 + 0xffffffffffffffff\n  8972: a2 = s1 <u 0x1\n  8975: u64 [sp + 0x28] = a3\n  8978: a3 = a3 <u 0x1\n  8981: a3 = a2 if a1 != 0\n  8984: u64 [sp + 0x58] = a4\n  8987: u64 [sp + 0x50] = a5\n  8990: a1 = a5 | a4\n  8993: a3 = 0 if a1 != 0\n  8995: jump @195 if a3 == 0\n      : @193 (gas: 80)\n  8999: a3 = u64 [a0 + 0x10]\n  9002: u64 [sp + 0x38] = a3\n  9005: a2 = u64 [a0 + 0x8]\n  9008: u64 [sp + 0x40] = a2\n  9011: a1 = u64 [a0]\n  9013: u64 [sp + 0x48] = a1\n  9016: a0 = u64 [a0 + 0x18]\n  9019: u64 [sp + 0x30] = a0\n  9022: u64 [sp + 0x130] = a3\n  9026: u64 [sp + 0x128] = a2\n  9030: u64 [sp + 0x120] = a1\n  9034: u64 [sp + 0x138] = a0\n  9038: u64 [sp + 344] = 0\n  9042: u64 [sp + 336] = 0\n  9046: u64 [sp + 328] = 0\n  9050: u64 [sp + 320] = 0\n  9054: u32 [sp + 256] = 0x20\n  9059: i32 a1 = sp + 0x120\n  9063: i32 a3 = sp + 0x140\n  9067: i32 a4 = sp + 0x100\n  9071: a2 = 0xffffffffffffffff\n  9074: a0 = 0\n  9076: ecalli 7 // 'get_storage'\n  9078: a0 = u64 [sp + 0x140]\n  9082: u64 [sp + 0x20] = a0\n  9085: a0 = u64 [sp + 0x148]\n  9089: u64 [sp + 0x18] = a0\n  9092: a0 = u64 [sp + 0x150]\n  9096: u64 [sp + 0x10] = a0\n  9099: a0 = u64 [sp + 0x158]\n  9103: u64 [sp + 0x8] = a0\n  9106: a0 = u64 [sp + 0x30]\n  9109: u64 [sp + 0x138] = a0\n  9113: a0 = u64 [sp + 0x38]\n  9116: u64 [sp + 0x130] = a0\n  9120: a0 = u64 [sp + 0x40]\n  9123: u64 [sp + 0x128] = a0\n  9127: a0 = u64 [sp + 0x48]\n  9130: u64 [sp + 0x120] = a0\n  9134: a0 = u64 [sp + 0x58]\n  9137: u64 [sp + 0x158] = a0\n  9141: a0 = u64 [sp + 0x50]\n  9144: u64 [sp + 0x150] = a0\n  9148: u64 [sp + 0x148] = s1\n  9152: u64 [sp] = s1\n  9154: s1 = u64 [sp + 0x28]\n  9157: u64 [sp + 0x140] = s1\n  9161: i32 a1 = sp + 0x120\n  9165: i32 a3 = sp + 0x140\n  9169: a2 = 0xffffffffffffffff\n  9172: a4 = 0x20\n  9175: a0 = 0\n  9177: ecalli 12 // 'set_storage'\n  9179: a0 = u64 [sp + 0x58]\n  9182: u64 [sp + 0xb8] = a0\n  9186: a0 = u64 [sp + 0x50]\n  9189: u64 [sp + 0xb0] = a0\n  9193: a0 = u64 [sp]\n  9195: u64 [sp + 0xa8] = a0\n  9199: u64 [sp + 0xa0] = s1\n  9203: a0 = u64 [sp + 0x8]\n  9206: u64 [sp + 0xd8] = a0\n  9210: a0 = u64 [sp + 0x10]\n  9213: u64 [sp + 0xd0] = a0\n  9217: a0 = u64 [sp + 0x18]\n  9220: u64 [sp + 0xc8] = a0\n  9224: a0 = u64 [sp + 0x20]\n  9227: u64 [sp + 0xc0] = a0\n  9231: a0 = u64 [sp + 0x30]\n  9234: u64 [sp + 0xf8] = a0\n  9238: a0 = u64 [sp + 0x38]\n  9241: u64 [sp + 0xf0] = a0\n  9245: a0 = u64 [sp + 0x40]\n  9248: u64 [sp + 0xe8] = a0\n  9252: a0 = sp + 0xe0\n  9256: a1 = sp + 0xc0\n  9260: a2 = sp + 0xa0\n  9264: a3 = u64 [sp + 0x48]\n  9267: u64 [sp + 0xe0] = a3\n  9271: ra = 158, jump @183\n      : @194 [@dyn 79] (gas: 6)\n  9277: sp = s0 + 0xfffffffffffffe80\n  9281: ra = u64 [sp + 0x178]\n  9285: s0 = u64 [sp + 0x170]\n  9289: s1 = u64 [sp + 0x168]\n  9293: sp = sp + 0x180\n  9297: ret\n      : @195 (gas: 8)\n  9299: u64 [sp + 144] = 0\n  9303: u64 [sp + 136] = 0\n  9307: u64 [sp + 128] = 0\n  9311: a0 = 0x4e487b7100000000\n  9321: a1 = sp + 0x80\n  9325: u64 [sp + 0x98] = a0\n  9329: a0 = 0\n  9331: ra = 160, jump @23\n      : @196 [@dyn 80] (gas: 7)\n  9337: u64 [sp + 120] = 0\n  9340: u64 [sp + 112] = 0\n  9343: u64 [sp + 96] = 0x41\n  9347: a0 = 0x4\n  9350: a1 = sp + 0x60\n  9353: u64 [sp + 104] = 0\n  9356: ra = 162, jump @23\n      : @197 [@dyn 81] (gas: 3)\n  9362: a1 = 0x24\n  9365: a0 = 0\n  9367: ra = 164, jump @0\n      : @198 [@dyn 82] (gas: 6)\n  9373: i32 a1 = a0 + 0\n  9375: a0 = 0x1\n  9378: a2 = 0x24\n  9381: ra = 0xa6\n  9385: ecalli 10 // 'seal_return'\n  9387: fallthrough\n      : @199 [@dyn 83] (gas: 17)\n  9388: a2 = u64 [a1]\n  9390: t0 = u64 [a1 + 0x18]\n  9393: a4 = u64 [a1 + 0x8]\n  9396: a1 = u64 [a1 + 0x10]\n  9399: a5 = a2 + 0x20\n  9402: a2 = a5 <u a2\n  9405: a3 = a4 + a2\n  9408: a4 = a3 <u a4\n  9411: a4 = a2 if a2 == 0\n  9414: a4 = a4 + a1\n  9417: a1 = a4 <u a1\n  9420: a1 = a1 + t0\n  9423: u64 [a0] = a5\n  9425: u64 [a0 + 0x8] = a3\n  9428: u64 [a0 + 0x10] = a4\n  9431: u64 [a0 + 0x18] = a1\n  9434: ret\n      : @200 (gas: 21)\n  9436: sp = sp + 0xfffffffffffffe80\n  9440: u64 [sp + 0x178] = ra\n  9444: u64 [sp + 0x170] = s0\n  9448: u64 [sp + 0x168] = s1\n  9452: s0 = sp + 0x180\n  9456: sp = sp & 0xffffffffffffffe0\n  9459: a4 = u64 [a1 + 0x10]\n  9462: a2 = u64 [a1 + 0x18]\n  9465: a5 = u64 [a1 + 0x8]\n  9468: a3 = u64 [a1]\n  9470: u64 [sp + 0x80] = a2\n  9474: u64 [sp + 0x68] = a5\n  9477: a1 = a5 | a2\n  9480: a2 = a3 | a4\n  9483: a2 = a2 | a1\n  9486: a2 = a2 >> 0x20\n  9489: u64 [sp + 0x70] = a4\n  9492: a1 = a1 | a4\n  9495: a1 = a1 << 0x20\n  9498: a1 = a1 | a2\n  9501: jump @214 if a1 != 0\n      : @201 (gas: 12)\n  9505: a1 = u64 [a0 + 0x18]\n  9508: u64 [sp + 0x30] = a1\n  9511: a1 = u64 [a0 + 0x10]\n  9514: u64 [sp + 0x88] = a1\n  9518: a1 = u64 [a0 + 0x8]\n  9521: u64 [sp + 0x90] = a1\n  9525: a0 = u64 [a0]\n  9527: u64 [sp + 0x98] = a0\n  9531: u64 [sp + 0x60] = a3\n  9534: i32 a0 = a3 + 0\n  9536: a1 = 0x20\n  9539: ra = 168, jump @0\n      : @202 [@dyn 84] (gas: 76)\n  9545: a1 = u8 [a0 + 0x9]\n  9548: a2 = u8 [a0 + 0x8]\n  9551: a3 = u8 [a0 + 0xa]\n  9554: a4 = u8 [a0 + 0xb]\n  9557: a1 = a1 << 0x8\n  9560: a1 = a1 | a2\n  9563: a3 = a3 << 0x10\n  9566: a4 = a4 << 0x18\n  9569: a3 = a3 | a4\n  9572: a1 = a1 | a3\n  9575: a2 = u8 [a0 + 0xd]\n  9578: a3 = u8 [a0 + 0xc]\n  9581: a4 = u8 [a0 + 0xe]\n  9584: a5 = u8 [a0 + 0xf]\n  9587: a2 = a2 << 0x8\n  9590: a2 = a2 | a3\n  9593: a4 = a4 << 0x10\n  9596: a5 = a5 << 0x18\n  9599: a4 = a4 | a5\n  9602: a2 = a2 | a4\n  9605: a2 = a2 << 0x20\n  9608: t1 = a2 | a1\n  9611: a1 = u8 [a0 + 0x1]\n  9614: a2 = u8 [a0]\n  9616: a3 = u8 [a0 + 0x2]\n  9619: a4 = u8 [a0 + 0x3]\n  9622: a1 = a1 << 0x8\n  9625: a1 = a1 | a2\n  9628: a3 = a3 << 0x10\n  9631: a4 = a4 << 0x18\n  9634: a3 = a3 | a4\n  9637: a1 = a1 | a3\n  9640: a2 = u8 [a0 + 0x5]\n  9643: a3 = u8 [a0 + 0x4]\n  9646: a4 = u8 [a0 + 0x6]\n  9649: a5 = u8 [a0 + 0x7]\n  9652: a2 = a2 << 0x8\n  9655: a2 = a2 | a3\n  9658: a4 = a4 << 0x10\n  9661: a5 = a5 << 0x18\n  9664: a4 = a4 | a5\n  9667: a2 = a2 | a4\n  9670: a2 = a2 << 0x20\n  9673: s1 = a2 | a1\n  9676: a1 = u8 [a0 + 0x11]\n  9679: a2 = u8 [a0 + 0x10]\n  9682: a3 = u8 [a0 + 0x12]\n  9685: a4 = u8 [a0 + 0x13]\n  9688: a1 = a1 << 0x8\n  9691: a1 = a1 | a2\n  9694: a3 = a3 << 0x10\n  9697: a4 = a4 << 0x18\n  9700: a3 = a3 | a4\n  9703: a1 = a1 | a3\n  9706: a2 = u8 [a0 + 0x15]\n  9709: a3 = u8 [a0 + 0x14]\n  9712: a4 = u8 [a0 + 0x16]\n  9715: a5 = u8 [a0 + 0x17]\n  9718: a2 = a2 << 0x8\n  9721: a2 = a2 | a3\n  9724: a4 = a4 << 0x10\n  9727: a5 = a5 << 0x18\n  9730: a4 = a4 | a5\n  9733: a2 = a2 | a4\n  9736: a2 = a2 << 0x20\n  9739: a1 = a1 | a2\n  9742: u64 [sp + 0x28] = a1\n  9745: t0 = reverse a1\n  9747: u64 [sp + 0x38] = s1\n  9750: t2 = reverse s1\n  9752: u64 [sp + 0x78] = t1\n  9755: a5 = reverse t1\n  9757: a1 = a5 | t2\n  9760: a2 = t0 <u 0x1\n  9763: a2 = 0 if a1 != 0\n  9765: jump @215 if a2 == 0\n      : @203 (gas: 43)\n  9769: a1 = u8 [a0 + 0x19]\n  9772: a2 = u8 [a0 + 0x18]\n  9775: a3 = u8 [a0 + 0x1a]\n  9778: a4 = u8 [a0 + 0x1b]\n  9781: a1 = a1 << 0x8\n  9784: a1 = a1 | a2\n  9787: a3 = a3 << 0x10\n  9790: a4 = a4 << 0x18\n  9793: a3 = a3 | a4\n  9796: a1 = a1 | a3\n  9799: a2 = u8 [a0 + 0x1d]\n  9802: a3 = u8 [a0 + 0x1c]\n  9805: a4 = u8 [a0 + 0x1e]\n  9808: a0 = u8 [a0 + 0x1f]\n  9811: a2 = a2 << 0x8\n  9814: a2 = a2 | a3\n  9817: a4 = a4 << 0x10\n  9820: a0 = a0 << 0x18\n  9823: a0 = a0 | a4\n  9826: a0 = a0 | a2\n  9829: a0 = a0 << 0x20\n  9832: a0 = a0 | a1\n  9835: u64 [sp + 0x20] = a0\n  9838: a0 = reverse a0\n  9840: u64 [sp + 0x40] = a0\n  9843: u64 [sp + 0xe0] = a0\n  9847: a0 = u64 [sp + 0x98]\n  9851: u64 [sp + 0x100] = a0\n  9855: u64 [sp + 0xe8] = t0\n  9859: a0 = u64 [sp + 0x90]\n  9863: u64 [sp + 0x108] = a0\n  9867: u64 [sp + 0xf0] = a5\n  9871: a0 = u64 [sp + 0x88]\n  9875: u64 [sp + 0x110] = a0\n  9879: u64 [sp + 0xf8] = t2\n  9883: a0 = sp + 0x100\n  9887: a1 = sp + 0xe0\n  9891: s1 = u64 [sp + 0x30]\n  9894: u64 [sp + 0x118] = s1\n  9898: u64 [sp + 0x58] = t0\n  9901: u64 [sp + 0x50] = t2\n  9904: u64 [sp + 0x48] = a5\n  9907: ra = 170, jump @192\n      : @204 [@dyn 85] (gas: 3)\n  9913: a1 = 0x20\n  9916: a0 = 0\n  9918: ra = 172, jump @0\n      : @205 [@dyn 86] (gas: 70)\n  9924: a1 = reverse s1\n  9926: a2 = u64 [sp + 0x88]\n  9930: a2 = reverse a2\n  9932: a3 = u64 [sp + 0x90]\n  9936: a3 = reverse a3\n  9938: a4 = u64 [sp + 0x98]\n  9942: a4 = reverse a4\n  9944: a5 = a4 >> 0x38\n  9947: u8 [a0 + 0x1f] = a5\n  9950: a5 = a4 >> 0x30\n  9953: u8 [a0 + 0x1e] = a5\n  9956: a5 = a4 >> 0x28\n  9959: u8 [a0 + 0x1d] = a5\n  9962: a5 = a4 >> 0x20\n  9965: u8 [a0 + 0x1c] = a5\n  9968: a5 = a4 >> 0x18\n  9971: u8 [a0 + 0x1b] = a5\n  9974: a5 = a4 >> 0x10\n  9977: u8 [a0 + 0x1a] = a5\n  9980: a5 = a4 >> 0x8\n  9983: u8 [a0 + 0x19] = a5\n  9986: u8 [a0 + 0x18] = a4\n  9989: a4 = a3 >> 0x38\n  9992: u8 [a0 + 0x17] = a4\n  9995: a4 = a3 >> 0x30\n  9998: u8 [a0 + 0x16] = a4\n 10001: a4 = a3 >> 0x28\n 10004: u8 [a0 + 0x15] = a4\n 10007: a4 = a3 >> 0x20\n 10010: u8 [a0 + 0x14] = a4\n 10013: a4 = a3 >> 0x18\n 10016: u8 [a0 + 0x13] = a4\n 10019: a4 = a3 >> 0x10\n 10022: u8 [a0 + 0x12] = a4\n 10025: a4 = a3 >> 0x8\n 10028: u8 [a0 + 0x11] = a4\n 10031: u8 [a0 + 0x10] = a3\n 10034: a3 = a2 >> 0x38\n 10037: u8 [a0 + 0xf] = a3\n 10040: a3 = a2 >> 0x30\n 10043: u8 [a0 + 0xe] = a3\n 10046: a3 = a2 >> 0x28\n 10049: u8 [a0 + 0xd] = a3\n 10052: a3 = a2 >> 0x20\n 10055: u8 [a0 + 0xc] = a3\n 10058: a3 = a2 >> 0x18\n 10061: u8 [a0 + 0xb] = a3\n 10064: a3 = a2 >> 0x10\n 10067: u8 [a0 + 0xa] = a3\n 10070: a3 = a2 >> 0x8\n 10073: u8 [a0 + 0x9] = a3\n 10076: u8 [a0 + 0x8] = a2\n 10079: a2 = a1 >> 0x38\n 10082: u8 [a0 + 0x7] = a2\n 10085: a2 = a1 >> 0x30\n 10088: u8 [a0 + 0x6] = a2\n 10091: a2 = a1 >> 0x28\n 10094: u8 [a0 + 0x5] = a2\n 10097: a2 = a1 >> 0x20\n 10100: u8 [a0 + 0x4] = a2\n 10103: a2 = a1 >> 0x18\n 10106: u8 [a0 + 0x3] = a2\n 10109: a2 = a1 >> 0x10\n 10112: u8 [a0 + 0x2] = a2\n 10115: a2 = a1 >> 0x8\n 10118: u8 [a0 + 0x1] = a2\n 10121: u8 [a0] = a1\n 10123: a1 = 0x20\n 10126: a0 = 0\n 10128: ra = 174, jump @0\n      : @206 [@dyn 87] (gas: 5)\n 10134: i32 a0 = a0 + 0\n 10136: i32 a2 = sp + 0x140\n 10140: a1 = 0x20\n 10143: ecalli 8 // 'hash_keccak_256'\n 10145: fallthrough\n      : @207 (gas: 12)\n 10146: a0 = u64 [sp + 0x38]\n 10149: a1 = u64 [sp + 0x28]\n 10152: a0 = a0 | a1\n 10155: a1 = u64 [sp + 0x78]\n 10158: a2 = u64 [sp + 0x20]\n 10161: a1 = a1 | a2\n 10164: a0 = a0 | a1\n 10167: t0 = u64 [sp + 0x80]\n 10171: a5 = u64 [sp + 0x60]\n 10174: a3 = u64 [sp + 0x70]\n 10177: s1 = u64 [sp + 0x68]\n 10180: jump @213 if a0 == 0\n      : @208 (gas: 19)\n 10184: u64 [sp + 152] = 0\n 10188: u64 [sp + 120] = 0\n 10191: a1 = 0\n 10193: u64 [sp + 144] = 0\n 10197: a0 = u64 [sp + 0x140]\n 10201: t1 = u64 [sp + 0x148]\n 10205: a2 = u64 [sp + 0x150]\n 10209: a4 = u64 [sp + 0x158]\n 10213: a0 = reverse a0\n 10215: u64 [sp + 0x30] = a0\n 10218: a0 = reverse t1\n 10220: u64 [sp + 0x28] = a0\n 10223: a0 = reverse a2\n 10225: u64 [sp + 0x20] = a0\n 10228: a0 = reverse a4\n 10230: u64 [sp + 0x18] = a0\n 10233: a0 = 0xffffffe0\n 10243: u64 [sp + 0x38] = a0\n 10246: fallthrough\n      : @209 (gas: 7)\n 10247: u64 [sp + 0x88] = a1\n 10251: a0 = a3 | t0\n 10254: a1 = u64 [sp + 0x38]\n 10257: a1 = a5 <u a1\n 10260: a1 = 0 if s1 != 0\n 10262: a1 = 0 if a0 != 0\n 10264: jump @214 if a1 == 0\n      : @210 (gas: 15)\n 10268: a0 = a5 + 0x20\n 10271: u64 [sp + 0x70] = a0\n 10274: a0 = a0 <u a5\n 10277: a1 = s1 + a0\n 10280: u64 [sp + 0x68] = a1\n 10283: a1 = a1 <u s1\n 10286: a1 = a0 if a0 == 0\n 10289: a1 = a1 + a3\n 10292: u64 [sp + 0x60] = a1\n 10295: a0 = a1 <u a3\n 10298: a2 = t0 + a0\n 10301: u64 [sp + 0x80] = a2\n 10305: i32 a0 = a5 + 0x20\n 10308: a1 = 0x20\n 10311: ra = 176, jump @0\n      : @211 [@dyn 88] (gas: 95)\n 10317: a1 = u8 [a0 + 0x11]\n 10320: a2 = u8 [a0 + 0x10]\n 10323: a3 = u8 [a0 + 0x12]\n 10326: a4 = u8 [a0 + 0x13]\n 10329: a1 = a1 << 0x8\n 10332: a1 = a1 | a2\n 10335: a3 = a3 << 0x10\n 10338: a4 = a4 << 0x18\n 10341: a3 = a3 | a4\n 10344: a1 = a1 | a3\n 10347: a2 = u8 [a0 + 0x15]\n 10350: a3 = u8 [a0 + 0x14]\n 10353: a4 = u8 [a0 + 0x16]\n 10356: a5 = u8 [a0 + 0x17]\n 10359: a2 = a2 << 0x8\n 10362: a2 = a2 | a3\n 10365: a4 = a4 << 0x10\n 10368: a5 = a5 << 0x18\n 10371: a4 = a4 | a5\n 10374: a2 = a2 | a4\n 10377: a2 = a2 << 0x20\n 10380: t0 = a2 | a1\n 10383: a2 = u8 [a0 + 0x19]\n 10386: a3 = u8 [a0 + 0x18]\n 10389: a4 = u8 [a0 + 0x1a]\n 10392: a5 = u8 [a0 + 0x1b]\n 10395: a2 = a2 << 0x8\n 10398: a2 = a2 | a3\n 10401: a4 = a4 << 0x10\n 10404: a5 = a5 << 0x18\n 10407: a4 = a4 | a5\n 10410: a2 = a2 | a4\n 10413: a3 = u8 [a0 + 0x1d]\n 10416: a4 = u8 [a0 + 0x1c]\n 10419: a5 = u8 [a0 + 0x1e]\n 10422: a1 = u8 [a0 + 0x1f]\n 10425: a3 = a3 << 0x8\n 10428: a3 = a3 | a4\n 10431: a5 = a5 << 0x10\n 10434: a1 = a1 << 0x18\n 10437: a1 = a1 | a5\n 10440: a1 = a1 | a3\n 10443: a1 = a1 << 0x20\n 10446: t1 = a1 | a2\n 10449: a1 = u8 [a0 + 0xd]\n 10452: a3 = u8 [a0 + 0xc]\n 10455: a4 = u8 [a0 + 0xe]\n 10458: a0 = u8 [a0 + 0xf]\n 10461: a1 = a1 << 0x8\n 10464: a1 = a1 | a3\n 10467: a4 = a4 << 0x10\n 10470: a0 = a0 << 0x18\n 10473: a0 = a0 | a4\n 10476: t2 = a0 | a1\n 10479: a0 = u64 [sp + 0x98]\n 10483: a1 = u64 [sp + 0x18]\n 10486: ra = a0 + a1\n 10489: a3 = ra <u a0\n 10492: s1 = u64 [sp + 0x78]\n 10495: a4 = u64 [sp + 0x20]\n 10498: a4 = a4 + s1\n 10501: a4 = a4 + a3\n 10504: a5 = a4 ^ s1\n 10507: a2 = a4 <u s1\n 10510: a2 = a3 if a5 == 0\n 10513: a3 = u64 [sp + 0x28]\n 10516: a0 = u64 [sp + 0x88]\n 10520: a3 = a3 + a0\n 10523: a5 = a3 <u a0\n 10526: a0 = u64 [sp + 0x30]\n 10529: a1 = u64 [sp + 0x90]\n 10533: a0 = a0 + a1\n 10536: a0 = a0 + a5\n 10539: a2 = a2 + a3\n 10542: a3 = a2 <u a3\n 10545: a0 = a0 + a3\n 10548: u64 [sp + 0x128] = a4\n 10552: u64 [sp + 0x120] = ra\n 10556: u64 [sp + 0x130] = a2\n 10560: u64 [sp + 0x138] = a0\n 10564: a0 = reverse t2\n 10566: a0 = a0 >> 0x20\n 10569: u64 [sp + 0x150] = a0\n 10573: a0 = reverse t0\n 10575: u64 [sp + 0x148] = a0\n 10579: a0 = reverse t1\n 10581: u64 [sp + 0x140] = a0\n 10585: u64 [sp + 344] = 0\n 10589: i32 a1 = sp + 0x120\n 10593: i32 a3 = sp + 0x140\n 10597: a2 = 0xffffffffffffffff\n 10600: a4 = 0x20\n 10603: a0 = 0\n 10605: ecalli 12 // 'set_storage'\n 10607: fallthrough\n      : @212 (gas: 35)\n 10608: t0 = u64 [sp + 0x80]\n 10612: a2 = u64 [sp + 0x98]\n 10616: a2 = a2 + 0x1\n 10619: a0 = a2 <u 0x1\n 10622: s1 = s1 + a0\n 10625: a0 = a2 | s1\n 10628: a0 = a0 <u 0x1\n 10631: a1 = u64 [sp + 0x88]\n 10635: a0 = a0 + a1\n 10638: a1 = a0 <u a1\n 10641: a5 = u64 [sp + 0x90]\n 10645: a5 = a5 + a1\n 10648: a1 = u64 [sp + 0x40]\n 10651: u64 [sp + 0x98] = a2\n 10655: a1 = a2 <u a1\n 10658: a3 = u64 [sp + 0x58]\n 10661: a2 = s1 ^ a3\n 10664: u64 [sp + 0x78] = s1\n 10667: a3 = s1 <u a3\n 10670: a3 = a1 if a2 == 0\n 10673: a1 = u64 [sp + 0x48]\n 10676: s1 = a0 <u a1\n 10679: a4 = u64 [sp + 0x50]\n 10682: a2 = a5 ^ a4\n 10685: u64 [sp + 0x90] = a5\n 10689: a4 = a5 <u a4\n 10692: a4 = s1 if a2 == 0\n 10695: a1 = a1 ^ a0\n 10698: a1 = a1 | a2\n 10701: a4 = a3 if a1 == 0\n 10704: a1 = a0\n 10706: a5 = u64 [sp + 0x70]\n 10709: s1 = u64 [sp + 0x68]\n 10712: a3 = u64 [sp + 0x60]\n 10715: jump @209 if a4 != 0\n      : @213 (gas: 6)\n 10719: sp = s0 + 0xfffffffffffffe80\n 10723: ra = u64 [sp + 0x178]\n 10727: s0 = u64 [sp + 0x170]\n 10731: s1 = u64 [sp + 0x168]\n 10735: sp = sp + 0x180\n 10739: ret\n      : @214 (gas: 1)\n 10741: trap\n      : @215 (gas: 8)\n 10742: u64 [sp + 208] = 0\n 10746: u64 [sp + 200] = 0\n 10750: u64 [sp + 192] = 0\n 10754: a0 = 0x4e487b7100000000\n 10764: a1 = sp + 0xc0\n 10768: u64 [sp + 0xd8] = a0\n 10772: a0 = 0\n 10774: ra = 178, jump @23\n      : @216 [@dyn 89] (gas: 7)\n 10780: u64 [sp + 184] = 0\n 10784: u64 [sp + 176] = 0\n 10788: u64 [sp + 160] = 0x41\n 10793: a0 = 0x4\n 10796: a1 = sp + 0xa0\n 10800: u64 [sp + 168] = 0\n 10804: ra = 180, jump @23\n      : @217 [@dyn 90] (gas: 3)\n 10810: a1 = 0x24\n 10813: a0 = 0\n 10815: ra = 182, jump @0\n      : @218 [@dyn 91] (gas: 6)\n 10821: i32 a1 = a0 + 0\n 10823: a0 = 0x1\n 10826: a2 = 0x24\n 10829: ra = 0xb8\n 10833: ecalli 10 // 'seal_return'\n 10835: fallthrough\n      : @219 [@dyn 92] (gas: 24)\n 10836: sp = sp + 0xffffffffffffffb0\n 10839: u64 [sp + 0x48] = ra\n 10842: u64 [sp + 0x40] = s0\n 10845: s0 = sp + 0x50\n 10848: sp = sp & 0xfffffffffffffff0\n 10851: t0 = u64 [a0]\n 10853: t1 = u64 [a0 + 0x8]\n 10856: a4 = u64 [a0 + 0x10]\n 10859: a0 = u64 [a0 + 0x18]\n 10862: a5 = u64 [a1]\n 10864: a2 = u64 [a1 + 0x8]\n 10867: a3 = u64 [a1 + 0x10]\n 10870: a1 = u64 [a1 + 0x18]\n 10873: u64 [sp + 0x18] = a1\n 10876: u64 [sp + 0x10] = a3\n 10879: u64 [sp + 0x8] = a2\n 10882: u64 [sp] = a5\n 10884: u64 [sp + 0x38] = a0\n 10887: u64 [sp + 0x30] = a4\n 10890: u64 [sp + 0x28] = t1\n 10893: a0 = sp + 0x20\n 10896: a1 = sp\n 10898: u64 [sp + 0x20] = t0\n 10901: ra = 186, jump @200\n      : @220 [@dyn 93] (gas: 5)\n 10907: sp = s0 + 0xffffffffffffffb0\n 10910: ra = u64 [sp + 0x48]\n 10913: s0 = u64 [sp + 0x40]\n 10916: sp = sp + 0x50\n 10919: ret\n      : @221 (gas: 18)\n 10921: sp = sp + 0xfffffffffffffdc0\n 10925: u64 [sp + 0x238] = ra\n 10929: u64 [sp + 0x230] = s0\n 10933: u64 [sp + 0x228] = s1\n 10937: s0 = sp + 0x240\n 10941: sp = sp & 0xffffffffffffffe0\n 10944: a4 = u64 [a0 + 0x10]\n 10947: a3 = u64 [a0 + 0x18]\n 10950: a5 = u64 [a0 + 0x8]\n 10953: s1 = u64 [a0]\n 10955: a0 = a5 | a3\n 10958: a2 = s1 | a4\n 10961: a2 = a2 | a0\n 10964: a2 = a2 >> 0x20\n 10967: a0 = a0 | a4\n 10970: a0 = a0 << 0x20\n 10973: a0 = a0 | a2\n 10976: jump @247 if a0 != 0\n      : @222 (gas: 33)\n 10980: u64 [sp + 160] = 0\n 10984: u64 [sp + 184] = 0\n 10988: u64 [sp + 168] = 0\n 10992: u64 [sp + 176] = 0\n 10996: a0 = u64 [a1 + 0x18]\n 10999: u64 [sp + 0x38] = a0\n 11002: a0 = u64 [a1 + 0x10]\n 11005: u64 [sp + 0x40] = a0\n 11008: a0 = s1 + 0x20\n 11011: u64 [sp + 0x70] = a0\n 11014: a0 = a0 <u s1\n 11017: a2 = a5 + a0\n 11020: u64 [sp + 0x30] = a5\n 11023: u64 [sp + 0x68] = a2\n 11026: a2 = a2 <u a5\n 11029: a2 = a0 if a0 == 0\n 11032: a0 = u64 [a1 + 0x8]\n 11035: u64 [sp + 0x20] = a0\n 11038: a0 = u64 [a1]\n 11040: u64 [sp + 0x28] = a0\n 11043: a2 = a2 + a4\n 11046: u64 [sp + 0x48] = a4\n 11049: u64 [sp + 0x60] = a2\n 11052: a0 = a2 <u a4\n 11055: u64 [sp + 0x50] = a3\n 11058: a0 = a0 + a3\n 11061: u64 [sp + 0x58] = a0\n 11064: a0 = 0xffffffff00000000\n 11074: u64 [sp + 0x88] = a0\n 11078: u64 [sp + 0x18] = s1\n 11081: i32 s1 = s1 + 0\n 11083: u64 [sp + 0x98] = s1\n 11087: fallthrough\n      : @223 (gas: 3)\n 11088: a1 = 0x20\n 11091: a0 = s1\n 11093: ra = 188, jump @0\n      : @224 [@dyn 94] (gas: 108)\n 11099: a1 = u8 [a0 + 0x1]\n 11102: a2 = u8 [a0]\n 11104: a3 = u8 [a0 + 0x2]\n 11107: a4 = u8 [a0 + 0x3]\n 11110: a1 = a1 << 0x8\n 11113: a1 = a1 | a2\n 11116: a3 = a3 << 0x10\n 11119: a4 = a4 << 0x18\n 11122: a3 = a3 | a4\n 11125: a1 = a1 | a3\n 11128: a2 = u8 [a0 + 0x5]\n 11131: a3 = u8 [a0 + 0x4]\n 11134: a4 = u8 [a0 + 0x6]\n 11137: a5 = u8 [a0 + 0x7]\n 11140: a2 = a2 << 0x8\n 11143: a2 = a2 | a3\n 11146: a4 = a4 << 0x10\n 11149: a5 = a5 << 0x18\n 11152: a4 = a4 | a5\n 11155: a2 = a2 | a4\n 11158: a2 = a2 << 0x20\n 11161: t0 = a2 | a1\n 11164: a2 = u8 [a0 + 0x9]\n 11167: a3 = u8 [a0 + 0x8]\n 11170: a4 = u8 [a0 + 0xa]\n 11173: a5 = u8 [a0 + 0xb]\n 11176: a2 = a2 << 0x8\n 11179: a2 = a2 | a3\n 11182: a4 = a4 << 0x10\n 11185: a5 = a5 << 0x18\n 11188: a4 = a4 | a5\n 11191: a2 = a2 | a4\n 11194: a3 = u8 [a0 + 0xd]\n 11197: a4 = u8 [a0 + 0xc]\n 11200: a5 = u8 [a0 + 0xe]\n 11203: s1 = u8 [a0 + 0xf]\n 11206: a3 = a3 << 0x8\n 11209: a3 = a3 | a4\n 11212: a5 = a5 << 0x10\n 11215: s1 = s1 << 0x18\n 11218: a5 = a5 | s1\n 11221: a3 = a3 | a5\n 11224: a3 = a3 << 0x20\n 11227: a2 = a2 | a3\n 11230: a3 = u8 [a0 + 0x11]\n 11233: a4 = u8 [a0 + 0x10]\n 11236: a5 = u8 [a0 + 0x12]\n 11239: s1 = u8 [a0 + 0x13]\n 11242: a3 = a3 << 0x8\n 11245: a3 = a3 | a4\n 11248: a5 = a5 << 0x10\n 11251: s1 = s1 << 0x18\n 11254: a5 = a5 | s1\n 11257: a3 = a3 | a5\n 11260: a4 = u8 [a0 + 0x15]\n 11263: a5 = u8 [a0 + 0x14]\n 11266: s1 = u8 [a0 + 0x16]\n 11269: a1 = u8 [a0 + 0x17]\n 11272: a4 = a4 << 0x8\n 11275: a4 = a4 | a5\n 11278: s1 = s1 << 0x10\n 11281: a1 = a1 << 0x18\n 11284: a1 = a1 | s1\n 11287: a1 = a1 | a4\n 11290: a1 = a1 << 0x20\n 11293: a3 = a3 | a1\n 11296: a1 = u8 [a0 + 0x19]\n 11299: a4 = u8 [a0 + 0x18]\n 11302: a5 = u8 [a0 + 0x1a]\n 11305: s1 = u8 [a0 + 0x1b]\n 11308: a1 = a1 << 0x8\n 11311: a1 = a1 | a4\n 11314: a5 = a5 << 0x10\n 11317: s1 = s1 << 0x18\n 11320: a5 = a5 | s1\n 11323: a1 = a1 | a5\n 11326: a4 = u8 [a0 + 0x1d]\n 11329: a5 = u8 [a0 + 0x1c]\n 11332: s1 = u8 [a0 + 0x1e]\n 11335: a0 = u8 [a0 + 0x1f]\n 11338: a4 = a4 << 0x8\n 11341: a4 = a4 | a5\n 11344: s1 = s1 << 0x10\n 11347: a0 = a0 << 0x18\n 11350: a0 = a0 | s1\n 11353: a0 = a0 | a4\n 11356: a0 = a0 << 0x20\n 11359: a0 = a0 | a1\n 11362: t1 = reverse a0\n 11364: a0 = reverse a3\n 11366: a2 = reverse a2\n 11368: a3 = reverse t0\n 11370: a4 = u64 [sp + 0xb0]\n 11374: s1 = a4 ^ a3\n 11377: a3 = a4 <u a3\n 11380: a1 = u64 [sp + 0xa8]\n 11384: a5 = a1 <u a2\n 11387: a5 = a3 if s1 != 0\n 11390: a4 = u64 [sp + 0xb8]\n 11394: a3 = a4 ^ a0\n 11397: t0 = a4 <u a0\n 11400: a4 = u64 [sp + 0xa0]\n 11404: a0 = a4 <u t1\n 11407: a0 = t0 if a3 != 0\n 11410: a1 = a1 ^ a2\n 11413: a1 = a1 | s1\n 11416: a0 = a5 if a1 != 0\n 11419: jump @245 if a0 == 0\n      : @225 (gas: 3)\n 11423: a1 = 0x20\n 11426: a0 = u64 [sp + 0x98]\n 11430: ra = 190, jump @0\n      : @226 [@dyn 95] (gas: 108)\n 11436: ra = u64 [sp + 0xa8]\n 11440: t2 = u64 [sp + 0xb0]\n 11444: a1 = u8 [a0 + 0x1]\n 11447: a2 = u8 [a0]\n 11449: a3 = u8 [a0 + 0x2]\n 11452: a4 = u8 [a0 + 0x3]\n 11455: a1 = a1 << 0x8\n 11458: a1 = a1 | a2\n 11461: a3 = a3 << 0x10\n 11464: a4 = a4 << 0x18\n 11467: a3 = a3 | a4\n 11470: a1 = a1 | a3\n 11473: a2 = u8 [a0 + 0x5]\n 11476: a3 = u8 [a0 + 0x4]\n 11479: a4 = u8 [a0 + 0x6]\n 11482: a5 = u8 [a0 + 0x7]\n 11485: a2 = a2 << 0x8\n 11488: a2 = a2 | a3\n 11491: a4 = a4 << 0x10\n 11494: a5 = a5 << 0x18\n 11497: a4 = a4 | a5\n 11500: a2 = a2 | a4\n 11503: a2 = a2 << 0x20\n 11506: t0 = a2 | a1\n 11509: a2 = u8 [a0 + 0x9]\n 11512: a3 = u8 [a0 + 0x8]\n 11515: a4 = u8 [a0 + 0xa]\n 11518: a5 = u8 [a0 + 0xb]\n 11521: a2 = a2 << 0x8\n 11524: a2 = a2 | a3\n 11527: a4 = a4 << 0x10\n 11530: a5 = a5 << 0x18\n 11533: a4 = a4 | a5\n 11536: a2 = a2 | a4\n 11539: a3 = u8 [a0 + 0xd]\n 11542: a4 = u8 [a0 + 0xc]\n 11545: a5 = u8 [a0 + 0xe]\n 11548: s1 = u8 [a0 + 0xf]\n 11551: a3 = a3 << 0x8\n 11554: a3 = a3 | a4\n 11557: a5 = a5 << 0x10\n 11560: s1 = s1 << 0x18\n 11563: a5 = a5 | s1\n 11566: a3 = a3 | a5\n 11569: a3 = a3 << 0x20\n 11572: a2 = a2 | a3\n 11575: a3 = u8 [a0 + 0x11]\n 11578: a4 = u8 [a0 + 0x10]\n 11581: a5 = u8 [a0 + 0x12]\n 11584: s1 = u8 [a0 + 0x13]\n 11587: a3 = a3 << 0x8\n 11590: a3 = a3 | a4\n 11593: a5 = a5 << 0x10\n 11596: s1 = s1 << 0x18\n 11599: a5 = a5 | s1\n 11602: a3 = a3 | a5\n 11605: a4 = u8 [a0 + 0x15]\n 11608: a5 = u8 [a0 + 0x14]\n 11611: s1 = u8 [a0 + 0x16]\n 11614: a1 = u8 [a0 + 0x17]\n 11617: a4 = a4 << 0x8\n 11620: a4 = a4 | a5\n 11623: s1 = s1 << 0x10\n 11626: a1 = a1 << 0x18\n 11629: a1 = a1 | s1\n 11632: a1 = a1 | a4\n 11635: a1 = a1 << 0x20\n 11638: a3 = a3 | a1\n 11641: a1 = u8 [a0 + 0x19]\n 11644: a4 = u8 [a0 + 0x18]\n 11647: a5 = u8 [a0 + 0x1a]\n 11650: s1 = u8 [a0 + 0x1b]\n 11653: a1 = a1 << 0x8\n 11656: a1 = a1 | a4\n 11659: a5 = a5 << 0x10\n 11662: s1 = s1 << 0x18\n 11665: a5 = a5 | s1\n 11668: a1 = a1 | a5\n 11671: a4 = u8 [a0 + 0x1d]\n 11674: a5 = u8 [a0 + 0x1c]\n 11677: s1 = u8 [a0 + 0x1e]\n 11680: a0 = u8 [a0 + 0x1f]\n 11683: a4 = a4 << 0x8\n 11686: a4 = a4 | a5\n 11689: s1 = s1 << 0x10\n 11692: a0 = a0 << 0x18\n 11695: a0 = a0 | s1\n 11698: a0 = a0 | a4\n 11701: a0 = a0 << 0x20\n 11704: a0 = a0 | a1\n 11707: t1 = reverse a0\n 11709: a1 = reverse a3\n 11711: a2 = reverse a2\n 11713: a5 = reverse t0\n 11715: a3 = u64 [sp + 0xb8]\n 11719: s1 = u64 [sp + 0xa0]\n 11723: a4 = a5 ^ t2\n 11726: a0 = t2 <u a5\n 11729: a5 = ra <u a2\n 11732: a5 = a0 if a4 != 0\n 11735: t0 = a1 ^ a3\n 11738: a1 = a3 <u a1\n 11741: a0 = s1 <u t1\n 11744: a0 = a1 if t0 != 0\n 11747: a1 = a2 ^ ra\n 11750: a1 = a1 | a4\n 11753: a0 = a5 if a1 != 0\n 11756: jump @250 if a0 == 0\n      : @227 (gas: 36)\n 11760: a0 = ra >> 0x3b\n 11763: a1 = t2 << 0x5\n 11766: t0 = a1 | a0\n 11769: a0 = s1 >> 0x3b\n 11772: a2 = a3 << 0x5\n 11775: a2 = a2 | a0\n 11778: a0 = s1 << 0x5\n 11781: a4 = u64 [sp + 0x70]\n 11784: a0 = a0 + a4\n 11787: s1 = a0 <u a4\n 11790: a5 = u64 [sp + 0x68]\n 11793: a2 = a2 + a5\n 11796: a2 = a2 + s1\n 11799: a4 = a2 ^ a5\n 11802: a5 = a2 <u a5\n 11805: a5 = s1 if a4 == 0\n 11808: a3 = a3 >> 0x3b\n 11811: a4 = ra << 0x5\n 11814: a3 = a3 | a4\n 11817: a4 = u64 [sp + 0x60]\n 11820: a3 = a3 + a4\n 11823: a4 = a3 <u a4\n 11826: a1 = u64 [sp + 0x58]\n 11829: a1 = a1 + t0\n 11832: a1 = a1 + a4\n 11835: a5 = a5 + a3\n 11838: a3 = a5 <u a3\n 11841: a1 = a1 + a3\n 11844: a1 = a1 | a2\n 11847: a2 = a0 | a5\n 11850: a2 = a2 | a1\n 11853: a1 = a1 | a5\n 11856: a2 = a2 >> 0x20\n 11859: a1 = a1 << 0x20\n 11862: a1 = a1 | a2\n 11865: jump @247 if a1 != 0\n      : @228 (gas: 4)\n 11869: i32 a0 = a0 + 0\n 11871: a1 = 0x20\n 11874: u64 [sp + 0x90] = a0\n 11878: ra = 192, jump @0\n      : @229 [@dyn 96] (gas: 75)\n 11884: a1 = u8 [a0 + 0x19]\n 11887: a2 = u8 [a0 + 0x18]\n 11890: a3 = u8 [a0 + 0x1a]\n 11893: a4 = u8 [a0 + 0x1b]\n 11896: a1 = a1 << 0x8\n 11899: a1 = a1 | a2\n 11902: a3 = a3 << 0x10\n 11905: a4 = a4 << 0x18\n 11908: a3 = a3 | a4\n 11911: a1 = a1 | a3\n 11914: a2 = u8 [a0 + 0x1d]\n 11917: a3 = u8 [a0 + 0x1c]\n 11920: a4 = u8 [a0 + 0x1e]\n 11923: a5 = u8 [a0 + 0x1f]\n 11926: a2 = a2 << 0x8\n 11929: a2 = a2 | a3\n 11932: a4 = a4 << 0x10\n 11935: a5 = a5 << 0x18\n 11938: a4 = a4 | a5\n 11941: a2 = a2 | a4\n 11944: a2 = a2 << 0x20\n 11947: a1 = a1 | a2\n 11950: a2 = u8 [a0 + 0x11]\n 11953: a3 = u8 [a0 + 0x10]\n 11956: a4 = u8 [a0 + 0x12]\n 11959: a5 = u8 [a0 + 0x13]\n 11962: a2 = a2 << 0x8\n 11965: a2 = a2 | a3\n 11968: a4 = a4 << 0x10\n 11971: a5 = a5 << 0x18\n 11974: a4 = a4 | a5\n 11977: a2 = a2 | a4\n 11980: a3 = u8 [a0 + 0x15]\n 11983: a4 = u8 [a0 + 0x14]\n 11986: a5 = u8 [a0 + 0x16]\n 11989: s1 = u8 [a0 + 0x17]\n 11992: a3 = a3 << 0x8\n 11995: a3 = a3 | a4\n 11998: a5 = a5 << 0x10\n 12001: s1 = s1 << 0x18\n 12004: a5 = a5 | s1\n 12007: a3 = a3 | a5\n 12010: a3 = a3 << 0x20\n 12013: a2 = a2 | a3\n 12016: a3 = u8 [a0 + 0x9]\n 12019: a4 = u8 [a0 + 0x8]\n 12022: a5 = u8 [a0 + 0xa]\n 12025: s1 = u8 [a0 + 0xb]\n 12028: a3 = a3 << 0x8\n 12031: a3 = a3 | a4\n 12034: a5 = a5 << 0x10\n 12037: s1 = s1 << 0x18\n 12040: a5 = a5 | s1\n 12043: a3 = a3 | a5\n 12046: a4 = u8 [a0 + 0xd]\n 12049: a5 = u8 [a0 + 0xc]\n 12052: s1 = u8 [a0 + 0xe]\n 12055: a0 = u8 [a0 + 0xf]\n 12058: a4 = a4 << 0x8\n 12061: a4 = a4 | a5\n 12064: s1 = s1 << 0x10\n 12067: a0 = a0 << 0x18\n 12070: a0 = a0 | s1\n 12073: a0 = a0 | a4\n 12076: a0 = a0 << 0x20\n 12079: a0 = a0 | a3\n 12082: a3 = u64 [sp + 0x88]\n 12086: a0 = a0 & a3\n 12089: u64 [sp + 0x80] = a0\n 12093: a2 = a2 & 0xffffffffffffffff\n 12096: u64 [sp + 0x78] = a2\n 12099: s1 = a1 & 0xffffffffffffffff\n 12102: a1 = 0x20\n 12105: a0 = 0\n 12107: ra = 194, jump @0\n      : @230 [@dyn 97] (gas: 58)\n 12113: u8 [a0 + 7] = 0\n 12116: u8 [a0 + 6] = 0\n 12119: u8 [a0 + 5] = 0\n 12122: u8 [a0 + 4] = 0\n 12125: u8 [a0 + 3] = 0\n 12128: u8 [a0 + 2] = 0\n 12131: u8 [a0 + 1] = 0\n 12134: u8 [a0 + 0] = 0\n 12136: u8 [a0 + 0x18] = s1\n 12139: a3 = u64 [sp + 0x78]\n 12142: u8 [a0 + 0x10] = a3\n 12145: a2 = u64 [sp + 0x80]\n 12149: u8 [a0 + 0x8] = a2\n 12152: a1 = s1 >> 0x38\n 12155: u8 [a0 + 0x1f] = a1\n 12158: a1 = s1 >> 0x30\n 12161: u8 [a0 + 0x1e] = a1\n 12164: a1 = s1 >> 0x28\n 12167: u8 [a0 + 0x1d] = a1\n 12170: a1 = s1 >> 0x20\n 12173: u8 [a0 + 0x1c] = a1\n 12176: a1 = s1 >> 0x18\n 12179: u8 [a0 + 0x1b] = a1\n 12182: a1 = s1 >> 0x10\n 12185: u8 [a0 + 0x1a] = a1\n 12188: s1 = s1 >> 0x8\n 12191: u8 [a0 + 0x19] = s1\n 12194: a1 = a3 >> 0x38\n 12197: u8 [a0 + 0x17] = a1\n 12200: a1 = a3 >> 0x30\n 12203: u8 [a0 + 0x16] = a1\n 12206: a1 = a3 >> 0x28\n 12209: u8 [a0 + 0x15] = a1\n 12212: a1 = a3 >> 0x20\n 12215: u8 [a0 + 0x14] = a1\n 12218: a1 = a3 >> 0x18\n 12221: u8 [a0 + 0x13] = a1\n 12224: a1 = a3 >> 0x10\n 12227: u8 [a0 + 0x12] = a1\n 12230: a1 = a3 >> 0x8\n 12233: u8 [a0 + 0x11] = a1\n 12236: a1 = a2 >> 0x38\n 12239: u8 [a0 + 0xf] = a1\n 12242: a1 = a2 >> 0x30\n 12245: u8 [a0 + 0xe] = a1\n 12248: a1 = a2 >> 0x28\n 12251: u8 [a0 + 0xd] = a1\n 12254: a1 = a2 >> 0x20\n 12257: u8 [a0 + 0xc] = a1\n 12260: a1 = a2 >> 0x18\n 12263: u8 [a0 + 0xb] = a1\n 12266: a1 = a2 >> 0x10\n 12269: u8 [a0 + 0xa] = a1\n 12272: a1 = a2 >> 0x8\n 12275: u8 [a0 + 0x9] = a1\n 12278: a0 = 0x20\n 12281: a1 = 0x20\n 12284: ra = 196, jump @0\n      : @231 [@dyn 98] (gas: 35)\n 12290: u8 [a0 + 31] = 0x2\n 12294: u8 [a0 + 30] = 0\n 12297: u8 [a0 + 29] = 0\n 12300: u8 [a0 + 28] = 0\n 12303: u8 [a0 + 27] = 0\n 12306: u8 [a0 + 26] = 0\n 12309: u8 [a0 + 25] = 0\n 12312: u8 [a0 + 24] = 0\n 12315: u8 [a0 + 23] = 0\n 12318: u8 [a0 + 22] = 0\n 12321: u8 [a0 + 21] = 0\n 12324: u8 [a0 + 20] = 0\n 12327: u8 [a0 + 19] = 0\n 12330: u8 [a0 + 18] = 0\n 12333: u8 [a0 + 17] = 0\n 12336: u8 [a0 + 16] = 0\n 12339: u8 [a0 + 15] = 0\n 12342: u8 [a0 + 14] = 0\n 12345: u8 [a0 + 13] = 0\n 12348: u8 [a0 + 12] = 0\n 12351: u8 [a0 + 11] = 0\n 12354: u8 [a0 + 10] = 0\n 12357: u8 [a0 + 9] = 0\n 12360: u8 [a0 + 8] = 0\n 12363: u8 [a0 + 7] = 0\n 12366: u8 [a0 + 6] = 0\n 12369: u8 [a0 + 5] = 0\n 12372: u8 [a0 + 4] = 0\n 12375: u8 [a0 + 3] = 0\n 12378: u8 [a0 + 2] = 0\n 12381: u8 [a0 + 1] = 0\n 12384: u8 [a0 + 0] = 0\n 12386: a1 = 0x40\n 12389: a0 = 0\n 12391: ra = 198, jump @0\n      : @232 [@dyn 99] (gas: 28)\n 12397: i32 a0 = a0 + 0\n 12399: i32 a2 = sp + 0x200\n 12403: a1 = 0x40\n 12406: ecalli 8 // 'hash_keccak_256'\n 12408: a0 = u64 [sp + 0x218]\n 12412: a1 = u64 [sp + 0x210]\n 12416: a2 = u64 [sp + 0x208]\n 12420: a3 = u64 [sp + 0x200]\n 12424: a0 = reverse a0\n 12426: a1 = reverse a1\n 12428: a2 = reverse a2\n 12430: a3 = reverse a3\n 12432: u64 [sp + 0x1f8] = a3\n 12436: u64 [sp + 0x1f0] = a2\n 12440: u64 [sp + 0x1e8] = a1\n 12444: u64 [sp + 0x1e0] = a0\n 12448: u64 [sp + 536] = 0\n 12452: u64 [sp + 528] = 0\n 12456: u64 [sp + 520] = 0\n 12460: u64 [sp + 512] = 0\n 12464: u32 [sp + 448] = 0x20\n 12469: i32 a1 = sp + 0x1e0\n 12473: i32 a3 = sp + 0x200\n 12477: i32 a4 = sp + 0x1c0\n 12481: a2 = 0xffffffffffffffff\n 12484: a0 = 0\n 12486: ecalli 7 // 'get_storage'\n 12488: fallthrough\n      : @233 (gas: 2)\n 12489: a0 = u8 [sp + 0x200]\n 12493: jump @248 if a0 != 0\n      : @234 (gas: 3)\n 12497: a1 = 0x20\n 12500: a0 = u64 [sp + 0x98]\n 12504: ra = 200, jump @0\n      : @235 [@dyn 100] (gas: 108)\n 12510: a1 = u8 [a0 + 0x1]\n 12513: a2 = u8 [a0]\n 12515: a3 = u8 [a0 + 0x2]\n 12518: a4 = u8 [a0 + 0x3]\n 12521: a1 = a1 << 0x8\n 12524: a1 = a1 | a2\n 12527: a3 = a3 << 0x10\n 12530: a4 = a4 << 0x18\n 12533: a3 = a3 | a4\n 12536: a1 = a1 | a3\n 12539: a2 = u8 [a0 + 0x5]\n 12542: a3 = u8 [a0 + 0x4]\n 12545: a4 = u8 [a0 + 0x6]\n 12548: a5 = u8 [a0 + 0x7]\n 12551: a2 = a2 << 0x8\n 12554: a2 = a2 | a3\n 12557: a4 = a4 << 0x10\n 12560: a5 = a5 << 0x18\n 12563: a4 = a4 | a5\n 12566: a2 = a2 | a4\n 12569: a2 = a2 << 0x20\n 12572: t0 = a2 | a1\n 12575: a2 = u8 [a0 + 0x9]\n 12578: a3 = u8 [a0 + 0x8]\n 12581: a4 = u8 [a0 + 0xa]\n 12584: a5 = u8 [a0 + 0xb]\n 12587: a2 = a2 << 0x8\n 12590: a2 = a2 | a3\n 12593: a4 = a4 << 0x10\n 12596: a5 = a5 << 0x18\n 12599: a4 = a4 | a5\n 12602: a2 = a2 | a4\n 12605: a3 = u8 [a0 + 0xd]\n 12608: a4 = u8 [a0 + 0xc]\n 12611: a5 = u8 [a0 + 0xe]\n 12614: s1 = u8 [a0 + 0xf]\n 12617: a3 = a3 << 0x8\n 12620: a3 = a3 | a4\n 12623: a5 = a5 << 0x10\n 12626: s1 = s1 << 0x18\n 12629: a5 = a5 | s1\n 12632: a3 = a3 | a5\n 12635: a3 = a3 << 0x20\n 12638: a2 = a2 | a3\n 12641: a3 = u8 [a0 + 0x11]\n 12644: a4 = u8 [a0 + 0x10]\n 12647: a5 = u8 [a0 + 0x12]\n 12650: s1 = u8 [a0 + 0x13]\n 12653: a3 = a3 << 0x8\n 12656: a3 = a3 | a4\n 12659: a5 = a5 << 0x10\n 12662: s1 = s1 << 0x18\n 12665: a5 = a5 | s1\n 12668: a3 = a3 | a5\n 12671: a4 = u8 [a0 + 0x15]\n 12674: a5 = u8 [a0 + 0x14]\n 12677: s1 = u8 [a0 + 0x16]\n 12680: a1 = u8 [a0 + 0x17]\n 12683: a4 = a4 << 0x8\n 12686: a4 = a4 | a5\n 12689: s1 = s1 << 0x10\n 12692: a1 = a1 << 0x18\n 12695: a1 = a1 | s1\n 12698: a1 = a1 | a4\n 12701: a1 = a1 << 0x20\n 12704: a3 = a3 | a1\n 12707: a1 = u8 [a0 + 0x19]\n 12710: a4 = u8 [a0 + 0x18]\n 12713: a5 = u8 [a0 + 0x1a]\n 12716: s1 = u8 [a0 + 0x1b]\n 12719: a1 = a1 << 0x8\n 12722: a1 = a1 | a4\n 12725: a5 = a5 << 0x10\n 12728: s1 = s1 << 0x18\n 12731: a5 = a5 | s1\n 12734: a1 = a1 | a5\n 12737: a4 = u8 [a0 + 0x1d]\n 12740: a5 = u8 [a0 + 0x1c]\n 12743: s1 = u8 [a0 + 0x1e]\n 12746: a0 = u8 [a0 + 0x1f]\n 12749: a4 = a4 << 0x8\n 12752: a4 = a4 | a5\n 12755: s1 = s1 << 0x10\n 12758: a0 = a0 << 0x18\n 12761: a0 = a0 | s1\n 12764: a0 = a0 | a4\n 12767: a0 = a0 << 0x20\n 12770: a0 = a0 | a1\n 12773: a0 = reverse a0\n 12775: s1 = reverse a3\n 12777: a2 = reverse a2\n 12779: a3 = reverse t0\n 12781: a5 = u64 [sp + 0xb0]\n 12785: a4 = a3 ^ a5\n 12788: a3 = a5 <u a3\n 12791: a1 = u64 [sp + 0xa8]\n 12795: a5 = a1 <u a2\n 12798: a5 = a3 if a4 != 0\n 12801: a3 = u64 [sp + 0xb8]\n 12805: t0 = s1 ^ a3\n 12808: a3 = a3 <u s1\n 12811: s1 = u64 [sp + 0xa0]\n 12815: a0 = s1 <u a0\n 12818: a0 = a3 if t0 != 0\n 12821: a1 = a1 ^ a2\n 12824: a1 = a1 | a4\n 12827: a0 = a5 if a1 != 0\n 12830: jump @252 if a0 == 0\n      : @236 (gas: 3)\n 12834: a1 = 0x20\n 12837: a0 = u64 [sp + 0x90]\n 12841: ra = 202, jump @0\n      : @237 [@dyn 101] (gas: 62)\n 12847: a1 = u8 [a0 + 0x19]\n 12850: a2 = u8 [a0 + 0x18]\n 12853: a3 = u8 [a0 + 0x1a]\n 12856: a4 = u8 [a0 + 0x1b]\n 12859: a1 = a1 << 0x8\n 12862: a1 = a1 | a2\n 12865: a3 = a3 << 0x10\n 12868: a4 = a4 << 0x18\n 12871: a3 = a3 | a4\n 12874: t1 = a3 | a1\n 12877: a2 = u8 [a0 + 0x1d]\n 12880: a3 = u8 [a0 + 0x1c]\n 12883: a4 = u8 [a0 + 0x1e]\n 12886: a5 = u8 [a0 + 0x1f]\n 12889: a2 = a2 << 0x8\n 12892: a2 = a2 | a3\n 12895: a4 = a4 << 0x10\n 12898: a5 = a5 << 0x18\n 12901: a4 = a4 | a5\n 12904: a2 = a2 | a4\n 12907: a3 = u8 [a0 + 0xd]\n 12910: a4 = u8 [a0 + 0xc]\n 12913: a5 = u8 [a0 + 0xe]\n 12916: s1 = u8 [a0 + 0xf]\n 12919: a3 = a3 << 0x8\n 12922: a3 = a3 | a4\n 12925: a5 = a5 << 0x10\n 12928: s1 = s1 << 0x18\n 12931: a5 = a5 | s1\n 12934: t0 = a5 | a3\n 12937: a4 = u8 [a0 + 0x15]\n 12940: a5 = u8 [a0 + 0x14]\n 12943: s1 = u8 [a0 + 0x16]\n 12946: a3 = u8 [a0 + 0x17]\n 12949: a4 = a4 << 0x8\n 12952: a4 = a4 | a5\n 12955: s1 = s1 << 0x10\n 12958: a3 = a3 << 0x18\n 12961: a5 = u8 [a0 + 0x11]\n 12964: a1 = u8 [a0 + 0x10]\n 12967: a3 = a3 | s1\n 12970: a3 = a3 | a4\n 12973: a5 = a5 << 0x8\n 12976: a1 = a1 | a5\n 12979: a4 = u8 [a0 + 0x12]\n 12982: a0 = u8 [a0 + 0x13]\n 12985: a5 = a2 << 0x20\n 12988: a5 = a5 | t1\n 12991: a4 = a4 << 0x10\n 12994: a0 = a0 << 0x18\n 12997: a0 = a0 | a4\n 13000: a0 = a0 | a1\n 13003: a1 = a0 | a3\n 13006: a1 = a1 >u 0\n 13008: a4 = a5 >u 0\n 13010: a4 = a1 if a5 == 0\n 13013: a2 = a2 | a3\n 13016: a0 = a0 | t1\n 13019: a0 = a0 | a2\n 13022: a1 = t0 >u 0\n 13024: a1 = a4 if a0 != 0\n 13027: jump @248 if a1 == 0\n      : @238 (gas: 3)\n 13031: a1 = 0x20\n 13034: a0 = u64 [sp + 0x98]\n 13038: ra = 204, jump @0\n      : @239 [@dyn 102] (gas: 111)\n 13044: a1 = u8 [a0 + 0x1]\n 13047: a2 = u8 [a0]\n 13049: a3 = u8 [a0 + 0x2]\n 13052: a4 = u8 [a0 + 0x3]\n 13055: a1 = a1 << 0x8\n 13058: a1 = a1 | a2\n 13061: a3 = a3 << 0x10\n 13064: a4 = a4 << 0x18\n 13067: a3 = a3 | a4\n 13070: a1 = a1 | a3\n 13073: a2 = u8 [a0 + 0x5]\n 13076: a3 = u8 [a0 + 0x4]\n 13079: a4 = u8 [a0 + 0x6]\n 13082: a5 = u8 [a0 + 0x7]\n 13085: a2 = a2 << 0x8\n 13088: a2 = a2 | a3\n 13091: a4 = a4 << 0x10\n 13094: a5 = a5 << 0x18\n 13097: a4 = a4 | a5\n 13100: a2 = a2 | a4\n 13103: a2 = a2 << 0x20\n 13106: t0 = a2 | a1\n 13109: a2 = u8 [a0 + 0x9]\n 13112: a3 = u8 [a0 + 0x8]\n 13115: a4 = u8 [a0 + 0xa]\n 13118: a5 = u8 [a0 + 0xb]\n 13121: a2 = a2 << 0x8\n 13124: a2 = a2 | a3\n 13127: a4 = a4 << 0x10\n 13130: a5 = a5 << 0x18\n 13133: a4 = a4 | a5\n 13136: a2 = a2 | a4\n 13139: a3 = u8 [a0 + 0xd]\n 13142: a4 = u8 [a0 + 0xc]\n 13145: a5 = u8 [a0 + 0xe]\n 13148: s1 = u8 [a0 + 0xf]\n 13151: a3 = a3 << 0x8\n 13154: a3 = a3 | a4\n 13157: a5 = a5 << 0x10\n 13160: s1 = s1 << 0x18\n 13163: a5 = a5 | s1\n 13166: a3 = a3 | a5\n 13169: a3 = a3 << 0x20\n 13172: a2 = a2 | a3\n 13175: a3 = u8 [a0 + 0x11]\n 13178: a4 = u8 [a0 + 0x10]\n 13181: a5 = u8 [a0 + 0x12]\n 13184: s1 = u8 [a0 + 0x13]\n 13187: a3 = a3 << 0x8\n 13190: a3 = a3 | a4\n 13193: a5 = a5 << 0x10\n 13196: s1 = s1 << 0x18\n 13199: a5 = a5 | s1\n 13202: a3 = a3 | a5\n 13205: a4 = u8 [a0 + 0x15]\n 13208: a5 = u8 [a0 + 0x14]\n 13211: s1 = u8 [a0 + 0x16]\n 13214: a1 = u8 [a0 + 0x17]\n 13217: a4 = a4 << 0x8\n 13220: a4 = a4 | a5\n 13223: s1 = s1 << 0x10\n 13226: a1 = a1 << 0x18\n 13229: a1 = a1 | s1\n 13232: a1 = a1 | a4\n 13235: a1 = a1 << 0x20\n 13238: a3 = a3 | a1\n 13241: a1 = u8 [a0 + 0x19]\n 13244: a4 = u8 [a0 + 0x18]\n 13247: a5 = u8 [a0 + 0x1a]\n 13250: s1 = u8 [a0 + 0x1b]\n 13253: a1 = a1 << 0x8\n 13256: a1 = a1 | a4\n 13259: a5 = a5 << 0x10\n 13262: s1 = s1 << 0x18\n 13265: a5 = a5 | s1\n 13268: a1 = a1 | a5\n 13271: a4 = u8 [a0 + 0x1d]\n 13274: a5 = u8 [a0 + 0x1c]\n 13277: s1 = u8 [a0 + 0x1e]\n 13280: a0 = u8 [a0 + 0x1f]\n 13283: a4 = a4 << 0x8\n 13286: a4 = a4 | a5\n 13289: s1 = s1 << 0x10\n 13292: a0 = a0 << 0x18\n 13295: a0 = a0 | s1\n 13298: a0 = a0 | a4\n 13301: a0 = a0 << 0x20\n 13304: a0 = a0 | a1\n 13307: a0 = reverse a0\n 13309: s1 = reverse a3\n 13311: a2 = reverse a2\n 13313: a3 = reverse t0\n 13315: a5 = u64 [sp + 0xb0]\n 13319: a4 = a3 ^ a5\n 13322: u64 [sp + 0xb0] = a5\n 13326: a3 = a5 <u a3\n 13329: a1 = u64 [sp + 0xa8]\n 13333: a5 = a1 <u a2\n 13336: a5 = a3 if a4 != 0\n 13339: a3 = u64 [sp + 0xb8]\n 13343: t0 = s1 ^ a3\n 13346: u64 [sp + 0xb8] = a3\n 13350: s1 = a3 <u s1\n 13353: a3 = u64 [sp + 0xa0]\n 13357: a0 = a3 <u a0\n 13360: a0 = s1 if t0 != 0\n 13363: u64 [sp + 0xa8] = a1\n 13367: a1 = a1 ^ a2\n 13370: a1 = a1 | a4\n 13373: a0 = a5 if a1 != 0\n 13376: jump @254 if a0 == 0\n      : @240 (gas: 3)\n 13380: a1 = 0x20\n 13383: a0 = u64 [sp + 0x90]\n 13387: ra = 206, jump @0\n      : @241 [@dyn 103] (gas: 75)\n 13393: a1 = u8 [a0 + 0x19]\n 13396: a2 = u8 [a0 + 0x18]\n 13399: a3 = u8 [a0 + 0x1a]\n 13402: a4 = u8 [a0 + 0x1b]\n 13405: a1 = a1 << 0x8\n 13408: a1 = a1 | a2\n 13411: a3 = a3 << 0x10\n 13414: a4 = a4 << 0x18\n 13417: a3 = a3 | a4\n 13420: a1 = a1 | a3\n 13423: a2 = u8 [a0 + 0x1d]\n 13426: a3 = u8 [a0 + 0x1c]\n 13429: a4 = u8 [a0 + 0x1e]\n 13432: a5 = u8 [a0 + 0x1f]\n 13435: a2 = a2 << 0x8\n 13438: a2 = a2 | a3\n 13441: a4 = a4 << 0x10\n 13444: a5 = a5 << 0x18\n 13447: a4 = a4 | a5\n 13450: a2 = a2 | a4\n 13453: a2 = a2 << 0x20\n 13456: a1 = a1 | a2\n 13459: a2 = u8 [a0 + 0x11]\n 13462: a3 = u8 [a0 + 0x10]\n 13465: a4 = u8 [a0 + 0x12]\n 13468: a5 = u8 [a0 + 0x13]\n 13471: a2 = a2 << 0x8\n 13474: a2 = a2 | a3\n 13477: a4 = a4 << 0x10\n 13480: a5 = a5 << 0x18\n 13483: a4 = a4 | a5\n 13486: a2 = a2 | a4\n 13489: a3 = u8 [a0 + 0x15]\n 13492: a4 = u8 [a0 + 0x14]\n 13495: a5 = u8 [a0 + 0x16]\n 13498: s1 = u8 [a0 + 0x17]\n 13501: a3 = a3 << 0x8\n 13504: a3 = a3 | a4\n 13507: a5 = a5 << 0x10\n 13510: s1 = s1 << 0x18\n 13513: a5 = a5 | s1\n 13516: a3 = a3 | a5\n 13519: a3 = a3 << 0x20\n 13522: a2 = a2 | a3\n 13525: a3 = u8 [a0 + 0x9]\n 13528: a4 = u8 [a0 + 0x8]\n 13531: a5 = u8 [a0 + 0xa]\n 13534: s1 = u8 [a0 + 0xb]\n 13537: a3 = a3 << 0x8\n 13540: a3 = a3 | a4\n 13543: a5 = a5 << 0x10\n 13546: s1 = s1 << 0x18\n 13549: a5 = a5 | s1\n 13552: a3 = a3 | a5\n 13555: a4 = u8 [a0 + 0xd]\n 13558: a5 = u8 [a0 + 0xc]\n 13561: s1 = u8 [a0 + 0xe]\n 13564: a0 = u8 [a0 + 0xf]\n 13567: a4 = a4 << 0x8\n 13570: a4 = a4 | a5\n 13573: s1 = s1 << 0x10\n 13576: a0 = a0 << 0x18\n 13579: a0 = a0 | s1\n 13582: a0 = a0 | a4\n 13585: a0 = a0 << 0x20\n 13588: a0 = a0 | a3\n 13591: a3 = u64 [sp + 0x88]\n 13595: a0 = a0 & a3\n 13598: u64 [sp + 0x90] = a0\n 13602: a2 = a2 & 0xffffffffffffffff\n 13605: u64 [sp + 0x80] = a2\n 13609: s1 = a1 & 0xffffffffffffffff\n 13612: a1 = 0x20\n 13615: a0 = 0\n 13617: ra = 208, jump @0\n      : @242 [@dyn 104] (gas: 58)\n 13623: u8 [a0 + 7] = 0\n 13626: u8 [a0 + 6] = 0\n 13629: u8 [a0 + 5] = 0\n 13632: u8 [a0 + 4] = 0\n 13635: u8 [a0 + 3] = 0\n 13638: u8 [a0 + 2] = 0\n 13641: u8 [a0 + 1] = 0\n 13644: u8 [a0 + 0] = 0\n 13646: u8 [a0 + 0x18] = s1\n 13649: a3 = u64 [sp + 0x80]\n 13653: u8 [a0 + 0x10] = a3\n 13656: a2 = u64 [sp + 0x90]\n 13660: u8 [a0 + 0x8] = a2\n 13663: a1 = s1 >> 0x38\n 13666: u8 [a0 + 0x1f] = a1\n 13669: a1 = s1 >> 0x30\n 13672: u8 [a0 + 0x1e] = a1\n 13675: a1 = s1 >> 0x28\n 13678: u8 [a0 + 0x1d] = a1\n 13681: a1 = s1 >> 0x20\n 13684: u8 [a0 + 0x1c] = a1\n 13687: a1 = s1 >> 0x18\n 13690: u8 [a0 + 0x1b] = a1\n 13693: a1 = s1 >> 0x10\n 13696: u8 [a0 + 0x1a] = a1\n 13699: s1 = s1 >> 0x8\n 13702: u8 [a0 + 0x19] = s1\n 13705: a1 = a3 >> 0x38\n 13708: u8 [a0 + 0x17] = a1\n 13711: a1 = a3 >> 0x30\n 13714: u8 [a0 + 0x16] = a1\n 13717: a1 = a3 >> 0x28\n 13720: u8 [a0 + 0x15] = a1\n 13723: a1 = a3 >> 0x20\n 13726: u8 [a0 + 0x14] = a1\n 13729: a1 = a3 >> 0x18\n 13732: u8 [a0 + 0x13] = a1\n 13735: a1 = a3 >> 0x10\n 13738: u8 [a0 + 0x12] = a1\n 13741: a1 = a3 >> 0x8\n 13744: u8 [a0 + 0x11] = a1\n 13747: a1 = a2 >> 0x38\n 13750: u8 [a0 + 0xf] = a1\n 13753: a1 = a2 >> 0x30\n 13756: u8 [a0 + 0xe] = a1\n 13759: a1 = a2 >> 0x28\n 13762: u8 [a0 + 0xd] = a1\n 13765: a1 = a2 >> 0x20\n 13768: u8 [a0 + 0xc] = a1\n 13771: a1 = a2 >> 0x18\n 13774: u8 [a0 + 0xb] = a1\n 13777: a1 = a2 >> 0x10\n 13780: u8 [a0 + 0xa] = a1\n 13783: a1 = a2 >> 0x8\n 13786: u8 [a0 + 0x9] = a1\n 13789: a0 = 0x20\n 13792: a1 = 0x20\n 13795: ra = 210, jump @0\n      : @243 [@dyn 105] (gas: 35)\n 13801: u8 [a0 + 31] = 0x2\n 13805: u8 [a0 + 30] = 0\n 13808: u8 [a0 + 29] = 0\n 13811: u8 [a0 + 28] = 0\n 13814: u8 [a0 + 27] = 0\n 13817: u8 [a0 + 26] = 0\n 13820: u8 [a0 + 25] = 0\n 13823: u8 [a0 + 24] = 0\n 13826: u8 [a0 + 23] = 0\n 13829: u8 [a0 + 22] = 0\n 13832: u8 [a0 + 21] = 0\n 13835: u8 [a0 + 20] = 0\n 13838: u8 [a0 + 19] = 0\n 13841: u8 [a0 + 18] = 0\n 13844: u8 [a0 + 17] = 0\n 13847: u8 [a0 + 16] = 0\n 13850: u8 [a0 + 15] = 0\n 13853: u8 [a0 + 14] = 0\n 13856: u8 [a0 + 13] = 0\n 13859: u8 [a0 + 12] = 0\n 13862: u8 [a0 + 11] = 0\n 13865: u8 [a0 + 10] = 0\n 13868: u8 [a0 + 9] = 0\n 13871: u8 [a0 + 8] = 0\n 13874: u8 [a0 + 7] = 0\n 13877: u8 [a0 + 6] = 0\n 13880: u8 [a0 + 5] = 0\n 13883: u8 [a0 + 4] = 0\n 13886: u8 [a0 + 3] = 0\n 13889: u8 [a0 + 2] = 0\n 13892: u8 [a0 + 1] = 0\n 13895: u8 [a0 + 0] = 0\n 13897: a1 = 0x40\n 13900: a0 = 0\n 13902: ra = 212, jump @0\n      : @244 [@dyn 106] (gas: 71)\n 13908: i32 a0 = a0 + 0\n 13910: i32 a2 = sp + 0x200\n 13914: a1 = 0x40\n 13917: ecalli 8 // 'hash_keccak_256'\n 13919: a0 = u64 [sp + 0x218]\n 13923: a1 = u64 [sp + 0x210]\n 13927: a2 = u64 [sp + 0x208]\n 13931: a3 = u64 [sp + 0x200]\n 13935: a0 = reverse a0\n 13937: u64 [sp + 0x90] = a0\n 13941: a1 = reverse a1\n 13943: u64 [sp + 0x80] = a1\n 13947: a2 = reverse a2\n 13949: u64 [sp + 0x78] = a2\n 13952: s1 = reverse a3\n 13954: u64 [sp + 0x1f8] = s1\n 13958: u64 [sp + 0x1f0] = a2\n 13962: u64 [sp + 0x1e8] = a1\n 13966: u64 [sp + 0x1e0] = a0\n 13970: u64 [sp + 536] = 0\n 13974: u64 [sp + 528] = 0\n 13978: u64 [sp + 520] = 0\n 13982: u64 [sp + 512] = 0\n 13986: u32 [sp + 448] = 0x20\n 13991: i32 a1 = sp + 0x1e0\n 13995: i32 a3 = sp + 0x200\n 13999: i32 a4 = sp + 0x1c0\n 14003: a2 = 0xffffffffffffffff\n 14006: a0 = 0\n 14008: ecalli 7 // 'get_storage'\n 14010: a0 = u64 [sp + 0x200]\n 14014: a1 = u64 [sp + 0x208]\n 14018: a2 = u64 [sp + 0x210]\n 14022: a3 = u64 [sp + 0x218]\n 14026: a0 = a0 & 0xffffffffffffff00\n 14030: a0 = a0 | 0x1\n 14033: u64 [sp + 0x1f8] = s1\n 14037: a4 = u64 [sp + 0x78]\n 14040: u64 [sp + 0x1f0] = a4\n 14044: a4 = u64 [sp + 0x80]\n 14048: u64 [sp + 0x1e8] = a4\n 14052: a4 = u64 [sp + 0x90]\n 14056: u64 [sp + 0x1e0] = a4\n 14060: u64 [sp + 0x218] = a3\n 14064: u64 [sp + 0x210] = a2\n 14068: u64 [sp + 0x208] = a1\n 14072: u64 [sp + 0x200] = a0\n 14076: i32 a1 = sp + 0x1e0\n 14080: i32 a3 = sp + 0x200\n 14084: a2 = 0xffffffffffffffff\n 14087: a4 = 0x20\n 14090: a0 = 0\n 14092: ecalli 12 // 'set_storage'\n 14094: a2 = u64 [sp + 0xa0]\n 14098: a2 = a2 + 0x1\n 14101: a0 = a2 <u 0x1\n 14104: a1 = u64 [sp + 0xb8]\n 14108: a1 = a1 + a0\n 14111: u64 [sp + 0xb8] = a1\n 14115: u64 [sp + 0xa0] = a2\n 14119: a0 = a2 | a1\n 14122: a0 = a0 <u 0x1\n 14125: a1 = u64 [sp + 0xa8]\n 14129: a0 = a0 + a1\n 14132: a1 = a0 <u a1\n 14135: a2 = u64 [sp + 0xb0]\n 14139: a2 = a2 + a1\n 14142: u64 [sp + 0xb0] = a2\n 14146: u64 [sp + 0xa8] = a0\n 14150: s1 = u64 [sp + 0x98]\n 14154: jump @223\n      : @245 (gas: 15)\n 14157: a0 = u64 [sp + 0x18]\n 14160: u64 [sp + 0x180] = a0\n 14164: u64 [sp + 440] = 0\n 14168: u64 [sp + 432] = 0\n 14172: u64 [sp + 424] = 0\n 14176: u64 [sp + 416] = 0x3\n 14181: a0 = u64 [sp + 0x30]\n 14184: u64 [sp + 0x188] = a0\n 14188: a0 = u64 [sp + 0x48]\n 14191: u64 [sp + 0x190] = a0\n 14195: a0 = sp + 0x1a0\n 14199: a1 = sp + 0x180\n 14203: a2 = u64 [sp + 0x50]\n 14206: u64 [sp + 0x198] = a2\n 14210: ra = 214, jump @200\n      : @246 [@dyn 107] (gas: 39)\n 14216: u64 [sp + 504] = 0\n 14220: u64 [sp + 496] = 0\n 14224: u64 [sp + 488] = 0\n 14228: u64 [sp + 480] = 0x4\n 14233: u64 [sp + 536] = 0\n 14237: u64 [sp + 528] = 0\n 14241: u64 [sp + 520] = 0\n 14245: u64 [sp + 512] = 0\n 14249: u32 [sp + 448] = 0x20\n 14254: i32 a1 = sp + 0x1e0\n 14258: i32 a3 = sp + 0x200\n 14262: i32 a4 = sp + 0x1c0\n 14266: a2 = 0xffffffffffffffff\n 14269: a0 = 0\n 14271: ecalli 7 // 'get_storage'\n 14273: u64 [sp + 504] = 0\n 14277: u64 [sp + 496] = 0\n 14281: u64 [sp + 488] = 0\n 14285: u64 [sp + 480] = 0x4\n 14290: a0 = u64 [sp + 0x38]\n 14293: u64 [sp + 0x218] = a0\n 14297: a0 = u64 [sp + 0x40]\n 14300: u64 [sp + 0x210] = a0\n 14304: a0 = u64 [sp + 0x20]\n 14307: u64 [sp + 0x208] = a0\n 14311: a0 = u64 [sp + 0x28]\n 14314: u64 [sp + 0x200] = a0\n 14318: i32 a1 = sp + 0x1e0\n 14322: i32 a3 = sp + 0x200\n 14326: a2 = 0xffffffffffffffff\n 14329: a4 = 0x20\n 14332: a0 = 0\n 14334: ecalli 12 // 'set_storage'\n 14336: sp = s0 + 0xfffffffffffffdc0\n 14340: ra = u64 [sp + 0x238]\n 14344: s0 = u64 [sp + 0x230]\n 14348: s1 = u64 [sp + 0x228]\n 14352: sp = sp + 0x240\n 14356: ret\n      : @247 (gas: 1)\n 14358: trap\n      : @248 (gas: 3)\n 14359: a0 = 0\n 14361: a1 = 0\n 14363: ra = 216, jump @0\n      : @249 [@dyn 108] (gas: 5)\n 14369: i32 a1 = a0 + 0\n 14371: a0 = 0x1\n 14374: a2 = 0\n 14376: ecalli 10 // 'seal_return'\n 14378: fallthrough\n      : @250 (gas: 8)\n 14379: u64 [sp + 368] = 0\n 14383: u64 [sp + 360] = 0\n 14387: u64 [sp + 352] = 0\n 14391: a0 = 0x4e487b7100000000\n 14401: a1 = sp + 0x160\n 14405: u64 [sp + 0x178] = a0\n 14409: a0 = 0\n 14411: ra = 218, jump @23\n      : @251 [@dyn 109] (gas: 8)\n 14417: u64 [sp + 344] = 0\n 14421: u64 [sp + 336] = 0\n 14425: u64 [sp + 320] = 0x32\n 14430: a0 = 0x4\n 14433: a1 = sp + 0x140\n 14437: u64 [sp + 328] = 0\n 14441: ra = 0xe0\n 14445: jump @23\n      : @252 (gas: 8)\n 14448: u64 [sp + 304] = 0\n 14452: u64 [sp + 296] = 0\n 14456: u64 [sp + 288] = 0\n 14460: a0 = 0x4e487b7100000000\n 14470: a1 = sp + 0x120\n 14474: u64 [sp + 0x138] = a0\n 14478: a0 = 0\n 14480: ra = 220, jump @23\n      : @253 [@dyn 110] (gas: 8)\n 14486: u64 [sp + 280] = 0\n 14490: u64 [sp + 272] = 0\n 14494: u64 [sp + 256] = 0x32\n 14499: a0 = 0x4\n 14502: a1 = sp + 0x100\n 14506: u64 [sp + 264] = 0\n 14510: ra = 0xe0\n 14514: jump @23\n      : @254 (gas: 8)\n 14517: u64 [sp + 240] = 0\n 14521: u64 [sp + 232] = 0\n 14525: u64 [sp + 224] = 0\n 14529: a0 = 0x4e487b7100000000\n 14539: a1 = sp + 0xe0\n 14543: u64 [sp + 0xf8] = a0\n 14547: a0 = 0\n 14549: ra = 222, jump @23\n      : @255 [@dyn 111] (gas: 7)\n 14555: u64 [sp + 216] = 0\n 14559: u64 [sp + 208] = 0\n 14563: u64 [sp + 192] = 0x32\n 14568: a0 = 0x4\n 14571: a1 = sp + 0xc0\n 14575: u64 [sp + 200] = 0\n 14579: ra = 224, jump @23\n      : @256 [@dyn 112] (gas: 3)\n 14585: a1 = 0x24\n 14588: a0 = 0\n 14590: ra = 226, jump @0\n      : @257 [@dyn 113] (gas: 6)\n 14596: i32 a1 = a0 + 0\n 14598: a0 = 0x1\n 14601: a2 = 0x24\n 14604: ra = 0xe4\n 14608: ecalli 10 // 'seal_return'\n 14610: fallthrough\n      : @258 [@dyn 114] (gas: 21)\n 14611: sp = sp + 0xffffffffffffff50\n 14615: u64 [sp + 0xa8] = ra\n 14619: u64 [sp + 0xa0] = s0\n 14623: u64 [sp + 0x98] = s1\n 14627: s0 = sp + 0xb0\n 14631: sp = sp & 0xfffffffffffffff0\n 14634: a3 = u64 [a0 + 0x10]\n 14637: a2 = u64 [a0 + 0x18]\n 14640: a4 = u64 [a0 + 0x8]\n 14643: a5 = u64 [a0]\n 14645: u64 [sp + 0x40] = a2\n 14648: u64 [sp + 0x30] = a4\n 14651: a0 = a4 | a2\n 14654: a2 = a5 | a3\n 14657: a2 = a2 | a0\n 14660: a2 = a2 >> 0x20\n 14663: u64 [sp + 0x38] = a3\n 14666: a0 = a0 | a3\n 14669: a0 = a0 << 0x20\n 14672: a0 = a0 | a2\n 14675: jump @266 if a0 != 0\n      : @259 (gas: 11)\n 14679: a0 = u64 [a1 + 0x18]\n 14682: u64 [sp + 0x20] = a0\n 14685: a0 = u64 [a1 + 0x10]\n 14688: u64 [sp + 0x48] = a0\n 14691: a0 = u64 [a1 + 0x8]\n 14694: u64 [sp] = a0\n 14696: s1 = u64 [a1]\n 14698: u64 [sp + 0x28] = a5\n 14701: i32 a0 = a5 + 0\n 14703: a1 = 0x20\n 14706: ra = 230, jump @0\n      : @260 [@dyn 115] (gas: 108)\n 14712: t1 = s1\n 14714: t0 = u64 [sp]\n 14716: a1 = u8 [a0 + 0x1]\n 14719: a2 = u8 [a0]\n 14721: a3 = u8 [a0 + 0x2]\n 14724: a4 = u8 [a0 + 0x3]\n 14727: a1 = a1 << 0x8\n 14730: a1 = a1 | a2\n 14733: a3 = a3 << 0x10\n 14736: a4 = a4 << 0x18\n 14739: a3 = a3 | a4\n 14742: a1 = a1 | a3\n 14745: a2 = u8 [a0 + 0x5]\n 14748: a3 = u8 [a0 + 0x4]\n 14751: a4 = u8 [a0 + 0x6]\n 14754: a5 = u8 [a0 + 0x7]\n 14757: a2 = a2 << 0x8\n 14760: a2 = a2 | a3\n 14763: a4 = a4 << 0x10\n 14766: a5 = a5 << 0x18\n 14769: a4 = a4 | a5\n 14772: a2 = a2 | a4\n 14775: a2 = a2 << 0x20\n 14778: t2 = a2 | a1\n 14781: a1 = u8 [a0 + 0x9]\n 14784: a2 = u8 [a0 + 0x8]\n 14787: a3 = u8 [a0 + 0xa]\n 14790: a4 = u8 [a0 + 0xb]\n 14793: a1 = a1 << 0x8\n 14796: a1 = a1 | a2\n 14799: a3 = a3 << 0x10\n 14802: a4 = a4 << 0x18\n 14805: a3 = a3 | a4\n 14808: a1 = a1 | a3\n 14811: a2 = u8 [a0 + 0xd]\n 14814: a3 = u8 [a0 + 0xc]\n 14817: a4 = u8 [a0 + 0xe]\n 14820: a5 = u8 [a0 + 0xf]\n 14823: a2 = a2 << 0x8\n 14826: a2 = a2 | a3\n 14829: a4 = a4 << 0x10\n 14832: a5 = a5 << 0x18\n 14835: a4 = a4 | a5\n 14838: a2 = a2 | a4\n 14841: a2 = a2 << 0x20\n 14844: s1 = a2 | a1\n 14847: a1 = u8 [a0 + 0x11]\n 14850: a2 = u8 [a0 + 0x10]\n 14853: a3 = u8 [a0 + 0x12]\n 14856: a4 = u8 [a0 + 0x13]\n 14859: a1 = a1 << 0x8\n 14862: a1 = a1 | a2\n 14865: a3 = a3 << 0x10\n 14868: a4 = a4 << 0x18\n 14871: a3 = a3 | a4\n 14874: a1 = a1 | a3\n 14877: a2 = u8 [a0 + 0x15]\n 14880: a3 = u8 [a0 + 0x14]\n 14883: a4 = u8 [a0 + 0x16]\n 14886: a5 = u8 [a0 + 0x17]\n 14889: a2 = a2 << 0x8\n 14892: a2 = a2 | a3\n 14895: a4 = a4 << 0x10\n 14898: a5 = a5 << 0x18\n 14901: a4 = a4 | a5\n 14904: a2 = a2 | a4\n 14907: a2 = a2 << 0x20\n 14910: a3 = a2 | a1\n 14913: a1 = u8 [a0 + 0x19]\n 14916: a2 = u8 [a0 + 0x18]\n 14919: a4 = u8 [a0 + 0x1a]\n 14922: a5 = u8 [a0 + 0x1b]\n 14925: a1 = a1 << 0x8\n 14928: a1 = a1 | a2\n 14931: a4 = a4 << 0x10\n 14934: a5 = a5 << 0x18\n 14937: a4 = a4 | a5\n 14940: a1 = a1 | a4\n 14943: a2 = u8 [a0 + 0x1d]\n 14946: a4 = u8 [a0 + 0x1c]\n 14949: a5 = u8 [a0 + 0x1e]\n 14952: a0 = u8 [a0 + 0x1f]\n 14955: a2 = a2 << 0x8\n 14958: a2 = a2 | a4\n 14961: a5 = a5 << 0x10\n 14964: a0 = a0 << 0x18\n 14967: a0 = a0 | a5\n 14970: a0 = a0 | a2\n 14973: a0 = a0 << 0x20\n 14976: ra = a0 | a1\n 14979: a2 = reverse ra\n 14981: u64 [sp + 0x8] = a3\n 14984: a1 = reverse a3\n 14986: u64 [sp + 0x10] = s1\n 14989: a4 = reverse s1\n 14991: u64 [sp + 0x18] = t2\n 14994: a5 = reverse t2\n 14996: s1 = a5 >u 0\n 14998: a3 = a4 >u 0\n 15000: a3 = s1 if a5 != 0\n 15003: s1 = a1 >u 0\n 15005: a0 = a2 <u 0x33\n 15008: a0 = a0 ^ 0x1\n 15011: a0 = s1 if a1 != 0\n 15014: s1 = a4 | a5\n 15017: a0 = a3 if s1 != 0\n 15020: s1 = u64 [sp + 0x20]\n 15023: jump @267 if a0 != 0\n      : @261 (gas: 15)\n 15027: a0 = a2 <u t1\n 15030: a2 = a1 ^ t0\n 15033: a1 = a1 <u t0\n 15036: a1 = a0 if a2 == 0\n 15039: a0 = u64 [sp + 0x48]\n 15042: t2 = t1\n 15044: t1 = t0\n 15046: t0 = a4 <u a0\n 15049: a2 = a5 ^ s1\n 15052: a3 = a5 <u s1\n 15055: a3 = t0 if a2 == 0\n 15058: a0 = a0 ^ a4\n 15061: a0 = a0 | a2\n 15064: a3 = a1 if a0 == 0\n 15067: jump @267 if a3 != 0\n      : @262 (gas: 5)\n 15070: a0 = u64 [sp + 0x48]\n 15073: a0 = t2 | a0\n 15076: a1 = t1 | s1\n 15079: a0 = a0 | a1\n 15082: jump @267 if a0 == 0\n      : @263 (gas: 7)\n 15085: a0 = u64 [sp + 0x18]\n 15088: a1 = u64 [sp + 0x8]\n 15091: a0 = a0 | a1\n 15094: a1 = u64 [sp + 0x10]\n 15097: a1 = a1 | ra\n 15100: a0 = a0 | a1\n 15103: jump @267 if a0 == 0\n      : @264 (gas: 16)\n 15106: u64 [sp + 0x50] = t2\n 15109: a0 = u64 [sp + 0x28]\n 15112: u64 [sp + 0x70] = a0\n 15115: u64 [sp + 0x58] = t1\n 15118: a0 = u64 [sp + 0x30]\n 15121: u64 [sp + 0x78] = a0\n 15124: a0 = u64 [sp + 0x48]\n 15127: u64 [sp + 0x60] = a0\n 15130: a0 = u64 [sp + 0x38]\n 15133: u64 [sp + 0x80] = a0\n 15137: u64 [sp + 0x68] = s1\n 15140: a0 = sp + 0x70\n 15143: a1 = sp + 0x50\n 15146: a2 = u64 [sp + 0x40]\n 15149: u64 [sp + 0x88] = a2\n 15153: ra = 232, jump @221\n      : @265 [@dyn 116] (gas: 6)\n 15159: sp = s0 + 0xffffffffffffff50\n 15163: ra = u64 [sp + 0xa8]\n 15167: s0 = u64 [sp + 0xa0]\n 15171: s1 = u64 [sp + 0x98]\n 15175: sp = sp + 0xb0\n 15179: ret\n      : @266 (gas: 1)\n 15181: trap\n      : @267 (gas: 3)\n 15182: a0 = 0\n 15184: a1 = 0\n 15186: ra = 234, jump @0\n      : @268 [@dyn 117] (gas: 6)\n 15192: i32 a1 = a0 + 0\n 15194: a0 = 0x1\n 15197: a2 = 0\n 15199: ra = 0xec\n 15203: ecalli 10 // 'seal_return'\n 15205: fallthrough\n      : @269 [@dyn 118] (gas: 6)\n 15206: a1 = u32 [a1 + 0x1c]\n 15209: u64 [a0 + 24] = 0\n 15212: u64 [a0 + 16] = 0\n 15215: u64 [a0 + 8] = 0\n 15218: u64 [a0] = a1\n 15220: ret\n      : @270 (gas: 38)\n 15222: sp = sp + 0xfffffffffffffee0\n 15226: u64 [sp + 0x118] = ra\n 15230: u64 [sp + 0x110] = s0\n 15234: u64 [sp + 0x108] = s1\n 15238: s0 = sp + 0x120\n 15242: sp = sp & 0xffffffffffffffe0\n 15245: u64 [sp + 0x40] = a0\n 15248: a0 = u64 [a2]\n 15250: u64 [sp + 0x48] = a0\n 15253: a0 = u64 [a2 + 0x8]\n 15256: u64 [sp + 0x50] = a0\n 15259: a0 = u64 [a2 + 0x10]\n 15262: u64 [sp + 0x58] = a0\n 15265: s1 = u64 [a2 + 0x18]\n 15268: a4 = u64 [a1 + 0x18]\n 15271: a3 = u64 [a1 + 0x10]\n 15274: a2 = u64 [a1 + 0x8]\n 15277: a0 = u64 [a1]\n 15279: u64 [sp + 0x18] = a4\n 15282: u64 [sp + 0xb8] = a4\n 15286: u64 [sp + 0x20] = a3\n 15289: u64 [sp + 0xb0] = a3\n 15293: u64 [sp + 0x28] = a2\n 15296: u64 [sp + 0xa8] = a2\n 15300: u64 [sp + 0x30] = a0\n 15303: u64 [sp + 0xa0] = a0\n 15307: u64 [sp + 248] = 0\n 15311: u64 [sp + 240] = 0\n 15315: u64 [sp + 232] = 0\n 15319: u64 [sp + 224] = 0\n 15323: u32 [sp + 192] = 0x20\n 15328: i32 a1 = sp + 0xa0\n 15332: i32 a3 = sp + 0xe0\n 15336: i32 a4 = sp + 0xc0\n 15340: a2 = 0xffffffffffffffff\n 15343: a0 = 0\n 15345: ecalli 7 // 'get_storage'\n 15347: fallthrough\n      : @271 (gas: 20)\n 15348: a0 = u64 [sp + 0xf8]\n 15352: t0 = u64 [sp + 0xe0]\n 15356: a2 = u64 [sp + 0xf0]\n 15360: a3 = u64 [sp + 0xe8]\n 15364: a4 = a0 ^ s1\n 15367: u64 [sp + 0x38] = s1\n 15370: a1 = s1 <u a0\n 15373: a0 = u64 [sp + 0x58]\n 15376: a5 = a0 <u a2\n 15379: a5 = a1 if a4 != 0\n 15382: a1 = u64 [sp + 0x50]\n 15385: t1 = a3 ^ a1\n 15388: a3 = a1 <u a3\n 15391: a1 = u64 [sp + 0x48]\n 15394: a1 = a1 <u t0\n 15397: a1 = a3 if t1 != 0\n 15400: a0 = a0 ^ a2\n 15403: a0 = a0 | a4\n 15406: a1 = a5 if a0 != 0\n 15409: jump @275 if a1 == 0\n      : @272 (gas: 3)\n 15413: a1 = 0x20\n 15416: a0 = 0\n 15418: ra = 238, jump @0\n      : @273 [@dyn 119] (gas: 71)\n 15424: a1 = u64 [sp + 0x18]\n 15427: a1 = reverse a1\n 15429: a2 = u64 [sp + 0x20]\n 15432: a2 = reverse a2\n 15434: a3 = u64 [sp + 0x28]\n 15437: a3 = reverse a3\n 15439: a4 = u64 [sp + 0x30]\n 15442: a4 = reverse a4\n 15444: a5 = a4 >> 0x38\n 15447: u8 [a0 + 0x1f] = a5\n 15450: a5 = a4 >> 0x30\n 15453: u8 [a0 + 0x1e] = a5\n 15456: a5 = a4 >> 0x28\n 15459: u8 [a0 + 0x1d] = a5\n 15462: a5 = a4 >> 0x20\n 15465: u8 [a0 + 0x1c] = a5\n 15468: a5 = a4 >> 0x18\n 15471: u8 [a0 + 0x1b] = a5\n 15474: a5 = a4 >> 0x10\n 15477: u8 [a0 + 0x1a] = a5\n 15480: a5 = a4 >> 0x8\n 15483: u8 [a0 + 0x19] = a5\n 15486: u8 [a0 + 0x18] = a4\n 15489: u8 [a0 + 0x10] = a3\n 15492: a4 = a3 >> 0x38\n 15495: u8 [a0 + 0x17] = a4\n 15498: a4 = a3 >> 0x30\n 15501: u8 [a0 + 0x16] = a4\n 15504: a4 = a3 >> 0x28\n 15507: u8 [a0 + 0x15] = a4\n 15510: a4 = a3 >> 0x20\n 15513: u8 [a0 + 0x14] = a4\n 15516: a4 = a3 >> 0x18\n 15519: u8 [a0 + 0x13] = a4\n 15522: a4 = a3 >> 0x10\n 15525: u8 [a0 + 0x12] = a4\n 15528: a3 = a3 >> 0x8\n 15531: u8 [a0 + 0x11] = a3\n 15534: u8 [a0 + 0x8] = a2\n 15537: a3 = a2 >> 0x38\n 15540: u8 [a0 + 0xf] = a3\n 15543: a3 = a2 >> 0x30\n 15546: u8 [a0 + 0xe] = a3\n 15549: a3 = a2 >> 0x28\n 15552: u8 [a0 + 0xd] = a3\n 15555: a3 = a2 >> 0x20\n 15558: u8 [a0 + 0xc] = a3\n 15561: a3 = a2 >> 0x18\n 15564: u8 [a0 + 0xb] = a3\n 15567: a3 = a2 >> 0x10\n 15570: u8 [a0 + 0xa] = a3\n 15573: a2 = a2 >> 0x8\n 15576: u8 [a0 + 0x9] = a2\n 15579: u8 [a0] = a1\n 15581: a2 = a1 >> 0x38\n 15584: u8 [a0 + 0x7] = a2\n 15587: a2 = a1 >> 0x30\n 15590: u8 [a0 + 0x6] = a2\n 15593: a2 = a1 >> 0x28\n 15596: u8 [a0 + 0x5] = a2\n 15599: a2 = a1 >> 0x20\n 15602: u8 [a0 + 0x4] = a2\n 15605: a2 = a1 >> 0x18\n 15608: u8 [a0 + 0x3] = a2\n 15611: a2 = a1 >> 0x10\n 15614: u8 [a0 + 0x2] = a2\n 15617: a1 = a1 >> 0x8\n 15620: u8 [a0 + 0x1] = a1\n 15623: a1 = 0x20\n 15626: a0 = 0\n 15628: ra = 240, jump @0\n      : @274 [@dyn 120] (gas: 45)\n 15634: i32 a0 = a0 + 0\n 15636: i32 a2 = sp + 0xe0\n 15640: a1 = 0x20\n 15643: ecalli 8 // 'hash_keccak_256'\n 15645: a0 = u64 [sp + 0xe0]\n 15649: a1 = u64 [sp + 0xe8]\n 15653: a2 = u64 [sp + 0xf8]\n 15657: a3 = u64 [sp + 0xf0]\n 15661: t0 = reverse a0\n 15663: a1 = reverse a1\n 15665: a2 = reverse a2\n 15667: a3 = reverse a3\n 15669: a4 = u64 [sp + 0x50]\n 15672: a4 = a4 + a3\n 15675: a5 = u64 [sp + 0x48]\n 15678: a5 = a5 + a2\n 15681: a2 = a5 <u a2\n 15684: a4 = a4 + a2\n 15687: s1 = a4 ^ a3\n 15690: a3 = a4 <u a3\n 15693: a3 = a2 if s1 == 0\n 15696: a2 = u64 [sp + 0x58]\n 15699: a2 = a2 + a1\n 15702: a3 = a3 + a2\n 15705: s1 = a3 <u a2\n 15708: a0 = u64 [sp + 0x38]\n 15711: a0 = a0 + t0\n 15714: a1 = a2 <u a1\n 15717: a0 = a0 + a1\n 15720: a0 = a0 + s1\n 15723: a1 = u64 [sp + 0x40]\n 15726: u64 [a1 + 56] = 0\n 15729: u64 [a1 + 48] = 0\n 15732: u64 [a1 + 40] = 0\n 15735: u64 [a1 + 32] = 0\n 15738: u64 [a1] = a5\n 15740: u64 [a1 + 0x8] = a4\n 15743: u64 [a1 + 0x10] = a3\n 15746: u64 [a1 + 0x18] = a0\n 15749: sp = s0 + 0xfffffffffffffee0\n 15753: ra = u64 [sp + 0x118]\n 15757: s0 = u64 [sp + 0x110]\n 15761: s1 = u64 [sp + 0x108]\n 15765: sp = sp + 0x120\n 15769: ret\n      : @275 (gas: 8)\n 15771: u64 [sp + 144] = 0\n 15775: u64 [sp + 136] = 0\n 15779: u64 [sp + 128] = 0\n 15783: a0 = 0x4e487b7100000000\n 15793: a1 = sp + 0x80\n 15797: u64 [sp + 0x98] = a0\n 15801: a0 = 0\n 15803: ra = 242, jump @23\n      : @276 [@dyn 121] (gas: 7)\n 15809: u64 [sp + 120] = 0\n 15812: u64 [sp + 112] = 0\n 15815: u64 [sp + 96] = 0x32\n 15819: a0 = 0x4\n 15822: a1 = sp + 0x60\n 15825: u64 [sp + 104] = 0\n 15828: ra = 244, jump @23\n      : @277 [@dyn 122] (gas: 3)\n 15834: a1 = 0x24\n 15837: a0 = 0\n 15839: ra = 246, jump @0\n      : @278 [@dyn 123] (gas: 6)\n 15845: i32 a1 = a0 + 0\n 15847: a0 = 0x1\n 15850: a2 = 0x24\n 15853: ra = 0xf8\n 15857: ecalli 10 // 'seal_return'\n 15859: fallthrough\n      : @279 [@dyn 124] (gas: 236)\n 15860: sp = sp + 0xffffffffffffffa0\n 15863: u64 [sp + 0x58] = ra\n 15866: u64 [sp + 0x50] = s0\n 15869: u64 [sp + 0x48] = s1\n 15872: u64 [sp] = a0\n 15874: t0 = u64 [a1]\n 15876: t1 = u64 [a2]\n 15878: a0 = u64 [a2 + 0x8]\n 15881: a3 = u64 [a2 + 0x10]\n 15884: a4 = u64 [a1 + 0x18]\n 15887: s0 = u64 [a1 + 0x10]\n 15890: a2 = u64 [a2 + 0x18]\n 15893: a1 = u64 [a1 + 0x8]\n 15896: t2 = a4 >u 0\n 15898: s1 = s0 >u 0\n 15900: s1 = t2 if a4 != 0\n 15903: ra = a1 >u 0\n 15905: a5 = t0 <u 0x100\n 15909: t2 = a5 ^ 0x1\n 15912: t2 = ra if a1 != 0\n 15915: a4 = a4 | s0\n 15918: t2 = s1 if a4 != 0\n 15921: u8 [sp + 71] = 0\n 15924: u8 [sp + 70] = 0\n 15927: u8 [sp + 69] = 0\n 15930: u8 [sp + 68] = 0\n 15933: u8 [sp + 67] = 0\n 15936: u8 [sp + 66] = 0\n 15939: u8 [sp + 65] = 0\n 15942: u8 [sp + 64] = 0\n 15945: u8 [sp + 63] = 0\n 15948: u8 [sp + 62] = 0\n 15951: u8 [sp + 61] = 0\n 15954: u8 [sp + 60] = 0\n 15957: u8 [sp + 59] = 0\n 15960: u8 [sp + 58] = 0\n 15963: u8 [sp + 57] = 0\n 15966: u8 [sp + 56] = 0\n 15969: u8 [sp + 55] = 0\n 15972: u8 [sp + 54] = 0\n 15975: u8 [sp + 53] = 0\n 15978: u8 [sp + 52] = 0\n 15981: u8 [sp + 51] = 0\n 15984: u8 [sp + 50] = 0\n 15987: u8 [sp + 49] = 0\n 15990: u8 [sp + 48] = 0\n 15993: u8 [sp + 47] = 0\n 15996: u8 [sp + 46] = 0\n 15999: u8 [sp + 45] = 0\n 16002: u8 [sp + 44] = 0\n 16005: u8 [sp + 43] = 0\n 16008: u8 [sp + 42] = 0\n 16011: u8 [sp + 41] = 0\n 16014: u8 [sp + 40] = 0\n 16017: u8 [sp + 0x20] = a2\n 16020: u8 [sp + 0x18] = a3\n 16023: u8 [sp + 0x10] = a0\n 16026: u8 [sp + 0x8] = t1\n 16029: a1 = a2 >> 0x38\n 16032: u8 [sp + 0x27] = a1\n 16035: a1 = a2 >> 0x30\n 16038: u8 [sp + 0x26] = a1\n 16041: a1 = a2 >> 0x28\n 16044: u8 [sp + 0x25] = a1\n 16047: a1 = a2 >> 0x20\n 16050: u8 [sp + 0x24] = a1\n 16053: a1 = a2 >> 0x18\n 16056: u8 [sp + 0x23] = a1\n 16059: a1 = a2 >> 0x10\n 16062: u8 [sp + 0x22] = a1\n 16065: a2 = a2 >> 0x8\n 16068: u8 [sp + 0x21] = a2\n 16071: a1 = a3 >> 0x38\n 16074: u8 [sp + 0x1f] = a1\n 16077: a1 = a3 >> 0x30\n 16080: u8 [sp + 0x1e] = a1\n 16083: a1 = a3 >> 0x28\n 16086: u8 [sp + 0x1d] = a1\n 16089: a1 = a3 >> 0x20\n 16092: u8 [sp + 0x1c] = a1\n 16095: a1 = a3 >> 0x18\n 16098: u8 [sp + 0x1b] = a1\n 16101: a1 = a3 >> 0x10\n 16104: u8 [sp + 0x1a] = a1\n 16107: a3 = a3 >> 0x8\n 16110: u8 [sp + 0x19] = a3\n 16113: a1 = a0 >> 0x38\n 16116: u8 [sp + 0x17] = a1\n 16119: a1 = a0 >> 0x30\n 16122: u8 [sp + 0x16] = a1\n 16125: a1 = a0 >> 0x28\n 16128: u8 [sp + 0x15] = a1\n 16131: a1 = a0 >> 0x20\n 16134: u8 [sp + 0x14] = a1\n 16137: a1 = a0 >> 0x18\n 16140: u8 [sp + 0x13] = a1\n 16143: a1 = a0 >> 0x10\n 16146: u8 [sp + 0x12] = a1\n 16149: a0 = a0 >> 0x8\n 16152: u8 [sp + 0x11] = a0\n 16155: a0 = t1 >> 0x38\n 16158: u8 [sp + 0xf] = a0\n 16161: a0 = t1 >> 0x30\n 16164: u8 [sp + 0xe] = a0\n 16167: a0 = t1 >> 0x28\n 16170: u8 [sp + 0xd] = a0\n 16173: a0 = t1 >> 0x20\n 16176: u8 [sp + 0xc] = a0\n 16179: a0 = t1 >> 0x18\n 16182: u8 [sp + 0xb] = a0\n 16185: a0 = t1 >> 0x10\n 16188: u8 [sp + 0xa] = a0\n 16191: a0 = t1 >> 0x8\n 16194: u8 [sp + 0x9] = a0\n 16197: a0 = t0 << 0x38\n 16200: a0 = a0 >> 0x3b\n 16203: a2 = sp + 0x8\n 16206: a2 = a2 + a0\n 16209: a0 = u8 [a2 + 0x11]\n 16212: a1 = u8 [a2 + 0x10]\n 16215: a3 = u8 [a2 + 0x12]\n 16218: a4 = u8 [a2 + 0x13]\n 16221: a0 = a0 << 0x8\n 16224: a0 = a0 | a1\n 16227: a3 = a3 << 0x10\n 16230: a4 = a4 << 0x18\n 16233: a3 = a3 | a4\n 16236: a0 = a0 | a3\n 16239: a1 = u8 [a2 + 0x15]\n 16242: a3 = u8 [a2 + 0x14]\n 16245: a4 = u8 [a2 + 0x16]\n 16248: a5 = u8 [a2 + 0x17]\n 16251: a1 = a1 << 0x8\n 16254: a1 = a1 | a3\n 16257: a4 = a4 << 0x10\n 16260: a5 = a5 << 0x18\n 16263: a4 = a4 | a5\n 16266: a1 = a1 | a4\n 16269: a1 = a1 << 0x20\n 16272: ra = a1 | a0\n 16275: a3 = t0 & 0x7\n 16278: a1 = ra >> a3\n 16281: a0 = u8 [a2 + 0x19]\n 16284: a4 = u8 [a2 + 0x18]\n 16287: s1 = u8 [a2 + 0x1a]\n 16290: s0 = u8 [a2 + 0x1b]\n 16293: a0 = a0 << 0x8\n 16296: a0 = a0 | a4\n 16299: s1 = s1 << 0x10\n 16302: s0 = s0 << 0x18\n 16305: s0 = s0 | s1\n 16308: a0 = a0 | s0\n 16311: a4 = u8 [a2 + 0x1d]\n 16314: s1 = u8 [a2 + 0x1c]\n 16317: s0 = u8 [a2 + 0x1e]\n 16320: a5 = u8 [a2 + 0x1f]\n 16323: a4 = a4 << 0x8\n 16326: a4 = a4 | s1\n 16329: s0 = s0 << 0x10\n 16332: a5 = a5 << 0x18\n 16335: a5 = a5 | s0\n 16338: a4 = a4 | a5\n 16341: a4 = a4 << 0x20\n 16344: t0 = a4 | a0\n 16347: a0 = t0 << 0x1\n 16350: t1 = a3 ^ 0x3f\n 16353: a4 = a0 << t1\n 16356: a4 = a4 | a1\n 16359: a0 = u8 [a2 + 0x9]\n 16362: a1 = u8 [a2 + 0x8]\n 16365: a5 = u8 [a2 + 0xa]\n 16368: s0 = u8 [a2 + 0xb]\n 16371: a0 = a0 << 0x8\n 16374: a0 = a0 | a1\n 16377: a5 = a5 << 0x10\n 16380: s0 = s0 << 0x18\n 16383: a5 = a5 | s0\n 16386: a0 = a0 | a5\n 16389: a1 = u8 [a2 + 0xd]\n 16392: a5 = u8 [a2 + 0xc]\n 16395: s0 = u8 [a2 + 0xe]\n 16398: s1 = u8 [a2 + 0xf]\n 16401: a1 = a1 << 0x8\n 16404: a1 = a1 | a5\n 16407: s0 = s0 << 0x10\n 16410: s1 = s1 << 0x18\n 16413: s0 = s0 | s1\n 16416: a1 = a1 | s0\n 16419: a1 = a1 << 0x20\n 16422: a1 = a1 | a0\n 16425: a0 = a1 >> a3\n 16428: ra = ra << 0x1\n 16431: a5 = a3 ^ 0xffffffffffffffff\n 16434: a5 = ra << a5\n 16437: ra = a0 | a5\n 16440: a0 = u8 [a2 + 0x1]\n 16443: s0 = u8 [a2]\n 16445: s1 = u8 [a2 + 0x2]\n 16448: a5 = u8 [a2 + 0x3]\n 16451: a0 = a0 << 0x8\n 16454: a0 = a0 | s0\n 16457: s1 = s1 << 0x10\n 16460: a5 = a5 << 0x18\n 16463: a5 = a5 | s1\n 16466: a0 = a0 | a5\n 16469: a5 = u8 [a2 + 0x5]\n 16472: s0 = u8 [a2 + 0x4]\n 16475: s1 = u8 [a2 + 0x6]\n 16478: a2 = u8 [a2 + 0x7]\n 16481: a5 = a5 << 0x8\n 16484: a5 = a5 | s0\n 16487: s1 = s1 << 0x10\n 16490: a2 = a2 << 0x18\n 16493: a2 = a2 | s1\n 16496: a2 = a2 | a5\n 16499: a2 = a2 << 0x20\n 16502: a0 = a0 | a2\n 16505: a0 = a0 >> a3\n 16508: a1 = a1 << 0x1\n 16511: a1 = a1 << t1\n 16514: a0 = a0 | a1\n 16517: a1 = t0 >> a3\n 16520: a0 = 0 if t2 != 0\n 16522: ra = 0 if t2 != 0\n 16524: a4 = 0 if t2 != 0\n 16526: a1 = 0 if t2 != 0\n 16528: a2 = u64 [sp]\n 16530: u64 [a2 + 0x18] = a1\n 16533: u64 [a2 + 0x10] = a4\n 16536: u64 [a2 + 0x8] = ra\n 16539: u64 [a2] = a0\n 16541: ra = u64 [sp + 0x58]\n 16544: s0 = u64 [sp + 0x50]\n 16547: s1 = u64 [sp + 0x48]\n 16550: sp = sp + 0x60\n 16553: ret\n      : @280 (gas: 19)\n 16555: t1 = u64 [sp + 0x8]\n 16558: t0 = u64 [sp]\n 16560: a0 = u64 [sp + 0x118]\n 16564: a1 = u64 [sp + 0x100]\n 16568: t2 = u64 [sp + 0x110]\n 16572: a3 = u64 [sp + 0x108]\n 16576: a4 = a0 ^ s1\n 16579: a0 = s1 <u a0\n 16582: a2 = u64 [sp + 0x10]\n 16585: a5 = a2 <u t2\n 16588: a5 = a0 if a4 != 0\n 16591: a0 = a3 ^ t0\n 16594: a3 = t0 <u a3\n 16597: a1 = t1 <u a1\n 16600: a1 = a3 if a0 != 0\n 16603: a0 = t2 ^ a2\n 16606: a0 = a0 | a4\n 16609: a1 = a5 if a0 != 0\n 16612: jump @283 if a1 == 0\n      : @281 (gas: 12)\n 16616: u64 [sp + 0x60] = t1\n 16619: u64 [sp + 152] = 0\n 16623: u64 [sp + 144] = 0\n 16627: u64 [sp + 136] = 0\n 16631: u64 [sp + 128] = 0x3\n 16636: u64 [sp + 0x68] = t0\n 16639: u64 [sp + 0x70] = a2\n 16642: a0 = sp + 0xa0\n 16646: a1 = sp + 0x80\n 16650: a2 = sp + 0x60\n 16653: u64 [sp + 0x78] = s1\n 16656: ra = 250, jump @270\n      : @282 [@dyn 125] (gas: 215)\n 16662: a0 = u64 [sp + 0xd8]\n 16666: u64 [sp + 0x10] = a0\n 16669: a0 = u64 [sp + 0xd0]\n 16673: u64 [sp + 0x8] = a0\n 16676: s1 = u64 [sp + 0xc8]\n 16680: a0 = u64 [sp + 0xc0]\n 16684: u64 [sp] = a0\n 16686: a0 = u64 [sp + 0xb8]\n 16690: a1 = u64 [sp + 0xb0]\n 16694: a2 = u64 [sp + 0xa8]\n 16698: a3 = u64 [sp + 0xa0]\n 16702: u64 [sp + 0xf8] = a0\n 16706: u64 [sp + 0xf0] = a1\n 16710: u64 [sp + 0xe8] = a2\n 16714: u64 [sp + 0xe0] = a3\n 16718: u64 [sp + 280] = 0\n 16722: u64 [sp + 272] = 0\n 16726: u64 [sp + 264] = 0\n 16730: u64 [sp + 256] = 0\n 16734: u32 [sp + 288] = 0x20\n 16739: i32 a1 = sp + 0xe0\n 16743: i32 a3 = sp + 0x100\n 16747: i32 a4 = sp + 0x120\n 16751: a2 = 0xffffffffffffffff\n 16754: a0 = 0\n 16756: ecalli 7 // 'get_storage'\n 16758: a1 = u64 [sp + 0x100]\n 16762: a2 = u64 [sp + 0x108]\n 16766: t1 = u64 [sp]\n 16768: a0 = t1 >> 0x3d\n 16771: a3 = s1 << 0x3\n 16774: a3 = a3 | a0\n 16777: s1 = s1 >> 0x3d\n 16780: a4 = u64 [sp + 0x8]\n 16783: a0 = a4 << 0x3\n 16786: s1 = s1 | a0\n 16789: a0 = a4 >> 0x3d\n 16792: a4 = u64 [sp + 0x10]\n 16795: a4 = a4 << 0x3\n 16798: a4 = a4 | a0\n 16801: a0 = t1 << 0x3\n 16804: a5 = a3 >u 0\n 16806: a0 = a0 <u 0x100\n 16810: t0 = a0 ^ 0x1\n 16813: t0 = a5 if a3 != 0\n 16816: a3 = a4 >u 0\n 16818: a5 = s1 >u 0\n 16820: a5 = a3 if a4 != 0\n 16823: a3 = u64 [sp + 0x110]\n 16827: s1 = s1 | a4\n 16830: a4 = u64 [sp + 0x118]\n 16834: t0 = a5 if s1 != 0\n 16837: u8 [sp + 95] = 0\n 16840: u8 [sp + 94] = 0\n 16843: u8 [sp + 93] = 0\n 16846: u8 [sp + 92] = 0\n 16849: u8 [sp + 91] = 0\n 16852: u8 [sp + 90] = 0\n 16855: u8 [sp + 89] = 0\n 16858: u8 [sp + 88] = 0\n 16861: u8 [sp + 87] = 0\n 16864: u8 [sp + 86] = 0\n 16867: u8 [sp + 85] = 0\n 16870: u8 [sp + 84] = 0\n 16873: u8 [sp + 83] = 0\n 16876: u8 [sp + 82] = 0\n 16879: u8 [sp + 81] = 0\n 16882: u8 [sp + 80] = 0\n 16885: u8 [sp + 79] = 0\n 16888: u8 [sp + 78] = 0\n 16891: u8 [sp + 77] = 0\n 16894: u8 [sp + 76] = 0\n 16897: u8 [sp + 75] = 0\n 16900: u8 [sp + 74] = 0\n 16903: u8 [sp + 73] = 0\n 16906: u8 [sp + 72] = 0\n 16909: u8 [sp + 71] = 0\n 16912: u8 [sp + 70] = 0\n 16915: u8 [sp + 69] = 0\n 16918: u8 [sp + 68] = 0\n 16921: u8 [sp + 67] = 0\n 16924: u8 [sp + 66] = 0\n 16927: u8 [sp + 65] = 0\n 16930: u8 [sp + 64] = 0\n 16933: u8 [sp + 0x38] = a4\n 16936: u8 [sp + 0x30] = a3\n 16939: u8 [sp + 0x28] = a2\n 16942: u8 [sp + 0x20] = a1\n 16945: a5 = a4 >> 0x38\n 16948: u8 [sp + 0x3f] = a5\n 16951: a5 = a4 >> 0x30\n 16954: u8 [sp + 0x3e] = a5\n 16957: a5 = a4 >> 0x28\n 16960: u8 [sp + 0x3d] = a5\n 16963: a5 = a4 >> 0x20\n 16966: u8 [sp + 0x3c] = a5\n 16969: a5 = a4 >> 0x18\n 16972: u8 [sp + 0x3b] = a5\n 16975: a5 = a4 >> 0x10\n 16978: u8 [sp + 0x3a] = a5\n 16981: a4 = a4 >> 0x8\n 16984: u8 [sp + 0x39] = a4\n 16987: a4 = a3 >> 0x38\n 16990: u8 [sp + 0x37] = a4\n 16993: a4 = a3 >> 0x30\n 16996: u8 [sp + 0x36] = a4\n 16999: a4 = a3 >> 0x28\n 17002: u8 [sp + 0x35] = a4\n 17005: a4 = a3 >> 0x20\n 17008: u8 [sp + 0x34] = a4\n 17011: a4 = a3 >> 0x18\n 17014: u8 [sp + 0x33] = a4\n 17017: a4 = a3 >> 0x10\n 17020: u8 [sp + 0x32] = a4\n 17023: a3 = a3 >> 0x8\n 17026: u8 [sp + 0x31] = a3\n 17029: a3 = a2 >> 0x38\n 17032: u8 [sp + 0x2f] = a3\n 17035: a3 = a2 >> 0x30\n 17038: u8 [sp + 0x2e] = a3\n 17041: a3 = a2 >> 0x28\n 17044: u8 [sp + 0x2d] = a3\n 17047: a3 = a2 >> 0x20\n 17050: u8 [sp + 0x2c] = a3\n 17053: a3 = a2 >> 0x18\n 17056: u8 [sp + 0x2b] = a3\n 17059: a3 = a2 >> 0x10\n 17062: u8 [sp + 0x2a] = a3\n 17065: a2 = a2 >> 0x8\n 17068: u8 [sp + 0x29] = a2\n 17071: a2 = a1 >> 0x38\n 17074: u8 [sp + 0x27] = a2\n 17077: a2 = a1 >> 0x30\n 17080: u8 [sp + 0x26] = a2\n 17083: a2 = a1 >> 0x28\n 17086: u8 [sp + 0x25] = a2\n 17089: a2 = a1 >> 0x20\n 17092: u8 [sp + 0x24] = a2\n 17095: a2 = a1 >> 0x18\n 17098: u8 [sp + 0x23] = a2\n 17101: a2 = a1 >> 0x10\n 17104: u8 [sp + 0x22] = a2\n 17107: a1 = a1 >> 0x8\n 17110: u8 [sp + 0x21] = a1\n 17113: a1 = t1 & 0x1f\n 17116: a2 = sp + 0x20\n 17119: a1 = a1 + a2\n 17122: a2 = u8 [a1 + 0x9]\n 17125: a3 = u8 [a1 + 0x8]\n 17128: a4 = u8 [a1 + 0xa]\n 17131: a5 = u8 [a1 + 0xb]\n 17134: a2 = a2 << 0x8\n 17137: a2 = a2 | a3\n 17140: a4 = a4 << 0x10\n 17143: a5 = a5 << 0x18\n 17146: a4 = a4 | a5\n 17149: a2 = a2 | a4\n 17152: a3 = u8 [a1 + 0xd]\n 17155: a4 = u8 [a1 + 0xc]\n 17158: a5 = u8 [a1 + 0xe]\n 17161: s1 = u8 [a1 + 0xf]\n 17164: a3 = a3 << 0x8\n 17167: a3 = a3 | a4\n 17170: a5 = a5 << 0x10\n 17173: s1 = s1 << 0x18\n 17176: a5 = a5 | s1\n 17179: a3 = a3 | a5\n 17182: a3 = a3 << 0x20\n 17185: a2 = a2 | a3\n 17188: a3 = u8 [a1 + 0x1]\n 17191: a4 = u8 [a1]\n 17193: a5 = u8 [a1 + 0x2]\n 17196: s1 = u8 [a1 + 0x3]\n 17199: a3 = a3 << 0x8\n 17202: a3 = a3 | a4\n 17205: a5 = a5 << 0x10\n 17208: s1 = s1 << 0x18\n 17211: a5 = a5 | s1\n 17214: a3 = a3 | a5\n 17217: a4 = u8 [a1 + 0x5]\n 17220: a5 = u8 [a1 + 0x4]\n 17223: s1 = u8 [a1 + 0x6]\n 17226: a0 = u8 [a1 + 0x7]\n 17229: a4 = a4 << 0x8\n 17232: a4 = a4 | a5\n 17235: s1 = s1 << 0x10\n 17238: a0 = a0 << 0x18\n 17241: a0 = a0 | s1\n 17244: a0 = a0 | a4\n 17247: a0 = a0 << 0x20\n 17250: a3 = a3 | a0\n 17253: a0 = u8 [a1 + 0x11]\n 17256: a4 = u8 [a1 + 0x10]\n 17259: a5 = u8 [a1 + 0x12]\n 17262: a1 = u8 [a1 + 0x13]\n 17265: a0 = a0 << 0x8\n 17268: a0 = a0 | a4\n 17271: a5 = a5 << 0x10\n 17274: a1 = a1 << 0x18\n 17277: a1 = a1 | a5\n 17280: a0 = a0 | a1\n 17283: a3 = 0 if t0 != 0\n 17285: a2 = 0 if t0 != 0\n 17287: a0 = 0 if t0 != 0\n 17289: a1 = u64 [sp + 0x18]\n 17292: u64 [a1 + 0x10] = a0\n 17295: u64 [a1 + 0x8] = a2\n 17298: u64 [a1] = a3\n 17300: u64 [a1 + 24] = 0\n 17303: sp = s0 + 0xfffffffffffffec0\n 17307: ra = u64 [sp + 0x138]\n 17311: s0 = u64 [sp + 0x130]\n 17315: s1 = u64 [sp + 0x128]\n 17319: sp = sp + 0x140\n 17323: ret\n      : @283 (gas: 2)\n 17325: a0 = 0\n 17327: ra = 252, jump @0\n      : @284 [@dyn 126] (gas: 6)\n 17333: i32 a1 = a0 + 0\n 17335: a0 = 0x1\n 17338: a2 = 0\n 17340: ra = 0xfe\n 17344: ecalli 10 // 'seal_return'\n 17346: fallthrough\n      : @285 [@dyn 127] (gas: 12)\n 17347: a2 = u64 [a1 + 0x10]\n 17350: a3 = u64 [a1 + 0x18]\n 17353: a4 = u64 [a1 + 0x8]\n 17356: a1 = u64 [a1]\n 17358: a3 = a3 | a4\n 17361: a4 = a1 | a2\n 17364: a4 = a4 | a3\n 17367: a4 = a4 >> 0x20\n 17370: a2 = a2 | a3\n 17373: a2 = a2 << 0x20\n 17376: a2 = a2 | a4\n 17379: jump @288 if a2 != 0\n      : @286 (gas: 13)\n 17383: sp = sp + 0xffffffffffffffe0\n 17386: u64 [sp + 0x18] = ra\n 17389: u64 [sp + 0x10] = s0\n 17392: u64 [sp + 0x8] = s1\n 17395: a2 = u64 [a0 + 0x10]\n 17398: a3 = u64 [a0 + 0x8]\n 17401: u64 [sp] = a3\n 17403: s1 = u64 [a0]\n 17405: a2 = a2 << 0x20\n 17408: s0 = a2 >> 0x20\n 17411: i32 a0 = a1 + 0\n 17413: a1 = 0x20\n 17416: ra = 256, jump @0\n      : @287 [@dyn 128] (gas: 59)\n 17422: a1 = reverse s0\n 17424: a2 = u64 [sp]\n 17426: a2 = reverse a2\n 17428: a3 = reverse s1\n 17430: a4 = a3 >> 0x38\n 17433: u8 [a0 + 0x1f] = a4\n 17436: a4 = a3 >> 0x30\n 17439: u8 [a0 + 0x1e] = a4\n 17442: a4 = a3 >> 0x28\n 17445: u8 [a0 + 0x1d] = a4\n 17448: a4 = a3 >> 0x20\n 17451: u8 [a0 + 0x1c] = a4\n 17454: a4 = a3 >> 0x18\n 17457: u8 [a0 + 0x1b] = a4\n 17460: a4 = a3 >> 0x10\n 17463: u8 [a0 + 0x1a] = a4\n 17466: a4 = a3 >> 0x8\n 17469: u8 [a0 + 0x19] = a4\n 17472: u8 [a0 + 0x18] = a3\n 17475: u8 [a0 + 0x10] = a2\n 17478: u8 [a0 + 11] = 0\n 17481: u8 [a0 + 10] = 0\n 17484: u8 [a0 + 9] = 0\n 17487: u8 [a0 + 7] = 0\n 17490: u8 [a0 + 6] = 0\n 17493: u8 [a0 + 5] = 0\n 17496: u8 [a0 + 4] = 0\n 17499: u8 [a0 + 3] = 0\n 17502: u8 [a0 + 2] = 0\n 17505: u8 [a0 + 1] = 0\n 17508: u8 [a0 + 0] = 0\n 17510: a3 = a2 >> 0x38\n 17513: u8 [a0 + 0x17] = a3\n 17516: a3 = a2 >> 0x30\n 17519: u8 [a0 + 0x16] = a3\n 17522: a3 = a2 >> 0x28\n 17525: u8 [a0 + 0x15] = a3\n 17528: a3 = a2 >> 0x20\n 17531: u8 [a0 + 0x14] = a3\n 17534: a3 = a2 >> 0x18\n 17537: u8 [a0 + 0x13] = a3\n 17540: a3 = a2 >> 0x10\n 17543: u8 [a0 + 0x12] = a3\n 17546: a2 = a2 >> 0x8\n 17549: u8 [a0 + 0x11] = a2\n 17552: u8 [a0 + 0x8] = a1\n 17555: a2 = a1 >> 0x38\n 17558: u8 [a0 + 0xf] = a2\n 17561: a2 = a1 >> 0x30\n 17564: u8 [a0 + 0xe] = a2\n 17567: a2 = a1 >> 0x28\n 17570: u8 [a0 + 0xd] = a2\n 17573: a1 = a1 >> 0x20\n 17576: u8 [a0 + 0xc] = a1\n 17579: ra = u64 [sp + 0x18]\n 17582: s0 = u64 [sp + 0x10]\n 17585: s1 = u64 [sp + 0x8]\n 17588: sp = sp + 0x20\n 17591: ret\n      : @288 (gas: 1)\n 17593: trap\n      : @289 (gas: 8)\n 17594: a0 = u64 [sp + 0x70]\n 17597: a1 = u64 [sp + 0x78]\n 17600: a2 = u64 [sp + 0x68]\n 17603: a3 = u64 [sp + 0x60]\n 17606: a1 = a1 | a2\n 17609: a0 = a0 | a3\n 17612: a0 = a0 | a1\n 17615: jump @295 if a0 != 0\n      : @290 (gas: 2)\n 17619: a0 = i32 [0x20164]\n 17624: jump @295 if a0 <=u 35\n      : @291 (gas: 44)\n 17629: i32 a0 = sp + 0x80\n 17633: a1 = 0x4\n 17636: ecalli 3 // 'call_data_load'\n 17638: a2 = u64 [sp + 0x80]\n 17642: a0 = u64 [sp + 0x88]\n 17646: a1 = u64 [sp + 0x90]\n 17650: a3 = u64 [sp + 0x98]\n 17654: u64 [sp + 0x38] = a3\n 17657: u64 [sp + 0x30] = a1\n 17660: u64 [sp + 0x28] = a0\n 17663: a0 = sp + 0x40\n 17666: a1 = sp + 0x20\n 17669: u64 [sp + 0x20] = a2\n 17672: ra = 0x102\n 17676: sp = sp + 0xfffffffffffffec0\n 17680: u64 [sp + 0x138] = ra\n 17684: u64 [sp + 0x130] = s0\n 17688: u64 [sp + 0x128] = s1\n 17692: s0 = sp + 0x140\n 17696: sp = sp & 0xffffffffffffffe0\n 17699: u64 [sp + 0x18] = a0\n 17702: a0 = u64 [a1]\n 17704: u64 [sp + 0x8] = a0\n 17707: a0 = u64 [a1 + 0x8]\n 17710: u64 [sp] = a0\n 17712: a0 = u64 [a1 + 0x10]\n 17715: u64 [sp + 0x10] = a0\n 17718: s1 = u64 [a1 + 0x18]\n 17721: u64 [sp + 248] = 0\n 17725: u64 [sp + 240] = 0\n 17729: u64 [sp + 232] = 0\n 17733: u64 [sp + 224] = 0x3\n 17738: u64 [sp + 280] = 0\n 17742: u64 [sp + 272] = 0\n 17746: u64 [sp + 264] = 0\n 17750: u64 [sp + 256] = 0\n 17754: u32 [sp + 288] = 0x20\n 17759: i32 a1 = sp + 0xe0\n 17763: i32 a3 = sp + 0x100\n 17767: i32 a4 = sp + 0x120\n 17771: a2 = 0xffffffffffffffff\n 17774: a0 = 0\n 17776: ecalli 7 // 'get_storage'\n 17778: jump @280\n      : @292 [@dyn 129] (gas: 11)\n 17781: a0 = u64 [sp + 0x58]\n 17784: u64 [sp] = a0\n 17786: a0 = u64 [sp + 0x50]\n 17789: u64 [sp + 0x8] = a0\n 17792: a0 = u64 [sp + 0x48]\n 17795: u64 [sp + 0x10] = a0\n 17798: a0 = u64 [sp + 0x40]\n 17801: u64 [sp + 0x18] = a0\n 17804: a0 = 0x40\n 17807: a1 = 0x20\n 17810: ra = 260, jump @0\n      : @293 [@dyn 130] (gas: 100)\n 17816: a1 = u8 [a0 + 0x11]\n 17819: a2 = u8 [a0 + 0x10]\n 17822: a3 = u8 [a0 + 0x12]\n 17825: a4 = u8 [a0 + 0x13]\n 17828: a1 = a1 << 0x8\n 17831: a1 = a1 | a2\n 17834: a3 = a3 << 0x10\n 17837: a4 = a4 << 0x18\n 17840: a3 = a3 | a4\n 17843: a1 = a1 | a3\n 17846: a2 = u8 [a0 + 0x15]\n 17849: a3 = u8 [a0 + 0x14]\n 17852: a4 = u8 [a0 + 0x16]\n 17855: a5 = u8 [a0 + 0x17]\n 17858: a2 = a2 << 0x8\n 17861: a2 = a2 | a3\n 17864: a4 = a4 << 0x10\n 17867: a5 = a5 << 0x18\n 17870: a4 = a4 | a5\n 17873: a2 = a2 | a4\n 17876: a2 = a2 << 0x20\n 17879: t0 = a2 | a1\n 17882: a2 = u8 [a0 + 0x1]\n 17885: a3 = u8 [a0]\n 17887: a4 = u8 [a0 + 0x2]\n 17890: a5 = u8 [a0 + 0x3]\n 17893: a2 = a2 << 0x8\n 17896: a2 = a2 | a3\n 17899: a4 = a4 << 0x10\n 17902: a5 = a5 << 0x18\n 17905: a4 = a4 | a5\n 17908: a2 = a2 | a4\n 17911: a3 = u8 [a0 + 0x5]\n 17914: a4 = u8 [a0 + 0x4]\n 17917: a5 = u8 [a0 + 0x6]\n 17920: s1 = u8 [a0 + 0x7]\n 17923: a3 = a3 << 0x8\n 17926: a3 = a3 | a4\n 17929: a5 = a5 << 0x10\n 17932: s1 = s1 << 0x18\n 17935: a5 = a5 | s1\n 17938: a3 = a3 | a5\n 17941: a3 = a3 << 0x20\n 17944: a2 = a2 | a3\n 17947: a3 = u8 [a0 + 0x19]\n 17950: a4 = u8 [a0 + 0x18]\n 17953: a5 = u8 [a0 + 0x1a]\n 17956: s1 = u8 [a0 + 0x1b]\n 17959: a3 = a3 << 0x8\n 17962: a3 = a3 | a4\n 17965: a5 = a5 << 0x10\n 17968: s1 = s1 << 0x18\n 17971: a5 = a5 | s1\n 17974: a3 = a3 | a5\n 17977: a4 = u8 [a0 + 0x1d]\n 17980: a5 = u8 [a0 + 0x1c]\n 17983: s1 = u8 [a0 + 0x1e]\n 17986: a1 = u8 [a0 + 0x1f]\n 17989: a4 = a4 << 0x8\n 17992: a4 = a4 | a5\n 17995: s1 = s1 << 0x10\n 17998: a1 = a1 << 0x18\n 18001: a1 = a1 | s1\n 18004: a1 = a1 | a4\n 18007: a1 = a1 << 0x20\n 18010: a3 = a3 | a1\n 18013: a1 = u8 [a0 + 0x9]\n 18016: a4 = u8 [a0 + 0x8]\n 18019: a5 = u8 [a0 + 0xa]\n 18022: s1 = u8 [a0 + 0xb]\n 18025: a1 = a1 << 0x8\n 18028: a1 = a1 | a4\n 18031: a5 = a5 << 0x10\n 18034: s1 = s1 << 0x18\n 18037: a5 = a5 | s1\n 18040: a1 = a1 | a5\n 18043: a4 = u8 [a0 + 0xd]\n 18046: a5 = u8 [a0 + 0xc]\n 18049: s1 = u8 [a0 + 0xe]\n 18052: a0 = u8 [a0 + 0xf]\n 18055: a4 = a4 << 0x8\n 18058: a4 = a4 | a5\n 18061: s1 = s1 << 0x10\n 18064: a0 = a0 << 0x18\n 18067: a0 = a0 | s1\n 18070: a0 = a0 | a4\n 18073: a0 = a0 << 0x20\n 18076: a0 = a0 | a1\n 18079: a1 = reverse a0\n 18081: a0 = reverse a3\n 18083: a2 = reverse a2\n 18085: a3 = reverse t0\n 18087: a2 = a2 | a3\n 18090: a3 = a0 | a1\n 18093: a3 = a3 | a2\n 18096: a3 = a3 >> 0x20\n 18099: a1 = a1 | a2\n 18102: a1 = a1 << 0x20\n 18105: a1 = a1 | a3\n 18108: jump @297 if a1 == 0\n      : @294 (gas: 1)\n 18111: trap\n      : @295 (gas: 3)\n 18112: a0 = 0\n 18114: a1 = 0\n 18116: ra = 262, jump @0\n      : @296 [@dyn 131] (gas: 5)\n 18122: i32 a1 = a0 + 0\n 18124: a0 = 0x1\n 18127: a2 = 0\n 18129: ecalli 10 // 'seal_return'\n 18131: fallthrough\n      : @297 (gas: 4)\n 18132: i32 s1 = a0 + 0\n 18134: a1 = 0x20\n 18137: a0 = s1\n 18139: ra = 264, jump @0\n      : @298 [@dyn 132] (gas: 71)\n 18145: a1 = u64 [sp]\n 18147: a1 = reverse a1\n 18149: a2 = u64 [sp + 0x8]\n 18152: a2 = reverse a2\n 18154: a3 = u64 [sp + 0x10]\n 18157: a3 = reverse a3\n 18159: a4 = u64 [sp + 0x18]\n 18162: a4 = reverse a4\n 18164: a5 = a4 >> 0x38\n 18167: u8 [a0 + 0x1f] = a5\n 18170: a5 = a4 >> 0x30\n 18173: u8 [a0 + 0x1e] = a5\n 18176: a5 = a4 >> 0x28\n 18179: u8 [a0 + 0x1d] = a5\n 18182: a5 = a4 >> 0x20\n 18185: u8 [a0 + 0x1c] = a5\n 18188: a5 = a4 >> 0x18\n 18191: u8 [a0 + 0x1b] = a5\n 18194: a5 = a4 >> 0x10\n 18197: u8 [a0 + 0x1a] = a5\n 18200: a5 = a4 >> 0x8\n 18203: u8 [a0 + 0x19] = a5\n 18206: u8 [a0 + 0x18] = a4\n 18209: u8 [a0 + 0x10] = a3\n 18212: a4 = a3 >> 0x38\n 18215: u8 [a0 + 0x17] = a4\n 18218: a4 = a3 >> 0x30\n 18221: u8 [a0 + 0x16] = a4\n 18224: a4 = a3 >> 0x28\n 18227: u8 [a0 + 0x15] = a4\n 18230: a4 = a3 >> 0x20\n 18233: u8 [a0 + 0x14] = a4\n 18236: a4 = a3 >> 0x18\n 18239: u8 [a0 + 0x13] = a4\n 18242: a4 = a3 >> 0x10\n 18245: u8 [a0 + 0x12] = a4\n 18248: a3 = a3 >> 0x8\n 18251: u8 [a0 + 0x11] = a3\n 18254: u8 [a0 + 0x8] = a2\n 18257: a3 = a2 >> 0x38\n 18260: u8 [a0 + 0xf] = a3\n 18263: a3 = a2 >> 0x30\n 18266: u8 [a0 + 0xe] = a3\n 18269: a3 = a2 >> 0x28\n 18272: u8 [a0 + 0xd] = a3\n 18275: a3 = a2 >> 0x20\n 18278: u8 [a0 + 0xc] = a3\n 18281: a3 = a2 >> 0x18\n 18284: u8 [a0 + 0xb] = a3\n 18287: a3 = a2 >> 0x10\n 18290: u8 [a0 + 0xa] = a3\n 18293: a2 = a2 >> 0x8\n 18296: u8 [a0 + 0x9] = a2\n 18299: u8 [a0] = a1\n 18301: a2 = a1 >> 0x38\n 18304: u8 [a0 + 0x7] = a2\n 18307: a2 = a1 >> 0x30\n 18310: u8 [a0 + 0x6] = a2\n 18313: a2 = a1 >> 0x28\n 18316: u8 [a0 + 0x5] = a2\n 18319: a2 = a1 >> 0x20\n 18322: u8 [a0 + 0x4] = a2\n 18325: a2 = a1 >> 0x18\n 18328: u8 [a0 + 0x3] = a2\n 18331: a2 = a1 >> 0x10\n 18334: u8 [a0 + 0x2] = a2\n 18337: a1 = a1 >> 0x8\n 18340: u8 [a0 + 0x1] = a1\n 18343: a1 = 0x20\n 18346: a0 = s1\n 18348: ra = 266, jump @0\n      : @299 [@dyn 133] (gas: 6)\n 18354: i32 a1 = a0 + 0\n 18356: a2 = 0x20\n 18359: a0 = 0\n 18361: ra = 0x10c\n 18365: ecalli 10 // 'seal_return'\n 18367: fallthrough\n      : @300 [@dyn 134] (gas: 18)\n 18368: sp = sp + 0xffffffffffffffc0\n 18371: u64 [sp + 0x38] = ra\n 18374: u64 [sp + 0x30] = s0\n 18377: u64 [sp + 0x28] = s1\n 18380: s0 = sp + 0x40\n 18383: sp = sp & 0xffffffffffffffe0\n 18386: a2 = u64 [a1 + 0x10]\n 18389: a3 = u64 [a1 + 0x18]\n 18392: a4 = u64 [a1 + 0x8]\n 18395: a1 = u64 [a1]\n 18397: a3 = a3 | a4\n 18400: a4 = a1 | a2\n 18403: a4 = a4 | a3\n 18406: a4 = a4 >> 0x20\n 18409: a2 = a2 | a3\n 18412: a2 = a2 << 0x20\n 18415: a2 = a2 | a4\n 18418: jump @304 if a2 != 0\n      : @301 (gas: 5)\n 18421: s1 = a0\n 18423: i32 a1 = a1 + 0\n 18425: i32 a0 = sp + 0\n 18427: ecalli 3 // 'call_data_load'\n 18429: fallthrough\n      : @302 (gas: 10)\n 18430: a0 = u64 [sp + 0x10]\n 18433: a1 = u64 [sp + 0x18]\n 18436: a2 = 0x100000000\n 18446: a2 = a2 ^ a0\n 18449: a2 = a2 | a1\n 18452: a3 = a0 >> 0x20\n 18455: a3 = a3 <u 0x1\n 18458: a3 = 0 if a1 != 0\n 18460: a3 = 0 if a2 == 0\n 18462: jump @305 if a3 == 0\n      : @303 (gas: 12)\n 18465: a2 = u64 [sp]\n 18467: a3 = u64 [sp + 0x8]\n 18470: u64 [s1] = a2\n 18472: u64 [s1 + 0x8] = a3\n 18475: u64 [s1 + 0x10] = a0\n 18478: u64 [s1 + 0x18] = a1\n 18481: sp = s0 + 0xffffffffffffffc0\n 18484: ra = u64 [sp + 0x38]\n 18487: s0 = u64 [sp + 0x30]\n 18490: s1 = u64 [sp + 0x28]\n 18493: sp = sp + 0x40\n 18496: ret\n      : @304 (gas: 1)\n 18498: trap\n      : @305 (gas: 3)\n 18499: a0 = 0\n 18501: a1 = 0\n 18503: ra = 270, jump @0\n      : @306 [@dyn 135] (gas: 6)\n 18509: i32 a1 = a0 + 0\n 18511: a0 = 0x1\n 18514: a2 = 0\n 18516: ra = 0x110\n 18520: ecalli 10 // 'seal_return'\n 18522: fallthrough\n      : @307 [@dyn 136] (gas: 52)\n 18523: sp = sp + 0xffffffffffffff80\n 18526: u64 [sp + 0x78] = ra\n 18529: u64 [sp + 0x70] = s0\n 18532: u64 [sp + 0x68] = s1\n 18535: s0 = sp + 0x80\n 18539: sp = sp & 0xffffffffffffffe0\n 18542: t2 = u64 [a1 + 0x10]\n 18545: a5 = u64 [a1 + 0x8]\n 18548: t0 = u64 [a2 + 0x8]\n 18551: s1 = u64 [a1]\n 18553: u64 [sp + 0x10] = s1\n 18556: a4 = u64 [a2]\n 18558: u64 [sp + 0x18] = a4\n 18561: ra = u64 [a2 + 0x10]\n 18564: a3 = t0 ^ a5\n 18567: u64 [sp + 0x38] = a3\n 18570: a3 = t0 <u a5\n 18573: a4 = a4 <u s1\n 18576: t1 = u64 [sp + 0x38]\n 18579: a3 = a4 if t1 == 0\n 18582: t1 = a4\n 18584: a1 = u64 [a1 + 0x18]\n 18587: u64 [sp + 0x38] = a1\n 18590: a1 = u64 [a2 + 0x18]\n 18593: u64 [sp + 0x20] = a1\n 18596: a1 = ra - t2\n 18599: a2 = a1 - a3\n 18602: u64 [sp + 0x28] = a2\n 18605: a2 = a1 <u a3\n 18608: u64 [sp + 0x30] = t2\n 18611: a3 = ra <u t2\n 18614: a1 = u64 [sp + 0x38]\n 18617: a4 = u64 [sp + 0x20]\n 18620: a1 = a4 - a1\n 18623: a1 = a1 - a3\n 18626: t2 = a1 - a2\n 18629: s1 = t0 - a5\n 18632: a2 = s1 - t1\n 18635: t0 = u64 [sp + 0x10]\n 18638: a1 = u64 [sp + 0x18]\n 18641: a3 = a1 - t0\n 18644: a4 = a2 >u 0\n 18646: a3 = a3 <u 0x20\n 18649: a3 = a3 ^ 0x1\n 18652: a3 = a4 if a2 != 0\n 18655: a2 = t2 >s 0\n 18657: a1 = u64 [sp + 0x28]\n 18660: a4 = a1 >u 0\n 18662: a4 = a2 if t2 != 0\n 18665: a1 = a1 | t2\n 18668: a3 = a4 if a1 != 0\n 18671: jump @313 if a3 == 0\n      : @308 (gas: 11)\n 18674: s1 = a0\n 18676: a2 = u64 [sp + 0x30]\n 18679: a0 = t0 | a2\n 18682: a1 = u64 [sp + 0x38]\n 18685: a1 = a1 | a5\n 18688: a0 = a0 | a1\n 18691: a0 = a0 >> 0x20\n 18694: a1 = a1 | a2\n 18697: a1 = a1 << 0x20\n 18700: a0 = a0 | a1\n 18703: jump @312 if a0 != 0\n      : @309 (gas: 4)\n 18706: i32 a1 = t0 + 0\n 18708: i32 a0 = sp + 0x40\n 18711: ecalli 3 // 'call_data_load'\n 18713: fallthrough\n      : @310 (gas: 10)\n 18714: a0 = u64 [sp + 0x50]\n 18717: a1 = u64 [sp + 0x58]\n 18720: a2 = 0x100000000\n 18730: a2 = a2 ^ a0\n 18733: a2 = a2 | a1\n 18736: a3 = a0 >> 0x20\n 18739: a3 = a3 <u 0x1\n 18742: a3 = 0 if a1 != 0\n 18744: a3 = 0 if a2 == 0\n 18746: jump @313 if a3 == 0\n      : @311 (gas: 12)\n 18749: a2 = u64 [sp + 0x48]\n 18752: a3 = u64 [sp + 0x40]\n 18755: u64 [s1 + 0x8] = a2\n 18758: u64 [s1] = a3\n 18760: u64 [s1 + 0x10] = a0\n 18763: u64 [s1 + 0x18] = a1\n 18766: sp = s0 + 0xffffffffffffff80\n 18769: ra = u64 [sp + 0x78]\n 18772: s0 = u64 [sp + 0x70]\n 18775: s1 = u64 [sp + 0x68]\n 18778: sp = sp + 0x80\n 18782: ret\n      : @312 (gas: 1)\n 18784: trap\n      : @313 (gas: 3)\n 18785: a0 = 0\n 18787: a1 = 0\n 18789: ra = 274, jump @0\n      : @314 [@dyn 137] (gas: 6)\n 18795: i32 a1 = a0 + 0\n 18797: a0 = 0x1\n 18800: a2 = 0\n 18802: ra = 0x114\n 18806: ecalli 10 // 'seal_return'\n 18808: fallthrough\n      : @315 [@dyn 138] (gas: 9)\n 18809: a2 = u64 [a1 + 0x18]\n 18812: a3 = u64 [a1 + 0x10]\n 18815: a4 = u64 [a1 + 0x8]\n 18818: a1 = u64 [a1]\n 18820: u64 [a0 + 0x18] = a2\n 18823: u64 [a0 + 0x10] = a3\n 18826: u64 [a0 + 0x8] = a4\n 18829: u64 [a0] = a1\n 18831: ret\n      : @316 (gas: 8)\n 18833: a0 = u64 [sp + 0x70]\n 18836: a1 = u64 [sp + 0x78]\n 18839: a2 = u64 [sp + 0x68]\n 18842: a3 = u64 [sp + 0x60]\n 18845: a1 = a1 | a2\n 18848: a0 = a0 | a3\n 18851: a0 = a0 | a1\n 18854: jump @326 if a0 != 0\n      : @317 (gas: 2)\n 18858: a0 = i32 [0x20164]\n 18863: jump @326 if a0 <=u 35\n      : @318 (gas: 4)\n 18868: i32 a0 = sp + 0xa0\n 18872: a1 = 0x4\n 18875: ecalli 3 // 'call_data_load'\n 18877: fallthrough\n      : @319 (gas: 11)\n 18878: s1 = u64 [sp + 0xb0]\n 18882: a2 = u64 [sp + 0xb8]\n 18886: a0 = 0x100000000\n 18896: a0 = a0 ^ s1\n 18899: a0 = a0 | a2\n 18902: a1 = s1 >> 0x20\n 18905: a1 = a1 <u 0x1\n 18908: u64 [sp + 0x38] = a2\n 18911: a1 = 0 if a2 != 0\n 18913: a1 = 0 if a0 == 0\n 18915: jump @327 if a1 == 0\n      : @320 (gas: 15)\n 18919: a0 = u64 [sp + 0xa8]\n 18923: u64 [sp + 0x30] = a0\n 18926: a0 = u64 [sp + 0xa0]\n 18930: u64 [sp + 0x28] = a0\n 18933: i32 a0 = sp + 0x80\n 18937: ecalli 5 // 'caller'\n 18939: a0 = u64 [sp + 0x88]\n 18943: u64 [sp + 0x20] = a0\n 18946: a0 = u64 [sp + 0x80]\n 18950: u64 [sp + 0x18] = a0\n 18953: a0 = u32 [sp + 0x90]\n 18957: u64 [sp + 0x10] = a0\n 18960: i32 a0 = sp + 0xa0\n 18964: ecalli 0 // 'address'\n 18965: fallthrough\n      : @321 (gas: 12)\n 18966: a0 = u32 [sp + 0xb0]\n 18970: a1 = u64 [sp + 0xa0]\n 18974: a2 = u64 [sp + 0xa8]\n 18978: a3 = u64 [sp + 0x10]\n 18981: a0 = a0 ^ a3\n 18984: a3 = u64 [sp + 0x18]\n 18987: a1 = a1 ^ a3\n 18990: a0 = a0 | a1\n 18993: a1 = u64 [sp + 0x20]\n 18996: a1 = a1 ^ a2\n 18999: a0 = a0 | a1\n 19002: jump @326 if a0 != 0\n      : @322 (gas: 9)\n 19006: a0 = u64 [sp + 0x28]\n 19009: u64 [sp + 0x40] = a0\n 19012: a0 = u64 [sp + 0x30]\n 19015: u64 [sp + 0x48] = a0\n 19018: u64 [sp + 0x50] = s1\n 19021: a0 = sp + 0x40\n 19024: a1 = u64 [sp + 0x38]\n 19027: u64 [sp + 0x58] = a1\n 19030: ra = 278, jump @810\n      : @323 [@dyn 139] (gas: 3)\n 19036: a0 = 0x40\n 19039: a1 = 0x20\n 19042: ra = 280, jump @0\n      : @324 [@dyn 140] (gas: 100)\n 19048: a1 = u8 [a0 + 0x11]\n 19051: a2 = u8 [a0 + 0x10]\n 19054: a3 = u8 [a0 + 0x12]\n 19057: a4 = u8 [a0 + 0x13]\n 19060: a1 = a1 << 0x8\n 19063: a1 = a1 | a2\n 19066: a3 = a3 << 0x10\n 19069: a4 = a4 << 0x18\n 19072: a3 = a3 | a4\n 19075: a1 = a1 | a3\n 19078: a2 = u8 [a0 + 0x15]\n 19081: a3 = u8 [a0 + 0x14]\n 19084: a4 = u8 [a0 + 0x16]\n 19087: a5 = u8 [a0 + 0x17]\n 19090: a2 = a2 << 0x8\n 19093: a2 = a2 | a3\n 19096: a4 = a4 << 0x10\n 19099: a5 = a5 << 0x18\n 19102: a4 = a4 | a5\n 19105: a2 = a2 | a4\n 19108: a2 = a2 << 0x20\n 19111: t0 = a2 | a1\n 19114: a2 = u8 [a0 + 0x1]\n 19117: a3 = u8 [a0]\n 19119: a4 = u8 [a0 + 0x2]\n 19122: a5 = u8 [a0 + 0x3]\n 19125: a2 = a2 << 0x8\n 19128: a2 = a2 | a3\n 19131: a4 = a4 << 0x10\n 19134: a5 = a5 << 0x18\n 19137: a4 = a4 | a5\n 19140: a2 = a2 | a4\n 19143: a3 = u8 [a0 + 0x5]\n 19146: a4 = u8 [a0 + 0x4]\n 19149: a5 = u8 [a0 + 0x6]\n 19152: s1 = u8 [a0 + 0x7]\n 19155: a3 = a3 << 0x8\n 19158: a3 = a3 | a4\n 19161: a5 = a5 << 0x10\n 19164: s1 = s1 << 0x18\n 19167: a5 = a5 | s1\n 19170: a3 = a3 | a5\n 19173: a3 = a3 << 0x20\n 19176: a2 = a2 | a3\n 19179: a3 = u8 [a0 + 0x19]\n 19182: a4 = u8 [a0 + 0x18]\n 19185: a5 = u8 [a0 + 0x1a]\n 19188: s1 = u8 [a0 + 0x1b]\n 19191: a3 = a3 << 0x8\n 19194: a3 = a3 | a4\n 19197: a5 = a5 << 0x10\n 19200: s1 = s1 << 0x18\n 19203: a5 = a5 | s1\n 19206: a3 = a3 | a5\n 19209: a4 = u8 [a0 + 0x1d]\n 19212: a5 = u8 [a0 + 0x1c]\n 19215: s1 = u8 [a0 + 0x1e]\n 19218: a1 = u8 [a0 + 0x1f]\n 19221: a4 = a4 << 0x8\n 19224: a4 = a4 | a5\n 19227: s1 = s1 << 0x10\n 19230: a1 = a1 << 0x18\n 19233: a1 = a1 | s1\n 19236: a1 = a1 | a4\n 19239: a1 = a1 << 0x20\n 19242: a3 = a3 | a1\n 19245: a1 = u8 [a0 + 0x9]\n 19248: a4 = u8 [a0 + 0x8]\n 19251: a5 = u8 [a0 + 0xa]\n 19254: s1 = u8 [a0 + 0xb]\n 19257: a1 = a1 << 0x8\n 19260: a1 = a1 | a4\n 19263: a5 = a5 << 0x10\n 19266: s1 = s1 << 0x18\n 19269: a5 = a5 | s1\n 19272: a1 = a1 | a5\n 19275: a4 = u8 [a0 + 0xd]\n 19278: a5 = u8 [a0 + 0xc]\n 19281: s1 = u8 [a0 + 0xe]\n 19284: a0 = u8 [a0 + 0xf]\n 19287: a4 = a4 << 0x8\n 19290: a4 = a4 | a5\n 19293: s1 = s1 << 0x10\n 19296: a0 = a0 << 0x18\n 19299: a0 = a0 | s1\n 19302: a0 = a0 | a4\n 19305: a0 = a0 << 0x20\n 19308: a0 = a0 | a1\n 19311: a1 = reverse a0\n 19313: a0 = reverse a3\n 19315: a2 = reverse a2\n 19317: a3 = reverse t0\n 19319: a2 = a2 | a3\n 19322: a3 = a0 | a1\n 19325: a3 = a3 | a2\n 19328: a3 = a3 >> 0x20\n 19331: a1 = a1 | a2\n 19334: a1 = a1 << 0x20\n 19337: a1 = a1 | a3\n 19340: jump @329 if a1 == 0\n      : @325 (gas: 1)\n 19343: trap\n      : @326 (gas: 4)\n 19344: a0 = 0\n 19346: a1 = 0\n 19348: ra = 0x11a\n 19352: jump @0\n      : @327 (gas: 2)\n 19355: a0 = 0\n 19357: ra = 282, jump @0\n      : @328 [@dyn 141] (gas: 7)\n 19363: i32 a1 = a0 + 0\n 19365: a0 = 0x1\n 19368: a2 = 0\n 19370: ecalli 10 // 'seal_return'\n 19372: i32 a0 = a0 + 0\n 19374: ra = 0x11c\n 19378: jump @0\n      : @329 (gas: 2)\n 19381: i32 a0 = a0 + 0\n 19383: ra = 284, jump @0\n      : @330 [@dyn 142] (gas: 6)\n 19389: i32 a1 = a0 + 0\n 19391: a0 = 0\n 19393: a2 = 0\n 19395: ra = 0x11e\n 19399: ecalli 10 // 'seal_return'\n 19401: fallthrough\n      : @331 [@dyn 143] (gas: 12)\n 19402: sp = sp + 0xffffffffffffff80\n 19405: u64 [sp + 0x78] = ra\n 19408: u64 [sp + 0x70] = s0\n 19411: s0 = sp + 0x80\n 19415: sp = sp & 0xffffffffffffffe0\n 19418: u64 [sp + 56] = 0\n 19421: u64 [sp + 48] = 0\n 19424: u64 [sp + 40] = 0\n 19427: u64 [sp + 32] = 0\n 19430: i32 a0 = sp + 0x20\n 19433: ecalli 13 // 'value_transferred'\n 19435: fallthrough\n      : @332 (gas: 8)\n 19436: a0 = u64 [sp + 0x30]\n 19439: a1 = u64 [sp + 0x38]\n 19442: a2 = u64 [sp + 0x28]\n 19445: a3 = u64 [sp + 0x20]\n 19448: a1 = a1 | a2\n 19451: a0 = a0 | a3\n 19454: a0 = a0 | a1\n 19457: jump @338 if a0 != 0\n      : @333 (gas: 2)\n 19461: a0 = i32 [0x20164]\n 19466: jump @338 if a0 <=u 35\n      : @334 (gas: 47)\n 19471: i32 a0 = sp + 0x40\n 19474: a1 = 0x4\n 19477: ecalli 3 // 'call_data_load'\n 19479: a1 = u64 [sp + 0x40]\n 19482: a0 = u64 [sp + 0x48]\n 19485: a2 = u64 [sp + 0x50]\n 19488: a3 = u64 [sp + 0x58]\n 19491: u64 [sp + 0x18] = a3\n 19494: u64 [sp + 0x10] = a2\n 19497: u64 [sp + 0x8] = a0\n 19500: a0 = sp\n 19502: u64 [sp] = a1\n 19504: ra = 0x120\n 19508: sp = sp + 0xffffffffffffff20\n 19512: u64 [sp + 0xd8] = ra\n 19516: u64 [sp + 0xd0] = s0\n 19520: u64 [sp + 0xc8] = s1\n 19524: s0 = sp + 0xe0\n 19528: sp = sp & 0xffffffffffffffe0\n 19531: a1 = u64 [a0 + 0x18]\n 19534: u64 [sp + 0x38] = a1\n 19537: a1 = u64 [a0 + 0x10]\n 19540: u64 [sp + 0x30] = a1\n 19543: a1 = u64 [a0 + 0x8]\n 19546: u64 [sp + 0x28] = a1\n 19549: a0 = u64 [a0]\n 19551: u64 [sp + 0x20] = a0\n 19554: i32 a0 = sp + 0x60\n 19557: ecalli 5 // 'caller'\n 19559: a0 = u64 [sp + 0x68]\n 19562: a1 = i32 [sp + 0x70]\n 19565: s1 = u64 [sp + 0x60]\n 19568: a0 = reverse a0\n 19570: a2 = a0 << 0x20\n 19573: a1 = reverse a1\n 19575: a1 = a1 >> 0x20\n 19578: a1 = a1 | a2\n 19581: u64 [sp + 0x18] = a1\n 19584: a0 = a0 >> 0x20\n 19587: a1 = reverse s1\n 19589: a1 = a1 << 0x20\n 19592: a0 = a0 | a1\n 19595: u64 [sp + 0x10] = a0\n 19598: a1 = 0x20\n 19601: a0 = 0\n 19603: ra = 0x2e8\n 19607: jump @0\n      : @335 [@dyn 144] (gas: 3)\n 19610: a0 = 0x40\n 19613: a1 = 0x20\n 19616: ra = 290, jump @0\n      : @336 [@dyn 145] (gas: 100)\n 19622: a1 = u8 [a0 + 0x11]\n 19625: a2 = u8 [a0 + 0x10]\n 19628: a3 = u8 [a0 + 0x12]\n 19631: a4 = u8 [a0 + 0x13]\n 19634: a1 = a1 << 0x8\n 19637: a1 = a1 | a2\n 19640: a3 = a3 << 0x10\n 19643: a4 = a4 << 0x18\n 19646: a3 = a3 | a4\n 19649: a1 = a1 | a3\n 19652: a2 = u8 [a0 + 0x15]\n 19655: a3 = u8 [a0 + 0x14]\n 19658: a4 = u8 [a0 + 0x16]\n 19661: a5 = u8 [a0 + 0x17]\n 19664: a2 = a2 << 0x8\n 19667: a2 = a2 | a3\n 19670: a4 = a4 << 0x10\n 19673: a5 = a5 << 0x18\n 19676: a4 = a4 | a5\n 19679: a2 = a2 | a4\n 19682: a2 = a2 << 0x20\n 19685: t0 = a2 | a1\n 19688: a2 = u8 [a0 + 0x1]\n 19691: a3 = u8 [a0]\n 19693: a4 = u8 [a0 + 0x2]\n 19696: a5 = u8 [a0 + 0x3]\n 19699: a2 = a2 << 0x8\n 19702: a2 = a2 | a3\n 19705: a4 = a4 << 0x10\n 19708: a5 = a5 << 0x18\n 19711: a4 = a4 | a5\n 19714: a2 = a2 | a4\n 19717: a3 = u8 [a0 + 0x5]\n 19720: a4 = u8 [a0 + 0x4]\n 19723: a5 = u8 [a0 + 0x6]\n 19726: a1 = u8 [a0 + 0x7]\n 19729: a3 = a3 << 0x8\n 19732: a3 = a3 | a4\n 19735: a5 = a5 << 0x10\n 19738: a1 = a1 << 0x18\n 19741: a1 = a1 | a5\n 19744: a1 = a1 | a3\n 19747: a1 = a1 << 0x20\n 19750: t1 = a1 | a2\n 19753: a1 = u8 [a0 + 0x19]\n 19756: a3 = u8 [a0 + 0x18]\n 19759: a4 = u8 [a0 + 0x1a]\n 19762: a5 = u8 [a0 + 0x1b]\n 19765: a1 = a1 << 0x8\n 19768: a1 = a1 | a3\n 19771: a4 = a4 << 0x10\n 19774: a5 = a5 << 0x18\n 19777: a4 = a4 | a5\n 19780: a1 = a1 | a4\n 19783: a3 = u8 [a0 + 0x1d]\n 19786: a4 = u8 [a0 + 0x1c]\n 19789: a5 = u8 [a0 + 0x1e]\n 19792: a2 = u8 [a0 + 0x1f]\n 19795: a3 = a3 << 0x8\n 19798: a3 = a3 | a4\n 19801: a5 = a5 << 0x10\n 19804: a2 = a2 << 0x18\n 19807: a2 = a2 | a5\n 19810: a2 = a2 | a3\n 19813: a2 = a2 << 0x20\n 19816: a3 = a2 | a1\n 19819: a1 = u8 [a0 + 0x9]\n 19822: a2 = u8 [a0 + 0x8]\n 19825: a4 = u8 [a0 + 0xa]\n 19828: a5 = u8 [a0 + 0xb]\n 19831: a1 = a1 << 0x8\n 19834: a1 = a1 | a2\n 19837: a4 = a4 << 0x10\n 19840: a5 = a5 << 0x18\n 19843: a4 = a4 | a5\n 19846: a1 = a1 | a4\n 19849: a2 = u8 [a0 + 0xd]\n 19852: a4 = u8 [a0 + 0xc]\n 19855: a5 = u8 [a0 + 0xe]\n 19858: a0 = u8 [a0 + 0xf]\n 19861: a2 = a2 << 0x8\n 19864: a2 = a2 | a4\n 19867: a5 = a5 << 0x10\n 19870: a0 = a0 << 0x18\n 19873: a0 = a0 | a5\n 19876: a0 = a0 | a2\n 19879: a0 = a0 << 0x20\n 19882: a0 = a0 | a1\n 19885: a1 = reverse a0\n 19887: a0 = reverse a3\n 19889: a2 = reverse t1\n 19891: a3 = reverse t0\n 19893: a2 = a2 | a3\n 19896: a3 = a0 | a1\n 19899: a3 = a3 | a2\n 19902: a3 = a3 >> 0x20\n 19905: a1 = a1 | a2\n 19908: a1 = a1 << 0x20\n 19911: a1 = a1 | a3\n 19914: jump @340 if a1 == 0\n      : @337 (gas: 1)\n 19917: trap\n      : @338 (gas: 3)\n 19918: a0 = 0\n 19920: a1 = 0\n 19922: ra = 292, jump @0\n      : @339 [@dyn 146] (gas: 7)\n 19928: i32 a1 = a0 + 0\n 19930: a0 = 0x1\n 19933: a2 = 0\n 19935: ecalli 10 // 'seal_return'\n 19937: i32 a0 = a0 + 0\n 19939: ra = 0x126\n 19943: jump @0\n      : @340 (gas: 2)\n 19946: i32 a0 = a0 + 0\n 19948: ra = 294, jump @0\n      : @341 [@dyn 147] (gas: 6)\n 19954: i32 a1 = a0 + 0\n 19956: a0 = 0\n 19958: a2 = 0\n 19960: ra = 0x128\n 19964: ecalli 10 // 'seal_return'\n 19966: fallthrough\n      : @342 [@dyn 148] (gas: 9)\n 19967: a2 = u64 [a1 + 0x18]\n 19970: a3 = u64 [a1 + 0x10]\n 19973: a4 = u64 [a1 + 0x8]\n 19976: a1 = u64 [a1]\n 19978: u64 [a0 + 0x18] = a2\n 19981: u64 [a0 + 0x10] = a3\n 19984: u64 [a0 + 0x8] = a4\n 19987: u64 [a0] = a1\n 19989: ret\n      : @343 (gas: 8)\n 19991: a0 = u64 [sp + 0x30]\n 19994: a1 = u64 [sp + 0x38]\n 19997: a2 = u64 [sp + 0x28]\n 20000: a3 = u64 [sp + 0x20]\n 20003: a1 = a1 | a2\n 20006: a0 = a0 | a3\n 20009: a0 = a0 | a1\n 20012: jump @353 if a0 != 0\n      : @344 (gas: 2)\n 20016: a0 = i32 [0x20164]\n 20021: jump @353 if a0 <=u 35\n      : @345 (gas: 4)\n 20026: i32 a0 = sp + 0x60\n 20029: a1 = 0x4\n 20032: ecalli 3 // 'call_data_load'\n 20034: fallthrough\n      : @346 (gas: 11)\n 20035: a1 = u64 [sp + 0x70]\n 20038: s1 = u64 [sp + 0x78]\n 20041: a0 = 0x100000000\n 20051: a0 = a0 ^ a1\n 20054: a0 = a0 | s1\n 20057: u64 [sp + 0x18] = a1\n 20060: a1 = a1 >> 0x20\n 20063: a1 = a1 <u 0x1\n 20066: a1 = 0 if s1 != 0\n 20068: a1 = 0 if a0 == 0\n 20070: jump @354 if a1 == 0\n      : @347 (gas: 7)\n 20074: a0 = u64 [sp + 0x68]\n 20077: u64 [sp + 0x8] = a0\n 20080: a0 = u64 [sp + 0x60]\n 20083: u64 [sp + 0x10] = a0\n 20086: a1 = 0x20\n 20089: a0 = 0\n 20091: ra = 298, jump @0\n      : @348 [@dyn 149] (gas: 70)\n 20097: a1 = reverse s1\n 20099: a2 = u64 [sp + 0x18]\n 20102: a2 = reverse a2\n 20104: a3 = u64 [sp + 0x8]\n 20107: a3 = reverse a3\n 20109: a4 = u64 [sp + 0x10]\n 20112: a4 = reverse a4\n 20114: a5 = a4 >> 0x38\n 20117: u8 [a0 + 0x1f] = a5\n 20120: a5 = a4 >> 0x30\n 20123: u8 [a0 + 0x1e] = a5\n 20126: a5 = a4 >> 0x28\n 20129: u8 [a0 + 0x1d] = a5\n 20132: a5 = a4 >> 0x20\n 20135: u8 [a0 + 0x1c] = a5\n 20138: a5 = a4 >> 0x18\n 20141: u8 [a0 + 0x1b] = a5\n 20144: a5 = a4 >> 0x10\n 20147: u8 [a0 + 0x1a] = a5\n 20150: a5 = a4 >> 0x8\n 20153: u8 [a0 + 0x19] = a5\n 20156: u8 [a0 + 0x18] = a4\n 20159: a4 = a3 >> 0x38\n 20162: u8 [a0 + 0x17] = a4\n 20165: a4 = a3 >> 0x30\n 20168: u8 [a0 + 0x16] = a4\n 20171: a4 = a3 >> 0x28\n 20174: u8 [a0 + 0x15] = a4\n 20177: a4 = a3 >> 0x20\n 20180: u8 [a0 + 0x14] = a4\n 20183: a4 = a3 >> 0x18\n 20186: u8 [a0 + 0x13] = a4\n 20189: a4 = a3 >> 0x10\n 20192: u8 [a0 + 0x12] = a4\n 20195: a4 = a3 >> 0x8\n 20198: u8 [a0 + 0x11] = a4\n 20201: u8 [a0 + 0x10] = a3\n 20204: u8 [a0 + 0x8] = a2\n 20207: a3 = a2 >> 0x38\n 20210: u8 [a0 + 0xf] = a3\n 20213: a3 = a2 >> 0x30\n 20216: u8 [a0 + 0xe] = a3\n 20219: a3 = a2 >> 0x28\n 20222: u8 [a0 + 0xd] = a3\n 20225: a3 = a2 >> 0x20\n 20228: u8 [a0 + 0xc] = a3\n 20231: a3 = a2 >> 0x18\n 20234: u8 [a0 + 0xb] = a3\n 20237: a3 = a2 >> 0x10\n 20240: u8 [a0 + 0xa] = a3\n 20243: a2 = a2 >> 0x8\n 20246: u8 [a0 + 0x9] = a2\n 20249: u8 [a0] = a1\n 20251: a2 = a1 >> 0x38\n 20254: u8 [a0 + 0x7] = a2\n 20257: a2 = a1 >> 0x30\n 20260: u8 [a0 + 0x6] = a2\n 20263: a2 = a1 >> 0x28\n 20266: u8 [a0 + 0x5] = a2\n 20269: a2 = a1 >> 0x20\n 20272: u8 [a0 + 0x4] = a2\n 20275: a2 = a1 >> 0x18\n 20278: u8 [a0 + 0x3] = a2\n 20281: a2 = a1 >> 0x10\n 20284: u8 [a0 + 0x2] = a2\n 20287: a1 = a1 >> 0x8\n 20290: u8 [a0 + 0x1] = a1\n 20293: a0 = 0x20\n 20296: a1 = 0x20\n 20299: ra = 300, jump @0\n      : @349 [@dyn 150] (gas: 35)\n 20305: u8 [a0 + 31] = 0x2\n 20309: u8 [a0 + 30] = 0\n 20312: u8 [a0 + 29] = 0\n 20315: u8 [a0 + 28] = 0\n 20318: u8 [a0 + 27] = 0\n 20321: u8 [a0 + 26] = 0\n 20324: u8 [a0 + 25] = 0\n 20327: u8 [a0 + 24] = 0\n 20330: u8 [a0 + 23] = 0\n 20333: u8 [a0 + 22] = 0\n 20336: u8 [a0 + 21] = 0\n 20339: u8 [a0 + 20] = 0\n 20342: u8 [a0 + 19] = 0\n 20345: u8 [a0 + 18] = 0\n 20348: u8 [a0 + 17] = 0\n 20351: u8 [a0 + 16] = 0\n 20354: u8 [a0 + 15] = 0\n 20357: u8 [a0 + 14] = 0\n 20360: u8 [a0 + 13] = 0\n 20363: u8 [a0 + 12] = 0\n 20366: u8 [a0 + 11] = 0\n 20369: u8 [a0 + 10] = 0\n 20372: u8 [a0 + 9] = 0\n 20375: u8 [a0 + 8] = 0\n 20378: u8 [a0 + 7] = 0\n 20381: u8 [a0 + 6] = 0\n 20384: u8 [a0 + 5] = 0\n 20387: u8 [a0 + 4] = 0\n 20390: u8 [a0 + 3] = 0\n 20393: u8 [a0 + 2] = 0\n 20396: u8 [a0 + 1] = 0\n 20399: u8 [a0 + 0] = 0\n 20401: a1 = 0x40\n 20404: a0 = 0\n 20406: ra = 302, jump @0\n      : @350 [@dyn 151] (gas: 32)\n 20412: i32 a0 = a0 + 0\n 20414: i32 a2 = sp + 0x60\n 20417: a1 = 0x40\n 20420: ecalli 8 // 'hash_keccak_256'\n 20422: a0 = u64 [sp + 0x78]\n 20425: a1 = u64 [sp + 0x70]\n 20428: a2 = u64 [sp + 0x68]\n 20431: a3 = u64 [sp + 0x60]\n 20434: a0 = reverse a0\n 20436: a1 = reverse a1\n 20438: a2 = reverse a2\n 20440: a3 = reverse a3\n 20442: u64 [sp + 0x58] = a3\n 20445: u64 [sp + 0x50] = a2\n 20448: u64 [sp + 0x48] = a1\n 20451: u64 [sp + 0x40] = a0\n 20454: u64 [sp + 120] = 0\n 20457: u64 [sp + 112] = 0\n 20460: u64 [sp + 104] = 0\n 20463: u64 [sp + 96] = 0\n 20466: u32 [sp + 128] = 0x20\n 20471: i32 a1 = sp + 0x40\n 20474: i32 a3 = sp + 0x60\n 20477: i32 a4 = sp + 0x80\n 20481: a2 = 0xffffffffffffffff\n 20484: a0 = 0\n 20486: ecalli 7 // 'get_storage'\n 20488: a0 = u64 [sp + 0x60]\n 20491: u64 [sp + 0x18] = a0\n 20494: a0 = 0x40\n 20497: a1 = 0x20\n 20500: ra = 304, jump @0\n      : @351 [@dyn 152] (gas: 100)\n 20506: a1 = u8 [a0 + 0x11]\n 20509: a2 = u8 [a0 + 0x10]\n 20512: a3 = u8 [a0 + 0x12]\n 20515: a4 = u8 [a0 + 0x13]\n 20518: a1 = a1 << 0x8\n 20521: a1 = a1 | a2\n 20524: a3 = a3 << 0x10\n 20527: a4 = a4 << 0x18\n 20530: a3 = a3 | a4\n 20533: a1 = a1 | a3\n 20536: a2 = u8 [a0 + 0x15]\n 20539: a3 = u8 [a0 + 0x14]\n 20542: a4 = u8 [a0 + 0x16]\n 20545: a5 = u8 [a0 + 0x17]\n 20548: a2 = a2 << 0x8\n 20551: a2 = a2 | a3\n 20554: a4 = a4 << 0x10\n 20557: a5 = a5 << 0x18\n 20560: a4 = a4 | a5\n 20563: a2 = a2 | a4\n 20566: a2 = a2 << 0x20\n 20569: t0 = a2 | a1\n 20572: a2 = u8 [a0 + 0x1]\n 20575: a3 = u8 [a0]\n 20577: a4 = u8 [a0 + 0x2]\n 20580: a5 = u8 [a0 + 0x3]\n 20583: a2 = a2 << 0x8\n 20586: a2 = a2 | a3\n 20589: a4 = a4 << 0x10\n 20592: a5 = a5 << 0x18\n 20595: a4 = a4 | a5\n 20598: a2 = a2 | a4\n 20601: a3 = u8 [a0 + 0x5]\n 20604: a4 = u8 [a0 + 0x4]\n 20607: a5 = u8 [a0 + 0x6]\n 20610: s1 = u8 [a0 + 0x7]\n 20613: a3 = a3 << 0x8\n 20616: a3 = a3 | a4\n 20619: a5 = a5 << 0x10\n 20622: s1 = s1 << 0x18\n 20625: a5 = a5 | s1\n 20628: a3 = a3 | a5\n 20631: a3 = a3 << 0x20\n 20634: a2 = a2 | a3\n 20637: a3 = u8 [a0 + 0x19]\n 20640: a4 = u8 [a0 + 0x18]\n 20643: a5 = u8 [a0 + 0x1a]\n 20646: s1 = u8 [a0 + 0x1b]\n 20649: a3 = a3 << 0x8\n 20652: a3 = a3 | a4\n 20655: a5 = a5 << 0x10\n 20658: s1 = s1 << 0x18\n 20661: a5 = a5 | s1\n 20664: a3 = a3 | a5\n 20667: a4 = u8 [a0 + 0x1d]\n 20670: a5 = u8 [a0 + 0x1c]\n 20673: s1 = u8 [a0 + 0x1e]\n 20676: a1 = u8 [a0 + 0x1f]\n 20679: a4 = a4 << 0x8\n 20682: a4 = a4 | a5\n 20685: s1 = s1 << 0x10\n 20688: a1 = a1 << 0x18\n 20691: a1 = a1 | s1\n 20694: a1 = a1 | a4\n 20697: a1 = a1 << 0x20\n 20700: a3 = a3 | a1\n 20703: a1 = u8 [a0 + 0x9]\n 20706: a4 = u8 [a0 + 0x8]\n 20709: a5 = u8 [a0 + 0xa]\n 20712: s1 = u8 [a0 + 0xb]\n 20715: a1 = a1 << 0x8\n 20718: a1 = a1 | a4\n 20721: a5 = a5 << 0x10\n 20724: s1 = s1 << 0x18\n 20727: a5 = a5 | s1\n 20730: a1 = a1 | a5\n 20733: a4 = u8 [a0 + 0xd]\n 20736: a5 = u8 [a0 + 0xc]\n 20739: s1 = u8 [a0 + 0xe]\n 20742: a0 = u8 [a0 + 0xf]\n 20745: a4 = a4 << 0x8\n 20748: a4 = a4 | a5\n 20751: s1 = s1 << 0x10\n 20754: a0 = a0 << 0x18\n 20757: a0 = a0 | s1\n 20760: a0 = a0 | a4\n 20763: a0 = a0 << 0x20\n 20766: a0 = a0 | a1\n 20769: a1 = reverse a0\n 20771: a0 = reverse a3\n 20773: a2 = reverse a2\n 20775: a3 = reverse t0\n 20777: a2 = a2 | a3\n 20780: a3 = a0 | a1\n 20783: a3 = a3 | a2\n 20786: a3 = a3 >> 0x20\n 20789: a1 = a1 | a2\n 20792: a1 = a1 << 0x20\n 20795: a1 = a1 | a3\n 20798: jump @356 if a1 == 0\n      : @352 (gas: 1)\n 20801: trap\n      : @353 (gas: 4)\n 20802: a0 = 0\n 20804: a1 = 0\n 20806: ra = 0x132\n 20810: jump @0\n      : @354 (gas: 2)\n 20813: a0 = 0\n 20815: ra = 306, jump @0\n      : @355 [@dyn 153] (gas: 5)\n 20821: i32 a1 = a0 + 0\n 20823: a0 = 0x1\n 20826: a2 = 0\n 20828: ecalli 10 // 'seal_return'\n 20830: fallthrough\n      : @356 (gas: 6)\n 20831: a1 = u8 [sp + 0x18]\n 20834: s1 = a1 >u 0\n 20836: i32 a0 = a0 + 0\n 20838: u64 [sp + 0x18] = a0\n 20841: a1 = 0x20\n 20844: ra = 308, jump @0\n      : @357 [@dyn 154] (gas: 35)\n 20850: u8 [a0 + 0x1f] = s1\n 20853: u8 [a0 + 30] = 0\n 20856: u8 [a0 + 29] = 0\n 20859: u8 [a0 + 28] = 0\n 20862: u8 [a0 + 27] = 0\n 20865: u8 [a0 + 26] = 0\n 20868: u8 [a0 + 25] = 0\n 20871: u8 [a0 + 24] = 0\n 20874: u8 [a0 + 23] = 0\n 20877: u8 [a0 + 22] = 0\n 20880: u8 [a0 + 21] = 0\n 20883: u8 [a0 + 20] = 0\n 20886: u8 [a0 + 19] = 0\n 20889: u8 [a0 + 18] = 0\n 20892: u8 [a0 + 17] = 0\n 20895: u8 [a0 + 16] = 0\n 20898: u8 [a0 + 15] = 0\n 20901: u8 [a0 + 14] = 0\n 20904: u8 [a0 + 13] = 0\n 20907: u8 [a0 + 12] = 0\n 20910: u8 [a0 + 11] = 0\n 20913: u8 [a0 + 10] = 0\n 20916: u8 [a0 + 9] = 0\n 20919: u8 [a0 + 8] = 0\n 20922: u8 [a0 + 7] = 0\n 20925: u8 [a0 + 6] = 0\n 20928: u8 [a0 + 5] = 0\n 20931: u8 [a0 + 4] = 0\n 20934: u8 [a0 + 3] = 0\n 20937: u8 [a0 + 2] = 0\n 20940: u8 [a0 + 1] = 0\n 20943: u8 [a0 + 0] = 0\n 20945: a1 = 0x20\n 20948: a0 = u64 [sp + 0x18]\n 20951: ra = 310, jump @0\n      : @358 [@dyn 155] (gas: 6)\n 20957: i32 a1 = a0 + 0\n 20959: a2 = 0x20\n 20962: a0 = 0\n 20964: ra = 0x138\n 20968: ecalli 10 // 'seal_return'\n 20970: fallthrough\n      : @359 [@dyn 156] (gas: 47)\n 20971: sp = sp + 0xffffffffffffff80\n 20974: u64 [sp + 0x78] = ra\n 20977: u64 [sp + 0x70] = s0\n 20980: u64 [sp + 0x68] = s1\n 20983: s0 = sp + 0x80\n 20987: sp = sp & 0xffffffffffffffe0\n 20990: ra = u64 [a1 + 0x10]\n 20993: a5 = u64 [a1 + 0x8]\n 20996: a3 = u64 [a2 + 0x8]\n 20999: t1 = u64 [a1]\n 21001: a4 = u64 [a2]\n 21003: u64 [sp + 0x28] = a4\n 21006: t2 = u64 [a2 + 0x10]\n 21009: t0 = a3 ^ a5\n 21012: s1 = a3 <u a5\n 21015: a4 = a4 <u t1\n 21018: u64 [sp + 0x20] = a4\n 21021: s1 = a4 if t0 == 0\n 21024: t0 = u64 [a1 + 0x18]\n 21027: a1 = u64 [a2 + 0x18]\n 21030: u64 [sp + 0x18] = a1\n 21033: a2 = t2 - ra\n 21036: a1 = a2 - s1\n 21039: u64 [sp + 0x30] = a1\n 21042: a1 = a2 <u s1\n 21045: a4 = t2 <u ra\n 21048: u64 [sp + 0x38] = t0\n 21051: a2 = u64 [sp + 0x18]\n 21054: a2 = a2 - t0\n 21057: a2 = a2 - a4\n 21060: a2 = a2 - a1\n 21063: a1 = a3 - a5\n 21066: a3 = u64 [sp + 0x20]\n 21069: a1 = a1 - a3\n 21072: a3 = u64 [sp + 0x28]\n 21075: a3 = a3 - t1\n 21078: a4 = a1 >u 0\n 21080: a3 = a3 <u 0x40\n 21083: a3 = a3 ^ 0x1\n 21086: a3 = a4 if a1 != 0\n 21089: s1 = a2 >s 0\n 21091: a1 = u64 [sp + 0x30]\n 21094: a4 = a1 >u 0\n 21096: a4 = s1 if a2 != 0\n 21099: a1 = a1 | a2\n 21102: a3 = a4 if a1 != 0\n 21105: jump @367 if a3 == 0\n      : @360 (gas: 12)\n 21109: s1 = a0\n 21111: a0 = t1 | ra\n 21114: u64 [sp + 0x30] = a5\n 21117: a1 = u64 [sp + 0x38]\n 21120: a1 = a1 | a5\n 21123: a0 = a0 | a1\n 21126: a0 = a0 >> 0x20\n 21129: u64 [sp + 0x28] = ra\n 21132: a1 = a1 | ra\n 21135: a1 = a1 << 0x20\n 21138: a0 = a0 | a1\n 21141: jump @366 if a0 != 0\n      : @361 (gas: 6)\n 21145: i32 a1 = t1 + 0\n 21147: i32 a0 = sp + 0x40\n 21150: u64 [sp + 0x18] = a1\n 21153: u64 [sp + 0x20] = t1\n 21156: ecalli 3 // 'call_data_load'\n 21158: fallthrough\n      : @362 (gas: 12)\n 21159: a0 = u64 [sp + 0x28]\n 21162: a1 = u64 [sp + 0x38]\n 21165: a0 = a0 | a1\n 21168: a1 = 0x100000000\n 21178: u64 [sp + 0x38] = a1\n 21181: a1 = 0xffffffe0\n 21191: a2 = u64 [sp + 0x20]\n 21194: a1 = a2 <u a1\n 21197: a2 = u64 [sp + 0x30]\n 21200: a1 = 0 if a2 != 0\n 21202: a1 = 0 if a0 != 0\n 21204: jump @366 if a1 == 0\n      : @363 (gas: 13)\n 21207: a0 = u64 [sp + 0x58]\n 21210: u64 [sp + 0x30] = a0\n 21213: a0 = u64 [sp + 0x50]\n 21216: u64 [sp + 0x28] = a0\n 21219: a0 = u64 [sp + 0x48]\n 21222: u64 [sp + 0x10] = a0\n 21225: a0 = u64 [sp + 0x40]\n 21228: u64 [sp + 0x20] = a0\n 21231: a0 = u64 [sp + 0x18]\n 21234: i32 a1 = a0 + 0x20\n 21237: i32 a0 = sp + 0x40\n 21240: ecalli 3 // 'call_data_load'\n 21242: fallthrough\n      : @364 (gas: 10)\n 21243: a1 = u64 [sp + 0x50]\n 21246: a0 = u64 [sp + 0x58]\n 21249: a2 = u64 [sp + 0x38]\n 21252: a2 = a2 ^ a1\n 21255: a2 = a2 | a0\n 21258: a3 = a1 >> 0x20\n 21261: a3 = a3 <u 0x1\n 21264: a3 = 0 if a0 != 0\n 21266: a3 = 0 if a2 == 0\n 21268: jump @367 if a3 == 0\n      : @365 (gas: 20)\n 21271: a2 = u64 [sp + 0x48]\n 21274: a3 = u64 [sp + 0x40]\n 21277: u64 [s1 + 0x28] = a2\n 21280: u64 [s1 + 0x20] = a3\n 21283: a2 = u64 [sp + 0x10]\n 21286: u64 [s1 + 0x8] = a2\n 21289: a2 = u64 [sp + 0x20]\n 21292: u64 [s1] = a2\n 21294: u64 [s1 + 0x30] = a1\n 21297: a1 = u64 [sp + 0x28]\n 21300: u64 [s1 + 0x10] = a1\n 21303: u64 [s1 + 0x38] = a0\n 21306: a0 = u64 [sp + 0x30]\n 21309: u64 [s1 + 0x18] = a0\n 21312: sp = s0 + 0xffffffffffffff80\n 21315: ra = u64 [sp + 0x78]\n 21318: s0 = u64 [sp + 0x70]\n 21321: s1 = u64 [sp + 0x68]\n 21324: sp = sp + 0x80\n 21328: ret\n      : @366 (gas: 1)\n 21330: trap\n      : @367 (gas: 3)\n 21331: a0 = 0\n 21333: a1 = 0\n 21335: ra = 314, jump @0\n      : @368 [@dyn 157] (gas: 6)\n 21341: i32 a1 = a0 + 0\n 21343: a0 = 0x1\n 21346: a2 = 0\n 21348: ra = 0x13c\n 21352: ecalli 10 // 'seal_return'\n 21354: fallthrough\n      : @369 [@dyn 158] (gas: 9)\n 21355: a2 = u64 [a1 + 0x18]\n 21358: a3 = u64 [a1 + 0x10]\n 21361: a4 = u64 [a1 + 0x8]\n 21364: a1 = u64 [a1]\n 21366: u64 [a0 + 0x18] = a2\n 21369: u64 [a0 + 0x10] = a3\n 21372: u64 [a0 + 0x8] = a4\n 21375: u64 [a0] = a1\n 21377: ret\n      : @370 [@dyn 159] (gas: 70)\n 21379: a1 = reverse s1\n 21381: a2 = u64 [sp + 0x8]\n 21384: a2 = reverse a2\n 21386: a3 = u64 [sp + 0x10]\n 21389: a3 = reverse a3\n 21391: a4 = u64 [sp + 0x18]\n 21394: a4 = reverse a4\n 21396: a5 = a4 >> 0x38\n 21399: u8 [a0 + 0x1f] = a5\n 21402: a5 = a4 >> 0x30\n 21405: u8 [a0 + 0x1e] = a5\n 21408: a5 = a4 >> 0x28\n 21411: u8 [a0 + 0x1d] = a5\n 21414: a5 = a4 >> 0x20\n 21417: u8 [a0 + 0x1c] = a5\n 21420: a5 = a4 >> 0x18\n 21423: u8 [a0 + 0x1b] = a5\n 21426: a5 = a4 >> 0x10\n 21429: u8 [a0 + 0x1a] = a5\n 21432: a5 = a4 >> 0x8\n 21435: u8 [a0 + 0x19] = a5\n 21438: u8 [a0 + 0x18] = a4\n 21441: a4 = a3 >> 0x38\n 21444: u8 [a0 + 0x17] = a4\n 21447: a4 = a3 >> 0x30\n 21450: u8 [a0 + 0x16] = a4\n 21453: a4 = a3 >> 0x28\n 21456: u8 [a0 + 0x15] = a4\n 21459: a4 = a3 >> 0x20\n 21462: u8 [a0 + 0x14] = a4\n 21465: a4 = a3 >> 0x18\n 21468: u8 [a0 + 0x13] = a4\n 21471: a4 = a3 >> 0x10\n 21474: u8 [a0 + 0x12] = a4\n 21477: a4 = a3 >> 0x8\n 21480: u8 [a0 + 0x11] = a4\n 21483: u8 [a0 + 0x10] = a3\n 21486: a3 = a2 >> 0x38\n 21489: u8 [a0 + 0xf] = a3\n 21492: a3 = a2 >> 0x30\n 21495: u8 [a0 + 0xe] = a3\n 21498: a3 = a2 >> 0x28\n 21501: u8 [a0 + 0xd] = a3\n 21504: a3 = a2 >> 0x20\n 21507: u8 [a0 + 0xc] = a3\n 21510: a3 = a2 >> 0x18\n 21513: u8 [a0 + 0xb] = a3\n 21516: a3 = a2 >> 0x10\n 21519: u8 [a0 + 0xa] = a3\n 21522: a3 = a2 >> 0x8\n 21525: u8 [a0 + 0x9] = a3\n 21528: u8 [a0 + 0x8] = a2\n 21531: a2 = a1 >> 0x38\n 21534: u8 [a0 + 0x7] = a2\n 21537: a2 = a1 >> 0x30\n 21540: u8 [a0 + 0x6] = a2\n 21543: a2 = a1 >> 0x28\n 21546: u8 [a0 + 0x5] = a2\n 21549: a2 = a1 >> 0x20\n 21552: u8 [a0 + 0x4] = a2\n 21555: a2 = a1 >> 0x18\n 21558: u8 [a0 + 0x3] = a2\n 21561: a2 = a1 >> 0x10\n 21564: u8 [a0 + 0x2] = a2\n 21567: a2 = a1 >> 0x8\n 21570: u8 [a0 + 0x1] = a2\n 21573: u8 [a0] = a1\n 21575: a0 = 0x20\n 21578: a1 = 0x20\n 21581: ra = 320, jump @0\n      : @371 [@dyn 160] (gas: 35)\n 21587: u8 [a0 + 31] = 0x1\n 21591: u8 [a0 + 30] = 0\n 21594: u8 [a0 + 29] = 0\n 21597: u8 [a0 + 28] = 0\n 21600: u8 [a0 + 27] = 0\n 21603: u8 [a0 + 26] = 0\n 21606: u8 [a0 + 25] = 0\n 21609: u8 [a0 + 24] = 0\n 21612: u8 [a0 + 23] = 0\n 21615: u8 [a0 + 22] = 0\n 21618: u8 [a0 + 21] = 0\n 21621: u8 [a0 + 20] = 0\n 21624: u8 [a0 + 19] = 0\n 21627: u8 [a0 + 18] = 0\n 21630: u8 [a0 + 17] = 0\n 21633: u8 [a0 + 16] = 0\n 21636: u8 [a0 + 15] = 0\n 21639: u8 [a0 + 14] = 0\n 21642: u8 [a0 + 13] = 0\n 21645: u8 [a0 + 12] = 0\n 21648: u8 [a0 + 11] = 0\n 21651: u8 [a0 + 10] = 0\n 21654: u8 [a0 + 9] = 0\n 21657: u8 [a0 + 8] = 0\n 21660: u8 [a0 + 7] = 0\n 21663: u8 [a0 + 6] = 0\n 21666: u8 [a0 + 5] = 0\n 21669: u8 [a0 + 4] = 0\n 21672: u8 [a0 + 3] = 0\n 21675: u8 [a0 + 2] = 0\n 21678: u8 [a0 + 1] = 0\n 21681: u8 [a0 + 0] = 0\n 21683: a1 = 0x40\n 21686: a0 = 0\n 21688: ra = 322, jump @0\n      : @372 [@dyn 161] (gas: 14)\n 21694: i32 a0 = a0 + 0\n 21696: i32 a2 = sp + 0x60\n 21699: a1 = 0x40\n 21702: ecalli 8 // 'hash_keccak_256'\n 21704: a0 = u64 [sp + 0x60]\n 21707: u64 [sp + 0x18] = a0\n 21710: a0 = u64 [sp + 0x68]\n 21713: u64 [sp + 0x10] = a0\n 21716: a0 = u64 [sp + 0x70]\n 21719: u64 [sp + 0x8] = a0\n 21722: s1 = u64 [sp + 0x78]\n 21725: a1 = 0x20\n 21728: a0 = 0\n 21730: ra = 324, jump @0\n      : @373 [@dyn 162] (gas: 59)\n 21736: a1 = u64 [sp + 0x20]\n 21739: a1 = reverse a1\n 21741: a2 = u64 [sp + 0x28]\n 21744: a2 = reverse a2\n 21746: a3 = u64 [sp + 0x30]\n 21749: a3 = reverse a3\n 21751: a4 = a3 >> 0x38\n 21754: u8 [a0 + 0x1f] = a4\n 21757: a4 = a3 >> 0x30\n 21760: u8 [a0 + 0x1e] = a4\n 21763: a4 = a3 >> 0x28\n 21766: u8 [a0 + 0x1d] = a4\n 21769: a4 = a3 >> 0x20\n 21772: u8 [a0 + 0x1c] = a4\n 21775: a4 = a3 >> 0x18\n 21778: u8 [a0 + 0x1b] = a4\n 21781: a4 = a3 >> 0x10\n 21784: u8 [a0 + 0x1a] = a4\n 21787: a4 = a3 >> 0x8\n 21790: u8 [a0 + 0x19] = a4\n 21793: u8 [a0 + 0x18] = a3\n 21796: a3 = a2 >> 0x38\n 21799: u8 [a0 + 0x17] = a3\n 21802: a3 = a2 >> 0x30\n 21805: u8 [a0 + 0x16] = a3\n 21808: a3 = a2 >> 0x28\n 21811: u8 [a0 + 0x15] = a3\n 21814: a3 = a2 >> 0x20\n 21817: u8 [a0 + 0x14] = a3\n 21820: a3 = a2 >> 0x18\n 21823: u8 [a0 + 0x13] = a3\n 21826: a3 = a2 >> 0x10\n 21829: u8 [a0 + 0x12] = a3\n 21832: a3 = a2 >> 0x8\n 21835: u8 [a0 + 0x11] = a3\n 21838: u8 [a0 + 0x10] = a2\n 21841: a2 = a1 >> 0x38\n 21844: u8 [a0 + 0xf] = a2\n 21847: a2 = a1 >> 0x30\n 21850: u8 [a0 + 0xe] = a2\n 21853: a2 = a1 >> 0x28\n 21856: u8 [a0 + 0xd] = a2\n 21859: a2 = a1 >> 0x20\n 21862: u8 [a0 + 0xc] = a2\n 21865: u8 [a0 + 11] = 0\n 21868: u8 [a0 + 10] = 0\n 21871: u8 [a0 + 9] = 0\n 21874: u8 [a0 + 0x8] = a1\n 21877: u8 [a0 + 7] = 0\n 21880: u8 [a0 + 6] = 0\n 21883: u8 [a0 + 5] = 0\n 21886: u8 [a0 + 4] = 0\n 21889: u8 [a0 + 3] = 0\n 21892: u8 [a0 + 2] = 0\n 21895: u8 [a0 + 1] = 0\n 21898: u8 [a0 + 0] = 0\n 21900: a0 = 0x20\n 21903: a1 = 0x20\n 21906: ra = 326, jump @0\n      : @374 [@dyn 163] (gas: 66)\n 21912: a1 = s1 >> 0x38\n 21915: u8 [a0 + 0x1f] = a1\n 21918: a1 = s1 >> 0x30\n 21921: u8 [a0 + 0x1e] = a1\n 21924: a1 = s1 >> 0x28\n 21927: u8 [a0 + 0x1d] = a1\n 21930: a1 = s1 >> 0x20\n 21933: u8 [a0 + 0x1c] = a1\n 21936: a1 = s1 >> 0x18\n 21939: u8 [a0 + 0x1b] = a1\n 21942: a1 = s1 >> 0x10\n 21945: u8 [a0 + 0x1a] = a1\n 21948: a1 = s1 >> 0x8\n 21951: u8 [a0 + 0x19] = a1\n 21954: u8 [a0 + 0x18] = s1\n 21957: a2 = u64 [sp + 0x8]\n 21960: a1 = a2 >> 0x38\n 21963: u8 [a0 + 0x17] = a1\n 21966: a1 = a2 >> 0x30\n 21969: u8 [a0 + 0x16] = a1\n 21972: a1 = a2 >> 0x28\n 21975: u8 [a0 + 0x15] = a1\n 21978: a1 = a2 >> 0x20\n 21981: u8 [a0 + 0x14] = a1\n 21984: a1 = a2 >> 0x18\n 21987: u8 [a0 + 0x13] = a1\n 21990: a1 = a2 >> 0x10\n 21993: u8 [a0 + 0x12] = a1\n 21996: a1 = a2 >> 0x8\n 21999: u8 [a0 + 0x11] = a1\n 22002: u8 [a0 + 0x10] = a2\n 22005: a2 = u64 [sp + 0x10]\n 22008: a1 = a2 >> 0x38\n 22011: u8 [a0 + 0xf] = a1\n 22014: a1 = a2 >> 0x30\n 22017: u8 [a0 + 0xe] = a1\n 22020: a1 = a2 >> 0x28\n 22023: u8 [a0 + 0xd] = a1\n 22026: a1 = a2 >> 0x20\n 22029: u8 [a0 + 0xc] = a1\n 22032: a1 = a2 >> 0x18\n 22035: u8 [a0 + 0xb] = a1\n 22038: a1 = a2 >> 0x10\n 22041: u8 [a0 + 0xa] = a1\n 22044: a1 = a2 >> 0x8\n 22047: u8 [a0 + 0x9] = a1\n 22050: u8 [a0 + 0x8] = a2\n 22053: a2 = u64 [sp + 0x18]\n 22056: a1 = a2 >> 0x38\n 22059: u8 [a0 + 0x7] = a1\n 22062: a1 = a2 >> 0x30\n 22065: u8 [a0 + 0x6] = a1\n 22068: a1 = a2 >> 0x28\n 22071: u8 [a0 + 0x5] = a1\n 22074: a1 = a2 >> 0x20\n 22077: u8 [a0 + 0x4] = a1\n 22080: a1 = a2 >> 0x18\n 22083: u8 [a0 + 0x3] = a1\n 22086: a1 = a2 >> 0x10\n 22089: u8 [a0 + 0x2] = a1\n 22092: a1 = a2 >> 0x8\n 22095: u8 [a0 + 0x1] = a1\n 22098: u8 [a0] = a2\n 22100: a1 = 0x40\n 22103: a0 = 0\n 22105: ra = 328, jump @0\n      : @375 [@dyn 164] (gas: 39)\n 22111: i32 a0 = a0 + 0\n 22113: i32 a2 = sp + 0x60\n 22116: a1 = 0x40\n 22119: ecalli 8 // 'hash_keccak_256'\n 22121: a0 = u64 [sp + 0x78]\n 22124: a1 = u64 [sp + 0x70]\n 22127: a2 = u64 [sp + 0x68]\n 22130: a3 = u64 [sp + 0x60]\n 22133: a0 = reverse a0\n 22135: a1 = reverse a1\n 22137: a2 = reverse a2\n 22139: a3 = reverse a3\n 22141: u64 [sp + 0x58] = a3\n 22144: u64 [sp + 0x50] = a2\n 22147: u64 [sp + 0x48] = a1\n 22150: u64 [sp + 0x40] = a0\n 22153: u64 [sp + 120] = 0\n 22156: u64 [sp + 112] = 0\n 22159: u64 [sp + 104] = 0\n 22162: u64 [sp + 96] = 0\n 22165: u32 [sp + 128] = 0x20\n 22170: i32 a1 = sp + 0x40\n 22173: i32 a3 = sp + 0x60\n 22176: i32 a4 = sp + 0x80\n 22180: a2 = 0xffffffffffffffff\n 22183: a0 = 0\n 22185: ecalli 7 // 'get_storage'\n 22187: a0 = u8 [sp + 0x60]\n 22190: a1 = u64 [sp + 0x38]\n 22193: u64 [a1 + 24] = 0\n 22196: u64 [a1 + 16] = 0\n 22199: u64 [a1 + 8] = 0\n 22202: u64 [a1] = a0\n 22204: sp = s0 + 0xffffffffffffff60\n 22208: ra = u64 [sp + 0x98]\n 22212: s0 = u64 [sp + 0x90]\n 22216: s1 = u64 [sp + 0x88]\n 22220: sp = sp + 0xa0\n 22224: ret\n      : @376 (gas: 8)\n 22226: a0 = u64 [sp + 0x110]\n 22230: a1 = u64 [sp + 0x118]\n 22234: a2 = u64 [sp + 0x108]\n 22238: a3 = u64 [sp + 0x100]\n 22242: a1 = a1 | a2\n 22245: a0 = a0 | a3\n 22248: a0 = a0 | a1\n 22251: jump @382 if a0 != 0\n      : @377 (gas: 13)\n 22255: a0 = u32 [0x20164]\n 22260: u64 [sp + 152] = 0\n 22264: u64 [sp + 144] = 0\n 22268: u64 [sp + 136] = 0\n 22272: u64 [sp + 0x80] = a0\n 22276: u64 [sp + 184] = 0\n 22280: u64 [sp + 176] = 0\n 22284: u64 [sp + 160] = 0x4\n 22289: a0 = sp + 0xc0\n 22293: a1 = sp + 0xa0\n 22297: a2 = sp + 0x80\n 22301: u64 [sp + 168] = 0\n 22305: ra = 330, jump @359\n      : @378 [@dyn 165] (gas: 44)\n 22311: t0 = u64 [sp + 0xc0]\n 22315: a0 = u64 [sp + 0xc8]\n 22319: a1 = u64 [sp + 0xd0]\n 22323: a2 = u64 [sp + 0xd8]\n 22327: a4 = u64 [sp + 0xe0]\n 22331: a5 = u64 [sp + 0xe8]\n 22335: s1 = u64 [sp + 0xf0]\n 22339: a3 = u64 [sp + 0xf8]\n 22343: u64 [sp + 0x38] = a3\n 22346: u64 [sp + 0x30] = s1\n 22349: u64 [sp + 0x28] = a5\n 22352: u64 [sp + 0x20] = a4\n 22355: u64 [sp + 0x58] = a2\n 22358: u64 [sp + 0x50] = a1\n 22361: u64 [sp + 0x48] = a0\n 22364: a0 = sp + 0x60\n 22367: a1 = sp + 0x40\n 22370: a2 = sp + 0x20\n 22373: u64 [sp + 0x40] = t0\n 22376: ra = 0x14c\n 22380: sp = sp + 0xffffffffffffff60\n 22384: u64 [sp + 0x98] = ra\n 22388: u64 [sp + 0x90] = s0\n 22392: u64 [sp + 0x88] = s1\n 22396: s0 = sp + 0xa0\n 22400: sp = sp & 0xffffffffffffffe0\n 22403: a3 = u64 [a2]\n 22405: u64 [sp + 0x30] = a3\n 22408: a3 = u64 [a2 + 0x8]\n 22411: u64 [sp + 0x28] = a3\n 22414: a2 = u32 [a2 + 0x10]\n 22417: u64 [sp + 0x20] = a2\n 22420: a2 = u64 [a1]\n 22422: u64 [sp + 0x18] = a2\n 22425: a2 = u64 [a1 + 0x8]\n 22428: u64 [sp + 0x10] = a2\n 22431: a2 = u64 [a1 + 0x10]\n 22434: u64 [sp + 0x8] = a2\n 22437: s1 = u64 [a1 + 0x18]\n 22440: u64 [sp + 0x38] = a0\n 22443: a1 = 0x20\n 22446: a0 = 0\n 22448: ra = 0x13e\n 22452: jump @0\n      : @379 [@dyn 166] (gas: 11)\n 22455: a0 = u64 [sp + 0x78]\n 22458: u64 [sp + 0x18] = a0\n 22461: a0 = u64 [sp + 0x70]\n 22464: u64 [sp + 0x8] = a0\n 22467: a0 = u64 [sp + 0x68]\n 22470: u64 [sp + 0x10] = a0\n 22473: a0 = u64 [sp + 0x60]\n 22476: u64 [sp] = a0\n 22478: a0 = 0x40\n 22481: a1 = 0x20\n 22484: ra = 334, jump @0\n      : @380 [@dyn 167] (gas: 100)\n 22490: a1 = u8 [a0 + 0x11]\n 22493: a2 = u8 [a0 + 0x10]\n 22496: a3 = u8 [a0 + 0x12]\n 22499: a4 = u8 [a0 + 0x13]\n 22502: a1 = a1 << 0x8\n 22505: a1 = a1 | a2\n 22508: a3 = a3 << 0x10\n 22511: a4 = a4 << 0x18\n 22514: a3 = a3 | a4\n 22517: a1 = a1 | a3\n 22520: a2 = u8 [a0 + 0x15]\n 22523: a3 = u8 [a0 + 0x14]\n 22526: a4 = u8 [a0 + 0x16]\n 22529: a5 = u8 [a0 + 0x17]\n 22532: a2 = a2 << 0x8\n 22535: a2 = a2 | a3\n 22538: a4 = a4 << 0x10\n 22541: a5 = a5 << 0x18\n 22544: a4 = a4 | a5\n 22547: a2 = a2 | a4\n 22550: a2 = a2 << 0x20\n 22553: t0 = a2 | a1\n 22556: a2 = u8 [a0 + 0x1]\n 22559: a3 = u8 [a0]\n 22561: a4 = u8 [a0 + 0x2]\n 22564: a5 = u8 [a0 + 0x3]\n 22567: a2 = a2 << 0x8\n 22570: a2 = a2 | a3\n 22573: a4 = a4 << 0x10\n 22576: a5 = a5 << 0x18\n 22579: a4 = a4 | a5\n 22582: a2 = a2 | a4\n 22585: a3 = u8 [a0 + 0x5]\n 22588: a4 = u8 [a0 + 0x4]\n 22591: a5 = u8 [a0 + 0x6]\n 22594: s1 = u8 [a0 + 0x7]\n 22597: a3 = a3 << 0x8\n 22600: a3 = a3 | a4\n 22603: a5 = a5 << 0x10\n 22606: s1 = s1 << 0x18\n 22609: a5 = a5 | s1\n 22612: a3 = a3 | a5\n 22615: a3 = a3 << 0x20\n 22618: a2 = a2 | a3\n 22621: a3 = u8 [a0 + 0x19]\n 22624: a4 = u8 [a0 + 0x18]\n 22627: a5 = u8 [a0 + 0x1a]\n 22630: s1 = u8 [a0 + 0x1b]\n 22633: a3 = a3 << 0x8\n 22636: a3 = a3 | a4\n 22639: a5 = a5 << 0x10\n 22642: s1 = s1 << 0x18\n 22645: a5 = a5 | s1\n 22648: a3 = a3 | a5\n 22651: a4 = u8 [a0 + 0x1d]\n 22654: a5 = u8 [a0 + 0x1c]\n 22657: s1 = u8 [a0 + 0x1e]\n 22660: a1 = u8 [a0 + 0x1f]\n 22663: a4 = a4 << 0x8\n 22666: a4 = a4 | a5\n 22669: s1 = s1 << 0x10\n 22672: a1 = a1 << 0x18\n 22675: a1 = a1 | s1\n 22678: a1 = a1 | a4\n 22681: a1 = a1 << 0x20\n 22684: a3 = a3 | a1\n 22687: a1 = u8 [a0 + 0x9]\n 22690: a4 = u8 [a0 + 0x8]\n 22693: a5 = u8 [a0 + 0xa]\n 22696: s1 = u8 [a0 + 0xb]\n 22699: a1 = a1 << 0x8\n 22702: a1 = a1 | a4\n 22705: a5 = a5 << 0x10\n 22708: s1 = s1 << 0x18\n 22711: a5 = a5 | s1\n 22714: a1 = a1 | a5\n 22717: a4 = u8 [a0 + 0xd]\n 22720: a5 = u8 [a0 + 0xc]\n 22723: s1 = u8 [a0 + 0xe]\n 22726: a0 = u8 [a0 + 0xf]\n 22729: a4 = a4 << 0x8\n 22732: a4 = a4 | a5\n 22735: s1 = s1 << 0x10\n 22738: a0 = a0 << 0x18\n 22741: a0 = a0 | s1\n 22744: a0 = a0 | a4\n 22747: a0 = a0 << 0x20\n 22750: a0 = a0 | a1\n 22753: a1 = reverse a0\n 22755: a0 = reverse a3\n 22757: a2 = reverse a2\n 22759: a3 = reverse t0\n 22761: a2 = a2 | a3\n 22764: a3 = a0 | a1\n 22767: a3 = a3 | a2\n 22770: a3 = a3 >> 0x20\n 22773: a1 = a1 | a2\n 22776: a1 = a1 << 0x20\n 22779: a1 = a1 | a3\n 22782: jump @384 if a1 == 0\n      : @381 (gas: 1)\n 22785: trap\n      : @382 (gas: 3)\n 22786: a0 = 0\n 22788: a1 = 0\n 22790: ra = 336, jump @0\n      : @383 [@dyn 168] (gas: 5)\n 22796: i32 a1 = a0 + 0\n 22798: a0 = 0x1\n 22801: a2 = 0\n 22803: ecalli 10 // 'seal_return'\n 22805: fallthrough\n      : @384 (gas: 13)\n 22806: a1 = u64 [sp + 0x8]\n 22809: a2 = u64 [sp]\n 22811: a1 = a1 | a2\n 22814: a2 = u64 [sp + 0x18]\n 22817: a3 = u64 [sp + 0x10]\n 22820: a2 = a2 | a3\n 22823: a1 = a1 | a2\n 22826: a1 = a1 >u 0\n 22828: u64 [sp + 0x18] = a1\n 22831: i32 s1 = a0 + 0\n 22833: a1 = 0x20\n 22836: a0 = s1\n 22838: ra = 338, jump @0\n      : @385 [@dyn 169] (gas: 36)\n 22844: u8 [a0 + 30] = 0\n 22847: u8 [a0 + 29] = 0\n 22850: u8 [a0 + 28] = 0\n 22853: u8 [a0 + 27] = 0\n 22856: u8 [a0 + 26] = 0\n 22859: u8 [a0 + 25] = 0\n 22862: u8 [a0 + 24] = 0\n 22865: u8 [a0 + 23] = 0\n 22868: u8 [a0 + 22] = 0\n 22871: u8 [a0 + 21] = 0\n 22874: u8 [a0 + 20] = 0\n 22877: u8 [a0 + 19] = 0\n 22880: u8 [a0 + 18] = 0\n 22883: u8 [a0 + 17] = 0\n 22886: u8 [a0 + 16] = 0\n 22889: u8 [a0 + 15] = 0\n 22892: u8 [a0 + 14] = 0\n 22895: u8 [a0 + 13] = 0\n 22898: u8 [a0 + 12] = 0\n 22901: u8 [a0 + 11] = 0\n 22904: u8 [a0 + 10] = 0\n 22907: u8 [a0 + 9] = 0\n 22910: u8 [a0 + 8] = 0\n 22913: u8 [a0 + 7] = 0\n 22916: u8 [a0 + 6] = 0\n 22919: u8 [a0 + 5] = 0\n 22922: u8 [a0 + 4] = 0\n 22925: u8 [a0 + 3] = 0\n 22928: u8 [a0 + 2] = 0\n 22931: u8 [a0 + 1] = 0\n 22934: u8 [a0 + 0] = 0\n 22936: a1 = u64 [sp + 0x18]\n 22939: u8 [a0 + 0x1f] = a1\n 22942: a1 = 0x20\n 22945: a0 = s1\n 22947: ra = 340, jump @0\n      : @386 [@dyn 170] (gas: 6)\n 22953: i32 a1 = a0 + 0\n 22955: a2 = 0x20\n 22958: a0 = 0\n 22960: ra = 0x156\n 22964: ecalli 10 // 'seal_return'\n 22966: fallthrough\n      : @387 [@dyn 171] (gas: 9)\n 22967: a1 = u64 [a0 + 0x18]\n 22970: a2 = u64 [a0 + 0x10]\n 22973: a3 = u64 [a0]\n 22975: a0 = u64 [a0 + 0x8]\n 22978: a1 = a1 | a2\n 22981: a2 = a3 <u 0x2\n 22984: a2 = 0 if a0 != 0\n 22986: a2 = 0 if a1 != 0\n 22988: jump @389 if a2 == 0\n      : @388 (gas: 1)\n 22991: ret\n      : @389 (gas: 5)\n 22993: sp = sp + 0xfffffffffffffff8\n 22996: u64 [sp] = ra\n 22998: a0 = 0\n 23000: a1 = 0\n 23002: ra = 344, jump @0\n      : @390 [@dyn 172] (gas: 6)\n 23008: i32 a1 = a0 + 0\n 23010: a0 = 0x1\n 23013: a2 = 0\n 23015: ra = 0x15a\n 23019: ecalli 10 // 'seal_return'\n 23021: fallthrough\n      : @391 [@dyn 173] (gas: 18)\n 23022: sp = sp + 0xffffffffffffffc0\n 23025: u64 [sp + 0x38] = ra\n 23028: u64 [sp + 0x30] = s0\n 23031: u64 [sp + 0x28] = s1\n 23034: s0 = sp + 0x40\n 23037: sp = sp & 0xffffffffffffffe0\n 23040: a2 = u64 [a1 + 0x10]\n 23043: a3 = u64 [a1 + 0x18]\n 23046: a4 = u64 [a1 + 0x8]\n 23049: a1 = u64 [a1]\n 23051: a3 = a3 | a4\n 23054: a4 = a1 | a2\n 23057: a4 = a4 | a3\n 23060: a4 = a4 >> 0x20\n 23063: a2 = a2 | a3\n 23066: a2 = a2 << 0x20\n 23069: a2 = a2 | a4\n 23072: jump @395 if a2 != 0\n      : @392 (gas: 5)\n 23075: s1 = a0\n 23077: i32 a1 = a1 + 0\n 23079: i32 a0 = sp + 0\n 23081: ecalli 3 // 'call_data_load'\n 23083: fallthrough\n      : @393 (gas: 9)\n 23084: a0 = u64 [sp + 0x18]\n 23087: a1 = u64 [sp + 0x10]\n 23090: a2 = u64 [sp]\n 23092: a3 = u64 [sp + 0x8]\n 23095: a4 = a1 | a0\n 23098: a5 = a2 <u 0x2\n 23101: a5 = 0 if a3 != 0\n 23103: a5 = 0 if a4 != 0\n 23105: jump @396 if a5 == 0\n      : @394 (gas: 10)\n 23108: u64 [s1] = a2\n 23110: u64 [s1 + 0x8] = a3\n 23113: u64 [s1 + 0x10] = a1\n 23116: u64 [s1 + 0x18] = a0\n 23119: sp = s0 + 0xffffffffffffffc0\n 23122: ra = u64 [sp + 0x38]\n 23125: s0 = u64 [sp + 0x30]\n 23128: s1 = u64 [sp + 0x28]\n 23131: sp = sp + 0x40\n 23134: ret\n      : @395 (gas: 1)\n 23136: trap\n      : @396 (gas: 3)\n 23137: a0 = 0\n 23139: a1 = 0\n 23141: ra = 348, jump @0\n      : @397 [@dyn 174] (gas: 6)\n 23147: i32 a1 = a0 + 0\n 23149: a0 = 0x1\n 23152: a2 = 0\n 23154: ra = 0x15e\n 23158: ecalli 10 // 'seal_return'\n 23160: fallthrough\n      : @398 [@dyn 175] (gas: 47)\n 23161: sp = sp + 0xffffffffffffff60\n 23165: u64 [sp + 0x98] = ra\n 23169: u64 [sp + 0x90] = s0\n 23173: u64 [sp + 0x88] = s1\n 23177: s0 = sp + 0xa0\n 23181: sp = sp & 0xffffffffffffffe0\n 23184: ra = u64 [a1 + 0x10]\n 23187: a5 = u64 [a1 + 0x8]\n 23190: a3 = u64 [a2 + 0x8]\n 23193: t1 = u64 [a1]\n 23195: a4 = u64 [a2]\n 23197: u64 [sp + 0x48] = a4\n 23200: t2 = u64 [a2 + 0x10]\n 23203: t0 = a3 ^ a5\n 23206: s1 = a3 <u a5\n 23209: a4 = a4 <u t1\n 23212: u64 [sp + 0x40] = a4\n 23215: s1 = a4 if t0 == 0\n 23218: t0 = u64 [a1 + 0x18]\n 23221: a1 = u64 [a2 + 0x18]\n 23224: u64 [sp + 0x38] = a1\n 23227: a2 = t2 - ra\n 23230: a1 = a2 - s1\n 23233: u64 [sp + 0x50] = a1\n 23236: a1 = a2 <u s1\n 23239: a4 = t2 <u ra\n 23242: u64 [sp + 0x58] = t0\n 23245: a2 = u64 [sp + 0x38]\n 23248: a2 = a2 - t0\n 23251: a2 = a2 - a4\n 23254: a2 = a2 - a1\n 23257: a1 = a3 - a5\n 23260: a3 = u64 [sp + 0x40]\n 23263: a1 = a1 - a3\n 23266: a3 = u64 [sp + 0x48]\n 23269: a3 = a3 - t1\n 23272: a4 = a1 >u 0\n 23274: a3 = a3 <u 0x40\n 23277: a3 = a3 ^ 0x1\n 23280: a3 = a4 if a1 != 0\n 23283: s1 = a2 >s 0\n 23285: a1 = u64 [sp + 0x50]\n 23288: a4 = a1 >u 0\n 23290: a4 = s1 if a2 != 0\n 23293: a1 = a1 | a2\n 23296: a3 = a4 if a1 != 0\n 23299: jump @407 if a3 == 0\n      : @399 (gas: 12)\n 23303: s1 = a0\n 23305: a0 = t1 | ra\n 23308: u64 [sp + 0x50] = a5\n 23311: a1 = u64 [sp + 0x58]\n 23314: a1 = a1 | a5\n 23317: a0 = a0 | a1\n 23320: a0 = a0 >> 0x20\n 23323: u64 [sp + 0x48] = ra\n 23326: a1 = a1 | ra\n 23329: a1 = a1 << 0x20\n 23332: a0 = a0 | a1\n 23335: jump @406 if a0 != 0\n      : @400 (gas: 6)\n 23339: u64 [sp + 0x40] = t1\n 23342: i32 a1 = t1 + 0\n 23344: i32 a0 = sp + 0x60\n 23347: u64 [sp + 0x18] = a1\n 23350: ecalli 3 // 'call_data_load'\n 23352: fallthrough\n      : @401 (gas: 9)\n 23353: a2 = u64 [sp + 0x78]\n 23356: a3 = u64 [sp + 0x70]\n 23359: a4 = u64 [sp + 0x60]\n 23362: a5 = u64 [sp + 0x68]\n 23365: a0 = a3 | a2\n 23368: a1 = a4 <u 0x2\n 23371: a1 = 0 if a5 != 0\n 23373: a1 = 0 if a0 != 0\n 23375: jump @408 if a1 == 0\n      : @402 (gas: 14)\n 23379: u64 [sp + 0x20] = a5\n 23382: u64 [sp + 0x28] = a4\n 23385: u64 [sp + 0x30] = a3\n 23388: u64 [sp + 0x38] = a2\n 23391: a0 = u64 [sp + 0x48]\n 23394: a1 = u64 [sp + 0x58]\n 23397: a0 = a0 | a1\n 23400: a1 = 0xffffffe0\n 23410: a2 = u64 [sp + 0x40]\n 23413: a1 = a2 <u a1\n 23416: a2 = u64 [sp + 0x50]\n 23419: a1 = 0 if a2 != 0\n 23421: a1 = 0 if a0 != 0\n 23423: jump @406 if a1 == 0\n      : @403 (gas: 5)\n 23426: a0 = u64 [sp + 0x18]\n 23429: i32 a1 = a0 + 0x20\n 23432: i32 a0 = sp + 0x60\n 23435: ecalli 3 // 'call_data_load'\n 23437: fallthrough\n      : @404 (gas: 9)\n 23438: a0 = u64 [sp + 0x78]\n 23441: a1 = u64 [sp + 0x70]\n 23444: a2 = u64 [sp + 0x60]\n 23447: a3 = u64 [sp + 0x68]\n 23450: a4 = a1 | a0\n 23453: a5 = a2 <u 0x2\n 23456: a5 = 0 if a3 != 0\n 23458: a5 = 0 if a4 != 0\n 23460: jump @407 if a5 == 0\n      : @405 (gas: 18)\n 23463: u64 [s1 + 0x28] = a3\n 23466: u64 [s1 + 0x20] = a2\n 23469: a2 = u64 [sp + 0x20]\n 23472: u64 [s1 + 0x8] = a2\n 23475: a2 = u64 [sp + 0x28]\n 23478: u64 [s1] = a2\n 23480: u64 [s1 + 0x30] = a1\n 23483: a1 = u64 [sp + 0x30]\n 23486: u64 [s1 + 0x10] = a1\n 23489: u64 [s1 + 0x38] = a0\n 23492: a0 = u64 [sp + 0x38]\n 23495: u64 [s1 + 0x18] = a0\n 23498: sp = s0 + 0xffffffffffffff60\n 23502: ra = u64 [sp + 0x98]\n 23506: s0 = u64 [sp + 0x90]\n 23510: s1 = u64 [sp + 0x88]\n 23514: sp = sp + 0xa0\n 23518: ret\n      : @406 (gas: 1)\n 23520: trap\n      : @407 (gas: 4)\n 23521: a0 = 0\n 23523: a1 = 0\n 23525: ra = 0x160\n 23529: jump @0\n      : @408 (gas: 2)\n 23532: a0 = 0\n 23534: ra = 352, jump @0\n      : @409 [@dyn 176] (gas: 6)\n 23540: i32 a1 = a0 + 0\n 23542: a0 = 0x1\n 23545: a2 = 0\n 23547: ra = 0x162\n 23551: ecalli 10 // 'seal_return'\n 23553: fallthrough\n      : @410 [@dyn 177] (gas: 17)\n 23554: sp = sp + 0xffffffffffffffa8\n 23557: u64 [sp + 0x50] = ra\n 23560: u64 [sp + 0x48] = s0\n 23563: u64 [sp + 0x40] = s1\n 23566: a3 = u64 [a1 + 0x10]\n 23569: s1 = u64 [a1 + 0x18]\n 23572: a5 = u64 [a1 + 0x8]\n 23575: s0 = u64 [a1]\n 23577: a4 = a5 | s1\n 23580: a1 = s0 | a3\n 23583: a1 = a1 | a4\n 23586: a1 = a1 >> 0x20\n 23589: a4 = a4 | a3\n 23592: a4 = a4 << 0x20\n 23595: a1 = a1 | a4\n 23598: u64 [sp + 0x38] = a0\n 23601: jump @413 if a1 != 0\n      : @411 (gas: 22)\n 23605: a0 = u64 [a2 + 0x18]\n 23608: u64 [sp] = a0\n 23610: a0 = u64 [a2 + 0x10]\n 23613: u64 [sp + 0x8] = a0\n 23616: a0 = u64 [a2 + 0x8]\n 23619: u64 [sp + 0x10] = a0\n 23622: a0 = u64 [a2]\n 23624: u64 [sp + 0x18] = a0\n 23627: a0 = s0 + 0x20\n 23630: u64 [sp + 0x30] = a0\n 23633: a0 = a0 <u s0\n 23636: a1 = a5 + a0\n 23639: u64 [sp + 0x28] = a1\n 23642: a1 = a1 <u a5\n 23645: a1 = a0 if a0 == 0\n 23648: a1 = a1 + a3\n 23651: u64 [sp + 0x20] = a1\n 23654: a0 = a1 <u a3\n 23657: s1 = s1 + a0\n 23660: i32 a0 = s0 + 0\n 23662: a1 = 0x20\n 23665: ra = 356, jump @0\n      : @412 [@dyn 178] (gas: 81)\n 23671: a1 = u64 [sp]\n 23673: a1 = reverse a1\n 23675: a2 = u64 [sp + 0x8]\n 23678: a2 = reverse a2\n 23680: a3 = u64 [sp + 0x10]\n 23683: a3 = reverse a3\n 23685: a4 = u64 [sp + 0x18]\n 23688: a4 = reverse a4\n 23690: a5 = a4 >> 0x38\n 23693: u8 [a0 + 0x1f] = a5\n 23696: a5 = a4 >> 0x30\n 23699: u8 [a0 + 0x1e] = a5\n 23702: a5 = a4 >> 0x28\n 23705: u8 [a0 + 0x1d] = a5\n 23708: a5 = a4 >> 0x20\n 23711: u8 [a0 + 0x1c] = a5\n 23714: a5 = a4 >> 0x18\n 23717: u8 [a0 + 0x1b] = a5\n 23720: a5 = a4 >> 0x10\n 23723: u8 [a0 + 0x1a] = a5\n 23726: a5 = a4 >> 0x8\n 23729: u8 [a0 + 0x19] = a5\n 23732: u8 [a0 + 0x18] = a4\n 23735: u8 [a0 + 0x10] = a3\n 23738: a4 = a3 >> 0x38\n 23741: u8 [a0 + 0x17] = a4\n 23744: a4 = a3 >> 0x30\n 23747: u8 [a0 + 0x16] = a4\n 23750: a4 = a3 >> 0x28\n 23753: u8 [a0 + 0x15] = a4\n 23756: a4 = a3 >> 0x20\n 23759: u8 [a0 + 0x14] = a4\n 23762: a4 = a3 >> 0x18\n 23765: u8 [a0 + 0x13] = a4\n 23768: a4 = a3 >> 0x10\n 23771: u8 [a0 + 0x12] = a4\n 23774: a3 = a3 >> 0x8\n 23777: u8 [a0 + 0x11] = a3\n 23780: u8 [a0 + 0x8] = a2\n 23783: a3 = a2 >> 0x38\n 23786: u8 [a0 + 0xf] = a3\n 23789: a3 = a2 >> 0x30\n 23792: u8 [a0 + 0xe] = a3\n 23795: a3 = a2 >> 0x28\n 23798: u8 [a0 + 0xd] = a3\n 23801: a3 = a2 >> 0x20\n 23804: u8 [a0 + 0xc] = a3\n 23807: a3 = a2 >> 0x18\n 23810: u8 [a0 + 0xb] = a3\n 23813: a3 = a2 >> 0x10\n 23816: u8 [a0 + 0xa] = a3\n 23819: a2 = a2 >> 0x8\n 23822: u8 [a0 + 0x9] = a2\n 23825: u8 [a0] = a1\n 23827: a2 = a1 >> 0x38\n 23830: u8 [a0 + 0x7] = a2\n 23833: a2 = a1 >> 0x30\n 23836: u8 [a0 + 0x6] = a2\n 23839: a2 = a1 >> 0x28\n 23842: u8 [a0 + 0x5] = a2\n 23845: a2 = a1 >> 0x20\n 23848: u8 [a0 + 0x4] = a2\n 23851: a2 = a1 >> 0x18\n 23854: u8 [a0 + 0x3] = a2\n 23857: a2 = a1 >> 0x10\n 23860: u8 [a0 + 0x2] = a2\n 23863: a1 = a1 >> 0x8\n 23866: u8 [a0 + 0x1] = a1\n 23869: a0 = u64 [sp + 0x38]\n 23872: a1 = u64 [sp + 0x30]\n 23875: u64 [a0] = a1\n 23877: a1 = u64 [sp + 0x28]\n 23880: u64 [a0 + 0x8] = a1\n 23883: a1 = u64 [sp + 0x20]\n 23886: u64 [a0 + 0x10] = a1\n 23889: u64 [a0 + 0x18] = s1\n 23892: ra = u64 [sp + 0x50]\n 23895: s0 = u64 [sp + 0x48]\n 23898: s1 = u64 [sp + 0x40]\n 23901: sp = sp + 0x58\n 23904: ret\n      : @413 (gas: 1)\n 23906: trap\n      : @414 (gas: 8)\n 23907: a0 = u64 [sp + 0x110]\n 23911: a1 = u64 [sp + 0x118]\n 23915: a2 = u64 [sp + 0x108]\n 23919: a3 = u64 [sp + 0x100]\n 23923: a1 = a1 | a2\n 23926: a0 = a0 | a3\n 23929: a0 = a0 | a1\n 23932: jump @420 if a0 != 0\n      : @415 (gas: 13)\n 23936: a0 = u32 [0x20164]\n 23941: u64 [sp + 152] = 0\n 23945: u64 [sp + 144] = 0\n 23949: u64 [sp + 136] = 0\n 23953: u64 [sp + 0x80] = a0\n 23957: u64 [sp + 184] = 0\n 23961: u64 [sp + 176] = 0\n 23965: u64 [sp + 160] = 0x4\n 23970: a0 = sp + 0xc0\n 23974: a1 = sp + 0xa0\n 23978: a2 = sp + 0x80\n 23982: u64 [sp + 168] = 0\n 23986: ra = 358, jump @398\n      : @416 [@dyn 179] (gas: 59)\n 23992: t0 = u64 [sp + 0xc0]\n 23996: a0 = u64 [sp + 0xc8]\n 24000: a1 = u64 [sp + 0xd0]\n 24004: a2 = u64 [sp + 0xd8]\n 24008: a4 = u64 [sp + 0xe0]\n 24012: a5 = u64 [sp + 0xe8]\n 24016: s1 = u64 [sp + 0xf0]\n 24020: a3 = u64 [sp + 0xf8]\n 24024: u64 [sp + 0x38] = a3\n 24027: u64 [sp + 0x30] = s1\n 24030: u64 [sp + 0x28] = a5\n 24033: u64 [sp + 0x20] = a4\n 24036: u64 [sp + 0x58] = a2\n 24039: u64 [sp + 0x50] = a1\n 24042: u64 [sp + 0x48] = a0\n 24045: a0 = sp + 0x60\n 24048: a1 = sp + 0x40\n 24051: a2 = sp + 0x20\n 24054: u64 [sp + 0x40] = t0\n 24057: ra = 0x168\n 24061: sp = sp + 0xfffffffffffffec0\n 24065: u64 [sp + 0x138] = ra\n 24069: u64 [sp + 0x130] = s0\n 24073: u64 [sp + 0x128] = s1\n 24077: s0 = sp + 0x140\n 24081: sp = sp & 0xffffffffffffffe0\n 24084: s1 = sp\n 24086: a3 = u64 [a1 + 0x10]\n 24089: a4 = u64 [a1]\n 24091: u64 [s1 + 0x8] = a0\n 24094: u64 [s1 + 64] = 0\n 24097: u64 [s1 + 56] = 0\n 24100: u64 [s1 + 40] = 0\n 24103: u64 [s1 + 48] = 0\n 24106: u64 [s1 + 152] = 0\n 24110: u64 [s1 + 144] = 0\n 24114: u64 [s1 + 128] = 0\n 24118: u64 [s1 + 136] = 0\n 24122: t0 = a4 | a3\n 24125: a0 = u64 [a1 + 0x18]\n 24128: a1 = u64 [a1 + 0x8]\n 24131: a4 = u64 [a2 + 0x18]\n 24134: a5 = u64 [a2 + 0x10]\n 24137: a3 = u64 [a2]\n 24139: a2 = u64 [a2 + 0x8]\n 24142: a0 = a0 | a1\n 24145: a0 = t0 | a0\n 24148: u64 [s1 + 0x20] = a0\n 24151: a3 = a3 | a5\n 24154: a2 = a2 | a4\n 24157: a2 = a2 | a3\n 24160: u64 [s1 + 0x10] = a2\n 24163: i32 a0 = s1 + 0xe0\n 24167: u64 [s1 + 0x50] = a0\n 24170: i32 a0 = s1 + 0x100\n 24174: u64 [s1 + 0x58] = a0\n 24177: i32 a0 = s1 + 0x120\n 24181: u64 [s1 + 0x48] = a0\n 24184: jump @901\n      : @417 [@dyn 180] (gas: 11)\n 24188: a0 = u64 [sp + 0x78]\n 24191: u64 [sp] = a0\n 24193: a0 = u64 [sp + 0x70]\n 24196: u64 [sp + 0x8] = a0\n 24199: a0 = u64 [sp + 0x68]\n 24202: u64 [sp + 0x10] = a0\n 24205: a0 = u64 [sp + 0x60]\n 24208: u64 [sp + 0x18] = a0\n 24211: a0 = 0x40\n 24214: a1 = 0x20\n 24217: ra = 362, jump @0\n      : @418 [@dyn 181] (gas: 100)\n 24223: a1 = u8 [a0 + 0x11]\n 24226: a2 = u8 [a0 + 0x10]\n 24229: a3 = u8 [a0 + 0x12]\n 24232: a4 = u8 [a0 + 0x13]\n 24235: a1 = a1 << 0x8\n 24238: a1 = a1 | a2\n 24241: a3 = a3 << 0x10\n 24244: a4 = a4 << 0x18\n 24247: a3 = a3 | a4\n 24250: a1 = a1 | a3\n 24253: a2 = u8 [a0 + 0x15]\n 24256: a3 = u8 [a0 + 0x14]\n 24259: a4 = u8 [a0 + 0x16]\n 24262: a5 = u8 [a0 + 0x17]\n 24265: a2 = a2 << 0x8\n 24268: a2 = a2 | a3\n 24271: a4 = a4 << 0x10\n 24274: a5 = a5 << 0x18\n 24277: a4 = a4 | a5\n 24280: a2 = a2 | a4\n 24283: a2 = a2 << 0x20\n 24286: t0 = a2 | a1\n 24289: a2 = u8 [a0 + 0x1]\n 24292: a3 = u8 [a0]\n 24294: a4 = u8 [a0 + 0x2]\n 24297: a5 = u8 [a0 + 0x3]\n 24300: a2 = a2 << 0x8\n 24303: a2 = a2 | a3\n 24306: a4 = a4 << 0x10\n 24309: a5 = a5 << 0x18\n 24312: a4 = a4 | a5\n 24315: a2 = a2 | a4\n 24318: a3 = u8 [a0 + 0x5]\n 24321: a4 = u8 [a0 + 0x4]\n 24324: a5 = u8 [a0 + 0x6]\n 24327: s1 = u8 [a0 + 0x7]\n 24330: a3 = a3 << 0x8\n 24333: a3 = a3 | a4\n 24336: a5 = a5 << 0x10\n 24339: s1 = s1 << 0x18\n 24342: a5 = a5 | s1\n 24345: a3 = a3 | a5\n 24348: a3 = a3 << 0x20\n 24351: a2 = a2 | a3\n 24354: a3 = u8 [a0 + 0x19]\n 24357: a4 = u8 [a0 + 0x18]\n 24360: a5 = u8 [a0 + 0x1a]\n 24363: s1 = u8 [a0 + 0x1b]\n 24366: a3 = a3 << 0x8\n 24369: a3 = a3 | a4\n 24372: a5 = a5 << 0x10\n 24375: s1 = s1 << 0x18\n 24378: a5 = a5 | s1\n 24381: a3 = a3 | a5\n 24384: a4 = u8 [a0 + 0x1d]\n 24387: a5 = u8 [a0 + 0x1c]\n 24390: s1 = u8 [a0 + 0x1e]\n 24393: a1 = u8 [a0 + 0x1f]\n 24396: a4 = a4 << 0x8\n 24399: a4 = a4 | a5\n 24402: s1 = s1 << 0x10\n 24405: a1 = a1 << 0x18\n 24408: a1 = a1 | s1\n 24411: a1 = a1 | a4\n 24414: a1 = a1 << 0x20\n 24417: a3 = a3 | a1\n 24420: a1 = u8 [a0 + 0x9]\n 24423: a4 = u8 [a0 + 0x8]\n 24426: a5 = u8 [a0 + 0xa]\n 24429: s1 = u8 [a0 + 0xb]\n 24432: a1 = a1 << 0x8\n 24435: a1 = a1 | a4\n 24438: a5 = a5 << 0x10\n 24441: s1 = s1 << 0x18\n 24444: a5 = a5 | s1\n 24447: a1 = a1 | a5\n 24450: a4 = u8 [a0 + 0xd]\n 24453: a5 = u8 [a0 + 0xc]\n 24456: s1 = u8 [a0 + 0xe]\n 24459: a0 = u8 [a0 + 0xf]\n 24462: a4 = a4 << 0x8\n 24465: a4 = a4 | a5\n 24468: s1 = s1 << 0x10\n 24471: a0 = a0 << 0x18\n 24474: a0 = a0 | s1\n 24477: a0 = a0 | a4\n 24480: a0 = a0 << 0x20\n 24483: a0 = a0 | a1\n 24486: a1 = reverse a0\n 24488: a0 = reverse a3\n 24490: a2 = reverse a2\n 24492: a3 = reverse t0\n 24494: a2 = a2 | a3\n 24497: a3 = a0 | a1\n 24500: a3 = a3 | a2\n 24503: a3 = a3 >> 0x20\n 24506: a1 = a1 | a2\n 24509: a1 = a1 << 0x20\n 24512: a1 = a1 | a3\n 24515: jump @422 if a1 == 0\n      : @419 (gas: 1)\n 24518: trap\n      : @420 (gas: 3)\n 24519: a0 = 0\n 24521: a1 = 0\n 24523: ra = 364, jump @0\n      : @421 [@dyn 182] (gas: 5)\n 24529: i32 a1 = a0 + 0\n 24531: a0 = 0x1\n 24534: a2 = 0\n 24536: ecalli 10 // 'seal_return'\n 24538: fallthrough\n      : @422 (gas: 4)\n 24539: i32 s1 = a0 + 0\n 24541: a1 = 0x20\n 24544: a0 = s1\n 24546: ra = 366, jump @0\n      : @423 [@dyn 183] (gas: 71)\n 24552: a1 = u64 [sp]\n 24554: a1 = reverse a1\n 24556: a2 = u64 [sp + 0x8]\n 24559: a2 = reverse a2\n 24561: a3 = u64 [sp + 0x10]\n 24564: a3 = reverse a3\n 24566: a4 = u64 [sp + 0x18]\n 24569: a4 = reverse a4\n 24571: a5 = a4 >> 0x38\n 24574: u8 [a0 + 0x1f] = a5\n 24577: a5 = a4 >> 0x30\n 24580: u8 [a0 + 0x1e] = a5\n 24583: a5 = a4 >> 0x28\n 24586: u8 [a0 + 0x1d] = a5\n 24589: a5 = a4 >> 0x20\n 24592: u8 [a0 + 0x1c] = a5\n 24595: a5 = a4 >> 0x18\n 24598: u8 [a0 + 0x1b] = a5\n 24601: a5 = a4 >> 0x10\n 24604: u8 [a0 + 0x1a] = a5\n 24607: a5 = a4 >> 0x8\n 24610: u8 [a0 + 0x19] = a5\n 24613: u8 [a0 + 0x18] = a4\n 24616: u8 [a0 + 0x10] = a3\n 24619: a4 = a3 >> 0x38\n 24622: u8 [a0 + 0x17] = a4\n 24625: a4 = a3 >> 0x30\n 24628: u8 [a0 + 0x16] = a4\n 24631: a4 = a3 >> 0x28\n 24634: u8 [a0 + 0x15] = a4\n 24637: a4 = a3 >> 0x20\n 24640: u8 [a0 + 0x14] = a4\n 24643: a4 = a3 >> 0x18\n 24646: u8 [a0 + 0x13] = a4\n 24649: a4 = a3 >> 0x10\n 24652: u8 [a0 + 0x12] = a4\n 24655: a3 = a3 >> 0x8\n 24658: u8 [a0 + 0x11] = a3\n 24661: u8 [a0 + 0x8] = a2\n 24664: a3 = a2 >> 0x38\n 24667: u8 [a0 + 0xf] = a3\n 24670: a3 = a2 >> 0x30\n 24673: u8 [a0 + 0xe] = a3\n 24676: a3 = a2 >> 0x28\n 24679: u8 [a0 + 0xd] = a3\n 24682: a3 = a2 >> 0x20\n 24685: u8 [a0 + 0xc] = a3\n 24688: a3 = a2 >> 0x18\n 24691: u8 [a0 + 0xb] = a3\n 24694: a3 = a2 >> 0x10\n 24697: u8 [a0 + 0xa] = a3\n 24700: a2 = a2 >> 0x8\n 24703: u8 [a0 + 0x9] = a2\n 24706: u8 [a0] = a1\n 24708: a2 = a1 >> 0x38\n 24711: u8 [a0 + 0x7] = a2\n 24714: a2 = a1 >> 0x30\n 24717: u8 [a0 + 0x6] = a2\n 24720: a2 = a1 >> 0x28\n 24723: u8 [a0 + 0x5] = a2\n 24726: a2 = a1 >> 0x20\n 24729: u8 [a0 + 0x4] = a2\n 24732: a2 = a1 >> 0x18\n 24735: u8 [a0 + 0x3] = a2\n 24738: a2 = a1 >> 0x10\n 24741: u8 [a0 + 0x2] = a2\n 24744: a1 = a1 >> 0x8\n 24747: u8 [a0 + 0x1] = a1\n 24750: a1 = 0x20\n 24753: a0 = s1\n 24755: ra = 368, jump @0\n      : @424 [@dyn 184] (gas: 6)\n 24761: i32 a1 = a0 + 0\n 24763: a2 = 0x20\n 24766: a0 = 0\n 24768: ra = 0x172\n 24772: ecalli 10 // 'seal_return'\n 24774: fallthrough\n      : @425 [@dyn 185] (gas: 13)\n 24775: sp = sp + 0xffffffffffffff20\n 24779: u64 [sp + 0xd8] = ra\n 24783: u64 [sp + 0xd0] = s0\n 24787: u64 [sp + 0xc8] = s1\n 24791: s0 = sp + 0xe0\n 24795: sp = sp & 0xffffffffffffffe0\n 24798: u64 [sp + 120] = 0\n 24801: u64 [sp + 112] = 0\n 24804: u64 [sp + 104] = 0\n 24807: u64 [sp + 96] = 0\n 24810: i32 a0 = sp + 0x60\n 24813: ecalli 13 // 'value_transferred'\n 24815: fallthrough\n      : @426 (gas: 8)\n 24816: a0 = u64 [sp + 0x70]\n 24819: a1 = u64 [sp + 0x78]\n 24822: a2 = u64 [sp + 0x68]\n 24825: a3 = u64 [sp + 0x60]\n 24828: a1 = a1 | a2\n 24831: a0 = a0 | a3\n 24834: a0 = a0 | a1\n 24837: jump @436 if a0 != 0\n      : @427 (gas: 2)\n 24841: a0 = i32 [0x20164]\n 24846: jump @436 if a0 <=u 35\n      : @428 (gas: 4)\n 24851: i32 a0 = sp + 0xa0\n 24855: a1 = 0x4\n 24858: ecalli 3 // 'call_data_load'\n 24860: fallthrough\n      : @429 (gas: 11)\n 24861: s1 = u64 [sp + 0xb0]\n 24865: a2 = u64 [sp + 0xb8]\n 24869: a0 = 0x100000000\n 24879: a0 = a0 ^ s1\n 24882: a0 = a0 | a2\n 24885: a1 = s1 >> 0x20\n 24888: a1 = a1 <u 0x1\n 24891: u64 [sp + 0x38] = a2\n 24894: a1 = 0 if a2 != 0\n 24896: a1 = 0 if a0 == 0\n 24898: jump @437 if a1 == 0\n      : @430 (gas: 15)\n 24902: a0 = u64 [sp + 0xa8]\n 24906: u64 [sp + 0x30] = a0\n 24909: a0 = u64 [sp + 0xa0]\n 24913: u64 [sp + 0x28] = a0\n 24916: i32 a0 = sp + 0x80\n 24920: ecalli 5 // 'caller'\n 24922: a0 = u64 [sp + 0x88]\n 24926: u64 [sp + 0x20] = a0\n 24929: a0 = u64 [sp + 0x80]\n 24933: u64 [sp + 0x18] = a0\n 24936: a0 = u32 [sp + 0x90]\n 24940: u64 [sp + 0x10] = a0\n 24943: i32 a0 = sp + 0xa0\n 24947: ecalli 0 // 'address'\n 24948: fallthrough\n      : @431 (gas: 12)\n 24949: a0 = u32 [sp + 0xb0]\n 24953: a1 = u64 [sp + 0xa0]\n 24957: a2 = u64 [sp + 0xa8]\n 24961: a3 = u64 [sp + 0x10]\n 24964: a0 = a0 ^ a3\n 24967: a3 = u64 [sp + 0x18]\n 24970: a1 = a1 ^ a3\n 24973: a0 = a0 | a1\n 24976: a1 = u64 [sp + 0x20]\n 24979: a1 = a1 ^ a2\n 24982: a0 = a0 | a1\n 24985: jump @436 if a0 != 0\n      : @432 (gas: 29)\n 24989: a0 = u64 [sp + 0x28]\n 24992: u64 [sp + 0x40] = a0\n 24995: a0 = u64 [sp + 0x30]\n 24998: u64 [sp + 0x48] = a0\n 25001: u64 [sp + 0x50] = s1\n 25004: a0 = sp + 0x40\n 25007: a1 = u64 [sp + 0x38]\n 25010: u64 [sp + 0x58] = a1\n 25013: ra = 0x174\n 25017: sp = sp + 0xffffffffffffff40\n 25021: u64 [sp + 0xb8] = ra\n 25025: u64 [sp + 0xb0] = s0\n 25029: u64 [sp + 0xa8] = s1\n 25033: s0 = sp + 0xc0\n 25037: sp = sp & 0xffffffffffffffe0\n 25040: a1 = u64 [a0 + 0x18]\n 25043: u64 [sp + 0x30] = a1\n 25046: a1 = u64 [a0 + 0x10]\n 25049: a2 = u64 [a0]\n 25051: u64 [sp + 0x18] = a2\n 25054: a0 = u64 [a0 + 0x8]\n 25057: u64 [sp + 0x38] = a0\n 25060: u64 [sp + 0x28] = a1\n 25063: a0 = a1 << 0x20\n 25066: s1 = a0 >> 0x20\n 25069: a1 = 0x20\n 25072: a0 = 0\n 25074: ra = 0x334\n 25078: jump @0\n      : @433 [@dyn 186] (gas: 3)\n 25081: a0 = 0x40\n 25084: a1 = 0x20\n 25087: ra = 374, jump @0\n      : @434 [@dyn 187] (gas: 100)\n 25093: a1 = u8 [a0 + 0x11]\n 25096: a2 = u8 [a0 + 0x10]\n 25099: a3 = u8 [a0 + 0x12]\n 25102: a4 = u8 [a0 + 0x13]\n 25105: a1 = a1 << 0x8\n 25108: a1 = a1 | a2\n 25111: a3 = a3 << 0x10\n 25114: a4 = a4 << 0x18\n 25117: a3 = a3 | a4\n 25120: a1 = a1 | a3\n 25123: a2 = u8 [a0 + 0x15]\n 25126: a3 = u8 [a0 + 0x14]\n 25129: a4 = u8 [a0 + 0x16]\n 25132: a5 = u8 [a0 + 0x17]\n 25135: a2 = a2 << 0x8\n 25138: a2 = a2 | a3\n 25141: a4 = a4 << 0x10\n 25144: a5 = a5 << 0x18\n 25147: a4 = a4 | a5\n 25150: a2 = a2 | a4\n 25153: a2 = a2 << 0x20\n 25156: t0 = a2 | a1\n 25159: a2 = u8 [a0 + 0x1]\n 25162: a3 = u8 [a0]\n 25164: a4 = u8 [a0 + 0x2]\n 25167: a5 = u8 [a0 + 0x3]\n 25170: a2 = a2 << 0x8\n 25173: a2 = a2 | a3\n 25176: a4 = a4 << 0x10\n 25179: a5 = a5 << 0x18\n 25182: a4 = a4 | a5\n 25185: a2 = a2 | a4\n 25188: a3 = u8 [a0 + 0x5]\n 25191: a4 = u8 [a0 + 0x4]\n 25194: a5 = u8 [a0 + 0x6]\n 25197: s1 = u8 [a0 + 0x7]\n 25200: a3 = a3 << 0x8\n 25203: a3 = a3 | a4\n 25206: a5 = a5 << 0x10\n 25209: s1 = s1 << 0x18\n 25212: a5 = a5 | s1\n 25215: a3 = a3 | a5\n 25218: a3 = a3 << 0x20\n 25221: a2 = a2 | a3\n 25224: a3 = u8 [a0 + 0x19]\n 25227: a4 = u8 [a0 + 0x18]\n 25230: a5 = u8 [a0 + 0x1a]\n 25233: s1 = u8 [a0 + 0x1b]\n 25236: a3 = a3 << 0x8\n 25239: a3 = a3 | a4\n 25242: a5 = a5 << 0x10\n 25245: s1 = s1 << 0x18\n 25248: a5 = a5 | s1\n 25251: a3 = a3 | a5\n 25254: a4 = u8 [a0 + 0x1d]\n 25257: a5 = u8 [a0 + 0x1c]\n 25260: s1 = u8 [a0 + 0x1e]\n 25263: a1 = u8 [a0 + 0x1f]\n 25266: a4 = a4 << 0x8\n 25269: a4 = a4 | a5\n 25272: s1 = s1 << 0x10\n 25275: a1 = a1 << 0x18\n 25278: a1 = a1 | s1\n 25281: a1 = a1 | a4\n 25284: a1 = a1 << 0x20\n 25287: a3 = a3 | a1\n 25290: a1 = u8 [a0 + 0x9]\n 25293: a4 = u8 [a0 + 0x8]\n 25296: a5 = u8 [a0 + 0xa]\n 25299: s1 = u8 [a0 + 0xb]\n 25302: a1 = a1 << 0x8\n 25305: a1 = a1 | a4\n 25308: a5 = a5 << 0x10\n 25311: s1 = s1 << 0x18\n 25314: a5 = a5 | s1\n 25317: a1 = a1 | a5\n 25320: a4 = u8 [a0 + 0xd]\n 25323: a5 = u8 [a0 + 0xc]\n 25326: s1 = u8 [a0 + 0xe]\n 25329: a0 = u8 [a0 + 0xf]\n 25332: a4 = a4 << 0x8\n 25335: a4 = a4 | a5\n 25338: s1 = s1 << 0x10\n 25341: a0 = a0 << 0x18\n 25344: a0 = a0 | s1\n 25347: a0 = a0 | a4\n 25350: a0 = a0 << 0x20\n 25353: a0 = a0 | a1\n 25356: a1 = reverse a0\n 25358: a0 = reverse a3\n 25360: a2 = reverse a2\n 25362: a3 = reverse t0\n 25364: a2 = a2 | a3\n 25367: a3 = a0 | a1\n 25370: a3 = a3 | a2\n 25373: a3 = a3 >> 0x20\n 25376: a1 = a1 | a2\n 25379: a1 = a1 << 0x20\n 25382: a1 = a1 | a3\n 25385: jump @439 if a1 == 0\n      : @435 (gas: 1)\n 25388: trap\n      : @436 (gas: 4)\n 25389: a0 = 0\n 25391: a1 = 0\n 25393: ra = 0x178\n 25397: jump @0\n      : @437 (gas: 2)\n 25400: a0 = 0\n 25402: ra = 376, jump @0\n      : @438 [@dyn 188] (gas: 7)\n 25408: i32 a1 = a0 + 0\n 25410: a0 = 0x1\n 25413: a2 = 0\n 25415: ecalli 10 // 'seal_return'\n 25417: i32 a0 = a0 + 0\n 25419: ra = 0x17a\n 25423: jump @0\n      : @439 (gas: 2)\n 25426: i32 a0 = a0 + 0\n 25428: ra = 378, jump @0\n      : @440 [@dyn 189] (gas: 6)\n 25434: i32 a1 = a0 + 0\n 25436: a0 = 0\n 25438: a2 = 0\n 25440: ra = 0x17c\n 25444: ecalli 10 // 'seal_return'\n 25446: fallthrough\n      : @441 [@dyn 190] (gas: 13)\n 25447: sp = sp + 0xffffffffffffff40\n 25451: u64 [sp + 0xb8] = ra\n 25455: u64 [sp + 0xb0] = s0\n 25459: u64 [sp + 0xa8] = s1\n 25463: s0 = sp + 0xc0\n 25467: sp = sp & 0xffffffffffffffe0\n 25470: u64 [sp + 120] = 0\n 25473: u64 [sp + 112] = 0\n 25476: u64 [sp + 104] = 0\n 25479: u64 [sp + 96] = 0\n 25482: i32 a0 = sp + 0x60\n 25485: ecalli 13 // 'value_transferred'\n 25487: fallthrough\n      : @442 (gas: 8)\n 25488: a0 = u64 [sp + 0x70]\n 25491: a1 = u64 [sp + 0x78]\n 25494: a2 = u64 [sp + 0x68]\n 25497: a3 = u64 [sp + 0x60]\n 25500: a1 = a1 | a2\n 25503: a0 = a0 | a3\n 25506: a0 = a0 | a1\n 25509: jump @448 if a0 != 0\n      : @443 (gas: 2)\n 25513: a0 = i32 [0x20164]\n 25518: jump @448 if a0 <=u 35\n      : @444 (gas: 14)\n 25523: i32 a0 = sp + 0x80\n 25527: a1 = 0x4\n 25530: ecalli 3 // 'call_data_load'\n 25532: a2 = u64 [sp + 0x80]\n 25536: a0 = u64 [sp + 0x88]\n 25540: a1 = u64 [sp + 0x90]\n 25544: a3 = u64 [sp + 0x98]\n 25548: u64 [sp + 0x38] = a3\n 25551: u64 [sp + 0x30] = a1\n 25554: u64 [sp + 0x28] = a0\n 25557: a0 = sp + 0x40\n 25560: a1 = sp + 0x20\n 25563: u64 [sp + 0x20] = a2\n 25566: ra = 382, jump @969\n      : @445 [@dyn 191] (gas: 11)\n 25573: a0 = u64 [sp + 0x58]\n 25576: u64 [sp + 0x18] = a0\n 25579: a0 = u64 [sp + 0x50]\n 25582: u64 [sp + 0x8] = a0\n 25585: a0 = u64 [sp + 0x48]\n 25588: u64 [sp + 0x10] = a0\n 25591: a0 = u64 [sp + 0x40]\n 25594: u64 [sp] = a0\n 25596: a0 = 0x40\n 25599: a1 = 0x20\n 25602: ra = 384, jump @0\n      : @446 [@dyn 192] (gas: 100)\n 25608: a1 = u8 [a0 + 0x11]\n 25611: a2 = u8 [a0 + 0x10]\n 25614: a3 = u8 [a0 + 0x12]\n 25617: a4 = u8 [a0 + 0x13]\n 25620: a1 = a1 << 0x8\n 25623: a1 = a1 | a2\n 25626: a3 = a3 << 0x10\n 25629: a4 = a4 << 0x18\n 25632: a3 = a3 | a4\n 25635: a1 = a1 | a3\n 25638: a2 = u8 [a0 + 0x15]\n 25641: a3 = u8 [a0 + 0x14]\n 25644: a4 = u8 [a0 + 0x16]\n 25647: a5 = u8 [a0 + 0x17]\n 25650: a2 = a2 << 0x8\n 25653: a2 = a2 | a3\n 25656: a4 = a4 << 0x10\n 25659: a5 = a5 << 0x18\n 25662: a4 = a4 | a5\n 25665: a2 = a2 | a4\n 25668: a2 = a2 << 0x20\n 25671: t0 = a2 | a1\n 25674: a2 = u8 [a0 + 0x1]\n 25677: a3 = u8 [a0]\n 25679: a4 = u8 [a0 + 0x2]\n 25682: a5 = u8 [a0 + 0x3]\n 25685: a2 = a2 << 0x8\n 25688: a2 = a2 | a3\n 25691: a4 = a4 << 0x10\n 25694: a5 = a5 << 0x18\n 25697: a4 = a4 | a5\n 25700: a2 = a2 | a4\n 25703: a3 = u8 [a0 + 0x5]\n 25706: a4 = u8 [a0 + 0x4]\n 25709: a5 = u8 [a0 + 0x6]\n 25712: s1 = u8 [a0 + 0x7]\n 25715: a3 = a3 << 0x8\n 25718: a3 = a3 | a4\n 25721: a5 = a5 << 0x10\n 25724: s1 = s1 << 0x18\n 25727: a5 = a5 | s1\n 25730: a3 = a3 | a5\n 25733: a3 = a3 << 0x20\n 25736: a2 = a2 | a3\n 25739: a3 = u8 [a0 + 0x19]\n 25742: a4 = u8 [a0 + 0x18]\n 25745: a5 = u8 [a0 + 0x1a]\n 25748: s1 = u8 [a0 + 0x1b]\n 25751: a3 = a3 << 0x8\n 25754: a3 = a3 | a4\n 25757: a5 = a5 << 0x10\n 25760: s1 = s1 << 0x18\n 25763: a5 = a5 | s1\n 25766: a3 = a3 | a5\n 25769: a4 = u8 [a0 + 0x1d]\n 25772: a5 = u8 [a0 + 0x1c]\n 25775: s1 = u8 [a0 + 0x1e]\n 25778: a1 = u8 [a0 + 0x1f]\n 25781: a4 = a4 << 0x8\n 25784: a4 = a4 | a5\n 25787: s1 = s1 << 0x10\n 25790: a1 = a1 << 0x18\n 25793: a1 = a1 | s1\n 25796: a1 = a1 | a4\n 25799: a1 = a1 << 0x20\n 25802: a3 = a3 | a1\n 25805: a1 = u8 [a0 + 0x9]\n 25808: a4 = u8 [a0 + 0x8]\n 25811: a5 = u8 [a0 + 0xa]\n 25814: s1 = u8 [a0 + 0xb]\n 25817: a1 = a1 << 0x8\n 25820: a1 = a1 | a4\n 25823: a5 = a5 << 0x10\n 25826: s1 = s1 << 0x18\n 25829: a5 = a5 | s1\n 25832: a1 = a1 | a5\n 25835: a4 = u8 [a0 + 0xd]\n 25838: a5 = u8 [a0 + 0xc]\n 25841: s1 = u8 [a0 + 0xe]\n 25844: a0 = u8 [a0 + 0xf]\n 25847: a4 = a4 << 0x8\n 25850: a4 = a4 | a5\n 25853: s1 = s1 << 0x10\n 25856: a0 = a0 << 0x18\n 25859: a0 = a0 | s1\n 25862: a0 = a0 | a4\n 25865: a0 = a0 << 0x20\n 25868: a0 = a0 | a1\n 25871: a1 = reverse a0\n 25873: a0 = reverse a3\n 25875: a2 = reverse a2\n 25877: a3 = reverse t0\n 25879: a2 = a2 | a3\n 25882: a3 = a0 | a1\n 25885: a3 = a3 | a2\n 25888: a3 = a3 >> 0x20\n 25891: a1 = a1 | a2\n 25894: a1 = a1 << 0x20\n 25897: a1 = a1 | a3\n 25900: jump @450 if a1 == 0\n      : @447 (gas: 1)\n 25903: trap\n      : @448 (gas: 3)\n 25904: a0 = 0\n 25906: a1 = 0\n 25908: ra = 386, jump @0\n      : @449 [@dyn 193] (gas: 5)\n 25914: i32 a1 = a0 + 0\n 25916: a0 = 0x1\n 25919: a2 = 0\n 25921: ecalli 10 // 'seal_return'\n 25923: fallthrough\n      : @450 (gas: 13)\n 25924: a1 = u64 [sp + 0x8]\n 25927: a2 = u64 [sp]\n 25929: a1 = a1 | a2\n 25932: a2 = u64 [sp + 0x18]\n 25935: a3 = u64 [sp + 0x10]\n 25938: a2 = a2 | a3\n 25941: a1 = a1 | a2\n 25944: a1 = a1 >u 0\n 25946: u64 [sp + 0x18] = a1\n 25949: i32 s1 = a0 + 0\n 25951: a1 = 0x20\n 25954: a0 = s1\n 25956: ra = 388, jump @0\n      : @451 [@dyn 194] (gas: 36)\n 25962: u8 [a0 + 30] = 0\n 25965: u8 [a0 + 29] = 0\n 25968: u8 [a0 + 28] = 0\n 25971: u8 [a0 + 27] = 0\n 25974: u8 [a0 + 26] = 0\n 25977: u8 [a0 + 25] = 0\n 25980: u8 [a0 + 24] = 0\n 25983: u8 [a0 + 23] = 0\n 25986: u8 [a0 + 22] = 0\n 25989: u8 [a0 + 21] = 0\n 25992: u8 [a0 + 20] = 0\n 25995: u8 [a0 + 19] = 0\n 25998: u8 [a0 + 18] = 0\n 26001: u8 [a0 + 17] = 0\n 26004: u8 [a0 + 16] = 0\n 26007: u8 [a0 + 15] = 0\n 26010: u8 [a0 + 14] = 0\n 26013: u8 [a0 + 13] = 0\n 26016: u8 [a0 + 12] = 0\n 26019: u8 [a0 + 11] = 0\n 26022: u8 [a0 + 10] = 0\n 26025: u8 [a0 + 9] = 0\n 26028: u8 [a0 + 8] = 0\n 26031: u8 [a0 + 7] = 0\n 26034: u8 [a0 + 6] = 0\n 26037: u8 [a0 + 5] = 0\n 26040: u8 [a0 + 4] = 0\n 26043: u8 [a0 + 3] = 0\n 26046: u8 [a0 + 2] = 0\n 26049: u8 [a0 + 1] = 0\n 26052: u8 [a0 + 0] = 0\n 26054: a1 = u64 [sp + 0x18]\n 26057: u8 [a0 + 0x1f] = a1\n 26060: a1 = 0x20\n 26063: a0 = s1\n 26065: ra = 390, jump @0\n      : @452 [@dyn 195] (gas: 6)\n 26071: i32 a1 = a0 + 0\n 26073: a2 = 0x20\n 26076: a0 = 0\n 26078: ra = 0x188\n 26082: ecalli 10 // 'seal_return'\n 26084: fallthrough\n      : @453 [@dyn 196] (gas: 13)\n 26085: sp = sp + 0xffffffffffffff40\n 26089: u64 [sp + 0xb8] = ra\n 26093: u64 [sp + 0xb0] = s0\n 26097: u64 [sp + 0xa8] = s1\n 26101: s0 = sp + 0xc0\n 26105: sp = sp & 0xffffffffffffffe0\n 26108: u64 [sp + 120] = 0\n 26111: u64 [sp + 112] = 0\n 26114: u64 [sp + 104] = 0\n 26117: u64 [sp + 96] = 0\n 26120: i32 a0 = sp + 0x60\n 26123: ecalli 13 // 'value_transferred'\n 26125: fallthrough\n      : @454 (gas: 8)\n 26126: a0 = u64 [sp + 0x70]\n 26129: a1 = u64 [sp + 0x78]\n 26132: a2 = u64 [sp + 0x68]\n 26135: a3 = u64 [sp + 0x60]\n 26138: a1 = a1 | a2\n 26141: a0 = a0 | a3\n 26144: a0 = a0 | a1\n 26147: jump @460 if a0 != 0\n      : @455 (gas: 2)\n 26151: a0 = i32 [0x20164]\n 26156: jump @460 if a0 <=u 35\n      : @456 (gas: 14)\n 26161: i32 a0 = sp + 0x80\n 26165: a1 = 0x4\n 26168: ecalli 3 // 'call_data_load'\n 26170: a2 = u64 [sp + 0x80]\n 26174: a0 = u64 [sp + 0x88]\n 26178: a1 = u64 [sp + 0x90]\n 26182: a3 = u64 [sp + 0x98]\n 26186: u64 [sp + 0x38] = a3\n 26189: u64 [sp + 0x30] = a1\n 26192: u64 [sp + 0x28] = a0\n 26195: a0 = sp + 0x40\n 26198: a1 = sp + 0x20\n 26201: u64 [sp + 0x20] = a2\n 26204: ra = 394, jump @992\n      : @457 [@dyn 197] (gas: 11)\n 26211: a0 = u64 [sp + 0x58]\n 26214: u64 [sp] = a0\n 26216: a0 = u64 [sp + 0x50]\n 26219: u64 [sp + 0x8] = a0\n 26222: a0 = u64 [sp + 0x48]\n 26225: u64 [sp + 0x10] = a0\n 26228: a0 = u64 [sp + 0x40]\n 26231: u64 [sp + 0x18] = a0\n 26234: a0 = 0x40\n 26237: a1 = 0x20\n 26240: ra = 396, jump @0\n      : @458 [@dyn 198] (gas: 100)\n 26246: a1 = u8 [a0 + 0x11]\n 26249: a2 = u8 [a0 + 0x10]\n 26252: a3 = u8 [a0 + 0x12]\n 26255: a4 = u8 [a0 + 0x13]\n 26258: a1 = a1 << 0x8\n 26261: a1 = a1 | a2\n 26264: a3 = a3 << 0x10\n 26267: a4 = a4 << 0x18\n 26270: a3 = a3 | a4\n 26273: a1 = a1 | a3\n 26276: a2 = u8 [a0 + 0x15]\n 26279: a3 = u8 [a0 + 0x14]\n 26282: a4 = u8 [a0 + 0x16]\n 26285: a5 = u8 [a0 + 0x17]\n 26288: a2 = a2 << 0x8\n 26291: a2 = a2 | a3\n 26294: a4 = a4 << 0x10\n 26297: a5 = a5 << 0x18\n 26300: a4 = a4 | a5\n 26303: a2 = a2 | a4\n 26306: a2 = a2 << 0x20\n 26309: t0 = a2 | a1\n 26312: a2 = u8 [a0 + 0x1]\n 26315: a3 = u8 [a0]\n 26317: a4 = u8 [a0 + 0x2]\n 26320: a5 = u8 [a0 + 0x3]\n 26323: a2 = a2 << 0x8\n 26326: a2 = a2 | a3\n 26329: a4 = a4 << 0x10\n 26332: a5 = a5 << 0x18\n 26335: a4 = a4 | a5\n 26338: a2 = a2 | a4\n 26341: a3 = u8 [a0 + 0x5]\n 26344: a4 = u8 [a0 + 0x4]\n 26347: a5 = u8 [a0 + 0x6]\n 26350: s1 = u8 [a0 + 0x7]\n 26353: a3 = a3 << 0x8\n 26356: a3 = a3 | a4\n 26359: a5 = a5 << 0x10\n 26362: s1 = s1 << 0x18\n 26365: a5 = a5 | s1\n 26368: a3 = a3 | a5\n 26371: a3 = a3 << 0x20\n 26374: a2 = a2 | a3\n 26377: a3 = u8 [a0 + 0x19]\n 26380: a4 = u8 [a0 + 0x18]\n 26383: a5 = u8 [a0 + 0x1a]\n 26386: s1 = u8 [a0 + 0x1b]\n 26389: a3 = a3 << 0x8\n 26392: a3 = a3 | a4\n 26395: a5 = a5 << 0x10\n 26398: s1 = s1 << 0x18\n 26401: a5 = a5 | s1\n 26404: a3 = a3 | a5\n 26407: a4 = u8 [a0 + 0x1d]\n 26410: a5 = u8 [a0 + 0x1c]\n 26413: s1 = u8 [a0 + 0x1e]\n 26416: a1 = u8 [a0 + 0x1f]\n 26419: a4 = a4 << 0x8\n 26422: a4 = a4 | a5\n 26425: s1 = s1 << 0x10\n 26428: a1 = a1 << 0x18\n 26431: a1 = a1 | s1\n 26434: a1 = a1 | a4\n 26437: a1 = a1 << 0x20\n 26440: a3 = a3 | a1\n 26443: a1 = u8 [a0 + 0x9]\n 26446: a4 = u8 [a0 + 0x8]\n 26449: a5 = u8 [a0 + 0xa]\n 26452: s1 = u8 [a0 + 0xb]\n 26455: a1 = a1 << 0x8\n 26458: a1 = a1 | a4\n 26461: a5 = a5 << 0x10\n 26464: s1 = s1 << 0x18\n 26467: a5 = a5 | s1\n 26470: a1 = a1 | a5\n 26473: a4 = u8 [a0 + 0xd]\n 26476: a5 = u8 [a0 + 0xc]\n 26479: s1 = u8 [a0 + 0xe]\n 26482: a0 = u8 [a0 + 0xf]\n 26485: a4 = a4 << 0x8\n 26488: a4 = a4 | a5\n 26491: s1 = s1 << 0x10\n 26494: a0 = a0 << 0x18\n 26497: a0 = a0 | s1\n 26500: a0 = a0 | a4\n 26503: a0 = a0 << 0x20\n 26506: a0 = a0 | a1\n 26509: a1 = reverse a0\n 26511: a0 = reverse a3\n 26513: a2 = reverse a2\n 26515: a3 = reverse t0\n 26517: a2 = a2 | a3\n 26520: a3 = a0 | a1\n 26523: a3 = a3 | a2\n 26526: a3 = a3 >> 0x20\n 26529: a1 = a1 | a2\n 26532: a1 = a1 << 0x20\n 26535: a1 = a1 | a3\n 26538: jump @462 if a1 == 0\n      : @459 (gas: 1)\n 26541: trap\n      : @460 (gas: 3)\n 26542: a0 = 0\n 26544: a1 = 0\n 26546: ra = 398, jump @0\n      : @461 [@dyn 199] (gas: 5)\n 26552: i32 a1 = a0 + 0\n 26554: a0 = 0x1\n 26557: a2 = 0\n 26559: ecalli 10 // 'seal_return'\n 26561: fallthrough\n      : @462 (gas: 4)\n 26562: i32 s1 = a0 + 0\n 26564: a1 = 0x20\n 26567: a0 = s1\n 26569: ra = 400, jump @0\n      : @463 [@dyn 200] (gas: 71)\n 26575: a1 = u64 [sp]\n 26577: a1 = reverse a1\n 26579: a2 = u64 [sp + 0x8]\n 26582: a2 = reverse a2\n 26584: a3 = u64 [sp + 0x10]\n 26587: a3 = reverse a3\n 26589: a4 = u64 [sp + 0x18]\n 26592: a4 = reverse a4\n 26594: a5 = a4 >> 0x38\n 26597: u8 [a0 + 0x1f] = a5\n 26600: a5 = a4 >> 0x30\n 26603: u8 [a0 + 0x1e] = a5\n 26606: a5 = a4 >> 0x28\n 26609: u8 [a0 + 0x1d] = a5\n 26612: a5 = a4 >> 0x20\n 26615: u8 [a0 + 0x1c] = a5\n 26618: a5 = a4 >> 0x18\n 26621: u8 [a0 + 0x1b] = a5\n 26624: a5 = a4 >> 0x10\n 26627: u8 [a0 + 0x1a] = a5\n 26630: a5 = a4 >> 0x8\n 26633: u8 [a0 + 0x19] = a5\n 26636: u8 [a0 + 0x18] = a4\n 26639: u8 [a0 + 0x10] = a3\n 26642: a4 = a3 >> 0x38\n 26645: u8 [a0 + 0x17] = a4\n 26648: a4 = a3 >> 0x30\n 26651: u8 [a0 + 0x16] = a4\n 26654: a4 = a3 >> 0x28\n 26657: u8 [a0 + 0x15] = a4\n 26660: a4 = a3 >> 0x20\n 26663: u8 [a0 + 0x14] = a4\n 26666: a4 = a3 >> 0x18\n 26669: u8 [a0 + 0x13] = a4\n 26672: a4 = a3 >> 0x10\n 26675: u8 [a0 + 0x12] = a4\n 26678: a3 = a3 >> 0x8\n 26681: u8 [a0 + 0x11] = a3\n 26684: u8 [a0 + 0x8] = a2\n 26687: a3 = a2 >> 0x38\n 26690: u8 [a0 + 0xf] = a3\n 26693: a3 = a2 >> 0x30\n 26696: u8 [a0 + 0xe] = a3\n 26699: a3 = a2 >> 0x28\n 26702: u8 [a0 + 0xd] = a3\n 26705: a3 = a2 >> 0x20\n 26708: u8 [a0 + 0xc] = a3\n 26711: a3 = a2 >> 0x18\n 26714: u8 [a0 + 0xb] = a3\n 26717: a3 = a2 >> 0x10\n 26720: u8 [a0 + 0xa] = a3\n 26723: a2 = a2 >> 0x8\n 26726: u8 [a0 + 0x9] = a2\n 26729: u8 [a0] = a1\n 26731: a2 = a1 >> 0x38\n 26734: u8 [a0 + 0x7] = a2\n 26737: a2 = a1 >> 0x30\n 26740: u8 [a0 + 0x6] = a2\n 26743: a2 = a1 >> 0x28\n 26746: u8 [a0 + 0x5] = a2\n 26749: a2 = a1 >> 0x20\n 26752: u8 [a0 + 0x4] = a2\n 26755: a2 = a1 >> 0x18\n 26758: u8 [a0 + 0x3] = a2\n 26761: a2 = a1 >> 0x10\n 26764: u8 [a0 + 0x2] = a2\n 26767: a1 = a1 >> 0x8\n 26770: u8 [a0 + 0x1] = a1\n 26773: a1 = 0x20\n 26776: a0 = s1\n 26778: ra = 402, jump @0\n      : @464 [@dyn 201] (gas: 6)\n 26784: i32 a1 = a0 + 0\n 26786: a2 = 0x20\n 26789: a0 = 0\n 26791: ra = 0x194\n 26795: ecalli 10 // 'seal_return'\n 26797: fallthrough\n      : @465 [@dyn 202] (gas: 9)\n 26798: a2 = u64 [a1 + 0x18]\n 26801: a3 = u64 [a1 + 0x10]\n 26804: a4 = u64 [a1 + 0x8]\n 26807: a1 = u64 [a1]\n 26809: u64 [a0 + 0x18] = a2\n 26812: u64 [a0 + 0x10] = a3\n 26815: u64 [a0 + 0x8] = a4\n 26818: u64 [a0] = a1\n 26820: ret\n      : @466 (gas: 39)\n 26822: sp = sp + 0xfffffffffffffea0\n 26826: u64 [sp + 0x158] = ra\n 26830: u64 [sp + 0x150] = s0\n 26834: u64 [sp + 0x148] = s1\n 26838: s0 = sp + 0x160\n 26842: sp = sp & 0xffffffffffffffe0\n 26845: u64 [sp + 0x8] = a0\n 26848: a0 = u64 [a2 + 0x18]\n 26851: u64 [sp + 0xb0] = a0\n 26855: a0 = u64 [a2 + 0x10]\n 26858: u64 [sp + 0xa8] = a0\n 26862: a0 = u64 [a2 + 0x8]\n 26865: u64 [sp + 0xa0] = a0\n 26869: a0 = u64 [a2]\n 26871: u64 [sp + 0xb8] = a0\n 26875: a4 = u64 [a1 + 0x18]\n 26878: a3 = u64 [a1 + 0x10]\n 26881: a2 = u64 [a1 + 0x8]\n 26884: a0 = u64 [a1]\n 26886: u64 [sp + 0x18] = a4\n 26889: u64 [sp + 0x118] = a4\n 26893: u64 [sp + 0x20] = a3\n 26896: u64 [sp + 0x110] = a3\n 26900: u64 [sp + 0x68] = a2\n 26903: u64 [sp + 0x108] = a2\n 26907: u64 [sp + 0x70] = a0\n 26910: u64 [sp + 0x100] = a0\n 26914: u64 [sp + 312] = 0\n 26918: u64 [sp + 304] = 0\n 26922: u64 [sp + 296] = 0\n 26926: u64 [sp + 288] = 0\n 26930: u32 [sp + 320] = 0x20\n 26935: i32 a1 = sp + 0x100\n 26939: i32 a3 = sp + 0x120\n 26943: i32 a4 = sp + 0x140\n 26947: a2 = 0xffffffffffffffff\n 26950: a0 = 0\n 26952: ecalli 7 // 'get_storage'\n 26954: fallthrough\n      : @467 (gas: 32)\n 26955: t0 = u64 [sp + 0x130]\n 26959: t1 = u64 [sp + 0x128]\n 26963: t2 = u64 [sp + 0x138]\n 26967: a5 = u64 [sp + 0x120]\n 26971: a0 = t0 << 0x3f\n 26974: a1 = t1 >> 0x1\n 26977: a0 = a0 | a1\n 26980: a1 = t2 << 0x3f\n 26983: a2 = t0 >> 0x1\n 26986: a1 = a1 | a2\n 26989: a2 = t1 << 0x3f\n 26992: a3 = a5 >> 0x1\n 26995: a4 = a3 | a2\n 26998: a2 = t2 >> 0x1\n 27001: u64 [sp + 0x78] = a5\n 27004: a5 = a5 & 0x1\n 27007: a3 = -a5\n 27009: ra = a4 & 0x7f\n 27012: a1 = a1 & a3\n 27015: s1 = a3 & a0\n 27018: a4 = ra if a5 == 0\n 27021: a2 = a2 & a3\n 27024: u64 [sp + 0x58] = a4\n 27027: a0 = a4 <u 0x20\n 27030: u64 [sp + 0x48] = s1\n 27033: a0 = 0 if s1 != 0\n 27035: u64 [sp + 0x50] = a1\n 27038: u64 [sp + 0x40] = a2\n 27041: a1 = a1 | a2\n 27044: a0 = 0 if a1 != 0\n 27046: a1 = a5 <u 0x1\n 27049: jump @486 if a1 != a0\n      : @468 (gas: 17)\n 27053: u64 [sp + 0x98] = a5\n 27057: u64 [sp + 0x10] = ra\n 27060: u64 [sp + 0x80] = t1\n 27064: u64 [sp + 0x88] = t0\n 27068: u64 [sp + 0x90] = t2\n 27072: a0 = u64 [sp + 0xb8]\n 27076: a2 = u64 [sp + 0xa8]\n 27080: a0 = a0 | a2\n 27083: a1 = u64 [sp + 0xb0]\n 27087: a3 = u64 [sp + 0xa0]\n 27091: a1 = a1 | a3\n 27094: a0 = a0 | a1\n 27097: a0 = a0 >> 0x20\n 27100: a1 = a1 | a2\n 27103: a1 = a1 << 0x20\n 27106: a0 = a0 | a1\n 27109: jump @485 if a0 != 0\n      : @469 (gas: 4)\n 27113: s1 = u64 [sp + 0xb8]\n 27117: i32 a0 = s1 + 0\n 27119: a1 = 0x20\n 27122: ra = 406, jump @0\n      : @470 [@dyn 203] (gas: 85)\n 27128: a1 = u64 [sp + 0x40]\n 27131: a1 = reverse a1\n 27133: a2 = u64 [sp + 0x58]\n 27136: a2 = reverse a2\n 27138: a3 = a2 >> 0x38\n 27141: u8 [a0 + 0x1f] = a3\n 27144: a3 = a2 >> 0x30\n 27147: u8 [a0 + 0x1e] = a3\n 27150: a3 = a2 >> 0x28\n 27153: u8 [a0 + 0x1d] = a3\n 27156: a3 = a2 >> 0x20\n 27159: u8 [a0 + 0x1c] = a3\n 27162: a3 = a2 >> 0x18\n 27165: u8 [a0 + 0x1b] = a3\n 27168: a3 = a2 >> 0x10\n 27171: u8 [a0 + 0x1a] = a3\n 27174: a3 = a2 >> 0x8\n 27177: u8 [a0 + 0x19] = a3\n 27180: a3 = u64 [sp + 0x48]\n 27183: a3 = reverse a3\n 27185: u8 [a0 + 0x18] = a2\n 27188: a2 = a3 >> 0x38\n 27191: u8 [a0 + 0x17] = a2\n 27194: a2 = a3 >> 0x30\n 27197: u8 [a0 + 0x16] = a2\n 27200: a2 = a3 >> 0x28\n 27203: u8 [a0 + 0x15] = a2\n 27206: a2 = a3 >> 0x20\n 27209: u8 [a0 + 0x14] = a2\n 27212: a2 = a3 >> 0x18\n 27215: u8 [a0 + 0x13] = a2\n 27218: a2 = a3 >> 0x10\n 27221: u8 [a0 + 0x12] = a2\n 27224: a2 = u64 [sp + 0x50]\n 27227: a2 = reverse a2\n 27229: u8 [a0 + 0x10] = a3\n 27232: a3 = a3 >> 0x8\n 27235: u8 [a0 + 0x11] = a3\n 27238: u8 [a0 + 0x8] = a2\n 27241: a3 = a2 >> 0x38\n 27244: u8 [a0 + 0xf] = a3\n 27247: a3 = a2 >> 0x30\n 27250: u8 [a0 + 0xe] = a3\n 27253: a3 = a2 >> 0x28\n 27256: u8 [a0 + 0xd] = a3\n 27259: a3 = a2 >> 0x20\n 27262: u8 [a0 + 0xc] = a3\n 27265: a3 = a2 >> 0x18\n 27268: u8 [a0 + 0xb] = a3\n 27271: a3 = a2 >> 0x10\n 27274: u8 [a0 + 0xa] = a3\n 27277: a2 = a2 >> 0x8\n 27280: u8 [a0 + 0x9] = a2\n 27283: u8 [a0] = a1\n 27285: a2 = a1 >> 0x38\n 27288: u8 [a0 + 0x7] = a2\n 27291: a2 = a1 >> 0x30\n 27294: u8 [a0 + 0x6] = a2\n 27297: a2 = a1 >> 0x28\n 27300: u8 [a0 + 0x5] = a2\n 27303: a2 = a1 >> 0x20\n 27306: u8 [a0 + 0x4] = a2\n 27309: a2 = a1 >> 0x18\n 27312: u8 [a0 + 0x3] = a2\n 27315: a2 = a1 >> 0x10\n 27318: u8 [a0 + 0x2] = a2\n 27321: a1 = a1 >> 0x8\n 27324: u8 [a0 + 0x1] = a1\n 27327: a0 = s1 + 0x20\n 27330: u64 [sp + 0x60] = a0\n 27333: a0 = a0 <u s1\n 27336: a3 = u64 [sp + 0xa0]\n 27340: a1 = a3 + a0\n 27343: u64 [sp + 0x28] = a1\n 27346: a1 = a1 <u a3\n 27349: a1 = a0 if a0 == 0\n 27352: a0 = u64 [sp + 0xa8]\n 27356: a1 = a1 + a0\n 27359: u64 [sp + 0x30] = a1\n 27362: a0 = a1 <u a0\n 27365: a1 = u64 [sp + 0xb0]\n 27369: a0 = a0 + a1\n 27372: u64 [sp + 0x38] = a0\n 27375: a0 = u64 [sp + 0x98]\n 27379: jump @474 if a0 != 0\n      : @471 (gas: 9)\n 27383: a0 = u64 [sp + 0xb0]\n 27387: a1 = u64 [sp + 0xa8]\n 27391: a0 = a0 | a1\n 27394: a1 = 0xffffffe0\n 27404: a2 = u64 [sp + 0xb8]\n 27408: a1 = a2 <u a1\n 27411: a1 = 0 if a3 != 0\n 27413: a1 = 0 if a0 != 0\n 27415: jump @485 if a1 == 0\n      : @472 (gas: 5)\n 27419: a0 = u64 [sp + 0x78]\n 27422: s1 = a0 & 0xffffffffffffff00\n 27426: a0 = i32 [sp + 0x60]\n 27429: a1 = 0x20\n 27432: ra = 408, jump @0\n      : @473 [@dyn 204] (gas: 73)\n 27438: t0 = 0\n 27440: t1 = 0\n 27442: u64 [sp + 176] = 0\n 27446: a3 = reverse s1\n 27448: a4 = a3 >> 0x30\n 27451: u8 [a0 + 0x1e] = a4\n 27454: a4 = a3 >> 0x28\n 27457: u8 [a0 + 0x1d] = a4\n 27460: a4 = a3 >> 0x20\n 27463: u8 [a0 + 0x1c] = a4\n 27466: a4 = a3 >> 0x18\n 27469: u8 [a0 + 0x1b] = a4\n 27472: a4 = a3 >> 0x10\n 27475: u8 [a0 + 0x1a] = a4\n 27478: a1 = u64 [sp + 0x80]\n 27482: a4 = reverse a1\n 27484: u8 [a0 + 0x18] = a3\n 27487: a3 = a3 >> 0x8\n 27490: u8 [a0 + 0x19] = a3\n 27493: a3 = a4 >> 0x38\n 27496: u8 [a0 + 0x17] = a3\n 27499: a3 = a4 >> 0x30\n 27502: u8 [a0 + 0x16] = a3\n 27505: a3 = a4 >> 0x28\n 27508: u8 [a0 + 0x15] = a3\n 27511: a3 = a4 >> 0x20\n 27514: u8 [a0 + 0x14] = a3\n 27517: a3 = a4 >> 0x18\n 27520: u8 [a0 + 0x13] = a3\n 27523: a3 = a4 >> 0x10\n 27526: u8 [a0 + 0x12] = a3\n 27529: a1 = u64 [sp + 0x88]\n 27533: a3 = reverse a1\n 27535: u8 [a0 + 0x10] = a4\n 27538: a4 = a4 >> 0x8\n 27541: u8 [a0 + 0x11] = a4\n 27544: a4 = a3 >> 0x38\n 27547: u8 [a0 + 0xf] = a4\n 27550: a4 = a3 >> 0x30\n 27553: u8 [a0 + 0xe] = a4\n 27556: a4 = a3 >> 0x28\n 27559: u8 [a0 + 0xd] = a4\n 27562: a4 = a3 >> 0x20\n 27565: u8 [a0 + 0xc] = a4\n 27568: a4 = a3 >> 0x18\n 27571: u8 [a0 + 0xb] = a4\n 27574: a4 = a3 >> 0x10\n 27577: u8 [a0 + 0xa] = a4\n 27580: a1 = u64 [sp + 0x90]\n 27584: a4 = reverse a1\n 27586: u8 [a0 + 31] = 0\n 27589: u8 [a0 + 0x8] = a3\n 27592: a3 = a3 >> 0x8\n 27595: u8 [a0 + 0x9] = a3\n 27598: u8 [a0] = a4\n 27600: a3 = a4 >> 0x38\n 27603: u8 [a0 + 0x7] = a3\n 27606: a3 = a4 >> 0x30\n 27609: u8 [a0 + 0x6] = a3\n 27612: a3 = a4 >> 0x28\n 27615: u8 [a0 + 0x5] = a3\n 27618: a3 = a4 >> 0x20\n 27621: u8 [a0 + 0x4] = a3\n 27624: a3 = a4 >> 0x18\n 27627: u8 [a0 + 0x3] = a3\n 27630: a3 = a4 >> 0x10\n 27633: u8 [a0 + 0x2] = a3\n 27636: a4 = a4 >> 0x8\n 27639: u8 [a0 + 0x1] = a4\n 27642: a0 = u64 [sp + 0x10]\n 27645: a0 = a0 >u 0\n 27647: ra = a0 << 0x5\n 27650: jump @484\n      : @474 (gas: 3)\n 27653: a1 = 0x20\n 27656: a0 = 0\n 27658: ra = 410, jump @0\n      : @475 [@dyn 205] (gas: 71)\n 27664: a1 = u64 [sp + 0x18]\n 27667: a1 = reverse a1\n 27669: a2 = u64 [sp + 0x20]\n 27672: a2 = reverse a2\n 27674: a3 = u64 [sp + 0x68]\n 27677: a3 = reverse a3\n 27679: a4 = u64 [sp + 0x70]\n 27682: a4 = reverse a4\n 27684: a5 = a4 >> 0x38\n 27687: u8 [a0 + 0x1f] = a5\n 27690: a5 = a4 >> 0x30\n 27693: u8 [a0 + 0x1e] = a5\n 27696: a5 = a4 >> 0x28\n 27699: u8 [a0 + 0x1d] = a5\n 27702: a5 = a4 >> 0x20\n 27705: u8 [a0 + 0x1c] = a5\n 27708: a5 = a4 >> 0x18\n 27711: u8 [a0 + 0x1b] = a5\n 27714: a5 = a4 >> 0x10\n 27717: u8 [a0 + 0x1a] = a5\n 27720: a5 = a4 >> 0x8\n 27723: u8 [a0 + 0x19] = a5\n 27726: u8 [a0 + 0x18] = a4\n 27729: u8 [a0 + 0x10] = a3\n 27732: a4 = a3 >> 0x38\n 27735: u8 [a0 + 0x17] = a4\n 27738: a4 = a3 >> 0x30\n 27741: u8 [a0 + 0x16] = a4\n 27744: a4 = a3 >> 0x28\n 27747: u8 [a0 + 0x15] = a4\n 27750: a4 = a3 >> 0x20\n 27753: u8 [a0 + 0x14] = a4\n 27756: a4 = a3 >> 0x18\n 27759: u8 [a0 + 0x13] = a4\n 27762: a4 = a3 >> 0x10\n 27765: u8 [a0 + 0x12] = a4\n 27768: a3 = a3 >> 0x8\n 27771: u8 [a0 + 0x11] = a3\n 27774: u8 [a0 + 0x8] = a2\n 27777: a3 = a2 >> 0x38\n 27780: u8 [a0 + 0xf] = a3\n 27783: a3 = a2 >> 0x30\n 27786: u8 [a0 + 0xe] = a3\n 27789: a3 = a2 >> 0x28\n 27792: u8 [a0 + 0xd] = a3\n 27795: a3 = a2 >> 0x20\n 27798: u8 [a0 + 0xc] = a3\n 27801: a3 = a2 >> 0x18\n 27804: u8 [a0 + 0xb] = a3\n 27807: a3 = a2 >> 0x10\n 27810: u8 [a0 + 0xa] = a3\n 27813: a2 = a2 >> 0x8\n 27816: u8 [a0 + 0x9] = a2\n 27819: u8 [a0] = a1\n 27821: a2 = a1 >> 0x38\n 27824: u8 [a0 + 0x7] = a2\n 27827: a2 = a1 >> 0x30\n 27830: u8 [a0 + 0x6] = a2\n 27833: a2 = a1 >> 0x28\n 27836: u8 [a0 + 0x5] = a2\n 27839: a2 = a1 >> 0x20\n 27842: u8 [a0 + 0x4] = a2\n 27845: a2 = a1 >> 0x18\n 27848: u8 [a0 + 0x3] = a2\n 27851: a2 = a1 >> 0x10\n 27854: u8 [a0 + 0x2] = a2\n 27857: a1 = a1 >> 0x8\n 27860: u8 [a0 + 0x1] = a1\n 27863: a1 = 0x20\n 27866: a0 = 0\n 27868: ra = 412, jump @0\n      : @476 [@dyn 206] (gas: 5)\n 27874: i32 a0 = a0 + 0\n 27876: i32 a2 = sp + 0x120\n 27880: a1 = 0x20\n 27883: ecalli 8 // 'hash_keccak_256'\n 27885: fallthrough\n      : @477 (gas: 9)\n 27886: a0 = u64 [sp + 0x78]\n 27889: a0 = a0 <u 0x2\n 27892: a1 = u64 [sp + 0x80]\n 27896: a0 = 0 if a1 != 0\n 27898: a1 = u64 [sp + 0x90]\n 27902: a2 = u64 [sp + 0x88]\n 27906: a1 = a1 | a2\n 27909: a0 = 0 if a1 != 0\n 27911: jump @479 if a0 == 0\n      : @478 (gas: 5)\n 27914: ra = 0\n 27916: t0 = 0\n 27918: t1 = 0\n 27920: u64 [sp + 176] = 0\n 27924: jump @484\n      : @479 (gas: 19)\n 27927: u64 [sp + 168] = 0\n 27931: u64 [sp + 160] = 0\n 27935: s1 = 0\n 27937: u64 [sp + 176] = 0\n 27941: a0 = u64 [sp + 0x120]\n 27945: a1 = u64 [sp + 0x128]\n 27949: a2 = u64 [sp + 0x130]\n 27953: a3 = u64 [sp + 0x138]\n 27957: a0 = reverse a0\n 27959: a5 = reverse a1\n 27961: a1 = reverse a2\n 27963: t2 = reverse a3\n 27965: i32 a3 = sp + 0x100\n 27969: u64 [sp + 0x20] = a3\n 27972: i32 a3 = sp + 0x120\n 27976: u64 [sp + 0x18] = a3\n 27979: i32 a3 = sp + 0x140\n 27983: u64 [sp + 0x10] = a3\n 27986: fallthrough\n      : @480 (gas: 20)\n 27987: u64 [sp + 0x88] = a5\n 27991: u64 [sp + 0x110] = a5\n 27995: u64 [sp + 0xb8] = a1\n 27999: u64 [sp + 0x108] = a1\n 28003: u64 [sp + 0x90] = t2\n 28007: u64 [sp + 0x100] = t2\n 28011: u64 [sp + 0x98] = a0\n 28015: u64 [sp + 0x118] = a0\n 28019: u64 [sp + 312] = 0\n 28023: u64 [sp + 304] = 0\n 28027: u64 [sp + 296] = 0\n 28031: u64 [sp + 288] = 0\n 28035: u32 [sp + 320] = 0x20\n 28040: a2 = 0xffffffffffffffff\n 28043: a0 = 0\n 28045: a1 = u64 [sp + 0x20]\n 28048: a3 = u64 [sp + 0x18]\n 28051: a4 = u64 [sp + 0x10]\n 28054: ecalli 7 // 'get_storage'\n 28056: fallthrough\n      : @481 (gas: 30)\n 28057: a0 = u64 [sp + 0x60]\n 28060: a1 = u64 [sp + 0xa8]\n 28064: a0 = a0 + a1\n 28067: a1 = a0 <u a1\n 28070: a2 = u64 [sp + 0x28]\n 28073: a4 = u64 [sp + 0xa0]\n 28077: a2 = a2 + a4\n 28080: a2 = a2 + a1\n 28083: a3 = a2 ^ a4\n 28086: a4 = a2 <u a4\n 28089: a4 = a1 if a3 == 0\n 28092: a1 = u64 [sp + 0x30]\n 28095: a1 = a1 + s1\n 28098: u64 [sp + 0x80] = s1\n 28102: a3 = a1 <u s1\n 28105: a5 = u64 [sp + 0x38]\n 28108: s1 = u64 [sp + 0xb0]\n 28112: a5 = a5 + s1\n 28115: a3 = a3 + a5\n 28118: a4 = a4 + a1\n 28121: a1 = a4 <u a1\n 28124: a1 = a1 + a3\n 28127: a1 = a1 | a2\n 28130: a2 = a0 | a4\n 28133: a2 = a2 | a1\n 28136: a1 = a1 | a4\n 28139: a2 = a2 >> 0x20\n 28142: a1 = a1 << 0x20\n 28145: a1 = a1 | a2\n 28148: jump @485 if a1 != 0\n      : @482 (gas: 10)\n 28152: a1 = u64 [sp + 0x138]\n 28156: u64 [sp + 0x70] = a1\n 28159: a1 = u64 [sp + 0x130]\n 28163: u64 [sp + 0x78] = a1\n 28166: a1 = u64 [sp + 0x128]\n 28170: u64 [sp + 0x68] = a1\n 28173: s1 = u64 [sp + 0x120]\n 28177: i32 a0 = a0 + 0\n 28179: a1 = 0x20\n 28182: ra = 414, jump @0\n      : @483 [@dyn 207] (gas: 115)\n 28188: a1 = reverse s1\n 28190: a2 = a1 >> 0x38\n 28193: u8 [a0 + 0x1f] = a2\n 28196: a2 = a1 >> 0x30\n 28199: u8 [a0 + 0x1e] = a2\n 28202: a2 = a1 >> 0x28\n 28205: u8 [a0 + 0x1d] = a2\n 28208: a2 = a1 >> 0x20\n 28211: u8 [a0 + 0x1c] = a2\n 28214: a2 = a1 >> 0x18\n 28217: u8 [a0 + 0x1b] = a2\n 28220: a2 = a1 >> 0x10\n 28223: u8 [a0 + 0x1a] = a2\n 28226: a2 = a1 >> 0x8\n 28229: u8 [a0 + 0x19] = a2\n 28232: a2 = u64 [sp + 0x68]\n 28235: a2 = reverse a2\n 28237: u8 [a0 + 0x18] = a1\n 28240: a1 = a2 >> 0x38\n 28243: u8 [a0 + 0x17] = a1\n 28246: a1 = a2 >> 0x30\n 28249: u8 [a0 + 0x16] = a1\n 28252: a1 = a2 >> 0x28\n 28255: u8 [a0 + 0x15] = a1\n 28258: a1 = a2 >> 0x20\n 28261: u8 [a0 + 0x14] = a1\n 28264: a1 = a2 >> 0x18\n 28267: u8 [a0 + 0x13] = a1\n 28270: a1 = a2 >> 0x10\n 28273: u8 [a0 + 0x12] = a1\n 28276: a1 = u64 [sp + 0x70]\n 28279: a1 = reverse a1\n 28281: a3 = u64 [sp + 0x78]\n 28284: a3 = reverse a3\n 28286: u8 [a0 + 0x10] = a2\n 28289: a2 = a2 >> 0x8\n 28292: u8 [a0 + 0x11] = a2\n 28295: u8 [a0 + 0x8] = a3\n 28298: a2 = a3 >> 0x38\n 28301: u8 [a0 + 0xf] = a2\n 28304: a2 = a3 >> 0x30\n 28307: u8 [a0 + 0xe] = a2\n 28310: a2 = a3 >> 0x28\n 28313: u8 [a0 + 0xd] = a2\n 28316: a2 = a3 >> 0x20\n 28319: u8 [a0 + 0xc] = a2\n 28322: a2 = a3 >> 0x18\n 28325: u8 [a0 + 0xb] = a2\n 28328: a2 = a3 >> 0x10\n 28331: u8 [a0 + 0xa] = a2\n 28334: a3 = a3 >> 0x8\n 28337: u8 [a0 + 0x9] = a3\n 28340: u8 [a0] = a1\n 28342: a2 = a1 >> 0x38\n 28345: u8 [a0 + 0x7] = a2\n 28348: a2 = a1 >> 0x30\n 28351: u8 [a0 + 0x6] = a2\n 28354: a2 = a1 >> 0x28\n 28357: u8 [a0 + 0x5] = a2\n 28360: a2 = a1 >> 0x20\n 28363: u8 [a0 + 0x4] = a2\n 28366: a2 = a1 >> 0x18\n 28369: u8 [a0 + 0x3] = a2\n 28372: a2 = a1 >> 0x10\n 28375: u8 [a0 + 0x2] = a2\n 28378: a1 = a1 >> 0x8\n 28381: u8 [a0 + 0x1] = a1\n 28384: t2 = u64 [sp + 0x90]\n 28388: t2 = t2 + 0x1\n 28391: a0 = t2 <u 0x1\n 28394: a1 = u64 [sp + 0xb8]\n 28398: a1 = a1 + a0\n 28401: u64 [sp + 0xb8] = a1\n 28405: a0 = u64 [sp + 0xa8]\n 28409: ra = a0 + 0x20\n 28412: a2 = ra <u a0\n 28415: a0 = u64 [sp + 0xa0]\n 28419: t0 = a0 + a2\n 28422: a3 = t0 <u a0\n 28425: a3 = a2 if a2 == 0\n 28428: a0 = u64 [sp + 0x80]\n 28432: t1 = a0 + a3\n 28435: a3 = t1 <u a0\n 28438: a5 = u64 [sp + 0xb0]\n 28442: a5 = a5 + a3\n 28445: a1 = u64 [sp + 0x50]\n 28448: a0 = t1 <u a1\n 28451: u64 [sp + 0xa8] = a0\n 28455: a2 = u64 [sp + 0x58]\n 28458: a4 = ra <u a2\n 28461: a2 = u64 [sp + 0x48]\n 28464: s1 = t0 ^ a2\n 28467: a3 = t0 <u a2\n 28470: a3 = a4 if s1 == 0\n 28473: a2 = u64 [sp + 0x40]\n 28476: a0 = a5 ^ a2\n 28479: u64 [sp + 0xb0] = a5\n 28483: s1 = a5 <u a2\n 28486: a2 = u64 [sp + 0xa8]\n 28490: s1 = a2 if a0 == 0\n 28493: a4 = t1 ^ a1\n 28496: a1 = u64 [sp + 0xb8]\n 28500: a0 = a0 | a4\n 28503: a5 = t2 | a1\n 28506: a5 = a5 <u 0x1\n 28509: a4 = u64 [sp + 0x88]\n 28513: a5 = a5 + a4\n 28516: a4 = a5 <u a4\n 28519: a3 = s1 if a0 != 0\n 28522: a0 = u64 [sp + 0x98]\n 28526: a0 = a0 + a4\n 28529: u64 [sp + 0xa8] = ra\n 28533: u64 [sp + 0xa0] = t0\n 28537: s1 = t1\n 28539: jump @480 if a3 != 0\n      : @484 (gas: 30)\n 28543: a3 = u64 [sp + 0x60]\n 28546: a3 = a3 + ra\n 28549: a0 = a3 <u ra\n 28552: a4 = u64 [sp + 0x28]\n 28555: a4 = a4 + t0\n 28558: a4 = a4 + a0\n 28561: a5 = a4 ^ t0\n 28564: a1 = a4 <u t0\n 28567: a1 = a0 if a5 == 0\n 28570: a0 = u64 [sp + 0x30]\n 28573: a0 = a0 + t1\n 28576: a1 = a1 + a0\n 28579: a5 = a1 <u a0\n 28582: a0 = a0 <u t1\n 28585: a2 = u64 [sp + 0x38]\n 28588: s1 = u64 [sp + 0xb0]\n 28592: a2 = a2 + s1\n 28595: a0 = a0 + a2\n 28598: a0 = a0 + a5\n 28601: a2 = u64 [sp + 0x8]\n 28604: u64 [a2] = a3\n 28606: u64 [a2 + 0x8] = a4\n 28609: u64 [a2 + 0x10] = a1\n 28612: u64 [a2 + 0x18] = a0\n 28615: sp = s0 + 0xfffffffffffffea0\n 28619: ra = u64 [sp + 0x158]\n 28623: s0 = u64 [sp + 0x150]\n 28627: s1 = u64 [sp + 0x148]\n 28631: sp = sp + 0x160\n 28635: ret\n      : @485 (gas: 1)\n 28637: trap\n      : @486 (gas: 8)\n 28638: u64 [sp + 240] = 0\n 28642: u64 [sp + 232] = 0\n 28646: u64 [sp + 224] = 0\n 28650: a0 = 0x4e487b7100000000\n 28660: a1 = sp + 0xe0\n 28664: u64 [sp + 0xf8] = a0\n 28668: a0 = 0\n 28670: ra = 416, jump @23\n      : @487 [@dyn 208] (gas: 7)\n 28676: u64 [sp + 216] = 0\n 28680: u64 [sp + 208] = 0\n 28684: u64 [sp + 192] = 0x22\n 28689: a0 = 0x4\n 28692: a1 = sp + 0xc0\n 28696: u64 [sp + 200] = 0\n 28700: ra = 418, jump @23\n      : @488 [@dyn 209] (gas: 3)\n 28706: a1 = 0x24\n 28709: a0 = 0\n 28711: ra = 420, jump @0\n      : @489 [@dyn 210] (gas: 6)\n 28717: i32 a1 = a0 + 0\n 28719: a0 = 0x1\n 28722: a2 = 0x24\n 28725: ra = 0x1a6\n 28729: ecalli 10 // 'seal_return'\n 28731: fallthrough\n      : @490 [@dyn 211] (gas: 27)\n 28732: sp = sp + 0xffffffffffffff80\n 28735: u64 [sp + 0x78] = ra\n 28738: u64 [sp + 0x70] = s0\n 28741: u64 [sp + 0x68] = s1\n 28744: s0 = sp + 0x80\n 28748: sp = sp & 0xfffffffffffffff0\n 28751: t0 = u64 [a1]\n 28753: t1 = u64 [a1 + 0x8]\n 28756: t2 = u64 [a1 + 0x10]\n 28759: a1 = u64 [a1 + 0x18]\n 28762: a3 = u64 [a2]\n 28764: a4 = u64 [a2 + 0x8]\n 28767: a5 = u64 [a2 + 0x10]\n 28770: a2 = u64 [a2 + 0x18]\n 28773: s1 = a0\n 28775: u64 [sp + 0x18] = a2\n 28778: u64 [sp + 0x10] = a5\n 28781: u64 [sp + 0x8] = a4\n 28784: u64 [sp] = a3\n 28786: u64 [sp + 0x38] = a1\n 28789: u64 [sp + 0x30] = t2\n 28792: u64 [sp + 0x28] = t1\n 28795: a0 = sp + 0x40\n 28798: a1 = sp + 0x20\n 28801: a2 = sp\n 28803: u64 [sp + 0x20] = t0\n 28806: ra = 424, jump @466\n      : @491 [@dyn 212] (gas: 14)\n 28812: a0 = u64 [sp + 0x50]\n 28815: a1 = u64 [sp + 0x58]\n 28818: a2 = u64 [sp + 0x40]\n 28821: a3 = u64 [sp + 0x48]\n 28824: u64 [s1 + 0x10] = a0\n 28827: u64 [s1 + 0x18] = a1\n 28830: u64 [s1] = a2\n 28832: u64 [s1 + 0x8] = a3\n 28835: sp = s0 + 0xffffffffffffff80\n 28838: ra = u64 [sp + 0x78]\n 28841: s0 = u64 [sp + 0x70]\n 28844: s1 = u64 [sp + 0x68]\n 28847: sp = sp + 0x80\n 28851: ret\n      : @492 (gas: 18)\n 28853: sp = sp + 0xffffffffffffff00\n 28857: u64 [sp + 0xf8] = ra\n 28861: u64 [sp + 0xf0] = s0\n 28865: u64 [sp + 0xe8] = s1\n 28869: s0 = sp + 0x100\n 28873: sp = sp & 0xfffffffffffffff0\n 28876: a2 = u64 [a1]\n 28878: u64 [sp + 0x20] = a2\n 28881: a2 = u64 [a1 + 0x8]\n 28884: u64 [sp + 0x10] = a2\n 28887: a2 = u64 [a1 + 0x10]\n 28890: u64 [sp + 0x8] = a2\n 28893: a1 = u64 [a1 + 0x18]\n 28896: u64 [sp] = a1\n 28898: u64 [sp + 0x18] = a0\n 28901: a0 = 0x40\n 28904: a1 = 0x20\n 28907: ra = 426, jump @0\n      : @493 [@dyn 213] (gas: 111)\n 28913: a1 = u8 [a0 + 0x1]\n 28916: a2 = u8 [a0]\n 28918: a3 = u8 [a0 + 0x2]\n 28921: a4 = u8 [a0 + 0x3]\n 28924: a1 = a1 << 0x8\n 28927: a1 = a1 | a2\n 28930: a3 = a3 << 0x10\n 28933: a4 = a4 << 0x18\n 28936: a3 = a3 | a4\n 28939: a1 = a1 | a3\n 28942: a2 = u8 [a0 + 0x5]\n 28945: a3 = u8 [a0 + 0x4]\n 28948: a4 = u8 [a0 + 0x6]\n 28951: a5 = u8 [a0 + 0x7]\n 28954: a2 = a2 << 0x8\n 28957: a2 = a2 | a3\n 28960: a4 = a4 << 0x10\n 28963: a5 = a5 << 0x18\n 28966: a4 = a4 | a5\n 28969: a2 = a2 | a4\n 28972: a2 = a2 << 0x20\n 28975: t0 = a2 | a1\n 28978: a2 = u8 [a0 + 0x9]\n 28981: a3 = u8 [a0 + 0x8]\n 28984: a4 = u8 [a0 + 0xa]\n 28987: a5 = u8 [a0 + 0xb]\n 28990: a2 = a2 << 0x8\n 28993: a2 = a2 | a3\n 28996: a4 = a4 << 0x10\n 28999: a5 = a5 << 0x18\n 29002: a4 = a4 | a5\n 29005: a2 = a2 | a4\n 29008: a3 = u8 [a0 + 0xd]\n 29011: a4 = u8 [a0 + 0xc]\n 29014: a5 = u8 [a0 + 0xe]\n 29017: s1 = u8 [a0 + 0xf]\n 29020: a3 = a3 << 0x8\n 29023: a3 = a3 | a4\n 29026: a5 = a5 << 0x10\n 29029: s1 = s1 << 0x18\n 29032: a5 = a5 | s1\n 29035: a3 = a3 | a5\n 29038: a3 = a3 << 0x20\n 29041: a2 = a2 | a3\n 29044: a3 = u8 [a0 + 0x11]\n 29047: a4 = u8 [a0 + 0x10]\n 29050: a5 = u8 [a0 + 0x12]\n 29053: s1 = u8 [a0 + 0x13]\n 29056: a3 = a3 << 0x8\n 29059: a3 = a3 | a4\n 29062: a5 = a5 << 0x10\n 29065: s1 = s1 << 0x18\n 29068: a5 = a5 | s1\n 29071: a3 = a3 | a5\n 29074: a4 = u8 [a0 + 0x15]\n 29077: a5 = u8 [a0 + 0x14]\n 29080: s1 = u8 [a0 + 0x16]\n 29083: a1 = u8 [a0 + 0x17]\n 29086: a4 = a4 << 0x8\n 29089: a4 = a4 | a5\n 29092: s1 = s1 << 0x10\n 29095: a1 = a1 << 0x18\n 29098: a1 = a1 | s1\n 29101: a1 = a1 | a4\n 29104: a1 = a1 << 0x20\n 29107: a3 = a3 | a1\n 29110: a1 = u8 [a0 + 0x19]\n 29113: a4 = u8 [a0 + 0x18]\n 29116: a5 = u8 [a0 + 0x1a]\n 29119: s1 = u8 [a0 + 0x1b]\n 29122: a1 = a1 << 0x8\n 29125: a1 = a1 | a4\n 29128: a5 = a5 << 0x10\n 29131: s1 = s1 << 0x18\n 29134: a5 = a5 | s1\n 29137: a1 = a1 | a5\n 29140: a4 = u8 [a0 + 0x1d]\n 29143: a5 = u8 [a0 + 0x1c]\n 29146: s1 = u8 [a0 + 0x1e]\n 29149: a0 = u8 [a0 + 0x1f]\n 29152: a4 = a4 << 0x8\n 29155: a4 = a4 | a5\n 29158: s1 = s1 << 0x10\n 29161: a0 = a0 << 0x18\n 29164: a0 = a0 | s1\n 29167: a0 = a0 | a4\n 29170: a0 = a0 << 0x20\n 29173: a0 = a0 | a1\n 29176: a4 = reverse a0\n 29178: u64 [sp + 0x38] = a4\n 29181: s1 = reverse a3\n 29183: a2 = reverse a2\n 29185: u64 [sp + 0x30] = a2\n 29188: a1 = reverse t0\n 29190: u64 [sp + 0x28] = a1\n 29193: a0 = u64 [sp]\n 29195: u64 [sp + 0xb8] = a0\n 29199: a0 = u64 [sp + 0x8]\n 29202: u64 [sp + 0xb0] = a0\n 29206: a0 = u64 [sp + 0x10]\n 29209: u64 [sp + 0xa8] = a0\n 29213: a0 = u64 [sp + 0x20]\n 29216: u64 [sp + 0xa0] = a0\n 29220: u64 [sp + 0x98] = a1\n 29224: u64 [sp + 0x90] = a2\n 29228: u64 [sp + 0x88] = s1\n 29232: a0 = sp + 0xc0\n 29236: a1 = sp + 0xa0\n 29240: a2 = sp + 0x80\n 29244: u64 [sp + 0x80] = a4\n 29248: ra = 428, jump @466\n      : @494 [@dyn 214] (gas: 58)\n 29254: t2 = s1\n 29256: a3 = u64 [sp + 0xc8]\n 29260: a0 = u64 [sp + 0xd8]\n 29264: u64 [sp + 0x10] = a0\n 29267: a4 = u64 [sp + 0xc0]\n 29271: t1 = u64 [sp + 0xd0]\n 29275: a5 = a3 ^ s1\n 29278: a1 = a3 <u s1\n 29281: a2 = u64 [sp + 0x38]\n 29284: s1 = a4 <u a2\n 29287: a1 = s1 if a5 == 0\n 29290: a3 = a3 - t2\n 29293: a3 = a3 - s1\n 29296: u64 [sp + 0x8] = a3\n 29299: a4 = a4 - a2\n 29302: a5 = a4 + 0x1f\n 29305: a4 = a5 <u a4\n 29308: a3 = a3 + a4\n 29311: a5 = a5 & 0xffffffffffffffe0\n 29314: a0 = a3 + t2\n 29317: a2 = a2 + a5\n 29320: u64 [sp + 0x20] = a2\n 29323: a5 = a2 <u a5\n 29326: t0 = a0 + a5\n 29329: a0 = t0 ^ a3\n 29332: a2 = t0 <u a3\n 29335: a2 = a5 if a0 == 0\n 29338: s1 = u64 [sp + 0x30]\n 29341: a0 = t1 - s1\n 29344: a5 = t1 <u s1\n 29347: t1 = s1\n 29349: ra = u64 [sp + 0x28]\n 29352: s1 = u64 [sp + 0x10]\n 29355: s1 = s1 - ra\n 29358: s1 = s1 - a5\n 29361: a5 = a0 <u a1\n 29364: s1 = s1 - a5\n 29367: a0 = a0 - a1\n 29370: a1 = u64 [sp + 0x8]\n 29373: a1 = a3 <u a1\n 29376: a1 = a4 if a4 == 0\n 29379: a1 = a1 + a0\n 29382: a0 = a1 <u a0\n 29385: a3 = a1 + t1\n 29388: a5 = a3 + a2\n 29391: a1 = a3 <u a1\n 29394: a2 = a5 <u a3\n 29397: s1 = s1 + ra\n 29400: a0 = a0 + s1\n 29403: a0 = a0 + a1\n 29406: s1 = a0 + a2\n 29409: a0 = s1 >u 0\n 29411: a1 = a5 >u 0\n 29413: a1 = a0 if s1 != 0\n 29416: a0 = a5 | s1\n 29419: a2 = t0 >u 0\n 29421: a2 = a1 if a0 != 0\n 29424: jump @498 if a2 != 0\n      : @495 (gas: 15)\n 29428: a4 = t1\n 29430: a0 = u64 [sp + 0x38]\n 29433: a1 = u64 [sp + 0x20]\n 29436: a0 = a1 <u a0\n 29439: a1 = t0 ^ t2\n 29442: a2 = t0 <u t2\n 29445: a2 = a0 if a1 == 0\n 29448: a0 = a5 <u t1\n 29451: a1 = s1 ^ ra\n 29454: a3 = s1 <u ra\n 29457: a3 = a0 if a1 == 0\n 29460: a0 = a5 ^ t1\n 29463: a0 = a0 | a1\n 29466: a3 = a2 if a0 == 0\n 29469: jump @498 if a3 != 0\n      : @496 (gas: 6)\n 29473: a0 = 0x40\n 29476: a1 = 0x20\n 29479: u64 [sp + 0x10] = t2\n 29482: u64 [sp + 0x8] = t0\n 29485: u64 [sp] = a5\n 29487: ra = 430, jump @0\n      : @497 [@dyn 215] (gas: 82)\n 29493: a1 = reverse s1\n 29495: a2 = u64 [sp]\n 29497: a2 = reverse a2\n 29499: a3 = u64 [sp + 0x8]\n 29502: a3 = reverse a3\n 29504: a4 = u64 [sp + 0x20]\n 29507: a4 = reverse a4\n 29509: u8 [a0 + 0x18] = a4\n 29512: a5 = a4 >> 0x38\n 29515: u8 [a0 + 0x1f] = a5\n 29518: a5 = a4 >> 0x30\n 29521: u8 [a0 + 0x1e] = a5\n 29524: a5 = a4 >> 0x28\n 29527: u8 [a0 + 0x1d] = a5\n 29530: a5 = a4 >> 0x20\n 29533: u8 [a0 + 0x1c] = a5\n 29536: a5 = a4 >> 0x18\n 29539: u8 [a0 + 0x1b] = a5\n 29542: a5 = a4 >> 0x10\n 29545: u8 [a0 + 0x1a] = a5\n 29548: a4 = a4 >> 0x8\n 29551: u8 [a0 + 0x19] = a4\n 29554: u8 [a0 + 0x10] = a3\n 29557: a4 = a3 >> 0x38\n 29560: u8 [a0 + 0x17] = a4\n 29563: a4 = a3 >> 0x30\n 29566: u8 [a0 + 0x16] = a4\n 29569: a4 = a3 >> 0x28\n 29572: u8 [a0 + 0x15] = a4\n 29575: a4 = a3 >> 0x20\n 29578: u8 [a0 + 0x14] = a4\n 29581: a4 = a3 >> 0x18\n 29584: u8 [a0 + 0x13] = a4\n 29587: a4 = a3 >> 0x10\n 29590: u8 [a0 + 0x12] = a4\n 29593: a3 = a3 >> 0x8\n 29596: u8 [a0 + 0x11] = a3\n 29599: u8 [a0 + 0x8] = a2\n 29602: a3 = a2 >> 0x38\n 29605: u8 [a0 + 0xf] = a3\n 29608: a3 = a2 >> 0x30\n 29611: u8 [a0 + 0xe] = a3\n 29614: a3 = a2 >> 0x28\n 29617: u8 [a0 + 0xd] = a3\n 29620: a3 = a2 >> 0x20\n 29623: u8 [a0 + 0xc] = a3\n 29626: a3 = a2 >> 0x18\n 29629: u8 [a0 + 0xb] = a3\n 29632: a3 = a2 >> 0x10\n 29635: u8 [a0 + 0xa] = a3\n 29638: a2 = a2 >> 0x8\n 29641: u8 [a0 + 0x9] = a2\n 29644: u8 [a0] = a1\n 29646: a2 = a1 >> 0x38\n 29649: u8 [a0 + 0x7] = a2\n 29652: a2 = a1 >> 0x30\n 29655: u8 [a0 + 0x6] = a2\n 29658: a2 = a1 >> 0x28\n 29661: u8 [a0 + 0x5] = a2\n 29664: a2 = a1 >> 0x20\n 29667: u8 [a0 + 0x4] = a2\n 29670: a2 = a1 >> 0x18\n 29673: u8 [a0 + 0x3] = a2\n 29676: a2 = a1 >> 0x10\n 29679: u8 [a0 + 0x2] = a2\n 29682: a1 = a1 >> 0x8\n 29685: u8 [a0 + 0x1] = a1\n 29688: a0 = u64 [sp + 0x18]\n 29691: a1 = u64 [sp + 0x38]\n 29694: u64 [a0] = a1\n 29696: a1 = u64 [sp + 0x28]\n 29699: u64 [a0 + 0x18] = a1\n 29702: a1 = u64 [sp + 0x10]\n 29705: u64 [a0 + 0x8] = a1\n 29708: a1 = u64 [sp + 0x30]\n 29711: u64 [a0 + 0x10] = a1\n 29714: sp = s0 + 0xffffffffffffff00\n 29718: ra = u64 [sp + 0xf8]\n 29722: s0 = u64 [sp + 0xf0]\n 29726: s1 = u64 [sp + 0xe8]\n 29730: sp = sp + 0x100\n 29734: ret\n      : @498 (gas: 8)\n 29736: u64 [sp + 112] = 0\n 29739: u64 [sp + 104] = 0\n 29742: u64 [sp + 96] = 0\n 29745: a0 = 0x4e487b7100000000\n 29755: a1 = sp + 0x60\n 29758: u64 [sp + 0x78] = a0\n 29761: a0 = 0\n 29763: ra = 432, jump @23\n      : @499 [@dyn 216] (gas: 7)\n 29769: u64 [sp + 88] = 0\n 29772: u64 [sp + 80] = 0\n 29775: u64 [sp + 64] = 0x41\n 29779: a0 = 0x4\n 29782: a1 = sp + 0x40\n 29785: u64 [sp + 72] = 0\n 29788: ra = 434, jump @23\n      : @500 [@dyn 217] (gas: 3)\n 29794: a1 = 0x24\n 29797: a0 = 0\n 29799: ra = 436, jump @0\n      : @501 [@dyn 218] (gas: 6)\n 29805: i32 a1 = a0 + 0\n 29807: a0 = 0x1\n 29810: a2 = 0x24\n 29813: ra = 0x1b6\n 29817: ecalli 10 // 'seal_return'\n 29819: fallthrough\n      : @502 [@dyn 219] (gas: 17)\n 29820: sp = sp + 0xfffffffffffffee0\n 29824: u64 [sp + 0x118] = ra\n 29828: u64 [sp + 0x110] = s0\n 29832: u64 [sp + 0x108] = s1\n 29836: s0 = sp + 0x120\n 29840: sp = sp & 0xffffffffffffffe0\n 29843: a2 = u64 [a1]\n 29845: u64 [sp + 0x78] = a2\n 29848: a2 = u64 [a1 + 0x8]\n 29851: u64 [sp + 0x70] = a2\n 29854: a2 = u64 [a1 + 0x10]\n 29857: u64 [sp + 0x68] = a2\n 29860: s1 = u64 [a1 + 0x18]\n 29863: u64 [sp + 0x60] = a0\n 29866: a1 = 0x20\n 29869: a0 = 0\n 29871: ra = 440, jump @0\n      : @503 [@dyn 220] (gas: 70)\n 29877: a1 = reverse s1\n 29879: a2 = u64 [sp + 0x68]\n 29882: a2 = reverse a2\n 29884: a3 = u64 [sp + 0x70]\n 29887: a3 = reverse a3\n 29889: a4 = u64 [sp + 0x78]\n 29892: a4 = reverse a4\n 29894: a5 = a4 >> 0x38\n 29897: u8 [a0 + 0x1f] = a5\n 29900: a5 = a4 >> 0x30\n 29903: u8 [a0 + 0x1e] = a5\n 29906: a5 = a4 >> 0x28\n 29909: u8 [a0 + 0x1d] = a5\n 29912: a5 = a4 >> 0x20\n 29915: u8 [a0 + 0x1c] = a5\n 29918: a5 = a4 >> 0x18\n 29921: u8 [a0 + 0x1b] = a5\n 29924: a5 = a4 >> 0x10\n 29927: u8 [a0 + 0x1a] = a5\n 29930: a5 = a4 >> 0x8\n 29933: u8 [a0 + 0x19] = a5\n 29936: u8 [a0 + 0x18] = a4\n 29939: a4 = a3 >> 0x38\n 29942: u8 [a0 + 0x17] = a4\n 29945: a4 = a3 >> 0x30\n 29948: u8 [a0 + 0x16] = a4\n 29951: a4 = a3 >> 0x28\n 29954: u8 [a0 + 0x15] = a4\n 29957: a4 = a3 >> 0x20\n 29960: u8 [a0 + 0x14] = a4\n 29963: a4 = a3 >> 0x18\n 29966: u8 [a0 + 0x13] = a4\n 29969: a4 = a3 >> 0x10\n 29972: u8 [a0 + 0x12] = a4\n 29975: a4 = a3 >> 0x8\n 29978: u8 [a0 + 0x11] = a4\n 29981: u8 [a0 + 0x10] = a3\n 29984: a3 = a2 >> 0x38\n 29987: u8 [a0 + 0xf] = a3\n 29990: a3 = a2 >> 0x30\n 29993: u8 [a0 + 0xe] = a3\n 29996: a3 = a2 >> 0x28\n 29999: u8 [a0 + 0xd] = a3\n 30002: a3 = a2 >> 0x20\n 30005: u8 [a0 + 0xc] = a3\n 30008: a3 = a2 >> 0x18\n 30011: u8 [a0 + 0xb] = a3\n 30014: a3 = a2 >> 0x10\n 30017: u8 [a0 + 0xa] = a3\n 30020: a3 = a2 >> 0x8\n 30023: u8 [a0 + 0x9] = a3\n 30026: u8 [a0 + 0x8] = a2\n 30029: a2 = a1 >> 0x38\n 30032: u8 [a0 + 0x7] = a2\n 30035: a2 = a1 >> 0x30\n 30038: u8 [a0 + 0x6] = a2\n 30041: a2 = a1 >> 0x28\n 30044: u8 [a0 + 0x5] = a2\n 30047: a2 = a1 >> 0x20\n 30050: u8 [a0 + 0x4] = a2\n 30053: a2 = a1 >> 0x18\n 30056: u8 [a0 + 0x3] = a2\n 30059: a2 = a1 >> 0x10\n 30062: u8 [a0 + 0x2] = a2\n 30065: a2 = a1 >> 0x8\n 30068: u8 [a0 + 0x1] = a2\n 30071: u8 [a0] = a1\n 30073: a0 = 0x20\n 30076: a1 = 0x20\n 30079: ra = 442, jump @0\n      : @504 [@dyn 221] (gas: 35)\n 30085: u8 [a0 + 31] = 0\n 30088: u8 [a0 + 30] = 0\n 30091: u8 [a0 + 29] = 0\n 30094: u8 [a0 + 28] = 0\n 30097: u8 [a0 + 27] = 0\n 30100: u8 [a0 + 26] = 0\n 30103: u8 [a0 + 25] = 0\n 30106: u8 [a0 + 24] = 0\n 30109: u8 [a0 + 23] = 0\n 30112: u8 [a0 + 22] = 0\n 30115: u8 [a0 + 21] = 0\n 30118: u8 [a0 + 20] = 0\n 30121: u8 [a0 + 19] = 0\n 30124: u8 [a0 + 18] = 0\n 30127: u8 [a0 + 17] = 0\n 30130: u8 [a0 + 16] = 0\n 30133: u8 [a0 + 15] = 0\n 30136: u8 [a0 + 14] = 0\n 30139: u8 [a0 + 13] = 0\n 30142: u8 [a0 + 12] = 0\n 30145: u8 [a0 + 11] = 0\n 30148: u8 [a0 + 10] = 0\n 30151: u8 [a0 + 9] = 0\n 30154: u8 [a0 + 8] = 0\n 30157: u8 [a0 + 7] = 0\n 30160: u8 [a0 + 6] = 0\n 30163: u8 [a0 + 5] = 0\n 30166: u8 [a0 + 4] = 0\n 30169: u8 [a0 + 3] = 0\n 30172: u8 [a0 + 2] = 0\n 30175: u8 [a0 + 1] = 0\n 30178: u8 [a0 + 0] = 0\n 30180: a1 = 0x40\n 30183: a0 = 0\n 30185: ra = 444, jump @0\n      : @505 [@dyn 222] (gas: 88)\n 30191: i32 a0 = a0 + 0\n 30193: i32 a2 = sp + 0xe0\n 30197: a1 = 0x40\n 30200: ecalli 8 // 'hash_keccak_256'\n 30202: a0 = u64 [sp + 0xf8]\n 30206: a1 = u64 [sp + 0xf0]\n 30210: a2 = u64 [sp + 0xe8]\n 30214: a3 = u64 [sp + 0xe0]\n 30218: a4 = reverse a0\n 30220: u64 [sp + 0x68] = a4\n 30223: a1 = reverse a1\n 30225: u64 [sp + 0x70] = a1\n 30228: s1 = reverse a2\n 30230: a0 = reverse a3\n 30232: u64 [sp + 0x78] = a0\n 30235: u64 [sp + 0xd8] = a0\n 30239: u64 [sp + 0xd0] = s1\n 30243: u64 [sp + 0xc8] = a1\n 30247: u64 [sp + 0xc0] = a4\n 30251: u64 [sp + 248] = 0\n 30255: u64 [sp + 240] = 0\n 30259: u64 [sp + 232] = 0\n 30263: u64 [sp + 224] = 0\n 30267: u32 [sp + 256] = 0x20\n 30272: i32 a1 = sp + 0xc0\n 30276: i32 a3 = sp + 0xe0\n 30280: i32 a4 = sp + 0x100\n 30284: a2 = 0xffffffffffffffff\n 30287: a0 = 0\n 30289: ecalli 7 // 'get_storage'\n 30291: a0 = u64 [sp + 0x68]\n 30294: a0 = a0 + 0x1\n 30297: a1 = a0 <u 0x1\n 30300: a2 = u64 [sp + 0x70]\n 30303: a1 = a1 + a2\n 30306: a2 = a0 | a1\n 30309: a2 = a2 <u 0x1\n 30312: a2 = a2 + s1\n 30315: a3 = a2 <u s1\n 30318: a4 = u64 [sp + 0x78]\n 30321: a3 = a3 + a4\n 30324: u64 [sp + 0xd8] = a3\n 30328: u64 [sp + 0xd0] = a2\n 30332: a2 = u64 [sp + 0xe0]\n 30336: u64 [sp + 0x58] = a2\n 30339: u64 [sp + 0xc8] = a1\n 30343: a1 = u64 [sp + 0xe8]\n 30347: u64 [sp + 0x50] = a1\n 30350: u64 [sp + 0xc0] = a0\n 30354: a0 = u32 [sp + 0xf0]\n 30358: u64 [sp + 0x48] = a0\n 30361: u64 [sp + 248] = 0\n 30365: u64 [sp + 240] = 0\n 30369: u64 [sp + 232] = 0\n 30373: u64 [sp + 224] = 0\n 30377: u32 [sp + 256] = 0x20\n 30382: i32 a1 = sp + 0xc0\n 30386: i32 a3 = sp + 0xe0\n 30390: i32 a4 = sp + 0x100\n 30394: a2 = 0xffffffffffffffff\n 30397: a0 = 0\n 30399: ecalli 7 // 'get_storage'\n 30401: a0 = u64 [sp + 0xe0]\n 30405: u64 [sp + 0x40] = a0\n 30408: a0 = u64 [sp + 0xe8]\n 30412: u64 [sp + 0x38] = a0\n 30415: a0 = u64 [sp + 0xf0]\n 30419: u64 [sp + 0x30] = a0\n 30422: a0 = u64 [sp + 0xf8]\n 30426: u64 [sp + 0x28] = a0\n 30429: a0 = u64 [sp + 0x68]\n 30432: a2 = a0 + 0x2\n 30435: a0 = a2 <u a0\n 30438: a3 = u64 [sp + 0x70]\n 30441: a1 = a3 + a0\n 30444: a3 = a1 <u a3\n 30447: a3 = a0 if a0 == 0\n 30450: a3 = a3 + s1\n 30453: a0 = a3 <u s1\n 30456: a4 = u64 [sp + 0x78]\n 30459: a0 = a0 + a4\n 30462: u64 [sp + 0x98] = a0\n 30466: u64 [sp + 0x90] = a3\n 30470: u64 [sp + 0x88] = a1\n 30474: a0 = sp + 0xa0\n 30478: a1 = sp + 0x80\n 30482: u64 [sp + 0x80] = a2\n 30486: ra = 446, jump @492\n      : @506 [@dyn 223] (gas: 69)\n 30492: a0 = u64 [sp + 0xa0]\n 30496: u64 [sp + 0x20] = a0\n 30499: a0 = u64 [sp + 0xa8]\n 30503: u64 [sp + 0x18] = a0\n 30506: a0 = u64 [sp + 0xb0]\n 30510: u64 [sp + 0x10] = a0\n 30513: a0 = u64 [sp + 0xb8]\n 30517: u64 [sp + 0x8] = a0\n 30520: a1 = u64 [sp + 0x68]\n 30523: a0 = a1 + 0x3\n 30526: a1 = a0 <u a1\n 30529: a3 = u64 [sp + 0x70]\n 30532: a2 = a3 + a1\n 30535: a3 = a2 <u a3\n 30538: a3 = a1 if a1 == 0\n 30541: a3 = a3 + s1\n 30544: a1 = a3 <u s1\n 30547: a4 = u64 [sp + 0x78]\n 30550: a1 = a1 + a4\n 30553: u64 [sp + 0xd8] = a1\n 30557: u64 [sp + 0xd0] = a3\n 30561: u64 [sp + 0xc8] = a2\n 30565: u64 [sp + 0xc0] = a0\n 30569: u64 [sp + 248] = 0\n 30573: u64 [sp + 240] = 0\n 30577: u64 [sp + 232] = 0\n 30581: u64 [sp + 224] = 0\n 30585: u32 [sp + 256] = 0x20\n 30590: i32 a1 = sp + 0xc0\n 30594: i32 a3 = sp + 0xe0\n 30598: i32 a4 = sp + 0x100\n 30602: a2 = 0xffffffffffffffff\n 30605: a0 = 0\n 30607: ecalli 7 // 'get_storage'\n 30609: a0 = u8 [sp + 0xe0]\n 30613: a1 = u64 [sp + 0x60]\n 30616: u64 [a1 + 0x60] = a0\n 30619: a0 = u64 [sp + 0x8]\n 30622: u64 [a1 + 0x58] = a0\n 30625: a0 = u64 [sp + 0x10]\n 30628: u64 [a1 + 0x50] = a0\n 30631: a0 = u64 [sp + 0x18]\n 30634: u64 [a1 + 0x48] = a0\n 30637: a0 = u64 [sp + 0x20]\n 30640: u64 [a1 + 0x40] = a0\n 30643: a0 = u64 [sp + 0x28]\n 30646: u64 [a1 + 0x38] = a0\n 30649: a0 = u64 [sp + 0x30]\n 30652: u64 [a1 + 0x30] = a0\n 30655: a0 = u64 [sp + 0x38]\n 30658: u64 [a1 + 0x28] = a0\n 30661: a0 = u64 [sp + 0x40]\n 30664: u64 [a1 + 0x20] = a0\n 30667: a0 = u64 [sp + 0x48]\n 30670: u64 [a1 + 0x10] = a0\n 30673: a0 = u64 [sp + 0x50]\n 30676: u64 [a1 + 0x8] = a0\n 30679: a0 = u64 [sp + 0x58]\n 30682: u64 [a1] = a0\n 30684: u64 [a1 + 120] = 0\n 30687: u64 [a1 + 112] = 0\n 30690: u64 [a1 + 104] = 0\n 30693: u64 [a1 + 24] = 0\n 30696: sp = s0 + 0xfffffffffffffee0\n 30700: ra = u64 [sp + 0x118]\n 30704: s0 = u64 [sp + 0x110]\n 30708: s1 = u64 [sp + 0x108]\n 30712: sp = sp + 0x120\n 30716: ret\n      : @507 (gas: 16)\n 30718: sp = sp + 0xffffffffffffff88\n 30721: u64 [sp + 0x70] = ra\n 30724: u64 [sp + 0x68] = s0\n 30727: u64 [sp + 0x60] = s1\n 30730: a5 = u64 [a1 + 0x10]\n 30733: s1 = u64 [a1 + 0x18]\n 30736: a4 = u64 [a1 + 0x8]\n 30739: s0 = u64 [a1]\n 30741: a1 = a4 | s1\n 30744: a3 = s0 | a5\n 30747: a3 = a3 | a1\n 30750: a3 = a3 >> 0x20\n 30753: a1 = a1 | a5\n 30756: a1 = a1 << 0x20\n 30759: a1 = a1 | a3\n 30762: jump @520 if a1 != 0\n      : @508 (gas: 16)\n 30766: u64 [sp + 0x28] = s1\n 30769: u64 [sp + 0x30] = a5\n 30772: u64 [sp + 0x40] = a4\n 30775: u64 [sp] = a0\n 30777: a0 = u64 [a2 + 0x18]\n 30780: u64 [sp + 0x58] = a0\n 30783: s1 = u64 [a2 + 0x10]\n 30786: a0 = u64 [a2 + 0x8]\n 30789: u64 [sp + 0x50] = a0\n 30792: a0 = u64 [a2]\n 30794: u64 [sp + 0x48] = a0\n 30797: u64 [sp + 0x20] = s0\n 30800: i32 a0 = s0 + 0\n 30802: a1 = 0x20\n 30805: u64 [sp + 0x8] = a0\n 30808: ra = 448, jump @0\n      : @509 [@dyn 224] (gas: 12)\n 30814: t0 = u64 [sp + 0x48]\n 30817: a1 = t0 | s1\n 30820: a2 = u64 [sp + 0x58]\n 30823: a3 = u64 [sp + 0x50]\n 30826: a2 = a2 | a3\n 30829: a1 = a1 | a2\n 30832: a1 = a1 >> 0x20\n 30835: u64 [sp + 0x38] = s1\n 30838: a2 = a2 | s1\n 30841: a2 = a2 << 0x20\n 30844: a1 = a1 | a2\n 30847: jump @520 if a1 != 0\n      : @510 (gas: 93)\n 30851: a1 = u8 [a0 + 0x19]\n 30854: a2 = u8 [a0 + 0x18]\n 30857: a3 = u8 [a0 + 0x1a]\n 30860: a4 = u8 [a0 + 0x1b]\n 30863: a1 = a1 << 0x8\n 30866: a1 = a1 | a2\n 30869: a3 = a3 << 0x10\n 30872: a4 = a4 << 0x18\n 30875: a3 = a3 | a4\n 30878: a1 = a1 | a3\n 30881: a2 = u8 [a0 + 0x1d]\n 30884: a3 = u8 [a0 + 0x1c]\n 30887: a4 = u8 [a0 + 0x1e]\n 30890: a5 = u8 [a0 + 0x1f]\n 30893: a2 = a2 << 0x8\n 30896: a2 = a2 | a3\n 30899: a4 = a4 << 0x10\n 30902: a5 = a5 << 0x18\n 30905: a4 = a4 | a5\n 30908: a2 = a2 | a4\n 30911: a2 = a2 << 0x20\n 30914: a1 = a1 | a2\n 30917: u64 [sp + 0x18] = a1\n 30920: a1 = u8 [a0 + 0x11]\n 30923: a2 = u8 [a0 + 0x10]\n 30926: a3 = u8 [a0 + 0x12]\n 30929: a4 = u8 [a0 + 0x13]\n 30932: a1 = a1 << 0x8\n 30935: a1 = a1 | a2\n 30938: a3 = a3 << 0x10\n 30941: a4 = a4 << 0x18\n 30944: a3 = a3 | a4\n 30947: a1 = a1 | a3\n 30950: a2 = u8 [a0 + 0x15]\n 30953: a3 = u8 [a0 + 0x14]\n 30956: a4 = u8 [a0 + 0x16]\n 30959: a5 = u8 [a0 + 0x17]\n 30962: a2 = a2 << 0x8\n 30965: a2 = a2 | a3\n 30968: a4 = a4 << 0x10\n 30971: a5 = a5 << 0x18\n 30974: a4 = a4 | a5\n 30977: a2 = a2 | a4\n 30980: a2 = a2 << 0x20\n 30983: a1 = a1 | a2\n 30986: u64 [sp + 0x10] = a1\n 30989: a1 = u8 [a0 + 0x9]\n 30992: a2 = u8 [a0 + 0x8]\n 30995: a3 = u8 [a0 + 0xa]\n 30998: a4 = u8 [a0 + 0xb]\n 31001: a1 = a1 << 0x8\n 31004: a1 = a1 | a2\n 31007: a3 = a3 << 0x10\n 31010: a4 = a4 << 0x18\n 31013: a3 = a3 | a4\n 31016: a1 = a1 | a3\n 31019: a2 = u8 [a0 + 0xd]\n 31022: a3 = u8 [a0 + 0xc]\n 31025: a4 = u8 [a0 + 0xe]\n 31028: a5 = u8 [a0 + 0xf]\n 31031: a2 = a2 << 0x8\n 31034: a2 = a2 | a3\n 31037: a4 = a4 << 0x10\n 31040: a5 = a5 << 0x18\n 31043: a4 = a4 | a5\n 31046: a2 = a2 | a4\n 31049: a2 = a2 << 0x20\n 31052: s1 = a2 | a1\n 31055: a1 = u8 [a0 + 0x1]\n 31058: a2 = u8 [a0]\n 31060: a3 = u8 [a0 + 0x2]\n 31063: a4 = u8 [a0 + 0x3]\n 31066: a1 = a1 << 0x8\n 31069: a1 = a1 | a2\n 31072: a3 = a3 << 0x10\n 31075: a4 = a4 << 0x18\n 31078: a3 = a3 | a4\n 31081: a1 = a1 | a3\n 31084: a2 = u8 [a0 + 0x5]\n 31087: a3 = u8 [a0 + 0x4]\n 31090: a4 = u8 [a0 + 0x6]\n 31093: a0 = u8 [a0 + 0x7]\n 31096: a2 = a2 << 0x8\n 31099: a2 = a2 | a3\n 31102: a4 = a4 << 0x10\n 31105: a0 = a0 << 0x18\n 31108: a0 = a0 | a4\n 31111: a0 = a0 | a2\n 31114: a0 = a0 << 0x20\n 31117: s0 = a0 | a1\n 31120: i32 a0 = t0 + 0\n 31122: a1 = 0x20\n 31125: ra = 450, jump @0\n      : @511 [@dyn 225] (gas: 73)\n 31131: a4 = s1\n 31133: a2 = u64 [sp + 0x10]\n 31136: s1 = u64 [sp + 0x18]\n 31139: t0 = u64 [sp + 0x48]\n 31142: a1 = a4 >> 0x38\n 31145: u8 [a0 + 0xf] = a1\n 31148: a1 = a4 >> 0x30\n 31151: u8 [a0 + 0xe] = a1\n 31154: a1 = a4 >> 0x28\n 31157: u8 [a0 + 0xd] = a1\n 31160: a1 = a4 >> 0x20\n 31163: u8 [a0 + 0xc] = a1\n 31166: a1 = a4 >> 0x18\n 31169: u8 [a0 + 0xb] = a1\n 31172: a1 = a4 >> 0x10\n 31175: u8 [a0 + 0xa] = a1\n 31178: a1 = a4 >> 0x8\n 31181: u8 [a0 + 0x9] = a1\n 31184: a1 = s0 >> 0x38\n 31187: u8 [a0 + 0x7] = a1\n 31190: a1 = s0 >> 0x30\n 31193: u8 [a0 + 0x6] = a1\n 31196: a1 = s0 >> 0x28\n 31199: u8 [a0 + 0x5] = a1\n 31202: a1 = s0 >> 0x20\n 31205: u8 [a0 + 0x4] = a1\n 31208: a1 = s0 >> 0x18\n 31211: u8 [a0 + 0x3] = a1\n 31214: a1 = s0 >> 0x10\n 31217: u8 [a0 + 0x2] = a1\n 31220: a1 = s0 >> 0x8\n 31223: u8 [a0 + 0x1] = a1\n 31226: a1 = a2 >> 0x38\n 31229: u8 [a0 + 0x17] = a1\n 31232: a1 = a2 >> 0x30\n 31235: u8 [a0 + 0x16] = a1\n 31238: a1 = a2 >> 0x28\n 31241: u8 [a0 + 0x15] = a1\n 31244: a1 = a2 >> 0x20\n 31247: u8 [a0 + 0x14] = a1\n 31250: a1 = a2 >> 0x18\n 31253: u8 [a0 + 0x13] = a1\n 31256: a1 = a2 >> 0x10\n 31259: u8 [a0 + 0x12] = a1\n 31262: a1 = a2 >> 0x8\n 31265: u8 [a0 + 0x11] = a1\n 31268: a1 = s1 >> 0x38\n 31271: u8 [a0 + 0x1f] = a1\n 31274: a1 = s1 >> 0x30\n 31277: u8 [a0 + 0x1e] = a1\n 31280: a1 = s1 >> 0x28\n 31283: u8 [a0 + 0x1d] = a1\n 31286: a1 = s1 >> 0x20\n 31289: u8 [a0 + 0x1c] = a1\n 31292: a1 = s1 >> 0x18\n 31295: u8 [a0 + 0x1b] = a1\n 31298: a1 = s1 >> 0x10\n 31301: u8 [a0 + 0x1a] = a1\n 31304: a1 = s1 >> 0x8\n 31307: u8 [a0 + 0x19] = a1\n 31310: ra = u64 [sp + 0x58]\n 31313: t2 = u64 [sp + 0x38]\n 31316: t1 = t2 | ra\n 31319: a1 = 0xffffffe0\n 31329: a3 = t0 <u a1\n 31332: a5 = u64 [sp + 0x50]\n 31335: a3 = 0 if a5 != 0\n 31337: a3 = 0 if t1 != 0\n 31339: u8 [a0 + 0x10] = a2\n 31342: u8 [a0 + 0x8] = a4\n 31345: u8 [a0] = s0\n 31347: u8 [a0 + 0x18] = s1\n 31350: jump @520 if a3 == 0\n      : @512 (gas: 9)\n 31354: a0 = u64 [sp + 0x30]\n 31357: a3 = u64 [sp + 0x28]\n 31360: a0 = a0 | a3\n 31363: a3 = u64 [sp + 0x20]\n 31366: a1 = a3 <u a1\n 31369: a3 = u64 [sp + 0x40]\n 31372: a1 = 0 if a3 != 0\n 31374: a1 = 0 if a0 != 0\n 31376: jump @520 if a1 == 0\n      : @513 (gas: 15)\n 31380: a1 = reverse s0\n 31382: a3 = reverse a4\n 31384: a4 = reverse a2\n 31386: s0 = reverse s1\n 31388: a0 = s0 | a3\n 31391: u64 [sp + 0x30] = a1\n 31394: u64 [sp + 0x20] = a4\n 31397: a1 = a1 | a4\n 31400: a0 = a0 | a1\n 31403: a0 = a0 >> 0x20\n 31406: u64 [sp + 0x28] = a3\n 31409: a1 = a1 | a3\n 31412: a1 = a1 << 0x20\n 31415: a0 = a0 | a1\n 31418: jump @520 if a0 != 0\n      : @514 (gas: 19)\n 31422: a3 = t0 + 0x20\n 31425: u64 [sp + 0x40] = a3\n 31428: a0 = a3 <u t0\n 31431: a1 = a5 + a0\n 31434: u64 [sp + 0x48] = a1\n 31437: a1 = a1 <u a5\n 31440: a1 = a0 if a0 == 0\n 31443: a1 = a1 + t2\n 31446: u64 [sp + 0x50] = a1\n 31449: a0 = a1 <u t2\n 31452: a0 = a0 + ra\n 31455: u64 [sp + 0x58] = a0\n 31458: i32 a0 = a3 + 0\n 31460: a1 = u64 [sp + 0x8]\n 31463: i32 a1 = a1 + 0x20\n 31466: u64 [sp + 0x38] = a1\n 31469: i32 s1 = s0 + 0\n 31471: a1 = s1\n 31473: ra = 452, jump @0\n      : @515 [@dyn 226] (gas: 5)\n 31479: u64 [sp + 0x18] = a0\n 31482: a0 = u64 [sp + 0x38]\n 31485: a1 = s1\n 31487: s1 = s0\n 31489: ra = 454, jump @0\n      : @516 [@dyn 227] (gas: 4)\n 31495: a1 = a0\n 31497: a0 = u64 [sp + 0x18]\n 31500: a2 = s0\n 31502: ra = 456, jump @8\n      : @517 [@dyn 228] (gas: 29)\n 31508: a0 = u64 [sp + 0x40]\n 31511: a0 = a0 + s0\n 31514: a1 = a0 <u s0\n 31517: a4 = u64 [sp + 0x20]\n 31520: a2 = u64 [sp + 0x48]\n 31523: a2 = a2 + a4\n 31526: a2 = a2 + a1\n 31529: a3 = a2 ^ a4\n 31532: a4 = a2 <u a4\n 31535: a4 = a1 if a3 == 0\n 31538: a5 = u64 [sp + 0x28]\n 31541: a1 = u64 [sp + 0x50]\n 31544: a1 = a1 + a5\n 31547: a4 = a4 + a1\n 31550: a3 = a4 <u a1\n 31553: a1 = a1 <u a5\n 31556: a5 = u64 [sp + 0x30]\n 31559: s0 = u64 [sp + 0x58]\n 31562: a5 = a5 + s0\n 31565: a1 = a1 + a5\n 31568: a1 = a1 + a3\n 31571: a3 = a0 | a4\n 31574: a1 = a1 | a2\n 31577: a3 = a3 | a1\n 31580: a3 = a3 >> 0x20\n 31583: a1 = a1 | a4\n 31586: a1 = a1 << 0x20\n 31589: a1 = a1 | a3\n 31592: jump @520 if a1 != 0\n      : @518 (gas: 3)\n 31596: i32 a0 = a0 + 0\n 31598: a1 = 0x20\n 31601: ra = 458, jump @0\n      : @519 [@dyn 229] (gas: 56)\n 31607: u8 [a0 + 31] = 0\n 31610: u8 [a0 + 30] = 0\n 31613: u8 [a0 + 29] = 0\n 31616: u8 [a0 + 28] = 0\n 31619: u8 [a0 + 27] = 0\n 31622: u8 [a0 + 26] = 0\n 31625: u8 [a0 + 25] = 0\n 31628: u8 [a0 + 24] = 0\n 31631: u8 [a0 + 23] = 0\n 31634: u8 [a0 + 22] = 0\n 31637: u8 [a0 + 21] = 0\n 31640: u8 [a0 + 20] = 0\n 31643: u8 [a0 + 19] = 0\n 31646: u8 [a0 + 18] = 0\n 31649: u8 [a0 + 17] = 0\n 31652: u8 [a0 + 16] = 0\n 31655: u8 [a0 + 15] = 0\n 31658: u8 [a0 + 14] = 0\n 31661: u8 [a0 + 13] = 0\n 31664: u8 [a0 + 12] = 0\n 31667: u8 [a0 + 11] = 0\n 31670: u8 [a0 + 10] = 0\n 31673: u8 [a0 + 9] = 0\n 31676: u8 [a0 + 8] = 0\n 31679: u8 [a0 + 7] = 0\n 31682: u8 [a0 + 6] = 0\n 31685: u8 [a0 + 5] = 0\n 31688: u8 [a0 + 4] = 0\n 31691: u8 [a0 + 3] = 0\n 31694: u8 [a0 + 2] = 0\n 31697: u8 [a0 + 1] = 0\n 31700: u8 [a0 + 0] = 0\n 31702: a0 = s1 + 0x1f\n 31705: a1 = 0x1ffffffe0\n 31715: a0 = a0 & a1\n 31718: a1 = u64 [sp + 0x40]\n 31721: a1 = a1 + a0\n 31724: a0 = a1 <u a0\n 31727: a2 = u64 [sp + 0x48]\n 31730: a2 = a2 + a0\n 31733: a0 = 0 if a2 != 0\n 31735: a3 = u64 [sp + 0x50]\n 31738: a0 = a0 + a3\n 31741: a3 = a0 <u a3\n 31744: a4 = u64 [sp + 0x58]\n 31747: a3 = a3 + a4\n 31750: a4 = u64 [sp]\n 31752: u64 [a4] = a1\n 31754: u64 [a4 + 0x8] = a2\n 31757: u64 [a4 + 0x10] = a0\n 31760: u64 [a4 + 0x18] = a3\n 31763: ra = u64 [sp + 0x70]\n 31766: s0 = u64 [sp + 0x68]\n 31769: s1 = u64 [sp + 0x60]\n 31772: sp = sp + 0x78\n 31775: ret\n      : @520 (gas: 1)\n 31777: trap\n      : @521 (gas: 23)\n 31778: sp = sp + 0xfffffffffffffee0\n 31782: u64 [sp + 0x118] = ra\n 31786: u64 [sp + 0x110] = s0\n 31790: u64 [sp + 0x108] = s1\n 31794: s0 = sp + 0x120\n 31798: sp = sp & 0xfffffffffffffff0\n 31801: t0 = u64 [a1 + 0x18]\n 31804: t1 = u64 [a1 + 0x10]\n 31807: s1 = u64 [a1 + 0x8]\n 31810: a1 = u64 [a1]\n 31812: u64 [sp + 0x90] = s1\n 31816: u64 [sp + 0x80] = t0\n 31820: t0 = s1 | t0\n 31823: u64 [sp + 0x98] = a1\n 31827: s1 = a1 | t1\n 31830: s1 = s1 | t0\n 31833: s1 = s1 >> 0x20\n 31836: u64 [sp + 0x78] = t1\n 31839: a1 = t0 | t1\n 31842: a1 = a1 << 0x20\n 31845: a1 = a1 | s1\n 31848: u64 [sp + 0x40] = a0\n 31851: jump @531 if a1 != 0\n      : @522 (gas: 35)\n 31855: a0 = u64 [a5 + 0x18]\n 31858: u64 [sp + 0x18] = a0\n 31861: a0 = u64 [a5 + 0x10]\n 31864: u64 [sp + 0x8] = a0\n 31867: a0 = u64 [a5 + 0x8]\n 31870: u64 [sp + 0x10] = a0\n 31873: a0 = u64 [a5]\n 31875: u64 [sp] = a0\n 31877: a0 = u64 [a4 + 0x18]\n 31880: u64 [sp + 0x20] = a0\n 31883: a0 = u64 [a4 + 0x10]\n 31886: u64 [sp + 0x28] = a0\n 31889: a0 = u64 [a4 + 0x8]\n 31892: u64 [sp + 0x30] = a0\n 31895: a0 = u64 [a4]\n 31897: u64 [sp + 0x38] = a0\n 31900: a0 = u64 [a3 + 0x18]\n 31903: u64 [sp + 0x50] = a0\n 31906: a0 = u64 [a3 + 0x10]\n 31909: u64 [sp + 0x58] = a0\n 31912: a0 = u64 [a3 + 0x8]\n 31915: u64 [sp + 0x60] = a0\n 31918: a0 = u64 [a2 + 0x10]\n 31921: a1 = u64 [a3]\n 31923: u64 [sp + 0x48] = a1\n 31926: a1 = u64 [a2 + 0x8]\n 31929: u64 [sp + 0x68] = a1\n 31932: a1 = u64 [a2]\n 31934: u64 [sp + 0x70] = a1\n 31937: a0 = a0 << 0x20\n 31940: s1 = a0 >> 0x20\n 31943: a0 = i32 [sp + 0x98]\n 31947: a1 = 0x20\n 31950: u64 [sp + 0x88] = a0\n 31954: ra = 460, jump @0\n      : @523 [@dyn 230] (gas: 67)\n 31960: a1 = reverse s1\n 31962: a2 = u64 [sp + 0x68]\n 31965: a2 = reverse a2\n 31967: a3 = u64 [sp + 0x70]\n 31970: a3 = reverse a3\n 31972: a4 = a3 >> 0x38\n 31975: u8 [a0 + 0x1f] = a4\n 31978: a4 = a3 >> 0x30\n 31981: u8 [a0 + 0x1e] = a4\n 31984: a4 = a3 >> 0x28\n 31987: u8 [a0 + 0x1d] = a4\n 31990: a4 = a3 >> 0x20\n 31993: u8 [a0 + 0x1c] = a4\n 31996: a4 = a3 >> 0x18\n 31999: u8 [a0 + 0x1b] = a4\n 32002: a4 = a3 >> 0x10\n 32005: u8 [a0 + 0x1a] = a4\n 32008: a4 = a3 >> 0x8\n 32011: u8 [a0 + 0x19] = a4\n 32014: u8 [a0 + 0x18] = a3\n 32017: u8 [a0 + 0x10] = a2\n 32020: u8 [a0 + 11] = 0\n 32023: u8 [a0 + 10] = 0\n 32026: u8 [a0 + 9] = 0\n 32029: u8 [a0 + 7] = 0\n 32032: u8 [a0 + 6] = 0\n 32035: u8 [a0 + 5] = 0\n 32038: u8 [a0 + 4] = 0\n 32041: u8 [a0 + 3] = 0\n 32044: u8 [a0 + 2] = 0\n 32047: u8 [a0 + 1] = 0\n 32050: u8 [a0 + 0] = 0\n 32052: a3 = a2 >> 0x38\n 32055: u8 [a0 + 0x17] = a3\n 32058: a3 = a2 >> 0x30\n 32061: u8 [a0 + 0x16] = a3\n 32064: a3 = a2 >> 0x28\n 32067: u8 [a0 + 0x15] = a3\n 32070: a3 = a2 >> 0x20\n 32073: u8 [a0 + 0x14] = a3\n 32076: a3 = a2 >> 0x18\n 32079: u8 [a0 + 0x13] = a3\n 32082: a3 = a2 >> 0x10\n 32085: u8 [a0 + 0x12] = a3\n 32088: a2 = a2 >> 0x8\n 32091: u8 [a0 + 0x11] = a2\n 32094: u8 [a0 + 0x8] = a1\n 32097: a2 = a1 >> 0x38\n 32100: u8 [a0 + 0xf] = a2\n 32103: a2 = a1 >> 0x30\n 32106: u8 [a0 + 0xe] = a2\n 32109: a2 = a1 >> 0x28\n 32112: u8 [a0 + 0xd] = a2\n 32115: a1 = a1 >> 0x20\n 32118: a2 = u64 [sp + 0x80]\n 32122: a4 = u64 [sp + 0x78]\n 32125: a4 = a4 | a2\n 32128: s1 = 0x100000000\n 32138: a2 = 0xffffffe0\n 32148: a3 = u64 [sp + 0x98]\n 32152: a2 = a3 <u a2\n 32155: a3 = u64 [sp + 0x90]\n 32159: a2 = 0 if a3 != 0\n 32161: u64 [sp + 0x70] = a4\n 32164: a2 = 0 if a4 != 0\n 32166: u8 [a0 + 0xc] = a1\n 32169: jump @531 if a2 == 0\n      : @524 (gas: 4)\n 32173: a0 = u64 [sp + 0x88]\n 32177: i32 a0 = a0 + 0x20\n 32180: a1 = 0x20\n 32183: ra = 462, jump @0\n      : @525 [@dyn 231] (gas: 76)\n 32189: a1 = u64 [sp + 0x50]\n 32192: a1 = reverse a1\n 32194: a2 = u64 [sp + 0x58]\n 32197: a2 = reverse a2\n 32199: a3 = u64 [sp + 0x60]\n 32202: a3 = reverse a3\n 32204: a4 = u64 [sp + 0x48]\n 32207: a4 = reverse a4\n 32209: a5 = a4 >> 0x38\n 32212: u8 [a0 + 0x1f] = a5\n 32215: a5 = a4 >> 0x30\n 32218: u8 [a0 + 0x1e] = a5\n 32221: a5 = a4 >> 0x28\n 32224: u8 [a0 + 0x1d] = a5\n 32227: a5 = a4 >> 0x20\n 32230: u8 [a0 + 0x1c] = a5\n 32233: a5 = a4 >> 0x18\n 32236: u8 [a0 + 0x1b] = a5\n 32239: a5 = a4 >> 0x10\n 32242: u8 [a0 + 0x1a] = a5\n 32245: a5 = a4 >> 0x8\n 32248: u8 [a0 + 0x19] = a5\n 32251: u8 [a0 + 0x18] = a4\n 32254: u8 [a0 + 0x10] = a3\n 32257: a4 = a3 >> 0x38\n 32260: u8 [a0 + 0x17] = a4\n 32263: a4 = a3 >> 0x30\n 32266: u8 [a0 + 0x16] = a4\n 32269: a4 = a3 >> 0x28\n 32272: u8 [a0 + 0x15] = a4\n 32275: a4 = a3 >> 0x20\n 32278: u8 [a0 + 0x14] = a4\n 32281: a4 = a3 >> 0x18\n 32284: u8 [a0 + 0x13] = a4\n 32287: a4 = a3 >> 0x10\n 32290: u8 [a0 + 0x12] = a4\n 32293: a3 = a3 >> 0x8\n 32296: u8 [a0 + 0x11] = a3\n 32299: u8 [a0 + 0x8] = a2\n 32302: a3 = a2 >> 0x38\n 32305: u8 [a0 + 0xf] = a3\n 32308: a3 = a2 >> 0x30\n 32311: u8 [a0 + 0xe] = a3\n 32314: a3 = a2 >> 0x28\n 32317: u8 [a0 + 0xd] = a3\n 32320: a3 = a2 >> 0x20\n 32323: u8 [a0 + 0xc] = a3\n 32326: a3 = a2 >> 0x18\n 32329: u8 [a0 + 0xb] = a3\n 32332: a3 = a2 >> 0x10\n 32335: u8 [a0 + 0xa] = a3\n 32338: a2 = a2 >> 0x8\n 32341: u8 [a0 + 0x9] = a2\n 32344: u8 [a0] = a1\n 32346: a2 = a1 >> 0x38\n 32349: u8 [a0 + 0x7] = a2\n 32352: a2 = a1 >> 0x30\n 32355: u8 [a0 + 0x6] = a2\n 32358: a2 = a1 >> 0x28\n 32361: u8 [a0 + 0x5] = a2\n 32364: a2 = a1 >> 0x20\n 32367: u8 [a0 + 0x4] = a2\n 32370: a2 = a1 >> 0x18\n 32373: u8 [a0 + 0x3] = a2\n 32376: a2 = a1 >> 0x10\n 32379: u8 [a0 + 0x2] = a2\n 32382: a1 = a1 >> 0x8\n 32385: a2 = s1 + 0xffffffffffffffc0\n 32388: a3 = u64 [sp + 0x98]\n 32392: a2 = a3 <u a2\n 32395: a3 = u64 [sp + 0x90]\n 32399: a2 = 0 if a3 != 0\n 32401: a3 = u64 [sp + 0x70]\n 32404: a2 = 0 if a3 != 0\n 32406: u8 [a0 + 0x1] = a1\n 32409: jump @531 if a2 == 0\n      : @526 (gas: 19)\n 32413: a0 = u64 [sp + 0x98]\n 32417: a1 = a0 + 0x80\n 32421: u64 [sp + 0x68] = a1\n 32424: a0 = a1 <u a0\n 32427: a1 = u64 [sp + 0x90]\n 32431: a2 = a1 + a0\n 32434: u64 [sp + 0x60] = a2\n 32437: s1 = a2 <u a1\n 32440: s1 = a0 if a0 == 0\n 32443: a0 = u64 [sp + 0x78]\n 32446: s1 = s1 + a0\n 32449: a0 = s1 <u a0\n 32452: a1 = u64 [sp + 0x80]\n 32456: a0 = a0 + a1\n 32459: u64 [sp + 0x80] = a0\n 32463: a0 = u64 [sp + 0x88]\n 32467: i32 a0 = a0 + 0x40\n 32470: a1 = 0x20\n 32473: ra = 464, jump @0\n      : @527 [@dyn 232] (gas: 51)\n 32479: u8 [a0 + 31] = 0x80\n 32484: u8 [a0 + 30] = 0\n 32487: u8 [a0 + 29] = 0\n 32490: u8 [a0 + 28] = 0\n 32493: u8 [a0 + 27] = 0\n 32496: u8 [a0 + 26] = 0\n 32499: u8 [a0 + 25] = 0\n 32502: u8 [a0 + 24] = 0\n 32505: u8 [a0 + 23] = 0\n 32508: u8 [a0 + 22] = 0\n 32511: u8 [a0 + 21] = 0\n 32514: u8 [a0 + 20] = 0\n 32517: u8 [a0 + 19] = 0\n 32520: u8 [a0 + 18] = 0\n 32523: u8 [a0 + 17] = 0\n 32526: u8 [a0 + 16] = 0\n 32529: u8 [a0 + 15] = 0\n 32532: u8 [a0 + 14] = 0\n 32535: u8 [a0 + 13] = 0\n 32538: u8 [a0 + 12] = 0\n 32541: u8 [a0 + 11] = 0\n 32544: u8 [a0 + 10] = 0\n 32547: u8 [a0 + 9] = 0\n 32550: u8 [a0 + 8] = 0\n 32553: u8 [a0 + 7] = 0\n 32556: u8 [a0 + 6] = 0\n 32559: u8 [a0 + 5] = 0\n 32562: u8 [a0 + 4] = 0\n 32565: u8 [a0 + 3] = 0\n 32568: u8 [a0 + 2] = 0\n 32571: u8 [a0 + 1] = 0\n 32574: u8 [a0 + 0] = 0\n 32576: a0 = u64 [sp + 0x80]\n 32580: u64 [sp + 0xb8] = a0\n 32584: u64 [sp + 0xb0] = s1\n 32588: a0 = u64 [sp + 0x60]\n 32591: u64 [sp + 0xa8] = a0\n 32595: a0 = u64 [sp + 0x68]\n 32598: u64 [sp + 0xa0] = a0\n 32602: a0 = u64 [sp + 0x20]\n 32605: u64 [sp + 0xd8] = a0\n 32609: a0 = u64 [sp + 0x28]\n 32612: u64 [sp + 0xd0] = a0\n 32616: a0 = u64 [sp + 0x30]\n 32619: u64 [sp + 0xc8] = a0\n 32623: a0 = sp + 0xe0\n 32627: a1 = sp + 0xc0\n 32631: a2 = sp + 0xa0\n 32635: a3 = u64 [sp + 0x38]\n 32638: u64 [sp + 0xc0] = a3\n 32642: ra = 466, jump @507\n      : @528 [@dyn 233] (gas: 8)\n 32648: a0 = 0xffffffa0\n 32658: a1 = u64 [sp + 0x98]\n 32662: a0 = a1 <u a0\n 32665: a1 = u64 [sp + 0x90]\n 32669: a0 = 0 if a1 != 0\n 32671: a1 = u64 [sp + 0x70]\n 32674: a0 = 0 if a1 != 0\n 32676: jump @531 if a0 == 0\n      : @529 (gas: 20)\n 32680: a0 = u64 [sp + 0xf8]\n 32684: u64 [sp + 0x90] = a0\n 32688: a0 = u64 [sp + 0xf0]\n 32692: u64 [sp + 0x98] = a0\n 32696: a0 = u64 [sp + 0xe8]\n 32700: u64 [sp + 0x80] = a0\n 32704: a0 = u64 [sp + 0xe0]\n 32708: u64 [sp + 0x78] = a0\n 32711: a0 = u64 [sp + 0x8]\n 32714: a1 = u64 [sp]\n 32716: a0 = a0 | a1\n 32719: a1 = u64 [sp + 0x18]\n 32722: a2 = u64 [sp + 0x10]\n 32725: a1 = a1 | a2\n 32728: a0 = a0 | a1\n 32731: s1 = a0 >u 0\n 32733: a0 = u64 [sp + 0x88]\n 32737: i32 a0 = a0 + 0x60\n 32740: a1 = 0x20\n 32743: ra = 468, jump @0\n      : @530 [@dyn 234] (gas: 47)\n 32749: u8 [a0 + 30] = 0\n 32752: u8 [a0 + 29] = 0\n 32755: u8 [a0 + 28] = 0\n 32758: u8 [a0 + 27] = 0\n 32761: u8 [a0 + 26] = 0\n 32764: u8 [a0 + 25] = 0\n 32767: u8 [a0 + 24] = 0\n 32770: u8 [a0 + 23] = 0\n 32773: u8 [a0 + 22] = 0\n 32776: u8 [a0 + 21] = 0\n 32779: u8 [a0 + 20] = 0\n 32782: u8 [a0 + 19] = 0\n 32785: u8 [a0 + 18] = 0\n 32788: u8 [a0 + 17] = 0\n 32791: u8 [a0 + 16] = 0\n 32794: u8 [a0 + 15] = 0\n 32797: u8 [a0 + 14] = 0\n 32800: u8 [a0 + 13] = 0\n 32803: u8 [a0 + 12] = 0\n 32806: u8 [a0 + 11] = 0\n 32809: u8 [a0 + 10] = 0\n 32812: u8 [a0 + 9] = 0\n 32815: u8 [a0 + 8] = 0\n 32818: u8 [a0 + 7] = 0\n 32821: u8 [a0 + 6] = 0\n 32824: u8 [a0 + 5] = 0\n 32827: u8 [a0 + 4] = 0\n 32830: u8 [a0 + 3] = 0\n 32833: u8 [a0 + 2] = 0\n 32836: u8 [a0 + 1] = 0\n 32839: u8 [a0 + 0] = 0\n 32841: u8 [a0 + 0x1f] = s1\n 32844: a0 = u64 [sp + 0x40]\n 32847: a1 = u64 [sp + 0x78]\n 32850: u64 [a0] = a1\n 32852: a1 = u64 [sp + 0x90]\n 32856: u64 [a0 + 0x18] = a1\n 32859: a1 = u64 [sp + 0x80]\n 32863: u64 [a0 + 0x8] = a1\n 32866: a1 = u64 [sp + 0x98]\n 32870: u64 [a0 + 0x10] = a1\n 32873: sp = s0 + 0xfffffffffffffee0\n 32877: ra = u64 [sp + 0x118]\n 32881: s0 = u64 [sp + 0x110]\n 32885: s1 = u64 [sp + 0x108]\n 32889: sp = sp + 0x120\n 32893: ret\n      : @531 (gas: 1)\n 32895: trap\n      : @532 (gas: 8)\n 32896: a0 = u64 [sp + 0x210]\n 32900: a1 = u64 [sp + 0x218]\n 32904: a2 = u64 [sp + 0x208]\n 32908: a3 = u64 [sp + 0x200]\n 32912: a1 = a1 | a2\n 32915: a0 = a0 | a3\n 32918: a0 = a0 | a1\n 32921: jump @540 if a0 != 0\n      : @533 (gas: 2)\n 32925: a0 = i32 [0x20164]\n 32930: jump @540 if a0 <=u 35\n      : @534 (gas: 14)\n 32935: i32 a0 = sp + 0x220\n 32939: a1 = 0x4\n 32942: ecalli 3 // 'call_data_load'\n 32944: a2 = u64 [sp + 0x220]\n 32948: a0 = u64 [sp + 0x228]\n 32952: a1 = u64 [sp + 0x230]\n 32956: a3 = u64 [sp + 0x238]\n 32960: u64 [sp + 0x178] = a3\n 32964: u64 [sp + 0x170] = a1\n 32968: u64 [sp + 0x168] = a0\n 32972: a0 = sp + 0x180\n 32976: a1 = sp + 0x160\n 32980: u64 [sp + 0x160] = a2\n 32984: ra = 470, jump @502\n      : @535 [@dyn 235] (gas: 35)\n 32990: a0 = u64 [sp + 0x180]\n 32994: u64 [sp + 0x90] = a0\n 32998: a0 = u64 [sp + 0x188]\n 33002: u64 [sp + 0x88] = a0\n 33006: a0 = u64 [sp + 0x190]\n 33010: u64 [sp + 0x80] = a0\n 33014: a0 = u64 [sp + 0x198]\n 33018: u64 [sp + 0x78] = a0\n 33021: a0 = u64 [sp + 0x1a0]\n 33025: u64 [sp + 0x70] = a0\n 33028: a0 = u64 [sp + 0x1a8]\n 33032: u64 [sp + 0x68] = a0\n 33035: a0 = u64 [sp + 0x1b0]\n 33039: u64 [sp + 0x60] = a0\n 33042: a0 = u64 [sp + 0x1b8]\n 33046: u64 [sp + 0x58] = a0\n 33049: a0 = u64 [sp + 0x1c0]\n 33053: u64 [sp + 0x50] = a0\n 33056: a0 = u64 [sp + 0x1c8]\n 33060: u64 [sp + 0x48] = a0\n 33063: a0 = u64 [sp + 0x1d0]\n 33067: u64 [sp + 0x40] = a0\n 33070: a0 = u64 [sp + 0x1d8]\n 33074: u64 [sp + 0x38] = a0\n 33077: a0 = u64 [sp + 0x1e0]\n 33081: u64 [sp + 0x30] = a0\n 33084: a0 = u64 [sp + 0x1e8]\n 33088: u64 [sp + 0x28] = a0\n 33091: a0 = u64 [sp + 0x1f0]\n 33095: u64 [sp + 0x20] = a0\n 33098: a0 = u64 [sp + 0x1f8]\n 33102: u64 [sp + 0x18] = a0\n 33105: a0 = 0x40\n 33108: a1 = 0x20\n 33111: ra = 472, jump @0\n      : @536 [@dyn 236] (gas: 138)\n 33118: a1 = u8 [a0 + 0x1]\n 33121: a2 = u8 [a0]\n 33123: a3 = u8 [a0 + 0x2]\n 33126: a4 = u8 [a0 + 0x3]\n 33129: a1 = a1 << 0x8\n 33132: a1 = a1 | a2\n 33135: a3 = a3 << 0x10\n 33138: a4 = a4 << 0x18\n 33141: a3 = a3 | a4\n 33144: a1 = a1 | a3\n 33147: a2 = u8 [a0 + 0x5]\n 33150: a3 = u8 [a0 + 0x4]\n 33153: a4 = u8 [a0 + 0x6]\n 33156: a5 = u8 [a0 + 0x7]\n 33159: a2 = a2 << 0x8\n 33162: a2 = a2 | a3\n 33165: a4 = a4 << 0x10\n 33168: a5 = a5 << 0x18\n 33171: a4 = a4 | a5\n 33174: a2 = a2 | a4\n 33177: a2 = a2 << 0x20\n 33180: t0 = a2 | a1\n 33183: a2 = u8 [a0 + 0x9]\n 33186: a3 = u8 [a0 + 0x8]\n 33189: a4 = u8 [a0 + 0xa]\n 33192: a5 = u8 [a0 + 0xb]\n 33195: a2 = a2 << 0x8\n 33198: a2 = a2 | a3\n 33201: a4 = a4 << 0x10\n 33204: a5 = a5 << 0x18\n 33207: a4 = a4 | a5\n 33210: a2 = a2 | a4\n 33213: a3 = u8 [a0 + 0xd]\n 33216: a4 = u8 [a0 + 0xc]\n 33219: a5 = u8 [a0 + 0xe]\n 33222: s1 = u8 [a0 + 0xf]\n 33225: a3 = a3 << 0x8\n 33228: a3 = a3 | a4\n 33231: a5 = a5 << 0x10\n 33234: s1 = s1 << 0x18\n 33237: a5 = a5 | s1\n 33240: a3 = a3 | a5\n 33243: a3 = a3 << 0x20\n 33246: a2 = a2 | a3\n 33249: a3 = u8 [a0 + 0x11]\n 33252: a4 = u8 [a0 + 0x10]\n 33255: a5 = u8 [a0 + 0x12]\n 33258: s1 = u8 [a0 + 0x13]\n 33261: a3 = a3 << 0x8\n 33264: a3 = a3 | a4\n 33267: a5 = a5 << 0x10\n 33270: s1 = s1 << 0x18\n 33273: a5 = a5 | s1\n 33276: a3 = a3 | a5\n 33279: a4 = u8 [a0 + 0x15]\n 33282: a5 = u8 [a0 + 0x14]\n 33285: s1 = u8 [a0 + 0x16]\n 33288: a1 = u8 [a0 + 0x17]\n 33291: a4 = a4 << 0x8\n 33294: a4 = a4 | a5\n 33297: s1 = s1 << 0x10\n 33300: a1 = a1 << 0x18\n 33303: a1 = a1 | s1\n 33306: a1 = a1 | a4\n 33309: a1 = a1 << 0x20\n 33312: a3 = a3 | a1\n 33315: a1 = u8 [a0 + 0x19]\n 33318: a4 = u8 [a0 + 0x18]\n 33321: a5 = u8 [a0 + 0x1a]\n 33324: s1 = u8 [a0 + 0x1b]\n 33327: a1 = a1 << 0x8\n 33330: a1 = a1 | a4\n 33333: a5 = a5 << 0x10\n 33336: s1 = s1 << 0x18\n 33339: a5 = a5 | s1\n 33342: a1 = a1 | a5\n 33345: a4 = u8 [a0 + 0x1d]\n 33348: a5 = u8 [a0 + 0x1c]\n 33351: s1 = u8 [a0 + 0x1e]\n 33354: a0 = u8 [a0 + 0x1f]\n 33357: a4 = a4 << 0x8\n 33360: a4 = a4 | a5\n 33363: s1 = s1 << 0x10\n 33366: a0 = a0 << 0x18\n 33369: a0 = a0 | s1\n 33372: a0 = a0 | a4\n 33375: a0 = a0 << 0x20\n 33378: a0 = a0 | a1\n 33381: s1 = reverse a0\n 33383: a3 = reverse a3\n 33385: u64 [sp + 0x8] = a3\n 33388: a1 = reverse a2\n 33390: u64 [sp + 0x10] = a1\n 33393: a2 = reverse t0\n 33395: u64 [sp + 0x98] = a2\n 33399: a0 = u64 [sp + 0x18]\n 33402: u64 [sp + 0xb8] = a0\n 33406: a0 = u64 [sp + 0x20]\n 33409: u64 [sp + 0xb0] = a0\n 33413: a0 = u64 [sp + 0x28]\n 33416: u64 [sp + 0xa8] = a0\n 33420: a0 = u64 [sp + 0x30]\n 33423: u64 [sp + 0xa0] = a0\n 33427: a0 = u64 [sp + 0x38]\n 33430: u64 [sp + 0xd8] = a0\n 33434: a0 = u64 [sp + 0x40]\n 33437: u64 [sp + 0xd0] = a0\n 33441: a0 = u64 [sp + 0x48]\n 33444: u64 [sp + 0xc8] = a0\n 33448: a0 = u64 [sp + 0x50]\n 33451: u64 [sp + 0xc0] = a0\n 33455: a0 = u64 [sp + 0x58]\n 33458: u64 [sp + 0xf8] = a0\n 33462: a0 = u64 [sp + 0x60]\n 33465: u64 [sp + 0xf0] = a0\n 33469: a0 = u64 [sp + 0x68]\n 33472: u64 [sp + 0xe8] = a0\n 33476: a0 = u64 [sp + 0x70]\n 33479: u64 [sp + 0xe0] = a0\n 33483: a0 = u64 [sp + 0x78]\n 33486: u64 [sp + 0x118] = a0\n 33490: a0 = u64 [sp + 0x80]\n 33494: u64 [sp + 0x110] = a0\n 33498: a0 = u64 [sp + 0x88]\n 33502: u64 [sp + 0x108] = a0\n 33506: a0 = u64 [sp + 0x90]\n 33510: u64 [sp + 0x100] = a0\n 33514: u64 [sp + 0x138] = a2\n 33518: u64 [sp + 0x130] = a1\n 33522: u64 [sp + 0x128] = a3\n 33526: a0 = sp + 0x140\n 33530: a1 = sp + 0x120\n 33534: a2 = sp + 0x100\n 33538: a3 = sp + 0xe0\n 33542: a4 = sp + 0xc0\n 33546: a5 = sp + 0xa0\n 33550: u64 [sp + 0x120] = s1\n 33554: ra = 474, jump @521\n      : @537 [@dyn 237] (gas: 12)\n 33560: a4 = u64 [sp + 0x8]\n 33563: a2 = s1\n 33565: a0 = u64 [sp + 0x98]\n 33569: a0 = a0 | a4\n 33572: s1 = u64 [sp + 0x10]\n 33575: a1 = a2 | s1\n 33578: a1 = a1 | a0\n 33581: a1 = a1 >> 0x20\n 33584: a0 = a0 | s1\n 33587: a0 = a0 << 0x20\n 33590: a0 = a0 | a1\n 33593: jump @539 if a0 != 0\n      : @538 (gas: 29)\n 33596: a0 = u64 [sp + 0x148]\n 33600: a1 = u64 [sp + 0x158]\n 33604: u64 [sp + 0x90] = a1\n 33608: t1 = u64 [sp + 0x140]\n 33612: a1 = u64 [sp + 0x150]\n 33616: t2 = a0 ^ a4\n 33619: a5 = a0 <u a4\n 33622: ra = t1 <u a2\n 33625: a5 = ra if t2 == 0\n 33628: a3 = a1 - s1\n 33631: t2 = a3 - a5\n 33634: t0 = a3 <u a5\n 33637: a3 = a1 <u s1\n 33640: a1 = u64 [sp + 0x98]\n 33644: a5 = u64 [sp + 0x90]\n 33648: a5 = a5 - a1\n 33651: a5 = a5 - a3\n 33654: a5 = a5 - t0\n 33657: a0 = a0 - a4\n 33660: a0 = a0 - ra\n 33663: s1 = t1 - a2\n 33666: a0 = a0 | a5\n 33669: a1 = s1 | t2\n 33672: a1 = a1 | a0\n 33675: a0 = a0 | t2\n 33678: a1 = a1 >> 0x20\n 33681: a0 = a0 << 0x20\n 33684: a0 = a0 | a1\n 33687: jump @542 if a0 == 0\n      : @539 (gas: 1)\n 33690: trap\n      : @540 (gas: 3)\n 33691: a0 = 0\n 33693: a1 = 0\n 33695: ra = 476, jump @0\n      : @541 [@dyn 238] (gas: 5)\n 33702: i32 a1 = a0 + 0\n 33704: a0 = 0x1\n 33707: a2 = 0\n 33709: ecalli 10 // 'seal_return'\n 33711: fallthrough\n      : @542 (gas: 4)\n 33712: i32 a0 = a2 + 0\n 33714: i32 s1 = s1 + 0\n 33716: a1 = s1\n 33718: ra = 478, jump @0\n      : @543 [@dyn 239] (gas: 6)\n 33725: i32 a1 = a0 + 0\n 33727: a0 = 0\n 33729: a2 = s1\n 33731: ra = 0x1e0\n 33735: ecalli 10 // 'seal_return'\n 33737: fallthrough\n      : @544 [@dyn 240] (gas: 19)\n 33738: t0 = u64 [a0 + 0x18]\n 33741: t1 = u64 [a1 + 0x18]\n 33744: a4 = u64 [a0 + 0x10]\n 33747: a5 = u64 [a0 + 0x8]\n 33750: a2 = u64 [a1 + 0x8]\n 33753: t2 = u64 [a0]\n 33755: a3 = u64 [a1]\n 33757: a1 = u64 [a1 + 0x10]\n 33760: a0 = a2 ^ a5\n 33763: a2 = a2 <u a5\n 33766: a3 = a3 <u t2\n 33769: a3 = a2 if a0 != 0\n 33772: a0 = a1 - a4\n 33775: a0 = a0 <u a3\n 33778: a1 = a1 <u a4\n 33781: a2 = t1 - t0\n 33784: a2 = a2 - a1\n 33787: a2 = a2 - a0\n 33790: jump @546 if a2 <s 0\n      : @545 (gas: 1)\n 33793: ret\n      : @546 (gas: 5)\n 33795: sp = sp + 0xfffffffffffffff8\n 33798: u64 [sp] = ra\n 33800: a0 = 0\n 33802: a1 = 0\n 33804: ra = 482, jump @0\n      : @547 [@dyn 241] (gas: 6)\n 33811: i32 a1 = a0 + 0\n 33813: a0 = 0x1\n 33816: a2 = 0\n 33818: ra = 0x1e4\n 33822: ecalli 10 // 'seal_return'\n 33824: fallthrough\n      : @548 [@dyn 242] (gas: 20)\n 33825: sp = sp + 0xffffffffffffffb8\n 33828: u64 [sp + 0x40] = ra\n 33831: u64 [sp + 0x38] = s0\n 33834: u64 [sp + 0x30] = s1\n 33837: a4 = u64 [a2 + 0x10]\n 33840: a3 = u64 [a2 + 0x18]\n 33843: a5 = u64 [a2 + 0x8]\n 33846: s1 = u64 [a2]\n 33848: u64 [sp + 0x20] = a3\n 33851: u64 [sp + 0x18] = a5\n 33854: a2 = a5 | a3\n 33857: a3 = s1 | a4\n 33860: a3 = a3 | a2\n 33863: a3 = a3 >> 0x20\n 33866: u64 [sp + 0x28] = a4\n 33869: a2 = a2 | a4\n 33872: a2 = a2 << 0x20\n 33875: a2 = a2 | a3\n 33878: u64 [sp + 0x10] = a0\n 33881: jump @551 if a2 != 0\n      : @549 (gas: 10)\n 33885: a0 = u64 [a1 + 0x10]\n 33888: a2 = u64 [a1 + 0x8]\n 33891: u64 [sp] = a2\n 33893: a1 = u64 [a1]\n 33895: u64 [sp + 0x8] = a1\n 33898: a0 = a0 << 0x20\n 33901: s0 = a0 >> 0x20\n 33904: i32 a0 = s1 + 0\n 33906: a1 = 0x20\n 33909: ra = 486, jump @0\n      : @550 [@dyn 243] (gas: 76)\n 33916: a1 = reverse s0\n 33918: a2 = u64 [sp]\n 33920: a2 = reverse a2\n 33922: a3 = u64 [sp + 0x8]\n 33925: a3 = reverse a3\n 33927: a4 = a3 >> 0x38\n 33930: u8 [a0 + 0x1f] = a4\n 33933: a4 = a3 >> 0x30\n 33936: u8 [a0 + 0x1e] = a4\n 33939: a4 = a3 >> 0x28\n 33942: u8 [a0 + 0x1d] = a4\n 33945: a4 = a3 >> 0x20\n 33948: u8 [a0 + 0x1c] = a4\n 33951: a4 = a3 >> 0x18\n 33954: u8 [a0 + 0x1b] = a4\n 33957: a4 = a3 >> 0x10\n 33960: u8 [a0 + 0x1a] = a4\n 33963: a4 = a3 >> 0x8\n 33966: u8 [a0 + 0x19] = a4\n 33969: u8 [a0 + 0x18] = a3\n 33972: u8 [a0 + 0x10] = a2\n 33975: u8 [a0 + 11] = 0\n 33978: u8 [a0 + 10] = 0\n 33981: u8 [a0 + 9] = 0\n 33984: u8 [a0 + 7] = 0\n 33987: u8 [a0 + 6] = 0\n 33990: u8 [a0 + 5] = 0\n 33993: u8 [a0 + 4] = 0\n 33996: u8 [a0 + 3] = 0\n 33999: u8 [a0 + 2] = 0\n 34002: u8 [a0 + 1] = 0\n 34005: u8 [a0 + 0] = 0\n 34007: a3 = a2 >> 0x38\n 34010: u8 [a0 + 0x17] = a3\n 34013: a3 = a2 >> 0x30\n 34016: u8 [a0 + 0x16] = a3\n 34019: a3 = a2 >> 0x28\n 34022: u8 [a0 + 0x15] = a3\n 34025: a3 = a2 >> 0x20\n 34028: u8 [a0 + 0x14] = a3\n 34031: a3 = a2 >> 0x18\n 34034: u8 [a0 + 0x13] = a3\n 34037: a3 = a2 >> 0x10\n 34040: u8 [a0 + 0x12] = a3\n 34043: a2 = a2 >> 0x8\n 34046: u8 [a0 + 0x11] = a2\n 34049: u8 [a0 + 0x8] = a1\n 34052: a2 = a1 >> 0x38\n 34055: u8 [a0 + 0xf] = a2\n 34058: a2 = a1 >> 0x30\n 34061: u8 [a0 + 0xe] = a2\n 34064: a2 = a1 >> 0x28\n 34067: u8 [a0 + 0xd] = a2\n 34070: a1 = a1 >> 0x20\n 34073: u8 [a0 + 0xc] = a1\n 34076: a0 = s1 + 0x20\n 34079: a1 = a0 <u s1\n 34082: a3 = u64 [sp + 0x18]\n 34085: a2 = a3 + a1\n 34088: a3 = a2 <u a3\n 34091: a3 = a1 if a1 == 0\n 34094: a1 = u64 [sp + 0x28]\n 34097: a3 = a3 + a1\n 34100: a1 = a3 <u a1\n 34103: a4 = u64 [sp + 0x20]\n 34106: a1 = a1 + a4\n 34109: a4 = u64 [sp + 0x10]\n 34112: u64 [a4] = a0\n 34114: u64 [a4 + 0x18] = a1\n 34117: u64 [a4 + 0x8] = a2\n 34120: u64 [a4 + 0x10] = a3\n 34123: ra = u64 [sp + 0x40]\n 34126: s0 = u64 [sp + 0x38]\n 34129: s1 = u64 [sp + 0x30]\n 34132: sp = sp + 0x48\n 34135: ret\n      : @551 (gas: 1)\n 34137: trap\n      : @552 (gas: 18)\n 34138: sp = sp + 0xfffffffffffffeb0\n 34142: u64 [sp + 0x148] = ra\n 34146: u64 [sp + 0x140] = s0\n 34150: u64 [sp + 0x138] = s1\n 34154: a4 = u64 [a1 + 0x10]\n 34157: a3 = u64 [a1 + 0x18]\n 34160: a5 = u64 [a1 + 0x8]\n 34163: s0 = u64 [a1]\n 34165: u64 [sp + 0xf0] = a5\n 34169: u64 [sp + 0x130] = a3\n 34173: a1 = a5 | a3\n 34176: a3 = s0 | a4\n 34179: a3 = a3 | a1\n 34182: a3 = a3 >> 0x20\n 34185: a1 = a1 | a4\n 34188: a1 = a1 << 0x20\n 34191: a1 = a1 | a3\n 34194: jump @564 if a1 != 0\n      : @553 (gas: 13)\n 34198: u64 [sp + 0xe8] = a4\n 34202: u64 [sp] = a0\n 34204: a0 = u64 [a2 + 0x18]\n 34207: u64 [sp + 0x110] = a0\n 34211: s1 = u64 [a2 + 0x10]\n 34214: a1 = u64 [a2 + 0x8]\n 34217: a0 = u64 [a2]\n 34219: u64 [sp + 0x118] = a0\n 34223: u64 [sp + 0xd8] = s0\n 34227: i32 a0 = s0 + 0\n 34229: s0 = a1\n 34231: a1 = 0x20\n 34234: ra = 488, jump @0\n      : @554 [@dyn 244] (gas: 12)\n 34241: t0 = u64 [sp + 0x118]\n 34245: a1 = t0 | s1\n 34248: u64 [sp + 0x108] = s0\n 34252: a2 = u64 [sp + 0x110]\n 34256: a2 = a2 | s0\n 34259: a1 = a1 | a2\n 34262: a1 = a1 >> 0x20\n 34265: u64 [sp + 0x100] = s1\n 34269: a2 = a2 | s1\n 34272: a2 = a2 << 0x20\n 34275: a1 = a1 | a2\n 34278: jump @564 if a1 != 0\n      : @555 (gas: 93)\n 34282: a1 = u8 [a0 + 0x19]\n 34285: a2 = u8 [a0 + 0x18]\n 34288: a3 = u8 [a0 + 0x1a]\n 34291: a4 = u8 [a0 + 0x1b]\n 34294: a1 = a1 << 0x8\n 34297: a1 = a1 | a2\n 34300: a3 = a3 << 0x10\n 34303: a4 = a4 << 0x18\n 34306: a3 = a3 | a4\n 34309: a1 = a1 | a3\n 34312: a2 = u8 [a0 + 0x1d]\n 34315: a3 = u8 [a0 + 0x1c]\n 34318: a4 = u8 [a0 + 0x1e]\n 34321: a5 = u8 [a0 + 0x1f]\n 34324: a2 = a2 << 0x8\n 34327: a2 = a2 | a3\n 34330: a4 = a4 << 0x10\n 34333: a5 = a5 << 0x18\n 34336: a4 = a4 | a5\n 34339: a2 = a2 | a4\n 34342: a2 = a2 << 0x20\n 34345: a1 = a1 | a2\n 34348: u64 [sp + 0x120] = a1\n 34352: a1 = u8 [a0 + 0x11]\n 34355: a2 = u8 [a0 + 0x10]\n 34358: a3 = u8 [a0 + 0x12]\n 34361: a4 = u8 [a0 + 0x13]\n 34364: a1 = a1 << 0x8\n 34367: a1 = a1 | a2\n 34370: a3 = a3 << 0x10\n 34373: a4 = a4 << 0x18\n 34376: a3 = a3 | a4\n 34379: a1 = a1 | a3\n 34382: a2 = u8 [a0 + 0x15]\n 34385: a3 = u8 [a0 + 0x14]\n 34388: a4 = u8 [a0 + 0x16]\n 34391: a5 = u8 [a0 + 0x17]\n 34394: a2 = a2 << 0x8\n 34397: a2 = a2 | a3\n 34400: a4 = a4 << 0x10\n 34403: a5 = a5 << 0x18\n 34406: a4 = a4 | a5\n 34409: a2 = a2 | a4\n 34412: a2 = a2 << 0x20\n 34415: a1 = a1 | a2\n 34418: u64 [sp + 0x128] = a1\n 34422: a1 = u8 [a0 + 0x9]\n 34425: a2 = u8 [a0 + 0x8]\n 34428: a3 = u8 [a0 + 0xa]\n 34431: a4 = u8 [a0 + 0xb]\n 34434: a1 = a1 << 0x8\n 34437: a1 = a1 | a2\n 34440: a3 = a3 << 0x10\n 34443: a4 = a4 << 0x18\n 34446: a3 = a3 | a4\n 34449: a1 = a1 | a3\n 34452: a2 = u8 [a0 + 0xd]\n 34455: a3 = u8 [a0 + 0xc]\n 34458: a4 = u8 [a0 + 0xe]\n 34461: a5 = u8 [a0 + 0xf]\n 34464: a2 = a2 << 0x8\n 34467: a2 = a2 | a3\n 34470: a4 = a4 << 0x10\n 34473: a5 = a5 << 0x18\n 34476: a4 = a4 | a5\n 34479: a2 = a2 | a4\n 34482: a2 = a2 << 0x20\n 34485: s0 = a2 | a1\n 34488: a1 = u8 [a0 + 0x1]\n 34491: a2 = u8 [a0]\n 34493: a3 = u8 [a0 + 0x2]\n 34496: a4 = u8 [a0 + 0x3]\n 34499: a1 = a1 << 0x8\n 34502: a1 = a1 | a2\n 34505: a3 = a3 << 0x10\n 34508: a4 = a4 << 0x18\n 34511: a3 = a3 | a4\n 34514: a1 = a1 | a3\n 34517: a2 = u8 [a0 + 0x5]\n 34520: a3 = u8 [a0 + 0x4]\n 34523: a4 = u8 [a0 + 0x6]\n 34526: a0 = u8 [a0 + 0x7]\n 34529: a2 = a2 << 0x8\n 34532: a2 = a2 | a3\n 34535: a4 = a4 << 0x10\n 34538: a0 = a0 << 0x18\n 34541: a0 = a0 | a4\n 34544: a0 = a0 | a2\n 34547: a0 = a0 << 0x20\n 34550: s1 = a0 | a1\n 34553: i32 a0 = t0 + 0\n 34555: a1 = 0x20\n 34558: ra = 490, jump @0\n      : @556 [@dyn 245] (gas: 82)\n 34565: a2 = u64 [sp + 0x128]\n 34569: u8 [a0 + 0x10] = a2\n 34572: a1 = s0 >> 0x38\n 34575: u8 [a0 + 0xf] = a1\n 34578: a1 = s0 >> 0x30\n 34581: u8 [a0 + 0xe] = a1\n 34584: a1 = s0 >> 0x28\n 34587: u8 [a0 + 0xd] = a1\n 34590: a1 = s0 >> 0x20\n 34593: u8 [a0 + 0xc] = a1\n 34596: a1 = s0 >> 0x18\n 34599: u8 [a0 + 0xb] = a1\n 34602: a1 = s0 >> 0x10\n 34605: u8 [a0 + 0xa] = a1\n 34608: a1 = s0 >> 0x8\n 34611: u8 [a0 + 0x9] = a1\n 34614: u8 [a0 + 0x8] = s0\n 34617: a1 = s1 >> 0x38\n 34620: u8 [a0 + 0x7] = a1\n 34623: a1 = s1 >> 0x30\n 34626: u8 [a0 + 0x6] = a1\n 34629: a1 = s1 >> 0x28\n 34632: u8 [a0 + 0x5] = a1\n 34635: a1 = s1 >> 0x20\n 34638: u8 [a0 + 0x4] = a1\n 34641: a1 = s1 >> 0x18\n 34644: u8 [a0 + 0x3] = a1\n 34647: a1 = s1 >> 0x10\n 34650: u8 [a0 + 0x2] = a1\n 34653: a1 = s1 >> 0x8\n 34656: u8 [a0 + 0x1] = a1\n 34659: u8 [a0] = s1\n 34661: a3 = u64 [sp + 0x120]\n 34665: u8 [a0 + 0x18] = a3\n 34668: a1 = a2 >> 0x38\n 34671: u8 [a0 + 0x17] = a1\n 34674: a1 = a2 >> 0x30\n 34677: u8 [a0 + 0x16] = a1\n 34680: a1 = a2 >> 0x28\n 34683: u8 [a0 + 0x15] = a1\n 34686: a1 = a2 >> 0x20\n 34689: u8 [a0 + 0x14] = a1\n 34692: a1 = a2 >> 0x18\n 34695: u8 [a0 + 0x13] = a1\n 34698: a1 = a2 >> 0x10\n 34701: u8 [a0 + 0x12] = a1\n 34704: a1 = a2 >> 0x8\n 34707: a4 = a2\n 34709: u8 [a0 + 0x11] = a1\n 34712: a1 = a3 >> 0x38\n 34715: u8 [a0 + 0x1f] = a1\n 34718: a1 = a3 >> 0x30\n 34721: u8 [a0 + 0x1e] = a1\n 34724: a1 = a3 >> 0x28\n 34727: u8 [a0 + 0x1d] = a1\n 34730: a1 = a3 >> 0x20\n 34733: u8 [a0 + 0x1c] = a1\n 34736: a1 = a3 >> 0x18\n 34739: u8 [a0 + 0x1b] = a1\n 34742: a1 = a3 >> 0x10\n 34745: u8 [a0 + 0x1a] = a1\n 34748: a1 = a3 >> 0x8\n 34751: u8 [a0 + 0x19] = a1\n 34754: a0 = u64 [sp + 0x118]\n 34758: t1 = a0 + 0x20\n 34761: a2 = t1 <u a0\n 34764: a0 = a3\n 34766: a3 = u64 [sp + 0x108]\n 34770: t2 = a3 + a2\n 34773: a3 = t2 <u a3\n 34776: a3 = a2 if a2 == 0\n 34779: a5 = u64 [sp + 0x100]\n 34783: ra = a5 + a3\n 34786: a3 = s1 | a4\n 34789: u64 [sp + 0xd0] = s0\n 34793: a4 = s0 | a0\n 34796: a4 = a4 | a3\n 34799: a3 = ra <u a5\n 34802: t0 = u64 [sp + 0x110]\n 34806: a5 = t0 + a3\n 34809: u64 [sp + 0xf8] = a5\n 34813: jump @563 if a4 == 0\n      : @557 (gas: 21)\n 34817: a0 = 0\n 34819: a1 = 0\n 34821: u64 [sp + 224] = 0\n 34825: a2 = 0\n 34827: a3 = reverse s1\n 34829: u64 [sp + 0x20] = a3\n 34832: a3 = u64 [sp + 0xd0]\n 34836: a3 = reverse a3\n 34838: u64 [sp + 0x18] = a3\n 34841: a3 = u64 [sp + 0x128]\n 34845: a3 = reverse a3\n 34847: u64 [sp + 0x10] = a3\n 34850: a3 = u64 [sp + 0x120]\n 34854: a3 = reverse a3\n 34856: u64 [sp + 0x8] = a3\n 34859: a4 = 0xffffffe0\n 34869: u64 [sp + 0x28] = a4\n 34872: t0 = u64 [sp + 0xe8]\n 34876: a3 = u64 [sp + 0xf0]\n 34880: s0 = u64 [sp + 0xd8]\n 34884: fallthrough\n      : @558 (gas: 16)\n 34885: u64 [sp + 0xc8] = a2\n 34889: u64 [sp + 0xd0] = a1\n 34893: u64 [sp + 0xd8] = a0\n 34897: a4 = u64 [sp + 0x130]\n 34901: a4 = t0 | a4\n 34904: s1 = u64 [sp + 0x28]\n 34907: a5 = s0 <u s1\n 34910: u64 [sp + 0xf0] = a3\n 34914: a5 = 0 if a3 != 0\n 34916: a5 = 0 if a4 != 0\n 34918: a0 = u64 [sp + 0xf8]\n 34922: u64 [sp + 0xc0] = a0\n 34926: u64 [sp + 0xb8] = ra\n 34930: u64 [sp + 0xb0] = t2\n 34934: u64 [sp + 0x128] = t1\n 34938: jump @564 if a5 == 0\n      : @559 (gas: 6)\n 34942: u64 [sp + 0xe8] = t0\n 34946: a0 = s0 + 0x20\n 34949: u64 [sp + 0x120] = a0\n 34953: i32 a0 = a0 + 0\n 34955: a1 = 0x20\n 34958: ra = 492, jump @0\n      : @560 [@dyn 246] (gas: 9)\n 34965: a1 = u64 [sp + 0x100]\n 34969: a2 = u64 [sp + 0x110]\n 34973: a1 = a1 | a2\n 34976: a2 = u64 [sp + 0x118]\n 34980: a2 = a2 <u s1\n 34983: a3 = u64 [sp + 0x108]\n 34987: a2 = 0 if a3 != 0\n 34989: a2 = 0 if a1 != 0\n 34991: jump @564 if a2 == 0\n      : @561 (gas: 58)\n 34995: a1 = u64 [sp + 0x120]\n 34999: a2 = a1 <u s0\n 35002: s0 = u64 [sp + 0xf0]\n 35006: a1 = s0 + a2\n 35009: u64 [sp + 0x118] = a1\n 35013: a1 = a1 <u s0\n 35016: a1 = a2 if a2 == 0\n 35019: a2 = u8 [a0 + 0xc]\n 35022: u64 [sp + 0x108] = a2\n 35026: a2 = u8 [a0 + 0xd]\n 35029: u64 [sp + 0x100] = a2\n 35033: a2 = u8 [a0 + 0xe]\n 35036: u64 [sp + 0xf8] = a2\n 35040: a2 = u8 [a0 + 0xf]\n 35043: u64 [sp + 0xf0] = a2\n 35047: a2 = u8 [a0 + 0x10]\n 35050: u64 [sp + 0xa8] = a2\n 35054: a2 = u8 [a0 + 0x11]\n 35057: u64 [sp + 0xa0] = a2\n 35061: a2 = u8 [a0 + 0x12]\n 35064: u64 [sp + 0x98] = a2\n 35068: a2 = u8 [a0 + 0x13]\n 35071: u64 [sp + 0x90] = a2\n 35075: a2 = u8 [a0 + 0x14]\n 35078: u64 [sp + 0x88] = a2\n 35082: a2 = u8 [a0 + 0x15]\n 35085: u64 [sp + 0x80] = a2\n 35089: a2 = u8 [a0 + 0x16]\n 35092: u64 [sp + 0x78] = a2\n 35095: a2 = u8 [a0 + 0x17]\n 35098: u64 [sp + 0x70] = a2\n 35101: a2 = u8 [a0 + 0x18]\n 35104: u64 [sp + 0x68] = a2\n 35107: a2 = u8 [a0 + 0x19]\n 35110: u64 [sp + 0x60] = a2\n 35113: a2 = u8 [a0 + 0x1a]\n 35116: u64 [sp + 0x58] = a2\n 35119: a2 = u8 [a0 + 0x1b]\n 35122: u64 [sp + 0x50] = a2\n 35125: a2 = u8 [a0 + 0x1c]\n 35128: u64 [sp + 0x48] = a2\n 35131: a2 = u8 [a0 + 0x1d]\n 35134: u64 [sp + 0x40] = a2\n 35137: a2 = u8 [a0 + 0x1e]\n 35140: u64 [sp + 0x38] = a2\n 35143: a0 = u8 [a0 + 0x1f]\n 35146: u64 [sp + 0x30] = a0\n 35149: s1 = u64 [sp + 0xe8]\n 35153: a1 = a1 + s1\n 35156: u64 [sp + 0x110] = a1\n 35160: a0 = a1 <u s1\n 35163: a1 = u64 [sp + 0x130]\n 35167: a1 = a1 + a0\n 35170: u64 [sp + 0x130] = a1\n 35174: s0 = u64 [sp + 0x128]\n 35178: i32 a0 = s0 + 0\n 35180: a1 = 0x20\n 35183: ra = 494, jump @0\n      : @562 [@dyn 247] (gas: 110)\n 35190: a1 = u64 [sp + 0x30]\n 35193: u8 [a0 + 0x1f] = a1\n 35196: a1 = u64 [sp + 0x38]\n 35199: u8 [a0 + 0x1e] = a1\n 35202: a1 = u64 [sp + 0x40]\n 35205: u8 [a0 + 0x1d] = a1\n 35208: a1 = u64 [sp + 0x48]\n 35211: u8 [a0 + 0x1c] = a1\n 35214: a1 = u64 [sp + 0x50]\n 35217: u8 [a0 + 0x1b] = a1\n 35220: a1 = u64 [sp + 0x58]\n 35223: u8 [a0 + 0x1a] = a1\n 35226: a1 = u64 [sp + 0x60]\n 35229: u8 [a0 + 0x19] = a1\n 35232: a1 = u64 [sp + 0x68]\n 35235: u8 [a0 + 0x18] = a1\n 35238: a1 = u64 [sp + 0x70]\n 35241: u8 [a0 + 0x17] = a1\n 35244: a1 = u64 [sp + 0x78]\n 35247: u8 [a0 + 0x16] = a1\n 35250: a1 = u64 [sp + 0x80]\n 35254: u8 [a0 + 0x15] = a1\n 35257: a1 = u64 [sp + 0x88]\n 35261: u8 [a0 + 0x14] = a1\n 35264: a1 = u64 [sp + 0x90]\n 35268: u8 [a0 + 0x13] = a1\n 35271: a1 = u64 [sp + 0x98]\n 35275: u8 [a0 + 0x12] = a1\n 35278: a1 = u64 [sp + 0xa0]\n 35282: u8 [a0 + 0x11] = a1\n 35285: a1 = u64 [sp + 0xa8]\n 35289: u8 [a0 + 0x10] = a1\n 35292: a1 = u64 [sp + 0xf0]\n 35296: u8 [a0 + 0xf] = a1\n 35299: a1 = u64 [sp + 0xf8]\n 35303: u8 [a0 + 0xe] = a1\n 35306: a1 = u64 [sp + 0x100]\n 35310: u8 [a0 + 0xd] = a1\n 35313: a1 = u64 [sp + 0x108]\n 35317: u8 [a0 + 0xc] = a1\n 35320: u8 [a0 + 11] = 0\n 35323: u8 [a0 + 10] = 0\n 35326: u8 [a0 + 9] = 0\n 35329: u8 [a0 + 8] = 0\n 35332: u8 [a0 + 7] = 0\n 35335: u8 [a0 + 6] = 0\n 35338: u8 [a0 + 5] = 0\n 35341: u8 [a0 + 4] = 0\n 35344: u8 [a0 + 3] = 0\n 35347: u8 [a0 + 2] = 0\n 35350: u8 [a0 + 1] = 0\n 35353: u8 [a0 + 0] = 0\n 35355: t1 = u64 [sp + 0xd8]\n 35359: t1 = t1 + 0x1\n 35362: a0 = t1 <u 0x1\n 35365: t2 = u64 [sp + 0xd0]\n 35369: t2 = t2 + a0\n 35372: a0 = t1 | t2\n 35375: a4 = a0 <u 0x1\n 35378: a0 = u64 [sp + 0xe0]\n 35382: a4 = a4 + a0\n 35385: a0 = a4 <u a0\n 35388: ra = u64 [sp + 0xc8]\n 35392: ra = ra + a0\n 35395: a0 = u64 [sp + 0x8]\n 35398: a0 = t1 <u a0\n 35401: a2 = u64 [sp + 0x10]\n 35404: a1 = t2 ^ a2\n 35407: a2 = t2 <u a2\n 35410: a2 = a0 if a1 == 0\n 35413: a0 = u64 [sp + 0x18]\n 35416: s1 = a4 <u a0\n 35419: a3 = u64 [sp + 0x20]\n 35422: a1 = ra ^ a3\n 35425: a5 = ra <u a3\n 35428: a5 = s1 if a1 == 0\n 35431: a0 = a0 ^ a4\n 35434: a1 = a1 | a0\n 35437: a0 = s0 + 0x20\n 35440: u64 [sp + 0xf0] = a0\n 35444: a5 = a2 if a1 == 0\n 35447: a2 = a0 <u s0\n 35450: s1 = u64 [sp + 0xb0]\n 35454: a0 = s1 + a2\n 35457: u64 [sp + 0xe8] = a0\n 35461: a3 = a0 <u s1\n 35464: a3 = a2 if a2 == 0\n 35467: a1 = u64 [sp + 0xb8]\n 35471: a3 = a3 + a1\n 35474: u64 [sp + 0xd8] = a3\n 35478: a3 = a3 <u a1\n 35481: a0 = u64 [sp + 0xc0]\n 35485: a3 = a3 + a0\n 35488: u64 [sp + 0xf8] = a3\n 35492: u64 [sp + 0xe0] = a4\n 35496: s0 = u64 [sp + 0x120]\n 35500: a3 = u64 [sp + 0x118]\n 35504: t0 = u64 [sp + 0x110]\n 35508: a2 = u64 [sp + 0x128]\n 35512: u64 [sp + 0x118] = a2\n 35516: u64 [sp + 0x108] = s1\n 35520: u64 [sp + 0x100] = a1\n 35524: u64 [sp + 0x110] = a0\n 35528: a0 = t1\n 35530: t1 = u64 [sp + 0xf0]\n 35534: a1 = t2\n 35536: t2 = u64 [sp + 0xe8]\n 35540: a2 = ra\n 35542: ra = u64 [sp + 0xd8]\n 35546: jump @558 if a5 != 0\n      : @563 (gas: 11)\n 35550: a4 = u64 [sp]\n 35552: u64 [a4] = t1\n 35554: u64 [a4 + 0x8] = t2\n 35557: u64 [a4 + 0x10] = ra\n 35560: a0 = u64 [sp + 0xf8]\n 35564: u64 [a4 + 0x18] = a0\n 35567: ra = u64 [sp + 0x148]\n 35571: s0 = u64 [sp + 0x140]\n 35575: s1 = u64 [sp + 0x138]\n 35579: sp = sp + 0x150\n 35583: ret\n      : @564 (gas: 1)\n 35585: trap\n      : @565 (gas: 8)\n 35586: a0 = u64 [sp + 0x110]\n 35590: a1 = u64 [sp + 0x118]\n 35594: a2 = u64 [sp + 0x108]\n 35598: a3 = u64 [sp + 0x100]\n 35602: a1 = a1 | a2\n 35605: a0 = a0 | a3\n 35608: a0 = a0 | a1\n 35611: jump @574 if a0 != 0\n      : @566 (gas: 2)\n 35615: a1 = i32 [0x20164]\n 35620: jump @574 if a1 <=u 3\n      : @567 (gas: 7)\n 35625: u64 [sp + 216] = 0\n 35629: u64 [sp + 208] = 0\n 35633: u64 [sp + 192] = 0x3\n 35638: a0 = sp + 0xe0\n 35642: a1 = sp + 0xc0\n 35646: u64 [sp + 200] = 0\n 35650: ra = 496, jump @1030\n      : @568 [@dyn 248] (gas: 11)\n 35657: a0 = u64 [sp + 0xf8]\n 35661: u64 [sp + 0x40] = a0\n 35664: a0 = u64 [sp + 0xf0]\n 35668: u64 [sp + 0x48] = a0\n 35671: a0 = u64 [sp + 0xe8]\n 35675: u64 [sp + 0x50] = a0\n 35678: a0 = u64 [sp + 0xe0]\n 35682: u64 [sp + 0x58] = a0\n 35685: a0 = 0x40\n 35688: a1 = 0x20\n 35691: ra = 498, jump @0\n      : @569 [@dyn 249] (gas: 100)\n 35698: a1 = u8 [a0 + 0x11]\n 35701: a2 = u8 [a0 + 0x10]\n 35704: a3 = u8 [a0 + 0x12]\n 35707: a4 = u8 [a0 + 0x13]\n 35710: a1 = a1 << 0x8\n 35713: a1 = a1 | a2\n 35716: a3 = a3 << 0x10\n 35719: a4 = a4 << 0x18\n 35722: a3 = a3 | a4\n 35725: a1 = a1 | a3\n 35728: a2 = u8 [a0 + 0x15]\n 35731: a3 = u8 [a0 + 0x14]\n 35734: a4 = u8 [a0 + 0x16]\n 35737: a5 = u8 [a0 + 0x17]\n 35740: a2 = a2 << 0x8\n 35743: a2 = a2 | a3\n 35746: a4 = a4 << 0x10\n 35749: a5 = a5 << 0x18\n 35752: a4 = a4 | a5\n 35755: a2 = a2 | a4\n 35758: a2 = a2 << 0x20\n 35761: t0 = a2 | a1\n 35764: a2 = u8 [a0 + 0x1]\n 35767: a3 = u8 [a0]\n 35769: a4 = u8 [a0 + 0x2]\n 35772: a5 = u8 [a0 + 0x3]\n 35775: a2 = a2 << 0x8\n 35778: a2 = a2 | a3\n 35781: a4 = a4 << 0x10\n 35784: a5 = a5 << 0x18\n 35787: a4 = a4 | a5\n 35790: a2 = a2 | a4\n 35793: a3 = u8 [a0 + 0x5]\n 35796: a4 = u8 [a0 + 0x4]\n 35799: a5 = u8 [a0 + 0x6]\n 35802: s1 = u8 [a0 + 0x7]\n 35805: a3 = a3 << 0x8\n 35808: a3 = a3 | a4\n 35811: a5 = a5 << 0x10\n 35814: s1 = s1 << 0x18\n 35817: a5 = a5 | s1\n 35820: a3 = a3 | a5\n 35823: a3 = a3 << 0x20\n 35826: a2 = a2 | a3\n 35829: a3 = u8 [a0 + 0x19]\n 35832: a4 = u8 [a0 + 0x18]\n 35835: a5 = u8 [a0 + 0x1a]\n 35838: s1 = u8 [a0 + 0x1b]\n 35841: a3 = a3 << 0x8\n 35844: a3 = a3 | a4\n 35847: a5 = a5 << 0x10\n 35850: s1 = s1 << 0x18\n 35853: a5 = a5 | s1\n 35856: a3 = a3 | a5\n 35859: a4 = u8 [a0 + 0x1d]\n 35862: a5 = u8 [a0 + 0x1c]\n 35865: s1 = u8 [a0 + 0x1e]\n 35868: a1 = u8 [a0 + 0x1f]\n 35871: a4 = a4 << 0x8\n 35874: a4 = a4 | a5\n 35877: s1 = s1 << 0x10\n 35880: a1 = a1 << 0x18\n 35883: a1 = a1 | s1\n 35886: a1 = a1 | a4\n 35889: a1 = a1 << 0x20\n 35892: a3 = a3 | a1\n 35895: a1 = u8 [a0 + 0x9]\n 35898: a4 = u8 [a0 + 0x8]\n 35901: a5 = u8 [a0 + 0xa]\n 35904: s1 = u8 [a0 + 0xb]\n 35907: a1 = a1 << 0x8\n 35910: a1 = a1 | a4\n 35913: a5 = a5 << 0x10\n 35916: s1 = s1 << 0x18\n 35919: a5 = a5 | s1\n 35922: a1 = a1 | a5\n 35925: a4 = u8 [a0 + 0xd]\n 35928: a5 = u8 [a0 + 0xc]\n 35931: s1 = u8 [a0 + 0xe]\n 35934: a0 = u8 [a0 + 0xf]\n 35937: a4 = a4 << 0x8\n 35940: a4 = a4 | a5\n 35943: s1 = s1 << 0x10\n 35946: a0 = a0 << 0x18\n 35949: a0 = a0 | s1\n 35952: a0 = a0 | a4\n 35955: a0 = a0 << 0x20\n 35958: a0 = a0 | a1\n 35961: s1 = reverse a0\n 35963: a3 = reverse a3\n 35965: a4 = reverse a2\n 35967: a2 = reverse t0\n 35969: a0 = a2 | a4\n 35972: a1 = a3 | s1\n 35975: a1 = a1 | a0\n 35978: a1 = a1 >> 0x20\n 35981: a0 = a0 | s1\n 35984: a0 = a0 << 0x20\n 35987: a0 = a0 | a1\n 35990: jump @573 if a0 != 0\n      : @570 (gas: 19)\n 35994: a0 = a3 + 0x20\n 35997: u64 [sp + 0x18] = a0\n 36000: a0 = a0 <u a3\n 36003: a1 = a2 + a0\n 36006: u64 [sp + 0x8] = a1\n 36009: a1 = a1 <u a2\n 36012: a1 = a0 if a0 == 0\n 36015: a1 = a1 + s1\n 36018: u64 [sp + 0x10] = a1\n 36021: a0 = a1 <u s1\n 36024: a0 = a0 + a4\n 36027: u64 [sp + 0x20] = a0\n 36030: i32 a0 = a3 + 0\n 36032: a1 = 0x20\n 36035: u64 [sp] = a0\n 36037: u64 [sp + 0x30] = a3\n 36040: u64 [sp + 0x28] = a2\n 36043: u64 [sp + 0x38] = a4\n 36046: ra = 500, jump @0\n      : @571 [@dyn 250] (gas: 52)\n 36053: u8 [a0 + 31] = 0x20\n 36057: u8 [a0 + 30] = 0\n 36060: u8 [a0 + 29] = 0\n 36063: u8 [a0 + 28] = 0\n 36066: u8 [a0 + 27] = 0\n 36069: u8 [a0 + 26] = 0\n 36072: u8 [a0 + 25] = 0\n 36075: u8 [a0 + 24] = 0\n 36078: u8 [a0 + 23] = 0\n 36081: u8 [a0 + 22] = 0\n 36084: u8 [a0 + 21] = 0\n 36087: u8 [a0 + 20] = 0\n 36090: u8 [a0 + 19] = 0\n 36093: u8 [a0 + 18] = 0\n 36096: u8 [a0 + 17] = 0\n 36099: u8 [a0 + 16] = 0\n 36102: u8 [a0 + 15] = 0\n 36105: u8 [a0 + 14] = 0\n 36108: u8 [a0 + 13] = 0\n 36111: u8 [a0 + 12] = 0\n 36114: u8 [a0 + 11] = 0\n 36117: u8 [a0 + 10] = 0\n 36120: u8 [a0 + 9] = 0\n 36123: u8 [a0 + 8] = 0\n 36126: u8 [a0 + 7] = 0\n 36129: u8 [a0 + 6] = 0\n 36132: u8 [a0 + 5] = 0\n 36135: u8 [a0 + 4] = 0\n 36138: u8 [a0 + 3] = 0\n 36141: u8 [a0 + 2] = 0\n 36144: u8 [a0 + 1] = 0\n 36147: u8 [a0 + 0] = 0\n 36149: a0 = u64 [sp + 0x8]\n 36152: u64 [sp + 0x68] = a0\n 36155: a0 = u64 [sp + 0x18]\n 36158: u64 [sp + 0x60] = a0\n 36161: a0 = u64 [sp + 0x40]\n 36164: u64 [sp + 0x98] = a0\n 36168: a0 = u64 [sp + 0x48]\n 36171: u64 [sp + 0x90] = a0\n 36175: a0 = u64 [sp + 0x50]\n 36178: u64 [sp + 0x88] = a0\n 36182: a0 = u64 [sp + 0x58]\n 36185: u64 [sp + 0x80] = a0\n 36189: a0 = u64 [sp + 0x10]\n 36192: u64 [sp + 0x70] = a0\n 36195: a0 = sp + 0xa0\n 36199: a1 = sp + 0x80\n 36203: a2 = sp + 0x60\n 36206: a3 = u64 [sp + 0x20]\n 36209: u64 [sp + 0x78] = a3\n 36212: ra = 502, jump @552\n      : @572 [@dyn 251] (gas: 30)\n 36218: a0 = u64 [sp + 0xa8]\n 36222: t0 = u64 [sp + 0xb8]\n 36226: t1 = u64 [sp + 0xa0]\n 36230: a3 = u64 [sp + 0xb0]\n 36234: a1 = u64 [sp + 0x28]\n 36237: a4 = a0 ^ a1\n 36240: a5 = a0 <u a1\n 36243: t2 = a1\n 36245: a2 = u64 [sp + 0x30]\n 36248: a1 = t1 <u a2\n 36251: a5 = a1 if a4 == 0\n 36254: a4 = a3 - s1\n 36257: a3 = a3 <u s1\n 36260: s1 = u64 [sp + 0x38]\n 36263: s1 = t0 - s1\n 36266: s1 = s1 - a3\n 36269: a3 = a4 <u a5\n 36272: s1 = s1 - a3\n 36275: a4 = a4 - a5\n 36278: a0 = a0 - t2\n 36281: a1 = a0 - a1\n 36284: a0 = t1 - a2\n 36287: a1 = a1 | s1\n 36290: a2 = a0 | a4\n 36293: a2 = a2 | a1\n 36296: a1 = a1 | a4\n 36299: a2 = a2 >> 0x20\n 36302: a1 = a1 << 0x20\n 36305: a1 = a1 | a2\n 36308: jump @576 if a1 == 0\n      : @573 (gas: 1)\n 36311: trap\n      : @574 (gas: 3)\n 36312: a0 = 0\n 36314: a1 = 0\n 36316: ra = 504, jump @0\n      : @575 [@dyn 252] (gas: 5)\n 36323: i32 a1 = a0 + 0\n 36325: a0 = 0x1\n 36328: a2 = 0\n 36330: ecalli 10 // 'seal_return'\n 36332: fallthrough\n      : @576 (gas: 4)\n 36333: i32 s1 = a0 + 0\n 36335: a0 = u64 [sp]\n 36337: a1 = s1\n 36339: ra = 506, jump @0\n      : @577 [@dyn 253] (gas: 6)\n 36346: i32 a1 = a0 + 0\n 36348: a0 = 0\n 36350: a2 = s1\n 36352: ra = 0x1fc\n 36356: ecalli 10 // 'seal_return'\n 36358: fallthrough\n      : @578 [@dyn 254] (gas: 52)\n 36359: sp = sp + 0xffffffffffffff40\n 36363: u64 [sp + 0xb8] = ra\n 36367: u64 [sp + 0xb0] = s0\n 36371: u64 [sp + 0xa8] = s1\n 36375: s0 = sp + 0xc0\n 36379: sp = sp & 0xffffffffffffffe0\n 36382: t0 = u64 [a1 + 0x10]\n 36385: ra = u64 [a1 + 0x8]\n 36388: t2 = u64 [a2 + 0x8]\n 36391: a3 = u64 [a1]\n 36393: a4 = u64 [a2]\n 36395: u64 [sp + 0x70] = a4\n 36398: a5 = u64 [a2 + 0x10]\n 36401: u64 [sp + 0x58] = a5\n 36404: t1 = t2 ^ ra\n 36407: s1 = t2 <u ra\n 36410: a5 = a4 <u a3\n 36413: u64 [sp + 0x68] = a5\n 36416: a4 = a3\n 36418: s1 = a5 if t1 == 0\n 36421: t1 = u64 [a1 + 0x18]\n 36424: a1 = u64 [a2 + 0x18]\n 36427: u64 [sp + 0x50] = a1\n 36430: a3 = u64 [sp + 0x58]\n 36433: a2 = a3 - t0\n 36436: a1 = a2 - s1\n 36439: u64 [sp + 0x78] = a1\n 36442: a1 = a2 <u s1\n 36445: u64 [sp + 0x60] = t0\n 36448: a5 = a3 <u t0\n 36451: t0 = a4\n 36453: u64 [sp + 0x58] = t1\n 36456: a2 = u64 [sp + 0x50]\n 36459: a2 = a2 - t1\n 36462: a2 = a2 - a5\n 36465: a2 = a2 - a1\n 36468: a1 = t2 - ra\n 36471: a3 = u64 [sp + 0x68]\n 36474: a1 = a1 - a3\n 36477: a3 = u64 [sp + 0x70]\n 36480: a3 = a3 - a4\n 36483: a4 = a1 >u 0\n 36485: a3 = a3 <u 0x80\n 36489: a3 = a3 ^ 0x1\n 36492: a3 = a4 if a1 != 0\n 36495: a1 = a2 >s 0\n 36497: a5 = u64 [sp + 0x78]\n 36500: a4 = a5 >u 0\n 36502: a4 = a1 if a2 != 0\n 36505: a1 = a5 | a2\n 36508: a3 = a4 if a1 != 0\n 36511: jump @591 if a3 == 0\n      : @579 (gas: 12)\n 36515: s1 = a0\n 36517: a2 = u64 [sp + 0x60]\n 36520: a0 = t0 | a2\n 36523: a1 = u64 [sp + 0x58]\n 36526: a1 = ra | a1\n 36529: a0 = a0 | a1\n 36532: a0 = a0 >> 0x20\n 36535: a1 = a1 | a2\n 36538: a1 = a1 << 0x20\n 36541: a0 = a0 | a1\n 36544: u64 [sp + 0x78] = ra\n 36547: jump @590 if a0 != 0\n      : @580 (gas: 6)\n 36551: i32 a1 = t0 + 0\n 36553: i32 a0 = sp + 0x80\n 36557: u64 [sp + 0x68] = a1\n 36560: u64 [sp + 0x70] = t0\n 36563: ecalli 3 // 'call_data_load'\n 36565: fallthrough\n      : @581 (gas: 13)\n 36566: a0 = u64 [sp + 0x60]\n 36569: a1 = u64 [sp + 0x58]\n 36572: a2 = a0 | a1\n 36575: a0 = 0x100000000\n 36585: u64 [sp + 0x58] = a0\n 36588: a0 = 0xffffffe0\n 36598: a1 = u64 [sp + 0x70]\n 36601: a0 = a1 <u a0\n 36604: a1 = u64 [sp + 0x78]\n 36607: a0 = 0 if a1 != 0\n 36609: u64 [sp + 0x60] = a2\n 36612: a0 = 0 if a2 != 0\n 36614: jump @590 if a0 == 0\n      : @582 (gas: 13)\n 36618: a0 = u64 [sp + 0x98]\n 36622: u64 [sp + 0x50] = a0\n 36625: a0 = u64 [sp + 0x90]\n 36629: u64 [sp + 0x48] = a0\n 36632: a0 = u64 [sp + 0x88]\n 36636: u64 [sp + 0x38] = a0\n 36639: a0 = u64 [sp + 0x80]\n 36643: u64 [sp + 0x40] = a0\n 36646: a0 = u64 [sp + 0x68]\n 36649: i32 a1 = a0 + 0x20\n 36652: i32 a0 = sp + 0x80\n 36656: ecalli 3 // 'call_data_load'\n 36658: fallthrough\n      : @583 (gas: 9)\n 36659: a0 = u64 [sp + 0x58]\n 36662: a0 = a0 + 0xffffffffffffffc0\n 36665: a1 = u64 [sp + 0x70]\n 36668: a0 = a1 <u a0\n 36671: a1 = u64 [sp + 0x78]\n 36674: a0 = 0 if a1 != 0\n 36676: a1 = u64 [sp + 0x60]\n 36679: a0 = 0 if a1 != 0\n 36681: jump @590 if a0 == 0\n      : @584 (gas: 13)\n 36685: a0 = u64 [sp + 0x98]\n 36689: u64 [sp + 0x58] = a0\n 36692: a0 = u64 [sp + 0x90]\n 36696: u64 [sp + 0x30] = a0\n 36699: a0 = u64 [sp + 0x88]\n 36703: u64 [sp + 0x20] = a0\n 36706: a0 = u64 [sp + 0x80]\n 36710: u64 [sp + 0x28] = a0\n 36713: a0 = u64 [sp + 0x68]\n 36716: i32 a1 = a0 + 0x40\n 36719: i32 a0 = sp + 0x80\n 36723: ecalli 3 // 'call_data_load'\n 36725: fallthrough\n      : @585 (gas: 9)\n 36726: a2 = u64 [sp + 0x98]\n 36730: a3 = u64 [sp + 0x90]\n 36734: a4 = u64 [sp + 0x80]\n 36738: a5 = u64 [sp + 0x88]\n 36742: a0 = a3 | a2\n 36745: a1 = a4 <u 0x2\n 36748: a1 = 0 if a5 != 0\n 36750: a1 = 0 if a0 != 0\n 36752: jump @592 if a1 == 0\n      : @586 (gas: 12)\n 36756: u64 [sp] = a5\n 36758: u64 [sp + 0x8] = a4\n 36761: u64 [sp + 0x10] = a3\n 36764: u64 [sp + 0x18] = a2\n 36767: a0 = 0xffffffa0\n 36777: a1 = u64 [sp + 0x70]\n 36780: a0 = a1 <u a0\n 36783: a1 = u64 [sp + 0x78]\n 36786: a0 = 0 if a1 != 0\n 36788: a1 = u64 [sp + 0x60]\n 36791: a0 = 0 if a1 != 0\n 36793: jump @590 if a0 == 0\n      : @587 (gas: 5)\n 36797: a0 = u64 [sp + 0x68]\n 36800: i32 a1 = a0 + 0x60\n 36803: i32 a0 = sp + 0x80\n 36807: ecalli 3 // 'call_data_load'\n 36809: fallthrough\n      : @588 (gas: 9)\n 36810: a0 = u64 [sp + 0x98]\n 36814: a1 = u64 [sp + 0x90]\n 36818: a2 = u64 [sp + 0x80]\n 36822: a3 = u64 [sp + 0x88]\n 36826: a4 = a1 | a0\n 36829: a5 = a2 <u 0x2\n 36832: a5 = 0 if a3 != 0\n 36834: a5 = 0 if a4 != 0\n 36836: jump @591 if a5 == 0\n      : @589 (gas: 34)\n 36839: u64 [s1 + 0x68] = a3\n 36842: u64 [s1 + 0x60] = a2\n 36845: a2 = u64 [sp]\n 36847: u64 [s1 + 0x48] = a2\n 36850: a2 = u64 [sp + 0x8]\n 36853: u64 [s1 + 0x40] = a2\n 36856: a2 = u64 [sp + 0x20]\n 36859: u64 [s1 + 0x28] = a2\n 36862: a2 = u64 [sp + 0x28]\n 36865: u64 [s1 + 0x20] = a2\n 36868: a2 = u64 [sp + 0x38]\n 36871: u64 [s1 + 0x8] = a2\n 36874: a2 = u64 [sp + 0x40]\n 36877: u64 [s1] = a2\n 36879: u64 [s1 + 0x70] = a1\n 36882: a1 = u64 [sp + 0x10]\n 36885: u64 [s1 + 0x50] = a1\n 36888: a1 = u64 [sp + 0x30]\n 36891: u64 [s1 + 0x30] = a1\n 36894: a1 = u64 [sp + 0x48]\n 36897: u64 [s1 + 0x10] = a1\n 36900: u64 [s1 + 0x78] = a0\n 36903: a0 = u64 [sp + 0x18]\n 36906: u64 [s1 + 0x58] = a0\n 36909: a0 = u64 [sp + 0x58]\n 36912: u64 [s1 + 0x38] = a0\n 36915: a0 = u64 [sp + 0x50]\n 36918: u64 [s1 + 0x18] = a0\n 36921: sp = s0 + 0xffffffffffffff40\n 36925: ra = u64 [sp + 0xb8]\n 36929: s0 = u64 [sp + 0xb0]\n 36933: s1 = u64 [sp + 0xa8]\n 36937: sp = sp + 0xc0\n 36941: ret\n      : @590 (gas: 1)\n 36943: trap\n      : @591 (gas: 4)\n 36944: a0 = 0\n 36946: a1 = 0\n 36948: ra = 0x1fe\n 36952: jump @0\n      : @592 (gas: 2)\n 36956: a0 = 0\n 36958: ra = 510, jump @0\n      : @593 [@dyn 255] (gas: 6)\n 36965: i32 a1 = a0 + 0\n 36967: a0 = 0x1\n 36970: a2 = 0\n 36972: ra = 0x200\n 36976: ecalli 10 // 'seal_return'\n 36978: fallthrough\n      : @594 [@dyn 256] (gas: 12)\n 36979: a2 = u64 [a1 + 0x10]\n 36982: a3 = u64 [a1 + 0x18]\n 36985: a4 = u64 [a1 + 0x8]\n 36988: a1 = u64 [a1]\n 36990: a3 = a3 | a4\n 36993: a4 = a1 | a2\n 36996: a4 = a4 | a3\n 36999: a4 = a4 >> 0x20\n 37002: a2 = a2 | a3\n 37005: a2 = a2 << 0x20\n 37008: a2 = a2 | a4\n 37011: jump @597 if a2 != 0\n      : @595 (gas: 13)\n 37015: sp = sp + 0xffffffffffffffd8\n 37018: u64 [sp + 0x20] = ra\n 37021: u64 [sp + 0x18] = s0\n 37024: u64 [sp + 0x10] = s1\n 37027: s0 = u64 [a0 + 0x18]\n 37030: s1 = u64 [a0 + 0x10]\n 37033: a2 = u64 [a0 + 0x8]\n 37036: u64 [sp] = a2\n 37038: a0 = u64 [a0]\n 37040: u64 [sp + 0x8] = a0\n 37043: i32 a0 = a1 + 0\n 37045: a1 = 0x20\n 37048: ra = 514, jump @0\n      : @596 [@dyn 257] (gas: 71)\n 37055: a1 = reverse s0\n 37057: a2 = reverse s1\n 37059: a3 = u64 [sp]\n 37061: a3 = reverse a3\n 37063: a4 = u64 [sp + 0x8]\n 37066: a4 = reverse a4\n 37068: a5 = a4 >> 0x38\n 37071: u8 [a0 + 0x1f] = a5\n 37074: a5 = a4 >> 0x30\n 37077: u8 [a0 + 0x1e] = a5\n 37080: a5 = a4 >> 0x28\n 37083: u8 [a0 + 0x1d] = a5\n 37086: a5 = a4 >> 0x20\n 37089: u8 [a0 + 0x1c] = a5\n 37092: a5 = a4 >> 0x18\n 37095: u8 [a0 + 0x1b] = a5\n 37098: a5 = a4 >> 0x10\n 37101: u8 [a0 + 0x1a] = a5\n 37104: a5 = a4 >> 0x8\n 37107: u8 [a0 + 0x19] = a5\n 37110: u8 [a0 + 0x18] = a4\n 37113: u8 [a0 + 0x10] = a3\n 37116: a4 = a3 >> 0x38\n 37119: u8 [a0 + 0x17] = a4\n 37122: a4 = a3 >> 0x30\n 37125: u8 [a0 + 0x16] = a4\n 37128: a4 = a3 >> 0x28\n 37131: u8 [a0 + 0x15] = a4\n 37134: a4 = a3 >> 0x20\n 37137: u8 [a0 + 0x14] = a4\n 37140: a4 = a3 >> 0x18\n 37143: u8 [a0 + 0x13] = a4\n 37146: a4 = a3 >> 0x10\n 37149: u8 [a0 + 0x12] = a4\n 37152: a3 = a3 >> 0x8\n 37155: u8 [a0 + 0x11] = a3\n 37158: u8 [a0 + 0x8] = a2\n 37161: a3 = a2 >> 0x38\n 37164: u8 [a0 + 0xf] = a3\n 37167: a3 = a2 >> 0x30\n 37170: u8 [a0 + 0xe] = a3\n 37173: a3 = a2 >> 0x28\n 37176: u8 [a0 + 0xd] = a3\n 37179: a3 = a2 >> 0x20\n 37182: u8 [a0 + 0xc] = a3\n 37185: a3 = a2 >> 0x18\n 37188: u8 [a0 + 0xb] = a3\n 37191: a3 = a2 >> 0x10\n 37194: u8 [a0 + 0xa] = a3\n 37197: a2 = a2 >> 0x8\n 37200: u8 [a0 + 0x9] = a2\n 37203: u8 [a0] = a1\n 37205: a2 = a1 >> 0x38\n 37208: u8 [a0 + 0x7] = a2\n 37211: a2 = a1 >> 0x30\n 37214: u8 [a0 + 0x6] = a2\n 37217: a2 = a1 >> 0x28\n 37220: u8 [a0 + 0x5] = a2\n 37223: a2 = a1 >> 0x20\n 37226: u8 [a0 + 0x4] = a2\n 37229: a2 = a1 >> 0x18\n 37232: u8 [a0 + 0x3] = a2\n 37235: a2 = a1 >> 0x10\n 37238: u8 [a0 + 0x2] = a2\n 37241: a1 = a1 >> 0x8\n 37244: u8 [a0 + 0x1] = a1\n 37247: ra = u64 [sp + 0x20]\n 37250: s0 = u64 [sp + 0x18]\n 37253: s1 = u64 [sp + 0x10]\n 37256: sp = sp + 0x28\n 37259: ret\n      : @597 (gas: 1)\n 37261: trap\n      : @598 (gas: 20)\n 37262: sp = sp + 0xfffffffffffffe58\n 37266: u64 [sp + 0x1a0] = ra\n 37270: u64 [sp + 0x198] = s0\n 37274: u64 [sp + 0x190] = s1\n 37278: a3 = u64 [a1 + 0x18]\n 37281: a4 = u64 [a1 + 0x10]\n 37284: a5 = u64 [a1 + 0x8]\n 37287: s0 = u64 [a1]\n 37289: u64 [sp + 0x180] = a3\n 37293: u64 [sp + 0x150] = a5\n 37297: a1 = a5 | a3\n 37300: a3 = s0 | a4\n 37303: a3 = a3 | a1\n 37306: a3 = a3 >> 0x20\n 37309: u64 [sp + 0x178] = a4\n 37313: a1 = a1 | a4\n 37316: a1 = a1 << 0x20\n 37319: a1 = a1 | a3\n 37322: u64 [sp] = a0\n 37324: jump @614 if a1 != 0\n      : @599 (gas: 12)\n 37328: a0 = u64 [a2 + 0x18]\n 37331: u64 [sp + 0x188] = a0\n 37335: a0 = u64 [a2 + 0x10]\n 37338: u64 [sp + 0x168] = a0\n 37342: a0 = u64 [a2 + 0x8]\n 37345: u64 [sp + 0x170] = a0\n 37349: s1 = u64 [a2]\n 37351: u64 [sp + 0x138] = s0\n 37355: i32 a0 = s0 + 0\n 37357: a1 = 0x20\n 37360: s0 = 0x20\n 37363: ra = 516, jump @0\n      : @600 [@dyn 258] (gas: 43)\n 37370: u8 [a0 + 0x1f] = s0\n 37373: a3 = u64 [sp + 0x168]\n 37377: a1 = s1 | a3\n 37380: a2 = u64 [sp + 0x188]\n 37384: a5 = u64 [sp + 0x170]\n 37388: a2 = a2 | a5\n 37391: a1 = a1 | a2\n 37394: a1 = a1 >> 0x20\n 37397: a2 = a2 | a3\n 37400: a2 = a2 << 0x20\n 37403: a1 = a1 | a2\n 37406: u8 [a0 + 30] = 0\n 37409: u8 [a0 + 29] = 0\n 37412: u8 [a0 + 28] = 0\n 37415: u8 [a0 + 27] = 0\n 37418: u8 [a0 + 26] = 0\n 37421: u8 [a0 + 25] = 0\n 37424: u8 [a0 + 24] = 0\n 37427: u8 [a0 + 23] = 0\n 37430: u8 [a0 + 22] = 0\n 37433: u8 [a0 + 21] = 0\n 37436: u8 [a0 + 20] = 0\n 37439: u8 [a0 + 19] = 0\n 37442: u8 [a0 + 18] = 0\n 37445: u8 [a0 + 17] = 0\n 37448: u8 [a0 + 16] = 0\n 37451: u8 [a0 + 15] = 0\n 37454: u8 [a0 + 14] = 0\n 37457: u8 [a0 + 13] = 0\n 37460: u8 [a0 + 12] = 0\n 37463: u8 [a0 + 11] = 0\n 37466: u8 [a0 + 10] = 0\n 37469: u8 [a0 + 9] = 0\n 37472: u8 [a0 + 8] = 0\n 37475: u8 [a0 + 7] = 0\n 37478: u8 [a0 + 6] = 0\n 37481: u8 [a0 + 5] = 0\n 37484: u8 [a0 + 4] = 0\n 37487: u8 [a0 + 3] = 0\n 37490: u8 [a0 + 2] = 0\n 37493: u8 [a0 + 1] = 0\n 37496: u8 [a0 + 0] = 0\n 37498: jump @614 if a1 != 0\n      : @601 (gas: 19)\n 37502: a4 = s1\n 37504: a0 = u64 [sp + 0x138]\n 37508: a1 = a0 + 0x20\n 37511: u64 [sp + 0x160] = a1\n 37515: a0 = a1 <u a0\n 37518: a1 = u64 [sp + 0x150]\n 37522: s1 = a1 + a0\n 37525: a1 = s1 <u a1\n 37528: a1 = a0 if a0 == 0\n 37531: a0 = u64 [sp + 0x178]\n 37535: s0 = a0 + a1\n 37538: a0 = s0 <u a0\n 37541: a1 = u64 [sp + 0x180]\n 37545: a0 = a0 + a1\n 37548: u64 [sp + 0x158] = a0\n 37552: u64 [sp + 0x118] = a4\n 37556: i32 a0 = a4 + 0\n 37558: a1 = 0x20\n 37561: ra = 518, jump @0\n      : @602 [@dyn 259] (gas: 12)\n 37568: t0 = u64 [sp + 0x160]\n 37572: a1 = t0 | s0\n 37575: u64 [sp + 0x148] = s1\n 37579: a2 = u64 [sp + 0x158]\n 37583: a2 = a2 | s1\n 37586: a1 = a1 | a2\n 37589: a1 = a1 >> 0x20\n 37592: u64 [sp + 0x140] = s0\n 37596: a2 = a2 | s0\n 37599: a2 = a2 << 0x20\n 37602: a1 = a1 | a2\n 37605: jump @614 if a1 != 0\n      : @603 (gas: 93)\n 37609: a1 = u8 [a0 + 0x19]\n 37612: a2 = u8 [a0 + 0x18]\n 37615: a3 = u8 [a0 + 0x1a]\n 37618: a4 = u8 [a0 + 0x1b]\n 37621: a1 = a1 << 0x8\n 37624: a1 = a1 | a2\n 37627: a3 = a3 << 0x10\n 37630: a4 = a4 << 0x18\n 37633: a3 = a3 | a4\n 37636: a1 = a1 | a3\n 37639: a2 = u8 [a0 + 0x1d]\n 37642: a3 = u8 [a0 + 0x1c]\n 37645: a4 = u8 [a0 + 0x1e]\n 37648: a5 = u8 [a0 + 0x1f]\n 37651: a2 = a2 << 0x8\n 37654: a2 = a2 | a3\n 37657: a4 = a4 << 0x10\n 37660: a5 = a5 << 0x18\n 37663: a4 = a4 | a5\n 37666: a2 = a2 | a4\n 37669: a2 = a2 << 0x20\n 37672: a1 = a1 | a2\n 37675: u64 [sp + 0x128] = a1\n 37679: a1 = u8 [a0 + 0x11]\n 37682: a2 = u8 [a0 + 0x10]\n 37685: a3 = u8 [a0 + 0x12]\n 37688: a4 = u8 [a0 + 0x13]\n 37691: a1 = a1 << 0x8\n 37694: a1 = a1 | a2\n 37697: a3 = a3 << 0x10\n 37700: a4 = a4 << 0x18\n 37703: a3 = a3 | a4\n 37706: a1 = a1 | a3\n 37709: a2 = u8 [a0 + 0x15]\n 37712: a3 = u8 [a0 + 0x14]\n 37715: a4 = u8 [a0 + 0x16]\n 37718: a5 = u8 [a0 + 0x17]\n 37721: a2 = a2 << 0x8\n 37724: a2 = a2 | a3\n 37727: a4 = a4 << 0x10\n 37730: a5 = a5 << 0x18\n 37733: a4 = a4 | a5\n 37736: a2 = a2 | a4\n 37739: a2 = a2 << 0x20\n 37742: a1 = a1 | a2\n 37745: u64 [sp + 0x130] = a1\n 37749: a1 = u8 [a0 + 0x9]\n 37752: a2 = u8 [a0 + 0x8]\n 37755: a3 = u8 [a0 + 0xa]\n 37758: a4 = u8 [a0 + 0xb]\n 37761: a1 = a1 << 0x8\n 37764: a1 = a1 | a2\n 37767: a3 = a3 << 0x10\n 37770: a4 = a4 << 0x18\n 37773: a3 = a3 | a4\n 37776: a1 = a1 | a3\n 37779: a2 = u8 [a0 + 0xd]\n 37782: a3 = u8 [a0 + 0xc]\n 37785: a4 = u8 [a0 + 0xe]\n 37788: a5 = u8 [a0 + 0xf]\n 37791: a2 = a2 << 0x8\n 37794: a2 = a2 | a3\n 37797: a4 = a4 << 0x10\n 37800: a5 = a5 << 0x18\n 37803: a4 = a4 | a5\n 37806: a2 = a2 | a4\n 37809: a2 = a2 << 0x20\n 37812: s1 = a2 | a1\n 37815: a1 = u8 [a0 + 0x1]\n 37818: a2 = u8 [a0]\n 37820: a3 = u8 [a0 + 0x2]\n 37823: a4 = u8 [a0 + 0x3]\n 37826: a1 = a1 << 0x8\n 37829: a1 = a1 | a2\n 37832: a3 = a3 << 0x10\n 37835: a4 = a4 << 0x18\n 37838: a3 = a3 | a4\n 37841: a1 = a1 | a3\n 37844: a2 = u8 [a0 + 0x5]\n 37847: a3 = u8 [a0 + 0x4]\n 37850: a4 = u8 [a0 + 0x6]\n 37853: a0 = u8 [a0 + 0x7]\n 37856: a2 = a2 << 0x8\n 37859: a2 = a2 | a3\n 37862: a4 = a4 << 0x10\n 37865: a0 = a0 << 0x18\n 37868: a0 = a0 | a4\n 37871: a0 = a0 | a2\n 37874: a0 = a0 << 0x20\n 37877: s0 = a0 | a1\n 37880: i32 a0 = t0 + 0\n 37882: a1 = 0x20\n 37885: ra = 520, jump @0\n      : @604 [@dyn 260] (gas: 82)\n 37892: a2 = u64 [sp + 0x130]\n 37896: u8 [a0 + 0x10] = a2\n 37899: a1 = s1 >> 0x38\n 37902: u8 [a0 + 0xf] = a1\n 37905: a1 = s1 >> 0x30\n 37908: u8 [a0 + 0xe] = a1\n 37911: a1 = s1 >> 0x28\n 37914: u8 [a0 + 0xd] = a1\n 37917: a1 = s1 >> 0x20\n 37920: u8 [a0 + 0xc] = a1\n 37923: a1 = s1 >> 0x18\n 37926: u8 [a0 + 0xb] = a1\n 37929: a1 = s1 >> 0x10\n 37932: u8 [a0 + 0xa] = a1\n 37935: a1 = s1 >> 0x8\n 37938: u8 [a0 + 0x9] = a1\n 37941: u8 [a0 + 0x8] = s1\n 37944: a1 = s0 >> 0x38\n 37947: u8 [a0 + 0x7] = a1\n 37950: a1 = s0 >> 0x30\n 37953: u8 [a0 + 0x6] = a1\n 37956: a1 = s0 >> 0x28\n 37959: u8 [a0 + 0x5] = a1\n 37962: a1 = s0 >> 0x20\n 37965: u8 [a0 + 0x4] = a1\n 37968: a1 = s0 >> 0x18\n 37971: u8 [a0 + 0x3] = a1\n 37974: a1 = s0 >> 0x10\n 37977: u8 [a0 + 0x2] = a1\n 37980: a1 = s0 >> 0x8\n 37983: u8 [a0 + 0x1] = a1\n 37986: u8 [a0] = s0\n 37988: a4 = u64 [sp + 0x128]\n 37992: u8 [a0 + 0x18] = a4\n 37995: a1 = a2 >> 0x38\n 37998: u8 [a0 + 0x17] = a1\n 38001: a1 = a2 >> 0x30\n 38004: u8 [a0 + 0x16] = a1\n 38007: a1 = a2 >> 0x28\n 38010: u8 [a0 + 0x15] = a1\n 38013: a1 = a2 >> 0x20\n 38016: u8 [a0 + 0x14] = a1\n 38019: a1 = a2 >> 0x18\n 38022: u8 [a0 + 0x13] = a1\n 38025: a1 = a2 >> 0x10\n 38028: u8 [a0 + 0x12] = a1\n 38031: a1 = a2 >> 0x8\n 38034: a5 = a2\n 38036: u8 [a0 + 0x11] = a1\n 38039: a1 = a4 >> 0x38\n 38042: u8 [a0 + 0x1f] = a1\n 38045: a1 = a4 >> 0x30\n 38048: u8 [a0 + 0x1e] = a1\n 38051: a1 = a4 >> 0x28\n 38054: u8 [a0 + 0x1d] = a1\n 38057: a1 = a4 >> 0x20\n 38060: u8 [a0 + 0x1c] = a1\n 38063: a1 = a4 >> 0x18\n 38066: u8 [a0 + 0x1b] = a1\n 38069: a1 = a4 >> 0x10\n 38072: u8 [a0 + 0x1a] = a1\n 38075: a1 = a4 >> 0x8\n 38078: u8 [a0 + 0x19] = a1\n 38081: a1 = u64 [sp + 0x138]\n 38085: t2 = a1 + 0x40\n 38088: a2 = t2 <u a1\n 38091: a3 = u64 [sp + 0x150]\n 38095: ra = a3 + a2\n 38098: a3 = ra <u a3\n 38101: a3 = a2 if a2 == 0\n 38104: a2 = s0 | a5\n 38107: t1 = a4\n 38109: a4 = a4 | s1\n 38112: a4 = a4 | a2\n 38115: a5 = u64 [sp + 0x178]\n 38119: a3 = a3 + a5\n 38122: u64 [sp + 0x120] = a3\n 38126: a3 = a3 <u a5\n 38129: t0 = u64 [sp + 0x180]\n 38133: a5 = t0 + a3\n 38136: u64 [sp + 0x150] = a5\n 38140: jump @612 if a4 == 0\n      : @605 (gas: 20)\n 38144: a0 = 0\n 38146: a1 = 0\n 38148: u64 [sp + 312] = 0\n 38152: a2 = 0\n 38154: a3 = reverse s0\n 38156: u64 [sp + 0x20] = a3\n 38159: a3 = reverse s1\n 38161: u64 [sp + 0x18] = a3\n 38164: a3 = u64 [sp + 0x130]\n 38168: a3 = reverse a3\n 38170: u64 [sp + 0x10] = a3\n 38173: a3 = reverse t1\n 38175: u64 [sp + 0x8] = a3\n 38178: a4 = 0xffffffe0\n 38188: u64 [sp + 0x28] = a4\n 38191: s0 = u64 [sp + 0x168]\n 38195: t0 = u64 [sp + 0x170]\n 38199: a3 = u64 [sp + 0x118]\n 38203: t1 = u64 [sp + 0x120]\n 38207: fallthrough\n      : @606 (gas: 16)\n 38208: u64 [sp + 0x120] = a2\n 38212: u64 [sp + 0x128] = a1\n 38216: u64 [sp + 0x130] = a0\n 38220: a4 = u64 [sp + 0x188]\n 38224: a4 = a4 | s0\n 38227: s1 = u64 [sp + 0x28]\n 38230: a5 = a3 <u s1\n 38233: u64 [sp + 0x170] = t0\n 38237: a5 = 0 if t0 != 0\n 38239: a5 = 0 if a4 != 0\n 38241: a0 = u64 [sp + 0x150]\n 38245: u64 [sp + 0x118] = a0\n 38249: u64 [sp + 0x110] = t1\n 38253: u64 [sp + 0x108] = ra\n 38257: u64 [sp + 0x180] = t2\n 38261: jump @614 if a5 == 0\n      : @607 (gas: 7)\n 38265: u64 [sp + 0x168] = s0\n 38269: a0 = a3 + 0x20\n 38272: u64 [sp + 0x178] = a0\n 38276: i32 a0 = a0 + 0\n 38278: a1 = 0x20\n 38281: s0 = a3\n 38283: ra = 522, jump @0\n      : @608 [@dyn 261] (gas: 9)\n 38290: a1 = u64 [sp + 0x140]\n 38294: a2 = u64 [sp + 0x158]\n 38298: a1 = a1 | a2\n 38301: a2 = u64 [sp + 0x160]\n 38305: a2 = a2 <u s1\n 38308: a3 = u64 [sp + 0x148]\n 38312: a2 = 0 if a3 != 0\n 38314: a2 = 0 if a1 != 0\n 38316: jump @614 if a2 == 0\n      : @609 (gas: 81)\n 38320: a1 = u64 [sp + 0x178]\n 38324: a2 = a1 <u s0\n 38327: a1 = u64 [sp + 0x170]\n 38331: a3 = a1 + a2\n 38334: u64 [sp + 0x160] = a3\n 38338: a1 = a3 <u a1\n 38341: a1 = a2 if a2 == 0\n 38344: a2 = u8 [a0]\n 38346: u64 [sp + 0x158] = a2\n 38350: a2 = u8 [a0 + 0x1]\n 38353: u64 [sp + 0x150] = a2\n 38357: a2 = u8 [a0 + 0x2]\n 38360: u64 [sp + 0x148] = a2\n 38364: a2 = u8 [a0 + 0x3]\n 38367: u64 [sp + 0x140] = a2\n 38371: a2 = u8 [a0 + 0x4]\n 38374: u64 [sp + 0x100] = a2\n 38378: a2 = u8 [a0 + 0x5]\n 38381: u64 [sp + 0xf8] = a2\n 38385: a2 = u8 [a0 + 0x6]\n 38388: u64 [sp + 0xf0] = a2\n 38392: a2 = u8 [a0 + 0x7]\n 38395: u64 [sp + 0xe8] = a2\n 38399: a2 = u8 [a0 + 0x8]\n 38402: u64 [sp + 0xe0] = a2\n 38406: a2 = u8 [a0 + 0x9]\n 38409: u64 [sp + 0xd8] = a2\n 38413: a2 = u8 [a0 + 0xa]\n 38416: u64 [sp + 0xd0] = a2\n 38420: a2 = u8 [a0 + 0xb]\n 38423: u64 [sp + 0xc8] = a2\n 38427: a2 = u8 [a0 + 0xc]\n 38430: u64 [sp + 0xc0] = a2\n 38434: a2 = u8 [a0 + 0xd]\n 38437: u64 [sp + 0xb8] = a2\n 38441: a2 = u8 [a0 + 0xe]\n 38444: u64 [sp + 0xb0] = a2\n 38448: a2 = u8 [a0 + 0xf]\n 38451: u64 [sp + 0xa8] = a2\n 38455: a2 = u8 [a0 + 0x10]\n 38458: u64 [sp + 0xa0] = a2\n 38462: a2 = u8 [a0 + 0x11]\n 38465: u64 [sp + 0x98] = a2\n 38469: a2 = u8 [a0 + 0x12]\n 38472: u64 [sp + 0x90] = a2\n 38476: a2 = u8 [a0 + 0x13]\n 38479: u64 [sp + 0x88] = a2\n 38483: a2 = u8 [a0 + 0x14]\n 38486: u64 [sp + 0x80] = a2\n 38490: a2 = u8 [a0 + 0x15]\n 38493: u64 [sp + 0x78] = a2\n 38496: a2 = u8 [a0 + 0x16]\n 38499: u64 [sp + 0x70] = a2\n 38502: a2 = u8 [a0 + 0x17]\n 38505: u64 [sp + 0x68] = a2\n 38508: a2 = u8 [a0 + 0x18]\n 38511: u64 [sp + 0x60] = a2\n 38514: a2 = u8 [a0 + 0x19]\n 38517: u64 [sp + 0x58] = a2\n 38520: a2 = u8 [a0 + 0x1a]\n 38523: u64 [sp + 0x50] = a2\n 38526: a2 = u8 [a0 + 0x1b]\n 38529: u64 [sp + 0x48] = a2\n 38532: a2 = u8 [a0 + 0x1c]\n 38535: u64 [sp + 0x40] = a2\n 38538: a2 = u8 [a0 + 0x1d]\n 38541: u64 [sp + 0x38] = a2\n 38544: a2 = u8 [a0 + 0x1e]\n 38547: u64 [sp + 0x30] = a2\n 38550: s1 = u8 [a0 + 0x1f]\n 38553: s0 = u64 [sp + 0x168]\n 38557: a1 = a1 + s0\n 38560: u64 [sp + 0x170] = a1\n 38564: a0 = a1 <u s0\n 38567: a1 = u64 [sp + 0x188]\n 38571: a1 = a1 + a0\n 38574: u64 [sp + 0x188] = a1\n 38578: s0 = u64 [sp + 0x180]\n 38582: i32 a0 = s0 + 0\n 38584: a1 = 0x20\n 38587: ra = 524, jump @0\n      : @610 [@dyn 262] (gas: 120)\n 38594: u8 [a0 + 0x1f] = s1\n 38597: a1 = u64 [sp + 0x30]\n 38600: u8 [a0 + 0x1e] = a1\n 38603: a1 = u64 [sp + 0x38]\n 38606: u8 [a0 + 0x1d] = a1\n 38609: a1 = u64 [sp + 0x40]\n 38612: u8 [a0 + 0x1c] = a1\n 38615: a1 = u64 [sp + 0x48]\n 38618: u8 [a0 + 0x1b] = a1\n 38621: a1 = u64 [sp + 0x50]\n 38624: u8 [a0 + 0x1a] = a1\n 38627: a1 = u64 [sp + 0x58]\n 38630: u8 [a0 + 0x19] = a1\n 38633: a1 = u64 [sp + 0x60]\n 38636: u8 [a0 + 0x18] = a1\n 38639: a1 = u64 [sp + 0x68]\n 38642: u8 [a0 + 0x17] = a1\n 38645: a1 = u64 [sp + 0x70]\n 38648: u8 [a0 + 0x16] = a1\n 38651: a1 = u64 [sp + 0x78]\n 38654: u8 [a0 + 0x15] = a1\n 38657: a1 = u64 [sp + 0x80]\n 38661: u8 [a0 + 0x14] = a1\n 38664: a1 = u64 [sp + 0x88]\n 38668: u8 [a0 + 0x13] = a1\n 38671: a1 = u64 [sp + 0x90]\n 38675: u8 [a0 + 0x12] = a1\n 38678: a1 = u64 [sp + 0x98]\n 38682: u8 [a0 + 0x11] = a1\n 38685: a1 = u64 [sp + 0xa0]\n 38689: u8 [a0 + 0x10] = a1\n 38692: a1 = u64 [sp + 0xa8]\n 38696: u8 [a0 + 0xf] = a1\n 38699: a1 = u64 [sp + 0xb0]\n 38703: u8 [a0 + 0xe] = a1\n 38706: a1 = u64 [sp + 0xb8]\n 38710: u8 [a0 + 0xd] = a1\n 38713: a1 = u64 [sp + 0xc0]\n 38717: u8 [a0 + 0xc] = a1\n 38720: a1 = u64 [sp + 0xc8]\n 38724: u8 [a0 + 0xb] = a1\n 38727: a1 = u64 [sp + 0xd0]\n 38731: u8 [a0 + 0xa] = a1\n 38734: a1 = u64 [sp + 0xd8]\n 38738: u8 [a0 + 0x9] = a1\n 38741: a1 = u64 [sp + 0xe0]\n 38745: u8 [a0 + 0x8] = a1\n 38748: a1 = u64 [sp + 0xe8]\n 38752: u8 [a0 + 0x7] = a1\n 38755: a1 = u64 [sp + 0xf0]\n 38759: u8 [a0 + 0x6] = a1\n 38762: a1 = u64 [sp + 0xf8]\n 38766: u8 [a0 + 0x5] = a1\n 38769: a1 = u64 [sp + 0x100]\n 38773: u8 [a0 + 0x4] = a1\n 38776: a1 = u64 [sp + 0x140]\n 38780: u8 [a0 + 0x3] = a1\n 38783: a1 = u64 [sp + 0x148]\n 38787: u8 [a0 + 0x2] = a1\n 38790: a1 = u64 [sp + 0x150]\n 38794: u8 [a0 + 0x1] = a1\n 38797: a1 = u64 [sp + 0x158]\n 38801: u8 [a0] = a1\n 38803: t1 = u64 [sp + 0x130]\n 38807: t1 = t1 + 0x1\n 38810: a0 = t1 <u 0x1\n 38813: t2 = u64 [sp + 0x128]\n 38817: t2 = t2 + a0\n 38820: a0 = t1 | t2\n 38823: a4 = a0 <u 0x1\n 38826: a0 = u64 [sp + 0x138]\n 38830: a4 = a4 + a0\n 38833: a0 = a4 <u a0\n 38836: ra = u64 [sp + 0x120]\n 38840: ra = ra + a0\n 38843: a0 = u64 [sp + 0x8]\n 38846: a0 = t1 <u a0\n 38849: a2 = u64 [sp + 0x10]\n 38852: a1 = t2 ^ a2\n 38855: a2 = t2 <u a2\n 38858: a2 = a0 if a1 == 0\n 38861: a0 = u64 [sp + 0x18]\n 38864: s1 = a4 <u a0\n 38867: a3 = u64 [sp + 0x20]\n 38870: a1 = ra ^ a3\n 38873: a5 = ra <u a3\n 38876: a5 = s1 if a1 == 0\n 38879: a0 = a0 ^ a4\n 38882: a1 = a1 | a0\n 38885: a0 = s0 + 0x20\n 38888: u64 [sp + 0x168] = a0\n 38892: a5 = a2 if a1 == 0\n 38895: a2 = a0 <u s0\n 38898: s1 = u64 [sp + 0x108]\n 38902: a0 = s1 + a2\n 38905: u64 [sp + 0x130] = a0\n 38909: a3 = a0 <u s1\n 38912: a3 = a2 if a2 == 0\n 38915: a1 = u64 [sp + 0x110]\n 38919: a2 = a1 + a3\n 38922: a3 = a2 <u a1\n 38925: a0 = u64 [sp + 0x118]\n 38929: a3 = a3 + a0\n 38932: u64 [sp + 0x150] = a3\n 38936: u64 [sp + 0x138] = a4\n 38940: a3 = u64 [sp + 0x178]\n 38944: t0 = u64 [sp + 0x160]\n 38948: s0 = u64 [sp + 0x170]\n 38952: a4 = u64 [sp + 0x180]\n 38956: u64 [sp + 0x160] = a4\n 38960: u64 [sp + 0x148] = s1\n 38964: u64 [sp + 0x140] = a1\n 38968: u64 [sp + 0x158] = a0\n 38972: a0 = t1\n 38974: t1 = a2\n 38976: a1 = t2\n 38978: t2 = u64 [sp + 0x168]\n 38982: a2 = ra\n 38984: ra = u64 [sp + 0x130]\n 38988: jump @606 if a5 != 0\n      : @611 (gas: 1)\n 38992: jump @613\n      : @612 (gas: 2)\n 38994: t1 = u64 [sp + 0x120]\n 38998: fallthrough\n      : @613 (gas: 11)\n 38999: a4 = u64 [sp]\n 39001: u64 [a4] = t2\n 39003: u64 [a4 + 0x8] = ra\n 39006: u64 [a4 + 0x10] = t1\n 39009: a0 = u64 [sp + 0x150]\n 39013: u64 [a4 + 0x18] = a0\n 39016: ra = u64 [sp + 0x1a0]\n 39020: s0 = u64 [sp + 0x198]\n 39024: s1 = u64 [sp + 0x190]\n 39028: sp = sp + 0x1a8\n 39032: ret\n      : @614 (gas: 1)\n 39034: trap\n      : @615 (gas: 8)\n 39035: a0 = u64 [sp + 0x210]\n 39039: a1 = u64 [sp + 0x218]\n 39043: a2 = u64 [sp + 0x208]\n 39047: a3 = u64 [sp + 0x200]\n 39051: a1 = a1 | a2\n 39054: a0 = a0 | a3\n 39057: a0 = a0 | a1\n 39060: jump @623 if a0 != 0\n      : @616 (gas: 13)\n 39064: a0 = u32 [0x20164]\n 39069: u64 [sp + 344] = 0\n 39073: u64 [sp + 336] = 0\n 39077: u64 [sp + 328] = 0\n 39081: u64 [sp + 0x140] = a0\n 39085: u64 [sp + 376] = 0\n 39089: u64 [sp + 368] = 0\n 39093: u64 [sp + 352] = 0x4\n 39098: a0 = sp + 0x180\n 39102: a1 = sp + 0x160\n 39106: a2 = sp + 0x140\n 39110: u64 [sp + 360] = 0\n 39114: ra = 526, jump @578\n      : @617 [@dyn 263] (gas: 115)\n 39120: a0 = u64 [sp + 0x180]\n 39124: u64 [sp + 0x38] = a0\n 39127: a0 = u64 [sp + 0x188]\n 39131: u64 [sp + 0x30] = a0\n 39134: a0 = u64 [sp + 0x190]\n 39138: u64 [sp + 0x28] = a0\n 39141: a0 = u64 [sp + 0x198]\n 39145: u64 [sp + 0x20] = a0\n 39148: a0 = u64 [sp + 0x1a0]\n 39152: u64 [sp + 0x18] = a0\n 39155: ra = u64 [sp + 0x1a8]\n 39159: s1 = u64 [sp + 0x1b0]\n 39163: t2 = u64 [sp + 0x1b8]\n 39167: t1 = u64 [sp + 0x1c0]\n 39171: t0 = u64 [sp + 0x1c8]\n 39175: a5 = u64 [sp + 0x1d0]\n 39179: a4 = u64 [sp + 0x1d8]\n 39183: a3 = u64 [sp + 0x1e0]\n 39187: a2 = u64 [sp + 0x1e8]\n 39191: a1 = u64 [sp + 0x1f0]\n 39195: a0 = u64 [sp + 0x1f8]\n 39199: u64 [sp + 0xb8] = a0\n 39203: u64 [sp + 0xb0] = a1\n 39207: u64 [sp + 0xa8] = a2\n 39211: u64 [sp + 0xa0] = a3\n 39215: u64 [sp + 0xd8] = a4\n 39219: u64 [sp + 0xd0] = a5\n 39223: u64 [sp + 0xc8] = t0\n 39227: u64 [sp + 0xc0] = t1\n 39231: u64 [sp + 0xf8] = t2\n 39235: u64 [sp + 0xf0] = s1\n 39239: u64 [sp + 0xe8] = ra\n 39243: a0 = u64 [sp + 0x18]\n 39246: u64 [sp + 0xe0] = a0\n 39250: a0 = u64 [sp + 0x20]\n 39253: u64 [sp + 0x118] = a0\n 39257: a0 = u64 [sp + 0x28]\n 39260: u64 [sp + 0x110] = a0\n 39264: a0 = u64 [sp + 0x30]\n 39267: u64 [sp + 0x108] = a0\n 39271: a0 = sp + 0x120\n 39275: a1 = sp + 0x100\n 39279: a2 = sp + 0xe0\n 39283: a3 = sp + 0xc0\n 39287: a4 = sp + 0xa0\n 39291: a5 = u64 [sp + 0x38]\n 39294: u64 [sp + 0x100] = a5\n 39298: ra = 0x210\n 39302: sp = sp + 0xfffffffffffffc20\n 39306: u64 [sp + 0x3d8] = ra\n 39310: u64 [sp + 0x3d0] = s0\n 39314: u64 [sp + 0x3c8] = s1\n 39318: s0 = sp + 0x3e0\n 39322: sp = sp & 0xffffffffffffffe0\n 39325: s1 = sp\n 39327: u64 [s1 + 0x8] = a0\n 39330: a0 = u64 [a4 + 0x18]\n 39333: u64 [s1 + 0x1c0] = a0\n 39337: a0 = u64 [a4 + 0x10]\n 39340: u64 [s1 + 0x1b0] = a0\n 39344: a0 = u64 [a4 + 0x8]\n 39347: u64 [s1 + 0x1b8] = a0\n 39351: a0 = u64 [a4]\n 39353: u64 [s1 + 0x1a8] = a0\n 39357: a0 = u64 [a3 + 0x18]\n 39360: u64 [s1 + 0x188] = a0\n 39364: a0 = u64 [a3 + 0x10]\n 39367: u64 [s1 + 0x178] = a0\n 39371: a0 = u64 [a3 + 0x8]\n 39374: u64 [s1 + 0x180] = a0\n 39378: a0 = u64 [a3]\n 39380: u64 [s1 + 0x170] = a0\n 39384: a0 = u64 [a2 + 0x18]\n 39387: u64 [s1 + 0x58] = a0\n 39390: a0 = u64 [a2 + 0x10]\n 39393: u64 [s1 + 0x90] = a0\n 39397: a0 = u64 [a2 + 0x8]\n 39400: u64 [s1 + 0x88] = a0\n 39404: a0 = u64 [a2]\n 39406: u64 [s1 + 0x80] = a0\n 39410: a0 = u64 [a1 + 0x18]\n 39413: u64 [s1 + 0x60] = a0\n 39416: a0 = u64 [a1 + 0x10]\n 39419: u64 [s1 + 0x68] = a0\n 39422: a0 = u64 [a1 + 0x8]\n 39425: u64 [s1 + 0x70] = a0\n 39428: a0 = u64 [a1]\n 39430: u64 [s1 + 0x78] = a0\n 39433: u64 [s1 + 920] = 0\n 39437: u64 [s1 + 912] = 0\n 39441: u64 [s1 + 904] = 0\n 39445: u64 [s1 + 896] = 0x5\n 39450: u64 [s1 + 952] = 0\n 39454: u64 [s1 + 944] = 0\n 39458: u64 [s1 + 936] = 0\n 39462: u64 [s1 + 928] = 0\n 39466: u32 [s1 + 960] = 0x20\n 39471: i32 a1 = s1 + 0x380\n 39475: i32 a3 = s1 + 0x3a0\n 39479: i32 a4 = s1 + 0x3c0\n 39483: a2 = 0xffffffffffffffff\n 39486: a0 = 0\n 39488: ecalli 7 // 'get_storage'\n 39490: a2 = u64 [s1 + 0x3a0]\n 39494: a0 = u64 [s1 + 0x3a8]\n 39498: a1 = u64 [s1 + 0x3b0]\n 39502: a3 = u64 [s1 + 0x3b8]\n 39506: u64 [s1 + 0x358] = a3\n 39510: u64 [s1 + 0x350] = a1\n 39514: u64 [s1 + 0x348] = a0\n 39518: a0 = s1 + 0x360\n 39522: a1 = s1 + 0x340\n 39526: u64 [s1 + 0x340] = a2\n 39530: ra = 0x3ac\n 39534: jump @1114\n      : @618 [@dyn 264] (gas: 11)\n 39538: a0 = u64 [sp + 0x120]\n 39542: u64 [sp + 0x38] = a0\n 39545: a0 = u64 [sp + 0x128]\n 39549: u64 [sp + 0x30] = a0\n 39552: a0 = u64 [sp + 0x130]\n 39556: u64 [sp + 0x28] = a0\n 39559: a0 = u64 [sp + 0x138]\n 39563: u64 [sp + 0x20] = a0\n 39566: a0 = 0x40\n 39569: a1 = 0x20\n 39572: ra = 530, jump @0\n      : @619 [@dyn 265] (gas: 111)\n 39579: a1 = u8 [a0 + 0x1]\n 39582: a2 = u8 [a0]\n 39584: a3 = u8 [a0 + 0x2]\n 39587: a4 = u8 [a0 + 0x3]\n 39590: a1 = a1 << 0x8\n 39593: a1 = a1 | a2\n 39596: a3 = a3 << 0x10\n 39599: a4 = a4 << 0x18\n 39602: a3 = a3 | a4\n 39605: a1 = a1 | a3\n 39608: a2 = u8 [a0 + 0x5]\n 39611: a3 = u8 [a0 + 0x4]\n 39614: a4 = u8 [a0 + 0x6]\n 39617: a5 = u8 [a0 + 0x7]\n 39620: a2 = a2 << 0x8\n 39623: a2 = a2 | a3\n 39626: a4 = a4 << 0x10\n 39629: a5 = a5 << 0x18\n 39632: a4 = a4 | a5\n 39635: a2 = a2 | a4\n 39638: a2 = a2 << 0x20\n 39641: t0 = a2 | a1\n 39644: a2 = u8 [a0 + 0x9]\n 39647: a3 = u8 [a0 + 0x8]\n 39650: a4 = u8 [a0 + 0xa]\n 39653: a5 = u8 [a0 + 0xb]\n 39656: a2 = a2 << 0x8\n 39659: a2 = a2 | a3\n 39662: a4 = a4 << 0x10\n 39665: a5 = a5 << 0x18\n 39668: a4 = a4 | a5\n 39671: a2 = a2 | a4\n 39674: a3 = u8 [a0 + 0xd]\n 39677: a4 = u8 [a0 + 0xc]\n 39680: a5 = u8 [a0 + 0xe]\n 39683: s1 = u8 [a0 + 0xf]\n 39686: a3 = a3 << 0x8\n 39689: a3 = a3 | a4\n 39692: a5 = a5 << 0x10\n 39695: s1 = s1 << 0x18\n 39698: a5 = a5 | s1\n 39701: a3 = a3 | a5\n 39704: a3 = a3 << 0x20\n 39707: a2 = a2 | a3\n 39710: a3 = u8 [a0 + 0x11]\n 39713: a4 = u8 [a0 + 0x10]\n 39716: a5 = u8 [a0 + 0x12]\n 39719: s1 = u8 [a0 + 0x13]\n 39722: a3 = a3 << 0x8\n 39725: a3 = a3 | a4\n 39728: a5 = a5 << 0x10\n 39731: s1 = s1 << 0x18\n 39734: a5 = a5 | s1\n 39737: a3 = a3 | a5\n 39740: a4 = u8 [a0 + 0x15]\n 39743: a5 = u8 [a0 + 0x14]\n 39746: s1 = u8 [a0 + 0x16]\n 39749: a1 = u8 [a0 + 0x17]\n 39752: a4 = a4 << 0x8\n 39755: a4 = a4 | a5\n 39758: s1 = s1 << 0x10\n 39761: a1 = a1 << 0x18\n 39764: a1 = a1 | s1\n 39767: a1 = a1 | a4\n 39770: a1 = a1 << 0x20\n 39773: a3 = a3 | a1\n 39776: a1 = u8 [a0 + 0x19]\n 39779: a4 = u8 [a0 + 0x18]\n 39782: a5 = u8 [a0 + 0x1a]\n 39785: s1 = u8 [a0 + 0x1b]\n 39788: a1 = a1 << 0x8\n 39791: a1 = a1 | a4\n 39794: a5 = a5 << 0x10\n 39797: s1 = s1 << 0x18\n 39800: a5 = a5 | s1\n 39803: a1 = a1 | a5\n 39806: a4 = u8 [a0 + 0x1d]\n 39809: a5 = u8 [a0 + 0x1c]\n 39812: s1 = u8 [a0 + 0x1e]\n 39815: a0 = u8 [a0 + 0x1f]\n 39818: a4 = a4 << 0x8\n 39821: a4 = a4 | a5\n 39824: s1 = s1 << 0x10\n 39827: a0 = a0 << 0x18\n 39830: a0 = a0 | s1\n 39833: a0 = a0 | a4\n 39836: a0 = a0 << 0x20\n 39839: a0 = a0 | a1\n 39842: a4 = reverse a0\n 39844: u64 [sp + 0x8] = a4\n 39847: a3 = reverse a3\n 39849: u64 [sp + 0x10] = a3\n 39852: a1 = reverse a2\n 39854: u64 [sp + 0x18] = a1\n 39857: s1 = reverse t0\n 39859: a0 = u64 [sp + 0x20]\n 39862: u64 [sp + 0x58] = a0\n 39865: a0 = u64 [sp + 0x28]\n 39868: u64 [sp + 0x50] = a0\n 39871: a0 = u64 [sp + 0x30]\n 39874: u64 [sp + 0x48] = a0\n 39877: a0 = u64 [sp + 0x38]\n 39880: u64 [sp + 0x40] = a0\n 39883: u64 [sp + 0x78] = s1\n 39886: u64 [sp + 0x70] = a1\n 39889: u64 [sp + 0x68] = a3\n 39892: a0 = sp + 0x80\n 39896: a1 = sp + 0x60\n 39899: a2 = sp + 0x40\n 39902: u64 [sp + 0x60] = a4\n 39905: ra = 532, jump @598\n      : @620 [@dyn 266] (gas: 12)\n 39911: a4 = u64 [sp + 0x10]\n 39914: a2 = u64 [sp + 0x8]\n 39917: u64 [sp + 0x38] = s1\n 39920: a0 = a4 | s1\n 39923: s1 = u64 [sp + 0x18]\n 39926: a1 = a2 | s1\n 39929: a1 = a1 | a0\n 39932: a1 = a1 >> 0x20\n 39935: a0 = a0 | s1\n 39938: a0 = a0 << 0x20\n 39941: a0 = a0 | a1\n 39944: jump @622 if a0 != 0\n      : @621 (gas: 29)\n 39947: a0 = u64 [sp + 0x88]\n 39951: a1 = u64 [sp + 0x98]\n 39955: u64 [sp + 0x30] = a1\n 39958: t1 = u64 [sp + 0x80]\n 39962: a1 = u64 [sp + 0x90]\n 39966: t2 = a0 ^ a4\n 39969: a5 = a0 <u a4\n 39972: ra = t1 <u a2\n 39975: a5 = ra if t2 == 0\n 39978: a3 = a1 - s1\n 39981: t2 = a3 - a5\n 39984: t0 = a3 <u a5\n 39987: a3 = a1 <u s1\n 39990: a1 = u64 [sp + 0x38]\n 39993: a5 = u64 [sp + 0x30]\n 39996: a5 = a5 - a1\n 39999: a5 = a5 - a3\n 40002: a5 = a5 - t0\n 40005: a0 = a0 - a4\n 40008: a0 = a0 - ra\n 40011: s1 = t1 - a2\n 40014: a0 = a0 | a5\n 40017: a1 = s1 | t2\n 40020: a1 = a1 | a0\n 40023: a0 = a0 | t2\n 40026: a1 = a1 >> 0x20\n 40029: a0 = a0 << 0x20\n 40032: a0 = a0 | a1\n 40035: jump @625 if a0 == 0\n      : @622 (gas: 1)\n 40038: trap\n      : @623 (gas: 3)\n 40039: a0 = 0\n 40041: a1 = 0\n 40043: ra = 534, jump @0\n      : @624 [@dyn 267] (gas: 5)\n 40050: i32 a1 = a0 + 0\n 40052: a0 = 0x1\n 40055: a2 = 0\n 40057: ecalli 10 // 'seal_return'\n 40059: fallthrough\n      : @625 (gas: 4)\n 40060: i32 a0 = a2 + 0\n 40062: i32 s1 = s1 + 0\n 40064: a1 = s1\n 40066: ra = 536, jump @0\n      : @626 [@dyn 268] (gas: 6)\n 40073: i32 a1 = a0 + 0\n 40075: a0 = 0\n 40077: a2 = s1\n 40079: ra = 0x21a\n 40083: ecalli 10 // 'seal_return'\n 40085: fallthrough\n      : @627 [@dyn 269] (gas: 13)\n 40086: sp = sp + 0xfffffffffffffea0\n 40090: u64 [sp + 0x158] = ra\n 40094: u64 [sp + 0x150] = s0\n 40098: u64 [sp + 0x148] = s1\n 40102: s0 = sp + 0x160\n 40106: sp = sp & 0xffffffffffffffe0\n 40109: u64 [sp + 280] = 0\n 40113: u64 [sp + 272] = 0\n 40117: u64 [sp + 264] = 0\n 40121: u64 [sp + 256] = 0\n 40125: i32 a0 = sp + 0x100\n 40129: ecalli 13 // 'value_transferred'\n 40131: fallthrough\n      : @628 (gas: 8)\n 40132: a0 = u64 [sp + 0x110]\n 40136: a1 = u64 [sp + 0x118]\n 40140: a2 = u64 [sp + 0x108]\n 40144: a3 = u64 [sp + 0x100]\n 40148: a1 = a1 | a2\n 40151: a0 = a0 | a3\n 40154: a0 = a0 | a1\n 40157: jump @637 if a0 != 0\n      : @629 (gas: 2)\n 40161: a0 = i32 [0x20164]\n 40166: jump @637 if a0 <=u 35\n      : @630 (gas: 61)\n 40171: i32 a0 = sp + 0x120\n 40175: a1 = 0x4\n 40178: ecalli 3 // 'call_data_load'\n 40180: a2 = u64 [sp + 0x120]\n 40184: a0 = u64 [sp + 0x128]\n 40188: a1 = u64 [sp + 0x130]\n 40192: a3 = u64 [sp + 0x138]\n 40196: u64 [sp + 0xd8] = a3\n 40200: u64 [sp + 0xd0] = a1\n 40204: u64 [sp + 0xc8] = a0\n 40208: a0 = sp + 0xe0\n 40212: a1 = sp + 0xc0\n 40216: u64 [sp + 0xc0] = a2\n 40220: ra = 0x21c\n 40224: sp = sp + 0xfffffffffffffb40\n 40228: u64 [sp + 0x4b8] = ra\n 40232: u64 [sp + 0x4b0] = s0\n 40236: u64 [sp + 0x4a8] = s1\n 40240: s0 = sp + 0x4c0\n 40244: sp = sp & 0xffffffffffffffe0\n 40247: u64 [sp + 0x8] = a0\n 40250: a0 = u64 [a1 + 0x18]\n 40253: u64 [sp + 0x168] = a0\n 40257: a0 = u64 [a1 + 0x10]\n 40260: u64 [sp + 0x158] = a0\n 40264: a0 = u64 [a1 + 0x8]\n 40267: u64 [sp + 0x150] = a0\n 40271: a0 = u64 [a1]\n 40273: u64 [sp + 0x148] = a0\n 40277: a0 = 0xffffffff\n 40287: u64 [sp + 0x120] = a0\n 40291: u64 [sp + 1144] = 0\n 40295: u64 [sp + 1136] = 0\n 40299: u64 [sp + 1128] = 0\n 40303: u64 [sp + 1120] = 0x3\n 40308: u64 [sp + 1176] = 0\n 40312: u64 [sp + 1168] = 0\n 40316: u64 [sp + 1160] = 0\n 40320: u64 [sp + 1152] = 0\n 40324: u32 [sp + 1184] = 0x20\n 40329: i32 a1 = sp + 0x460\n 40333: i32 a3 = sp + 0x480\n 40337: i32 a4 = sp + 0x4a0\n 40341: a2 = 0xffffffffffffffff\n 40344: a0 = 0\n 40346: u64 [sp + 0x68] = a1\n 40349: u64 [sp + 0x60] = a3\n 40352: u64 [sp + 0x58] = a4\n 40355: ecalli 7 // 'get_storage'\n 40357: a2 = u64 [sp + 0x480]\n 40361: a0 = u64 [sp + 0x488]\n 40365: a1 = u64 [sp + 0x490]\n 40369: a3 = u64 [sp + 0x498]\n 40373: u64 [sp + 0x438] = a3\n 40377: u64 [sp + 0x430] = a1\n 40381: u64 [sp + 0x428] = a0\n 40385: a0 = sp + 0x440\n 40389: a1 = sp + 0x420\n 40393: u64 [sp + 0x420] = a2\n 40397: ra = 0x3f4\n 40401: jump @1114\n      : @631 [@dyn 270] (gas: 11)\n 40405: a0 = u64 [sp + 0xf8]\n 40409: u64 [sp + 0x40] = a0\n 40412: a0 = u64 [sp + 0xf0]\n 40416: u64 [sp + 0x48] = a0\n 40419: a0 = u64 [sp + 0xe8]\n 40423: u64 [sp + 0x50] = a0\n 40426: a0 = u64 [sp + 0xe0]\n 40430: u64 [sp + 0x58] = a0\n 40433: a0 = 0x40\n 40436: a1 = 0x20\n 40439: ra = 542, jump @0\n      : @632 [@dyn 271] (gas: 100)\n 40446: a1 = u8 [a0 + 0x11]\n 40449: a2 = u8 [a0 + 0x10]\n 40452: a3 = u8 [a0 + 0x12]\n 40455: a4 = u8 [a0 + 0x13]\n 40458: a1 = a1 << 0x8\n 40461: a1 = a1 | a2\n 40464: a3 = a3 << 0x10\n 40467: a4 = a4 << 0x18\n 40470: a3 = a3 | a4\n 40473: a1 = a1 | a3\n 40476: a2 = u8 [a0 + 0x15]\n 40479: a3 = u8 [a0 + 0x14]\n 40482: a4 = u8 [a0 + 0x16]\n 40485: a5 = u8 [a0 + 0x17]\n 40488: a2 = a2 << 0x8\n 40491: a2 = a2 | a3\n 40494: a4 = a4 << 0x10\n 40497: a5 = a5 << 0x18\n 40500: a4 = a4 | a5\n 40503: a2 = a2 | a4\n 40506: a2 = a2 << 0x20\n 40509: t0 = a2 | a1\n 40512: a2 = u8 [a0 + 0x1]\n 40515: a3 = u8 [a0]\n 40517: a4 = u8 [a0 + 0x2]\n 40520: a5 = u8 [a0 + 0x3]\n 40523: a2 = a2 << 0x8\n 40526: a2 = a2 | a3\n 40529: a4 = a4 << 0x10\n 40532: a5 = a5 << 0x18\n 40535: a4 = a4 | a5\n 40538: a2 = a2 | a4\n 40541: a3 = u8 [a0 + 0x5]\n 40544: a4 = u8 [a0 + 0x4]\n 40547: a5 = u8 [a0 + 0x6]\n 40550: s1 = u8 [a0 + 0x7]\n 40553: a3 = a3 << 0x8\n 40556: a3 = a3 | a4\n 40559: a5 = a5 << 0x10\n 40562: s1 = s1 << 0x18\n 40565: a5 = a5 | s1\n 40568: a3 = a3 | a5\n 40571: a3 = a3 << 0x20\n 40574: a2 = a2 | a3\n 40577: a3 = u8 [a0 + 0x19]\n 40580: a4 = u8 [a0 + 0x18]\n 40583: a5 = u8 [a0 + 0x1a]\n 40586: s1 = u8 [a0 + 0x1b]\n 40589: a3 = a3 << 0x8\n 40592: a3 = a3 | a4\n 40595: a5 = a5 << 0x10\n 40598: s1 = s1 << 0x18\n 40601: a5 = a5 | s1\n 40604: a3 = a3 | a5\n 40607: a4 = u8 [a0 + 0x1d]\n 40610: a5 = u8 [a0 + 0x1c]\n 40613: s1 = u8 [a0 + 0x1e]\n 40616: a1 = u8 [a0 + 0x1f]\n 40619: a4 = a4 << 0x8\n 40622: a4 = a4 | a5\n 40625: s1 = s1 << 0x10\n 40628: a1 = a1 << 0x18\n 40631: a1 = a1 | s1\n 40634: a1 = a1 | a4\n 40637: a1 = a1 << 0x20\n 40640: a3 = a3 | a1\n 40643: a1 = u8 [a0 + 0x9]\n 40646: a4 = u8 [a0 + 0x8]\n 40649: a5 = u8 [a0 + 0xa]\n 40652: s1 = u8 [a0 + 0xb]\n 40655: a1 = a1 << 0x8\n 40658: a1 = a1 | a4\n 40661: a5 = a5 << 0x10\n 40664: s1 = s1 << 0x18\n 40667: a5 = a5 | s1\n 40670: a1 = a1 | a5\n 40673: a4 = u8 [a0 + 0xd]\n 40676: a5 = u8 [a0 + 0xc]\n 40679: s1 = u8 [a0 + 0xe]\n 40682: a0 = u8 [a0 + 0xf]\n 40685: a4 = a4 << 0x8\n 40688: a4 = a4 | a5\n 40691: s1 = s1 << 0x10\n 40694: a0 = a0 << 0x18\n 40697: a0 = a0 | s1\n 40700: a0 = a0 | a4\n 40703: a0 = a0 << 0x20\n 40706: a0 = a0 | a1\n 40709: s1 = reverse a0\n 40711: a3 = reverse a3\n 40713: a4 = reverse a2\n 40715: a2 = reverse t0\n 40717: a0 = a2 | a4\n 40720: a1 = a3 | s1\n 40723: a1 = a1 | a0\n 40726: a1 = a1 >> 0x20\n 40729: a0 = a0 | s1\n 40732: a0 = a0 << 0x20\n 40735: a0 = a0 | a1\n 40738: jump @636 if a0 != 0\n      : @633 (gas: 19)\n 40742: a0 = a3 + 0x20\n 40745: u64 [sp + 0x18] = a0\n 40748: a0 = a0 <u a3\n 40751: a1 = a2 + a0\n 40754: u64 [sp + 0x8] = a1\n 40757: a1 = a1 <u a2\n 40760: a1 = a0 if a0 == 0\n 40763: a1 = a1 + s1\n 40766: u64 [sp + 0x10] = a1\n 40769: a0 = a1 <u s1\n 40772: a0 = a0 + a4\n 40775: u64 [sp + 0x20] = a0\n 40778: i32 a0 = a3 + 0\n 40780: a1 = 0x20\n 40783: u64 [sp] = a0\n 40785: u64 [sp + 0x30] = a3\n 40788: u64 [sp + 0x28] = a2\n 40791: u64 [sp + 0x38] = a4\n 40794: ra = 544, jump @0\n      : @634 [@dyn 272] (gas: 52)\n 40801: u8 [a0 + 31] = 0x20\n 40805: u8 [a0 + 30] = 0\n 40808: u8 [a0 + 29] = 0\n 40811: u8 [a0 + 28] = 0\n 40814: u8 [a0 + 27] = 0\n 40817: u8 [a0 + 26] = 0\n 40820: u8 [a0 + 25] = 0\n 40823: u8 [a0 + 24] = 0\n 40826: u8 [a0 + 23] = 0\n 40829: u8 [a0 + 22] = 0\n 40832: u8 [a0 + 21] = 0\n 40835: u8 [a0 + 20] = 0\n 40838: u8 [a0 + 19] = 0\n 40841: u8 [a0 + 18] = 0\n 40844: u8 [a0 + 17] = 0\n 40847: u8 [a0 + 16] = 0\n 40850: u8 [a0 + 15] = 0\n 40853: u8 [a0 + 14] = 0\n 40856: u8 [a0 + 13] = 0\n 40859: u8 [a0 + 12] = 0\n 40862: u8 [a0 + 11] = 0\n 40865: u8 [a0 + 10] = 0\n 40868: u8 [a0 + 9] = 0\n 40871: u8 [a0 + 8] = 0\n 40874: u8 [a0 + 7] = 0\n 40877: u8 [a0 + 6] = 0\n 40880: u8 [a0 + 5] = 0\n 40883: u8 [a0 + 4] = 0\n 40886: u8 [a0 + 3] = 0\n 40889: u8 [a0 + 2] = 0\n 40892: u8 [a0 + 1] = 0\n 40895: u8 [a0 + 0] = 0\n 40897: a0 = u64 [sp + 0x8]\n 40900: u64 [sp + 0x68] = a0\n 40903: a0 = u64 [sp + 0x18]\n 40906: u64 [sp + 0x60] = a0\n 40909: a0 = u64 [sp + 0x40]\n 40912: u64 [sp + 0x98] = a0\n 40916: a0 = u64 [sp + 0x48]\n 40919: u64 [sp + 0x90] = a0\n 40923: a0 = u64 [sp + 0x50]\n 40926: u64 [sp + 0x88] = a0\n 40930: a0 = u64 [sp + 0x58]\n 40933: u64 [sp + 0x80] = a0\n 40937: a0 = u64 [sp + 0x10]\n 40940: u64 [sp + 0x70] = a0\n 40943: a0 = sp + 0xa0\n 40947: a1 = sp + 0x80\n 40951: a2 = sp + 0x60\n 40954: a3 = u64 [sp + 0x20]\n 40957: u64 [sp + 0x78] = a3\n 40960: ra = 546, jump @552\n      : @635 [@dyn 273] (gas: 30)\n 40966: a0 = u64 [sp + 0xa8]\n 40970: t0 = u64 [sp + 0xb8]\n 40974: t1 = u64 [sp + 0xa0]\n 40978: a3 = u64 [sp + 0xb0]\n 40982: a1 = u64 [sp + 0x28]\n 40985: a4 = a0 ^ a1\n 40988: a5 = a0 <u a1\n 40991: t2 = a1\n 40993: a2 = u64 [sp + 0x30]\n 40996: a1 = t1 <u a2\n 40999: a5 = a1 if a4 == 0\n 41002: a4 = a3 - s1\n 41005: a3 = a3 <u s1\n 41008: s1 = u64 [sp + 0x38]\n 41011: s1 = t0 - s1\n 41014: s1 = s1 - a3\n 41017: a3 = a4 <u a5\n 41020: s1 = s1 - a3\n 41023: a4 = a4 - a5\n 41026: a0 = a0 - t2\n 41029: a1 = a0 - a1\n 41032: a0 = t1 - a2\n 41035: a1 = a1 | s1\n 41038: a2 = a0 | a4\n 41041: a2 = a2 | a1\n 41044: a1 = a1 | a4\n 41047: a2 = a2 >> 0x20\n 41050: a1 = a1 << 0x20\n 41053: a1 = a1 | a2\n 41056: jump @639 if a1 == 0\n      : @636 (gas: 1)\n 41059: trap\n      : @637 (gas: 3)\n 41060: a0 = 0\n 41062: a1 = 0\n 41064: ra = 548, jump @0\n      : @638 [@dyn 274] (gas: 5)\n 41071: i32 a1 = a0 + 0\n 41073: a0 = 0x1\n 41076: a2 = 0\n 41078: ecalli 10 // 'seal_return'\n 41080: fallthrough\n      : @639 (gas: 4)\n 41081: i32 s1 = a0 + 0\n 41083: a0 = u64 [sp]\n 41085: a1 = s1\n 41087: ra = 550, jump @0\n      : @640 [@dyn 275] (gas: 6)\n 41094: i32 a1 = a0 + 0\n 41096: a0 = 0\n 41098: a2 = s1\n 41100: ra = 0x228\n 41104: ecalli 10 // 'seal_return'\n 41106: fallthrough\n      : @641 [@dyn 276] (gas: 229)\n 41107: sp = sp + 0xffffffffffffffa0\n 41110: u64 [sp + 0x58] = ra\n 41113: u64 [sp + 0x50] = s0\n 41116: u64 [sp + 0x48] = s1\n 41119: u64 [sp] = a0\n 41121: t2 = u64 [a1]\n 41123: ra = u64 [a1 + 0x8]\n 41126: a4 = u64 [a1 + 0x10]\n 41129: a1 = u64 [a1 + 0x18]\n 41132: t0 = u64 [a2]\n 41134: a3 = u64 [a2 + 0x8]\n 41137: t1 = u64 [a2 + 0x18]\n 41140: a2 = u64 [a2 + 0x10]\n 41143: s0 = t0 >> 0x3d\n 41146: s1 = a3 << 0x3\n 41149: s0 = s0 | s1\n 41152: a3 = a3 >> 0x3d\n 41155: s1 = a2 << 0x3\n 41158: a3 = a3 | s1\n 41161: a2 = a2 >> 0x3d\n 41164: t1 = t1 << 0x3\n 41167: a2 = t1 | a2\n 41170: t1 = t0 << 0x3\n 41173: s1 = a2 >u 0\n 41175: a5 = a3 >u 0\n 41177: a5 = s1 if a2 != 0\n 41180: a0 = s0 >u 0\n 41182: s1 = t1 <u 0x100\n 41186: t1 = s1 ^ 0x1\n 41189: t1 = a0 if s0 != 0\n 41192: a2 = a2 | a3\n 41195: t1 = a5 if a2 != 0\n 41198: u8 [sp + 71] = 0\n 41201: u8 [sp + 70] = 0\n 41204: u8 [sp + 69] = 0\n 41207: u8 [sp + 68] = 0\n 41210: u8 [sp + 67] = 0\n 41213: u8 [sp + 66] = 0\n 41216: u8 [sp + 65] = 0\n 41219: u8 [sp + 64] = 0\n 41222: u8 [sp + 63] = 0\n 41225: u8 [sp + 62] = 0\n 41228: u8 [sp + 61] = 0\n 41231: u8 [sp + 60] = 0\n 41234: u8 [sp + 59] = 0\n 41237: u8 [sp + 58] = 0\n 41240: u8 [sp + 57] = 0\n 41243: u8 [sp + 56] = 0\n 41246: u8 [sp + 55] = 0\n 41249: u8 [sp + 54] = 0\n 41252: u8 [sp + 53] = 0\n 41255: u8 [sp + 52] = 0\n 41258: u8 [sp + 51] = 0\n 41261: u8 [sp + 50] = 0\n 41264: u8 [sp + 49] = 0\n 41267: u8 [sp + 48] = 0\n 41270: u8 [sp + 47] = 0\n 41273: u8 [sp + 46] = 0\n 41276: u8 [sp + 45] = 0\n 41279: u8 [sp + 44] = 0\n 41282: u8 [sp + 43] = 0\n 41285: u8 [sp + 42] = 0\n 41288: u8 [sp + 41] = 0\n 41291: u8 [sp + 40] = 0\n 41294: u8 [sp + 0x20] = a1\n 41297: u8 [sp + 0x18] = a4\n 41300: u8 [sp + 0x10] = ra\n 41303: u8 [sp + 0x8] = t2\n 41306: a0 = a1 >> 0x38\n 41309: u8 [sp + 0x27] = a0\n 41312: a0 = a1 >> 0x30\n 41315: u8 [sp + 0x26] = a0\n 41318: a0 = a1 >> 0x28\n 41321: u8 [sp + 0x25] = a0\n 41324: a0 = a1 >> 0x20\n 41327: u8 [sp + 0x24] = a0\n 41330: a0 = a1 >> 0x18\n 41333: u8 [sp + 0x23] = a0\n 41336: a0 = a1 >> 0x10\n 41339: u8 [sp + 0x22] = a0\n 41342: a1 = a1 >> 0x8\n 41345: u8 [sp + 0x21] = a1\n 41348: a0 = a4 >> 0x38\n 41351: u8 [sp + 0x1f] = a0\n 41354: a0 = a4 >> 0x30\n 41357: u8 [sp + 0x1e] = a0\n 41360: a0 = a4 >> 0x28\n 41363: u8 [sp + 0x1d] = a0\n 41366: a0 = a4 >> 0x20\n 41369: u8 [sp + 0x1c] = a0\n 41372: a0 = a4 >> 0x18\n 41375: u8 [sp + 0x1b] = a0\n 41378: a0 = a4 >> 0x10\n 41381: u8 [sp + 0x1a] = a0\n 41384: a4 = a4 >> 0x8\n 41387: u8 [sp + 0x19] = a4\n 41390: a0 = ra >> 0x38\n 41393: u8 [sp + 0x17] = a0\n 41396: a0 = ra >> 0x30\n 41399: u8 [sp + 0x16] = a0\n 41402: a0 = ra >> 0x28\n 41405: u8 [sp + 0x15] = a0\n 41408: a0 = ra >> 0x20\n 41411: u8 [sp + 0x14] = a0\n 41414: a0 = ra >> 0x18\n 41417: u8 [sp + 0x13] = a0\n 41420: a0 = ra >> 0x10\n 41423: u8 [sp + 0x12] = a0\n 41426: a0 = ra >> 0x8\n 41429: u8 [sp + 0x11] = a0\n 41432: a0 = t2 >> 0x38\n 41435: u8 [sp + 0xf] = a0\n 41438: a0 = t2 >> 0x30\n 41441: u8 [sp + 0xe] = a0\n 41444: a0 = t2 >> 0x28\n 41447: u8 [sp + 0xd] = a0\n 41450: a0 = t2 >> 0x20\n 41453: u8 [sp + 0xc] = a0\n 41456: a0 = t2 >> 0x18\n 41459: u8 [sp + 0xb] = a0\n 41462: a0 = t2 >> 0x10\n 41465: u8 [sp + 0xa] = a0\n 41468: a0 = t2 >> 0x8\n 41471: u8 [sp + 0x9] = a0\n 41474: a2 = t0 & 0x1f\n 41477: a0 = sp + 0x8\n 41480: a2 = a2 + a0\n 41483: a0 = u8 [a2 + 0x19]\n 41486: a1 = u8 [a2 + 0x18]\n 41489: a3 = u8 [a2 + 0x1a]\n 41492: a4 = u8 [a2 + 0x1b]\n 41495: a0 = a0 << 0x8\n 41498: a0 = a0 | a1\n 41501: a3 = a3 << 0x10\n 41504: a4 = a4 << 0x18\n 41507: a3 = a3 | a4\n 41510: a0 = a0 | a3\n 41513: a1 = u8 [a2 + 0x1d]\n 41516: a3 = u8 [a2 + 0x1c]\n 41519: a4 = u8 [a2 + 0x1e]\n 41522: a5 = u8 [a2 + 0x1f]\n 41525: a1 = a1 << 0x8\n 41528: a1 = a1 | a3\n 41531: a4 = a4 << 0x10\n 41534: a5 = a5 << 0x18\n 41537: a4 = a4 | a5\n 41540: a1 = a1 | a4\n 41543: a1 = a1 << 0x20\n 41546: a3 = a1 | a0\n 41549: a0 = u8 [a2 + 0x11]\n 41552: a1 = u8 [a2 + 0x10]\n 41555: a4 = u8 [a2 + 0x12]\n 41558: a5 = u8 [a2 + 0x13]\n 41561: a0 = a0 << 0x8\n 41564: a0 = a0 | a1\n 41567: a4 = a4 << 0x10\n 41570: a5 = a5 << 0x18\n 41573: a4 = a4 | a5\n 41576: a0 = a0 | a4\n 41579: a1 = u8 [a2 + 0x15]\n 41582: a4 = u8 [a2 + 0x14]\n 41585: a5 = u8 [a2 + 0x16]\n 41588: s1 = u8 [a2 + 0x17]\n 41591: a1 = a1 << 0x8\n 41594: a1 = a1 | a4\n 41597: a5 = a5 << 0x10\n 41600: s1 = s1 << 0x18\n 41603: a5 = a5 | s1\n 41606: a1 = a1 | a5\n 41609: a1 = a1 << 0x20\n 41612: a1 = a1 | a0\n 41615: a0 = u8 [a2 + 0x9]\n 41618: a4 = u8 [a2 + 0x8]\n 41621: a5 = u8 [a2 + 0xa]\n 41624: s1 = u8 [a2 + 0xb]\n 41627: a0 = a0 << 0x8\n 41630: a0 = a0 | a4\n 41633: a5 = a5 << 0x10\n 41636: s1 = s1 << 0x18\n 41639: a5 = a5 | s1\n 41642: a0 = a0 | a5\n 41645: a4 = u8 [a2 + 0xd]\n 41648: a5 = u8 [a2 + 0xc]\n 41651: s1 = u8 [a2 + 0xe]\n 41654: s0 = u8 [a2 + 0xf]\n 41657: a4 = a4 << 0x8\n 41660: a4 = a4 | a5\n 41663: s1 = s1 << 0x10\n 41666: s0 = s0 << 0x18\n 41669: s0 = s0 | s1\n 41672: a4 = a4 | s0\n 41675: a4 = a4 << 0x20\n 41678: a4 = a4 | a0\n 41681: a0 = u8 [a2 + 0x1]\n 41684: a5 = u8 [a2]\n 41686: s1 = u8 [a2 + 0x2]\n 41689: s0 = u8 [a2 + 0x3]\n 41692: a0 = a0 << 0x8\n 41695: a0 = a0 | a5\n 41698: s1 = s1 << 0x10\n 41701: s0 = s0 << 0x18\n 41704: s0 = s0 | s1\n 41707: a0 = a0 | s0\n 41710: a5 = u8 [a2 + 0x5]\n 41713: s1 = u8 [a2 + 0x4]\n 41716: s0 = u8 [a2 + 0x6]\n 41719: a2 = u8 [a2 + 0x7]\n 41722: a5 = a5 << 0x8\n 41725: a5 = a5 | s1\n 41728: s0 = s0 << 0x10\n 41731: a2 = a2 << 0x18\n 41734: a2 = a2 | s0\n 41737: a2 = a2 | a5\n 41740: a2 = a2 << 0x20\n 41743: a0 = a0 | a2\n 41746: a0 = 0 if t1 != 0\n 41748: a4 = 0 if t1 != 0\n 41750: a1 = 0 if t1 != 0\n 41752: a3 = 0 if t1 != 0\n 41754: a2 = u64 [sp]\n 41756: u64 [a2 + 0x18] = a3\n 41759: u64 [a2 + 0x10] = a1\n 41762: u64 [a2 + 0x8] = a4\n 41765: u64 [a2] = a0\n 41767: ra = u64 [sp + 0x58]\n 41770: s0 = u64 [sp + 0x50]\n 41773: s1 = u64 [sp + 0x48]\n 41776: sp = sp + 0x60\n 41779: ret\n      : @642 (gas: 8)\n 41781: a0 = u64 [sp + 0x30]\n 41784: a1 = u64 [sp + 0x38]\n 41787: a2 = u64 [sp + 0x28]\n 41790: a3 = u64 [sp + 0x20]\n 41793: a1 = a1 | a2\n 41796: a0 = a0 | a3\n 41799: a0 = a0 | a1\n 41802: jump @647 if a0 != 0\n      : @643 (gas: 2)\n 41806: a0 = i32 [0x20164]\n 41811: jump @647 if a0 <=u 3\n      : @644 (gas: 26)\n 41816: u64 [sp + 88] = 0\n 41819: u64 [sp + 80] = 0\n 41822: u64 [sp + 72] = 0\n 41825: u64 [sp + 64] = 0x5\n 41829: u64 [sp + 120] = 0\n 41832: u64 [sp + 112] = 0\n 41835: u64 [sp + 104] = 0\n 41838: u64 [sp + 96] = 0\n 41841: u32 [sp + 128] = 0x20\n 41846: i32 a1 = sp + 0x40\n 41849: i32 a3 = sp + 0x60\n 41852: i32 a4 = sp + 0x80\n 41856: a2 = 0xffffffffffffffff\n 41859: a0 = 0\n 41861: ecalli 7 // 'get_storage'\n 41863: a0 = u64 [sp + 0x78]\n 41866: u64 [sp] = a0\n 41868: a0 = u64 [sp + 0x70]\n 41871: u64 [sp + 0x8] = a0\n 41874: a0 = u64 [sp + 0x68]\n 41877: u64 [sp + 0x10] = a0\n 41880: a0 = u64 [sp + 0x60]\n 41883: u64 [sp + 0x18] = a0\n 41886: a0 = 0x40\n 41889: a1 = 0x20\n 41892: ra = 554, jump @0\n      : @645 [@dyn 277] (gas: 100)\n 41899: a1 = u8 [a0 + 0x11]\n 41902: a2 = u8 [a0 + 0x10]\n 41905: a3 = u8 [a0 + 0x12]\n 41908: a4 = u8 [a0 + 0x13]\n 41911: a1 = a1 << 0x8\n 41914: a1 = a1 | a2\n 41917: a3 = a3 << 0x10\n 41920: a4 = a4 << 0x18\n 41923: a3 = a3 | a4\n 41926: a1 = a1 | a3\n 41929: a2 = u8 [a0 + 0x15]\n 41932: a3 = u8 [a0 + 0x14]\n 41935: a4 = u8 [a0 + 0x16]\n 41938: a5 = u8 [a0 + 0x17]\n 41941: a2 = a2 << 0x8\n 41944: a2 = a2 | a3\n 41947: a4 = a4 << 0x10\n 41950: a5 = a5 << 0x18\n 41953: a4 = a4 | a5\n 41956: a2 = a2 | a4\n 41959: a2 = a2 << 0x20\n 41962: t0 = a2 | a1\n 41965: a2 = u8 [a0 + 0x1]\n 41968: a3 = u8 [a0]\n 41970: a4 = u8 [a0 + 0x2]\n 41973: a5 = u8 [a0 + 0x3]\n 41976: a2 = a2 << 0x8\n 41979: a2 = a2 | a3\n 41982: a4 = a4 << 0x10\n 41985: a5 = a5 << 0x18\n 41988: a4 = a4 | a5\n 41991: a2 = a2 | a4\n 41994: a3 = u8 [a0 + 0x5]\n 41997: a4 = u8 [a0 + 0x4]\n 42000: a5 = u8 [a0 + 0x6]\n 42003: s1 = u8 [a0 + 0x7]\n 42006: a3 = a3 << 0x8\n 42009: a3 = a3 | a4\n 42012: a5 = a5 << 0x10\n 42015: s1 = s1 << 0x18\n 42018: a5 = a5 | s1\n 42021: a3 = a3 | a5\n 42024: a3 = a3 << 0x20\n 42027: a2 = a2 | a3\n 42030: a3 = u8 [a0 + 0x19]\n 42033: a4 = u8 [a0 + 0x18]\n 42036: a5 = u8 [a0 + 0x1a]\n 42039: s1 = u8 [a0 + 0x1b]\n 42042: a3 = a3 << 0x8\n 42045: a3 = a3 | a4\n 42048: a5 = a5 << 0x10\n 42051: s1 = s1 << 0x18\n 42054: a5 = a5 | s1\n 42057: a3 = a3 | a5\n 42060: a4 = u8 [a0 + 0x1d]\n 42063: a5 = u8 [a0 + 0x1c]\n 42066: s1 = u8 [a0 + 0x1e]\n 42069: a1 = u8 [a0 + 0x1f]\n 42072: a4 = a4 << 0x8\n 42075: a4 = a4 | a5\n 42078: s1 = s1 << 0x10\n 42081: a1 = a1 << 0x18\n 42084: a1 = a1 | s1\n 42087: a1 = a1 | a4\n 42090: a1 = a1 << 0x20\n 42093: a3 = a3 | a1\n 42096: a1 = u8 [a0 + 0x9]\n 42099: a4 = u8 [a0 + 0x8]\n 42102: a5 = u8 [a0 + 0xa]\n 42105: s1 = u8 [a0 + 0xb]\n 42108: a1 = a1 << 0x8\n 42111: a1 = a1 | a4\n 42114: a5 = a5 << 0x10\n 42117: s1 = s1 << 0x18\n 42120: a5 = a5 | s1\n 42123: a1 = a1 | a5\n 42126: a4 = u8 [a0 + 0xd]\n 42129: a5 = u8 [a0 + 0xc]\n 42132: s1 = u8 [a0 + 0xe]\n 42135: a0 = u8 [a0 + 0xf]\n 42138: a4 = a4 << 0x8\n 42141: a4 = a4 | a5\n 42144: s1 = s1 << 0x10\n 42147: a0 = a0 << 0x18\n 42150: a0 = a0 | s1\n 42153: a0 = a0 | a4\n 42156: a0 = a0 << 0x20\n 42159: a0 = a0 | a1\n 42162: a1 = reverse a0\n 42164: a0 = reverse a3\n 42166: a2 = reverse a2\n 42168: a3 = reverse t0\n 42170: a2 = a2 | a3\n 42173: a3 = a0 | a1\n 42176: a3 = a3 | a2\n 42179: a3 = a3 >> 0x20\n 42182: a1 = a1 | a2\n 42185: a1 = a1 << 0x20\n 42188: a1 = a1 | a3\n 42191: jump @649 if a1 == 0\n      : @646 (gas: 1)\n 42194: trap\n      : @647 (gas: 3)\n 42195: a0 = 0\n 42197: a1 = 0\n 42199: ra = 556, jump @0\n      : @648 [@dyn 278] (gas: 5)\n 42206: i32 a1 = a0 + 0\n 42208: a0 = 0x1\n 42211: a2 = 0\n 42213: ecalli 10 // 'seal_return'\n 42215: fallthrough\n      : @649 (gas: 4)\n 42216: i32 s1 = a0 + 0\n 42218: a1 = 0x20\n 42221: a0 = s1\n 42223: ra = 558, jump @0\n      : @650 [@dyn 279] (gas: 71)\n 42230: a1 = u64 [sp]\n 42232: a1 = reverse a1\n 42234: a2 = u64 [sp + 0x8]\n 42237: a2 = reverse a2\n 42239: a3 = u64 [sp + 0x10]\n 42242: a3 = reverse a3\n 42244: a4 = u64 [sp + 0x18]\n 42247: a4 = reverse a4\n 42249: a5 = a4 >> 0x38\n 42252: u8 [a0 + 0x1f] = a5\n 42255: a5 = a4 >> 0x30\n 42258: u8 [a0 + 0x1e] = a5\n 42261: a5 = a4 >> 0x28\n 42264: u8 [a0 + 0x1d] = a5\n 42267: a5 = a4 >> 0x20\n 42270: u8 [a0 + 0x1c] = a5\n 42273: a5 = a4 >> 0x18\n 42276: u8 [a0 + 0x1b] = a5\n 42279: a5 = a4 >> 0x10\n 42282: u8 [a0 + 0x1a] = a5\n 42285: a5 = a4 >> 0x8\n 42288: u8 [a0 + 0x19] = a5\n 42291: u8 [a0 + 0x18] = a4\n 42294: u8 [a0 + 0x10] = a3\n 42297: a4 = a3 >> 0x38\n 42300: u8 [a0 + 0x17] = a4\n 42303: a4 = a3 >> 0x30\n 42306: u8 [a0 + 0x16] = a4\n 42309: a4 = a3 >> 0x28\n 42312: u8 [a0 + 0x15] = a4\n 42315: a4 = a3 >> 0x20\n 42318: u8 [a0 + 0x14] = a4\n 42321: a4 = a3 >> 0x18\n 42324: u8 [a0 + 0x13] = a4\n 42327: a4 = a3 >> 0x10\n 42330: u8 [a0 + 0x12] = a4\n 42333: a3 = a3 >> 0x8\n 42336: u8 [a0 + 0x11] = a3\n 42339: u8 [a0 + 0x8] = a2\n 42342: a3 = a2 >> 0x38\n 42345: u8 [a0 + 0xf] = a3\n 42348: a3 = a2 >> 0x30\n 42351: u8 [a0 + 0xe] = a3\n 42354: a3 = a2 >> 0x28\n 42357: u8 [a0 + 0xd] = a3\n 42360: a3 = a2 >> 0x20\n 42363: u8 [a0 + 0xc] = a3\n 42366: a3 = a2 >> 0x18\n 42369: u8 [a0 + 0xb] = a3\n 42372: a3 = a2 >> 0x10\n 42375: u8 [a0 + 0xa] = a3\n 42378: a2 = a2 >> 0x8\n 42381: u8 [a0 + 0x9] = a2\n 42384: u8 [a0] = a1\n 42386: a2 = a1 >> 0x38\n 42389: u8 [a0 + 0x7] = a2\n 42392: a2 = a1 >> 0x30\n 42395: u8 [a0 + 0x6] = a2\n 42398: a2 = a1 >> 0x28\n 42401: u8 [a0 + 0x5] = a2\n 42404: a2 = a1 >> 0x20\n 42407: u8 [a0 + 0x4] = a2\n 42410: a2 = a1 >> 0x18\n 42413: u8 [a0 + 0x3] = a2\n 42416: a2 = a1 >> 0x10\n 42419: u8 [a0 + 0x2] = a2\n 42422: a1 = a1 >> 0x8\n 42425: u8 [a0 + 0x1] = a1\n 42428: a1 = 0x20\n 42431: a0 = s1\n 42433: ra = 560, jump @0\n      : @651 [@dyn 280] (gas: 6)\n 42440: i32 a1 = a0 + 0\n 42442: a2 = 0x20\n 42445: a0 = 0\n 42447: ra = 0x232\n 42451: ecalli 10 // 'seal_return'\n 42453: fallthrough\n      : @652 [@dyn 281] (gas: 12)\n 42454: sp = sp + 0xffffffffffffff80\n 42457: u64 [sp + 0x78] = ra\n 42460: u64 [sp + 0x70] = s0\n 42463: s0 = sp + 0x80\n 42467: sp = sp & 0xffffffffffffffe0\n 42470: u64 [sp + 56] = 0\n 42473: u64 [sp + 48] = 0\n 42476: u64 [sp + 40] = 0\n 42479: u64 [sp + 32] = 0\n 42482: i32 a0 = sp + 0x20\n 42485: ecalli 13 // 'value_transferred'\n 42487: fallthrough\n      : @653 (gas: 8)\n 42488: a0 = u64 [sp + 0x30]\n 42491: a1 = u64 [sp + 0x38]\n 42494: a2 = u64 [sp + 0x28]\n 42497: a3 = u64 [sp + 0x20]\n 42500: a1 = a1 | a2\n 42503: a0 = a0 | a3\n 42506: a0 = a0 | a1\n 42509: jump @659 if a0 != 0\n      : @654 (gas: 2)\n 42513: a0 = i32 [0x20164]\n 42518: jump @659 if a0 <=u 35\n      : @655 (gas: 13)\n 42523: i32 a0 = sp + 0x40\n 42526: a1 = 0x4\n 42529: ecalli 3 // 'call_data_load'\n 42531: a1 = u64 [sp + 0x40]\n 42534: a0 = u64 [sp + 0x48]\n 42537: a2 = u64 [sp + 0x50]\n 42540: a3 = u64 [sp + 0x58]\n 42543: u64 [sp + 0x18] = a3\n 42546: u64 [sp + 0x10] = a2\n 42549: u64 [sp + 0x8] = a0\n 42552: a0 = sp\n 42554: u64 [sp] = a1\n 42556: ra = 564, jump @1179\n      : @656 [@dyn 282] (gas: 3)\n 42563: a0 = 0x40\n 42566: a1 = 0x20\n 42569: ra = 566, jump @0\n      : @657 [@dyn 283] (gas: 100)\n 42576: a1 = u8 [a0 + 0x11]\n 42579: a2 = u8 [a0 + 0x10]\n 42582: a3 = u8 [a0 + 0x12]\n 42585: a4 = u8 [a0 + 0x13]\n 42588: a1 = a1 << 0x8\n 42591: a1 = a1 | a2\n 42594: a3 = a3 << 0x10\n 42597: a4 = a4 << 0x18\n 42600: a3 = a3 | a4\n 42603: a1 = a1 | a3\n 42606: a2 = u8 [a0 + 0x15]\n 42609: a3 = u8 [a0 + 0x14]\n 42612: a4 = u8 [a0 + 0x16]\n 42615: a5 = u8 [a0 + 0x17]\n 42618: a2 = a2 << 0x8\n 42621: a2 = a2 | a3\n 42624: a4 = a4 << 0x10\n 42627: a5 = a5 << 0x18\n 42630: a4 = a4 | a5\n 42633: a2 = a2 | a4\n 42636: a2 = a2 << 0x20\n 42639: t0 = a2 | a1\n 42642: a2 = u8 [a0 + 0x1]\n 42645: a3 = u8 [a0]\n 42647: a4 = u8 [a0 + 0x2]\n 42650: a5 = u8 [a0 + 0x3]\n 42653: a2 = a2 << 0x8\n 42656: a2 = a2 | a3\n 42659: a4 = a4 << 0x10\n 42662: a5 = a5 << 0x18\n 42665: a4 = a4 | a5\n 42668: a2 = a2 | a4\n 42671: a3 = u8 [a0 + 0x5]\n 42674: a4 = u8 [a0 + 0x4]\n 42677: a5 = u8 [a0 + 0x6]\n 42680: a1 = u8 [a0 + 0x7]\n 42683: a3 = a3 << 0x8\n 42686: a3 = a3 | a4\n 42689: a5 = a5 << 0x10\n 42692: a1 = a1 << 0x18\n 42695: a1 = a1 | a5\n 42698: a1 = a1 | a3\n 42701: a1 = a1 << 0x20\n 42704: t1 = a1 | a2\n 42707: a1 = u8 [a0 + 0x19]\n 42710: a3 = u8 [a0 + 0x18]\n 42713: a4 = u8 [a0 + 0x1a]\n 42716: a5 = u8 [a0 + 0x1b]\n 42719: a1 = a1 << 0x8\n 42722: a1 = a1 | a3\n 42725: a4 = a4 << 0x10\n 42728: a5 = a5 << 0x18\n 42731: a4 = a4 | a5\n 42734: a1 = a1 | a4\n 42737: a3 = u8 [a0 + 0x1d]\n 42740: a4 = u8 [a0 + 0x1c]\n 42743: a5 = u8 [a0 + 0x1e]\n 42746: a2 = u8 [a0 + 0x1f]\n 42749: a3 = a3 << 0x8\n 42752: a3 = a3 | a4\n 42755: a5 = a5 << 0x10\n 42758: a2 = a2 << 0x18\n 42761: a2 = a2 | a5\n 42764: a2 = a2 | a3\n 42767: a2 = a2 << 0x20\n 42770: a3 = a2 | a1\n 42773: a1 = u8 [a0 + 0x9]\n 42776: a2 = u8 [a0 + 0x8]\n 42779: a4 = u8 [a0 + 0xa]\n 42782: a5 = u8 [a0 + 0xb]\n 42785: a1 = a1 << 0x8\n 42788: a1 = a1 | a2\n 42791: a4 = a4 << 0x10\n 42794: a5 = a5 << 0x18\n 42797: a4 = a4 | a5\n 42800: a1 = a1 | a4\n 42803: a2 = u8 [a0 + 0xd]\n 42806: a4 = u8 [a0 + 0xc]\n 42809: a5 = u8 [a0 + 0xe]\n 42812: a0 = u8 [a0 + 0xf]\n 42815: a2 = a2 << 0x8\n 42818: a2 = a2 | a4\n 42821: a5 = a5 << 0x10\n 42824: a0 = a0 << 0x18\n 42827: a0 = a0 | a5\n 42830: a0 = a0 | a2\n 42833: a0 = a0 << 0x20\n 42836: a0 = a0 | a1\n 42839: a1 = reverse a0\n 42841: a0 = reverse a3\n 42843: a2 = reverse t1\n 42845: a3 = reverse t0\n 42847: a2 = a2 | a3\n 42850: a3 = a0 | a1\n 42853: a3 = a3 | a2\n 42856: a3 = a3 >> 0x20\n 42859: a1 = a1 | a2\n 42862: a1 = a1 << 0x20\n 42865: a1 = a1 | a3\n 42868: jump @661 if a1 == 0\n      : @658 (gas: 1)\n 42871: trap\n      : @659 (gas: 3)\n 42872: a0 = 0\n 42874: a1 = 0\n 42876: ra = 568, jump @0\n      : @660 [@dyn 284] (gas: 7)\n 42883: i32 a1 = a0 + 0\n 42885: a0 = 0x1\n 42888: a2 = 0\n 42890: ecalli 10 // 'seal_return'\n 42892: i32 a0 = a0 + 0\n 42894: ra = 0x23a\n 42898: jump @0\n      : @661 (gas: 2)\n 42902: i32 a0 = a0 + 0\n 42904: ra = 570, jump @0\n      : @662 [@dyn 285] (gas: 6)\n 42911: i32 a1 = a0 + 0\n 42913: a0 = 0\n 42915: a2 = 0\n 42917: ra = 0x23c\n 42921: ecalli 10 // 'seal_return'\n 42923: fallthrough\n      : @663 [@dyn 286] (gas: 12)\n 42924: sp = sp + 0xffffffffffffff80\n 42927: u64 [sp + 0x78] = ra\n 42930: u64 [sp + 0x70] = s0\n 42933: s0 = sp + 0x80\n 42937: sp = sp & 0xffffffffffffffe0\n 42940: u64 [sp + 56] = 0\n 42943: u64 [sp + 48] = 0\n 42946: u64 [sp + 40] = 0\n 42949: u64 [sp + 32] = 0\n 42952: i32 a0 = sp + 0x20\n 42955: ecalli 13 // 'value_transferred'\n 42957: fallthrough\n      : @664 (gas: 8)\n 42958: a0 = u64 [sp + 0x30]\n 42961: a1 = u64 [sp + 0x38]\n 42964: a2 = u64 [sp + 0x28]\n 42967: a3 = u64 [sp + 0x20]\n 42970: a1 = a1 | a2\n 42973: a0 = a0 | a3\n 42976: a0 = a0 | a1\n 42979: jump @670 if a0 != 0\n      : @665 (gas: 2)\n 42983: a0 = i32 [0x20164]\n 42988: jump @670 if a0 <=u 35\n      : @666 (gas: 13)\n 42993: i32 a0 = sp + 0x40\n 42996: a1 = 0x4\n 42999: ecalli 3 // 'call_data_load'\n 43001: a1 = u64 [sp + 0x40]\n 43004: a0 = u64 [sp + 0x48]\n 43007: a2 = u64 [sp + 0x50]\n 43010: a3 = u64 [sp + 0x58]\n 43013: u64 [sp + 0x18] = a3\n 43016: u64 [sp + 0x10] = a2\n 43019: u64 [sp + 0x8] = a0\n 43022: a0 = sp\n 43024: u64 [sp] = a1\n 43026: ra = 574, jump @1206\n      : @667 [@dyn 287] (gas: 3)\n 43033: a0 = 0x40\n 43036: a1 = 0x20\n 43039: ra = 576, jump @0\n      : @668 [@dyn 288] (gas: 100)\n 43046: a1 = u8 [a0 + 0x11]\n 43049: a2 = u8 [a0 + 0x10]\n 43052: a3 = u8 [a0 + 0x12]\n 43055: a4 = u8 [a0 + 0x13]\n 43058: a1 = a1 << 0x8\n 43061: a1 = a1 | a2\n 43064: a3 = a3 << 0x10\n 43067: a4 = a4 << 0x18\n 43070: a3 = a3 | a4\n 43073: a1 = a1 | a3\n 43076: a2 = u8 [a0 + 0x15]\n 43079: a3 = u8 [a0 + 0x14]\n 43082: a4 = u8 [a0 + 0x16]\n 43085: a5 = u8 [a0 + 0x17]\n 43088: a2 = a2 << 0x8\n 43091: a2 = a2 | a3\n 43094: a4 = a4 << 0x10\n 43097: a5 = a5 << 0x18\n 43100: a4 = a4 | a5\n 43103: a2 = a2 | a4\n 43106: a2 = a2 << 0x20\n 43109: t0 = a2 | a1\n 43112: a2 = u8 [a0 + 0x1]\n 43115: a3 = u8 [a0]\n 43117: a4 = u8 [a0 + 0x2]\n 43120: a5 = u8 [a0 + 0x3]\n 43123: a2 = a2 << 0x8\n 43126: a2 = a2 | a3\n 43129: a4 = a4 << 0x10\n 43132: a5 = a5 << 0x18\n 43135: a4 = a4 | a5\n 43138: a2 = a2 | a4\n 43141: a3 = u8 [a0 + 0x5]\n 43144: a4 = u8 [a0 + 0x4]\n 43147: a5 = u8 [a0 + 0x6]\n 43150: a1 = u8 [a0 + 0x7]\n 43153: a3 = a3 << 0x8\n 43156: a3 = a3 | a4\n 43159: a5 = a5 << 0x10\n 43162: a1 = a1 << 0x18\n 43165: a1 = a1 | a5\n 43168: a1 = a1 | a3\n 43171: a1 = a1 << 0x20\n 43174: t1 = a1 | a2\n 43177: a1 = u8 [a0 + 0x19]\n 43180: a3 = u8 [a0 + 0x18]\n 43183: a4 = u8 [a0 + 0x1a]\n 43186: a5 = u8 [a0 + 0x1b]\n 43189: a1 = a1 << 0x8\n 43192: a1 = a1 | a3\n 43195: a4 = a4 << 0x10\n 43198: a5 = a5 << 0x18\n 43201: a4 = a4 | a5\n 43204: a1 = a1 | a4\n 43207: a3 = u8 [a0 + 0x1d]\n 43210: a4 = u8 [a0 + 0x1c]\n 43213: a5 = u8 [a0 + 0x1e]\n 43216: a2 = u8 [a0 + 0x1f]\n 43219: a3 = a3 << 0x8\n 43222: a3 = a3 | a4\n 43225: a5 = a5 << 0x10\n 43228: a2 = a2 << 0x18\n 43231: a2 = a2 | a5\n 43234: a2 = a2 | a3\n 43237: a2 = a2 << 0x20\n 43240: a3 = a2 | a1\n 43243: a1 = u8 [a0 + 0x9]\n 43246: a2 = u8 [a0 + 0x8]\n 43249: a4 = u8 [a0 + 0xa]\n 43252: a5 = u8 [a0 + 0xb]\n 43255: a1 = a1 << 0x8\n 43258: a1 = a1 | a2\n 43261: a4 = a4 << 0x10\n 43264: a5 = a5 << 0x18\n 43267: a4 = a4 | a5\n 43270: a1 = a1 | a4\n 43273: a2 = u8 [a0 + 0xd]\n 43276: a4 = u8 [a0 + 0xc]\n 43279: a5 = u8 [a0 + 0xe]\n 43282: a0 = u8 [a0 + 0xf]\n 43285: a2 = a2 << 0x8\n 43288: a2 = a2 | a4\n 43291: a5 = a5 << 0x10\n 43294: a0 = a0 << 0x18\n 43297: a0 = a0 | a5\n 43300: a0 = a0 | a2\n 43303: a0 = a0 << 0x20\n 43306: a0 = a0 | a1\n 43309: a1 = reverse a0\n 43311: a0 = reverse a3\n 43313: a2 = reverse t1\n 43315: a3 = reverse t0\n 43317: a2 = a2 | a3\n 43320: a3 = a0 | a1\n 43323: a3 = a3 | a2\n 43326: a3 = a3 >> 0x20\n 43329: a1 = a1 | a2\n 43332: a1 = a1 << 0x20\n 43335: a1 = a1 | a3\n 43338: jump @672 if a1 == 0\n      : @669 (gas: 1)\n 43341: trap\n      : @670 (gas: 3)\n 43342: a0 = 0\n 43344: a1 = 0\n 43346: ra = 578, jump @0\n      : @671 [@dyn 289] (gas: 7)\n 43353: i32 a1 = a0 + 0\n 43355: a0 = 0x1\n 43358: a2 = 0\n 43360: ecalli 10 // 'seal_return'\n 43362: i32 a0 = a0 + 0\n 43364: ra = 0x244\n 43368: jump @0\n      : @672 (gas: 2)\n 43372: i32 a0 = a0 + 0\n 43374: ra = 580, jump @0\n      : @673 [@dyn 290] (gas: 6)\n 43381: i32 a1 = a0 + 0\n 43383: a0 = 0\n 43385: a2 = 0\n 43387: ra = 0x246\n 43391: ecalli 10 // 'seal_return'\n 43393: fallthrough\n      : @674 [@dyn 291] (gas: 7)\n 43394: a3 = u64 [a1 + 0x18]\n 43397: a4 = u64 [a1 + 0x10]\n 43400: a2 = u64 [a1 + 0x8]\n 43403: a3 = a3 | a4\n 43406: a4 = a2 <u 0x1\n 43409: a4 = 0 if a3 != 0\n 43411: jump @676 if a4 == 0\n      : @675 (gas: 16)\n 43414: a1 = u64 [a1]\n 43416: a3 = a1 + 0x1f\n 43419: a1 = a3 <u a1\n 43422: a1 = a1 + a2\n 43425: a1 = a1 & 0x1\n 43428: a3 = a3 & 0xffffffffffffffe0\n 43431: a2 = a3 + 0x20\n 43434: a3 = a2 <u a3\n 43437: a4 = a1 + a3\n 43440: a1 = a4 <u a1\n 43443: a1 = a3 if a3 == 0\n 43446: u64 [a0 + 24] = 0\n 43449: u64 [a0] = a2\n 43451: u64 [a0 + 0x8] = a4\n 43454: u64 [a0 + 0x10] = a1\n 43457: ret\n      : @676 (gas: 13)\n 43459: sp = sp + 0xffffffffffffffb0\n 43462: u64 [sp + 0x48] = ra\n 43465: u64 [sp + 0x40] = s0\n 43468: s0 = sp + 0x50\n 43471: sp = sp & 0xfffffffffffffff0\n 43474: u64 [sp + 48] = 0\n 43477: u64 [sp + 40] = 0\n 43480: u64 [sp + 32] = 0\n 43483: a0 = 0x4e487b7100000000\n 43493: a1 = sp + 0x20\n 43496: u64 [sp + 0x38] = a0\n 43499: a0 = 0\n 43501: ra = 584, jump @23\n      : @677 [@dyn 292] (gas: 7)\n 43508: u64 [sp + 24] = 0\n 43511: u64 [sp + 16] = 0\n 43514: u64 [sp + 0] = 0x41\n 43517: a0 = 0x4\n 43520: a1 = sp\n 43522: u64 [sp + 8] = 0\n 43525: ra = 586, jump @23\n      : @678 [@dyn 293] (gas: 3)\n 43532: a1 = 0x24\n 43535: a0 = 0\n 43537: ra = 588, jump @0\n      : @679 [@dyn 294] (gas: 6)\n 43544: i32 a1 = a0 + 0\n 43546: a0 = 0x1\n 43549: a2 = 0x24\n 43552: ra = 0x24e\n 43556: ecalli 10 // 'seal_return'\n 43558: fallthrough\n      : @680 [@dyn 295] (gas: 16)\n 43559: sp = sp + 0xffffffffffffffa8\n 43562: u64 [sp + 0x50] = ra\n 43565: u64 [sp + 0x48] = s0\n 43568: u64 [sp + 0x40] = s1\n 43571: a3 = u64 [a0 + 0x10]\n 43574: a4 = u64 [a0 + 0x18]\n 43577: a5 = u64 [a0 + 0x8]\n 43580: a0 = u64 [a0]\n 43582: a4 = a4 | a5\n 43585: a5 = a0 | a3\n 43588: a5 = a5 | a4\n 43591: a5 = a5 >> 0x20\n 43594: a3 = a3 | a4\n 43597: a3 = a3 << 0x20\n 43600: a3 = a3 | a5\n 43603: jump @688 if a3 != 0\n      : @681 (gas: 12)\n 43607: a4 = u64 [a2 + 0x18]\n 43610: a5 = u64 [a2 + 0x10]\n 43613: s0 = u64 [a2]\n 43615: s1 = u64 [a2 + 0x8]\n 43618: a2 = s0 | a5\n 43621: a3 = s1 | a4\n 43624: a2 = a2 | a3\n 43627: a2 = a2 >> 0x20\n 43630: a3 = a3 | a5\n 43633: a3 = a3 << 0x20\n 43636: a2 = a2 | a3\n 43639: jump @688 if a2 != 0\n      : @682 (gas: 18)\n 43643: u64 [sp + 0x28] = s1\n 43646: u64 [sp + 0x30] = a5\n 43649: u64 [sp + 0x38] = a4\n 43652: a2 = u64 [a1 + 0x18]\n 43655: a3 = u64 [a1 + 0x10]\n 43658: a5 = u64 [a1]\n 43660: a4 = u64 [a1 + 0x8]\n 43663: a1 = a5 | a3\n 43666: u64 [sp + 0x20] = a2\n 43669: u64 [sp + 0x10] = a4\n 43672: a2 = a2 | a4\n 43675: a1 = a1 | a2\n 43678: a1 = a1 >> 0x20\n 43681: u64 [sp + 0x18] = a3\n 43684: a2 = a2 | a3\n 43687: a2 = a2 << 0x20\n 43690: a1 = a1 | a2\n 43693: jump @688 if a1 != 0\n      : @683 (gas: 7)\n 43697: i32 a0 = a0 + 0\n 43699: u64 [sp + 0x8] = a0\n 43702: i32 a0 = a5 + 0\n 43704: i32 s1 = s0 + 0\n 43706: a1 = s1\n 43708: u64 [sp] = a5\n 43710: ra = 592, jump @0\n      : @684 [@dyn 296] (gas: 5)\n 43717: i32 a0 = a0 + 0\n 43719: a1 = s1\n 43721: a2 = u64 [sp + 0x8]\n 43724: ecalli 2 // 'call_data_copy'\n 43726: fallthrough\n      : @685 (gas: 29)\n 43727: a0 = u64 [sp]\n 43729: a0 = a0 + s0\n 43732: a1 = a0 <u s0\n 43735: a4 = u64 [sp + 0x28]\n 43738: a2 = u64 [sp + 0x10]\n 43741: a2 = a2 + a4\n 43744: a2 = a2 + a1\n 43747: a3 = a2 ^ a4\n 43750: a4 = a2 <u a4\n 43753: a4 = a1 if a3 == 0\n 43756: a5 = u64 [sp + 0x30]\n 43759: a1 = u64 [sp + 0x18]\n 43762: a1 = a1 + a5\n 43765: a4 = a4 + a1\n 43768: a3 = a4 <u a1\n 43771: a1 = a1 <u a5\n 43774: a5 = u64 [sp + 0x38]\n 43777: s1 = u64 [sp + 0x20]\n 43780: a5 = a5 + s1\n 43783: a1 = a1 + a5\n 43786: a1 = a1 + a3\n 43789: a3 = a0 | a4\n 43792: a1 = a1 | a2\n 43795: a3 = a3 | a1\n 43798: a3 = a3 >> 0x20\n 43801: a1 = a1 | a4\n 43804: a1 = a1 << 0x20\n 43807: a1 = a1 | a3\n 43810: jump @688 if a1 != 0\n      : @686 (gas: 3)\n 43813: i32 a0 = a0 + 0\n 43815: a1 = 0x20\n 43818: ra = 594, jump @0\n      : @687 [@dyn 297] (gas: 37)\n 43825: u8 [a0 + 31] = 0\n 43828: u8 [a0 + 30] = 0\n 43831: u8 [a0 + 29] = 0\n 43834: u8 [a0 + 28] = 0\n 43837: u8 [a0 + 27] = 0\n 43840: u8 [a0 + 26] = 0\n 43843: u8 [a0 + 25] = 0\n 43846: u8 [a0 + 24] = 0\n 43849: u8 [a0 + 23] = 0\n 43852: u8 [a0 + 22] = 0\n 43855: u8 [a0 + 21] = 0\n 43858: u8 [a0 + 20] = 0\n 43861: u8 [a0 + 19] = 0\n 43864: u8 [a0 + 18] = 0\n 43867: u8 [a0 + 17] = 0\n 43870: u8 [a0 + 16] = 0\n 43873: u8 [a0 + 15] = 0\n 43876: u8 [a0 + 14] = 0\n 43879: u8 [a0 + 13] = 0\n 43882: u8 [a0 + 12] = 0\n 43885: u8 [a0 + 11] = 0\n 43888: u8 [a0 + 10] = 0\n 43891: u8 [a0 + 9] = 0\n 43894: u8 [a0 + 8] = 0\n 43897: u8 [a0 + 7] = 0\n 43900: u8 [a0 + 6] = 0\n 43903: u8 [a0 + 5] = 0\n 43906: u8 [a0 + 4] = 0\n 43909: u8 [a0 + 3] = 0\n 43912: u8 [a0 + 2] = 0\n 43915: u8 [a0 + 1] = 0\n 43918: u8 [a0 + 0] = 0\n 43920: ra = u64 [sp + 0x50]\n 43923: s0 = u64 [sp + 0x48]\n 43926: s1 = u64 [sp + 0x40]\n 43929: sp = sp + 0x58\n 43932: ret\n      : @688 (gas: 1)\n 43934: trap\n      : @689 (gas: 16)\n 43935: sp = sp + 0xfffffffffffffee0\n 43939: u64 [sp + 0x118] = ra\n 43943: u64 [sp + 0x110] = s0\n 43947: u64 [sp + 0x108] = s1\n 43951: s0 = sp + 0x120\n 43955: sp = sp & 0xfffffffffffffff0\n 43958: a4 = u64 [a2 + 0x18]\n 43961: a5 = u64 [a2 + 0x10]\n 43964: s1 = u64 [a2 + 0x8]\n 43967: u64 [sp + 0x50] = a4\n 43970: u64 [sp + 0x48] = a5\n 43973: a4 = a4 | a5\n 43976: a5 = s1 <u 0x1\n 43979: a5 = 0 if a4 != 0\n 43981: u64 [sp] = a0\n 43983: jump @703 if a5 == 0\n      : @690 (gas: 35)\n 43987: a0 = u64 [a3 + 0x18]\n 43990: u64 [sp + 0x18] = a0\n 43993: a0 = u64 [a3 + 0x10]\n 43996: u64 [sp + 0x20] = a0\n 43999: a0 = u64 [a3 + 0x8]\n 44002: u64 [sp + 0x8] = a0\n 44005: a0 = u64 [a3]\n 44007: u64 [sp + 0x10] = a0\n 44010: a2 = u64 [a2]\n 44012: a0 = u64 [a1 + 0x18]\n 44015: u64 [sp + 0x70] = a0\n 44018: a0 = u64 [a1 + 0x10]\n 44021: u64 [sp + 0x78] = a0\n 44024: a0 = u64 [a1 + 0x8]\n 44027: u64 [sp + 0x68] = a0\n 44030: a0 = u64 [a1]\n 44032: u64 [sp + 0x60] = a0\n 44035: a0 = a2 + 0x1f\n 44038: u64 [sp + 0x40] = a2\n 44041: a1 = a0 <u a2\n 44044: a1 = a1 + s1\n 44047: a1 = a1 & 0x1\n 44050: a0 = a0 & 0xffffffffffffffe0\n 44053: a2 = a0 + 0x20\n 44056: a0 = a2 <u a0\n 44059: a3 = a1 + a0\n 44062: a4 = a3 <u a1\n 44065: a4 = a0 if a0 == 0\n 44068: u64 [sp + 216] = 0\n 44072: u64 [sp + 0xc0] = a2\n 44076: u64 [sp + 0xc8] = a3\n 44080: a0 = sp + 0xe0\n 44084: a1 = sp + 0xc0\n 44088: u64 [sp + 0xd0] = a4\n 44092: ra = 596, jump @114\n      : @691 [@dyn 298] (gas: 15)\n 44099: a0 = u64 [sp + 0xf8]\n 44103: a2 = u64 [sp + 0xf0]\n 44107: a1 = u64 [sp + 0xe8]\n 44111: a3 = u64 [sp + 0xe0]\n 44115: u64 [sp + 0x58] = a0\n 44118: u64 [sp + 0x30] = a1\n 44121: a0 = a0 | a1\n 44124: a1 = a3 | a2\n 44127: a1 = a1 | a0\n 44130: a1 = a1 >> 0x20\n 44133: u64 [sp + 0x38] = a2\n 44136: a0 = a0 | a2\n 44139: a0 = a0 << 0x20\n 44142: a0 = a0 | a1\n 44145: jump @702 if a0 != 0\n      : @692 (gas: 4)\n 44149: u64 [sp + 0x28] = a3\n 44152: i32 a0 = a3 + 0\n 44154: a1 = 0x20\n 44157: ra = 598, jump @0\n      : @693 [@dyn 299] (gas: 102)\n 44164: t2 = u64 [sp + 0x40]\n 44167: a1 = u64 [sp + 0x60]\n 44170: a1 = a1 + t2\n 44173: a3 = a1 <u t2\n 44176: a2 = u64 [sp + 0x68]\n 44179: a2 = a2 + s1\n 44182: a4 = a2 + a3\n 44185: a5 = a4 ^ s1\n 44188: a2 = a4 <u s1\n 44191: a2 = a3 if a5 == 0\n 44194: a5 = u64 [sp + 0x8]\n 44197: a3 = a4 ^ a5\n 44200: a4 = a5 <u a4\n 44203: a5 = u64 [sp + 0x10]\n 44206: a1 = a5 <u a1\n 44209: ra = u64 [sp + 0x48]\n 44212: a5 = u64 [sp + 0x78]\n 44215: a5 = a5 + ra\n 44218: a1 = a4 if a3 != 0\n 44221: a3 = a5 <u ra\n 44224: t1 = u64 [sp + 0x50]\n 44227: a4 = u64 [sp + 0x70]\n 44230: a4 = a4 + t1\n 44233: a3 = a3 + a4\n 44236: a2 = a2 + a5\n 44239: a4 = a2 <u a5\n 44242: a3 = a3 + a4\n 44245: a5 = u64 [sp + 0x18]\n 44248: a4 = a3 ^ a5\n 44251: a3 = a5 <u a3\n 44254: t0 = u64 [sp + 0x20]\n 44257: a5 = t0 <u a2\n 44260: a3 = a5 if a4 == 0\n 44263: a2 = a2 ^ t0\n 44266: a2 = a2 | a4\n 44269: a1 = a3 if a2 != 0\n 44272: a2 = reverse t2\n 44274: a3 = a2 >> 0x38\n 44277: u8 [a0 + 0x1f] = a3\n 44280: a3 = a2 >> 0x30\n 44283: u8 [a0 + 0x1e] = a3\n 44286: a3 = a2 >> 0x28\n 44289: u8 [a0 + 0x1d] = a3\n 44292: a3 = a2 >> 0x20\n 44295: u8 [a0 + 0x1c] = a3\n 44298: a3 = a2 >> 0x18\n 44301: u8 [a0 + 0x1b] = a3\n 44304: a3 = a2 >> 0x10\n 44307: u8 [a0 + 0x1a] = a3\n 44310: a3 = a2 >> 0x8\n 44313: u8 [a0 + 0x19] = a3\n 44316: a3 = reverse s1\n 44318: u8 [a0 + 0x18] = a2\n 44321: a2 = a3 >> 0x38\n 44324: u8 [a0 + 0x17] = a2\n 44327: a2 = a3 >> 0x30\n 44330: u8 [a0 + 0x16] = a2\n 44333: a2 = a3 >> 0x28\n 44336: u8 [a0 + 0x15] = a2\n 44339: a2 = a3 >> 0x20\n 44342: u8 [a0 + 0x14] = a2\n 44345: a2 = a3 >> 0x18\n 44348: u8 [a0 + 0x13] = a2\n 44351: a2 = a3 >> 0x10\n 44354: u8 [a0 + 0x12] = a2\n 44357: a2 = reverse ra\n 44359: u8 [a0 + 0x10] = a3\n 44362: a3 = a3 >> 0x8\n 44365: u8 [a0 + 0x11] = a3\n 44368: a3 = a2 >> 0x38\n 44371: u8 [a0 + 0xf] = a3\n 44374: a3 = a2 >> 0x30\n 44377: u8 [a0 + 0xe] = a3\n 44380: a3 = a2 >> 0x28\n 44383: u8 [a0 + 0xd] = a3\n 44386: a3 = a2 >> 0x20\n 44389: u8 [a0 + 0xc] = a3\n 44392: a3 = a2 >> 0x18\n 44395: u8 [a0 + 0xb] = a3\n 44398: a3 = a2 >> 0x10\n 44401: u8 [a0 + 0xa] = a3\n 44404: a3 = reverse t1\n 44406: u8 [a0 + 0x8] = a2\n 44409: a2 = a2 >> 0x8\n 44412: u8 [a0 + 0x9] = a2\n 44415: a2 = a3 >> 0x38\n 44418: u8 [a0 + 0x7] = a2\n 44421: a2 = a3 >> 0x30\n 44424: u8 [a0 + 0x6] = a2\n 44427: a2 = a3 >> 0x28\n 44430: u8 [a0 + 0x5] = a2\n 44433: a2 = a3 >> 0x20\n 44436: u8 [a0 + 0x4] = a2\n 44439: a2 = a3 >> 0x18\n 44442: u8 [a0 + 0x3] = a2\n 44445: a2 = a3 >> 0x10\n 44448: u8 [a0 + 0x2] = a2\n 44451: u8 [a0] = a3\n 44453: a3 = a3 >> 0x8\n 44456: u8 [a0 + 0x1] = a3\n 44459: t0 = u64 [sp + 0x60]\n 44462: jump @707 if a1 != 0\n      : @694 (gas: 12)\n 44466: a2 = u64 [sp + 0x78]\n 44469: a0 = t0 | a2\n 44472: a1 = u64 [sp + 0x70]\n 44475: a3 = u64 [sp + 0x68]\n 44478: a1 = a1 | a3\n 44481: a0 = a0 | a1\n 44484: a0 = a0 >> 0x20\n 44487: a1 = a1 | a2\n 44490: a1 = a1 << 0x20\n 44493: a0 = a0 | a1\n 44496: a3 = u64 [sp + 0x58]\n 44499: jump @702 if a0 != 0\n      : @695 (gas: 11)\n 44503: a0 = t2 | ra\n 44506: a1 = s1 | t1\n 44509: a0 = a0 | a1\n 44512: a0 = a0 >> 0x20\n 44515: a1 = a1 | ra\n 44518: a1 = a1 << 0x20\n 44521: a0 = a0 | a1\n 44524: a2 = u64 [sp + 0x38]\n 44527: a4 = u64 [sp + 0x30]\n 44530: a5 = u64 [sp + 0x28]\n 44533: jump @702 if a0 != 0\n      : @696 (gas: 7)\n 44537: u64 [sp + 0x78] = s1\n 44540: a0 = a2 | a3\n 44543: a1 = 0xffffffe0\n 44553: a1 = a5 <u a1\n 44556: a1 = 0 if a4 != 0\n 44558: a1 = 0 if a0 != 0\n 44560: jump @702 if a1 == 0\n      : @697 (gas: 16)\n 44564: s1 = a5 + 0x20\n 44567: a0 = s1 <u a5\n 44570: a1 = a4 + a0\n 44573: u64 [sp + 0x20] = a1\n 44576: a1 = a1 <u a4\n 44579: a1 = a0 if a0 == 0\n 44582: a1 = a1 + a2\n 44585: u64 [sp + 0x68] = a1\n 44588: a0 = a1 <u a2\n 44591: u64 [sp + 0x70] = a0\n 44594: i32 t0 = t0 + 0\n 44596: u64 [sp + 0x60] = t0\n 44599: i32 a0 = s1 + 0\n 44601: i32 a1 = t2 + 0\n 44603: u64 [sp + 0x18] = a1\n 44606: ra = 600, jump @0\n      : @698 [@dyn 300] (gas: 5)\n 44613: i32 a0 = a0 + 0\n 44615: a1 = u64 [sp + 0x18]\n 44618: a2 = u64 [sp + 0x60]\n 44621: ecalli 2 // 'call_data_copy'\n 44623: fallthrough\n      : @699 (gas: 31)\n 44624: a0 = u64 [sp + 0x40]\n 44627: a0 = a0 + s1\n 44630: a1 = a0 <u s1\n 44633: a2 = u64 [sp + 0x78]\n 44636: a4 = u64 [sp + 0x20]\n 44639: a2 = a2 + a4\n 44642: a2 = a2 + a1\n 44645: a3 = a2 ^ a4\n 44648: a4 = a2 <u a4\n 44651: a4 = a1 if a3 == 0\n 44654: a1 = u64 [sp + 0x48]\n 44657: a3 = u64 [sp + 0x68]\n 44660: a1 = a1 + a3\n 44663: a4 = a4 + a1\n 44666: t0 = a4 <u a1\n 44669: a1 = a1 <u a3\n 44672: a5 = u64 [sp + 0x50]\n 44675: s1 = u64 [sp + 0x58]\n 44678: a5 = a5 + s1\n 44681: a3 = u64 [sp + 0x70]\n 44684: a5 = a5 + a3\n 44687: a1 = a1 + a5\n 44690: a1 = a1 + t0\n 44693: a3 = a0 | a4\n 44696: a1 = a1 | a2\n 44699: a3 = a3 | a1\n 44702: a3 = a3 >> 0x20\n 44705: a1 = a1 | a4\n 44708: a1 = a1 << 0x20\n 44711: a1 = a1 | a3\n 44714: jump @702 if a1 != 0\n      : @700 (gas: 3)\n 44718: i32 a0 = a0 + 0\n 44720: a1 = 0x20\n 44723: ra = 602, jump @0\n      : @701 [@dyn 301] (gas: 46)\n 44730: u8 [a0 + 31] = 0\n 44733: u8 [a0 + 30] = 0\n 44736: u8 [a0 + 29] = 0\n 44739: u8 [a0 + 28] = 0\n 44742: u8 [a0 + 27] = 0\n 44745: u8 [a0 + 26] = 0\n 44748: u8 [a0 + 25] = 0\n 44751: u8 [a0 + 24] = 0\n 44754: u8 [a0 + 23] = 0\n 44757: u8 [a0 + 22] = 0\n 44760: u8 [a0 + 21] = 0\n 44763: u8 [a0 + 20] = 0\n 44766: u8 [a0 + 19] = 0\n 44769: u8 [a0 + 18] = 0\n 44772: u8 [a0 + 17] = 0\n 44775: u8 [a0 + 16] = 0\n 44778: u8 [a0 + 15] = 0\n 44781: u8 [a0 + 14] = 0\n 44784: u8 [a0 + 13] = 0\n 44787: u8 [a0 + 12] = 0\n 44790: u8 [a0 + 11] = 0\n 44793: u8 [a0 + 10] = 0\n 44796: u8 [a0 + 9] = 0\n 44799: u8 [a0 + 8] = 0\n 44802: u8 [a0 + 7] = 0\n 44805: u8 [a0 + 6] = 0\n 44808: u8 [a0 + 5] = 0\n 44811: u8 [a0 + 4] = 0\n 44814: u8 [a0 + 3] = 0\n 44817: u8 [a0 + 2] = 0\n 44820: u8 [a0 + 1] = 0\n 44823: u8 [a0 + 0] = 0\n 44825: a0 = u64 [sp]\n 44827: a1 = u64 [sp + 0x28]\n 44830: u64 [a0] = a1\n 44832: u64 [a0 + 0x18] = s1\n 44835: a1 = u64 [sp + 0x30]\n 44838: u64 [a0 + 0x8] = a1\n 44841: a1 = u64 [sp + 0x38]\n 44844: u64 [a0 + 0x10] = a1\n 44847: sp = s0 + 0xfffffffffffffee0\n 44851: ra = u64 [sp + 0x118]\n 44855: s0 = u64 [sp + 0x110]\n 44859: s1 = u64 [sp + 0x108]\n 44863: sp = sp + 0x120\n 44867: ret\n      : @702 (gas: 1)\n 44869: trap\n      : @703 (gas: 8)\n 44870: u64 [sp + 176] = 0\n 44874: u64 [sp + 168] = 0\n 44878: u64 [sp + 160] = 0\n 44882: a0 = 0x4e487b7100000000\n 44892: a1 = sp + 0xa0\n 44896: u64 [sp + 0xb8] = a0\n 44900: a0 = 0\n 44902: ra = 604, jump @23\n      : @704 [@dyn 302] (gas: 7)\n 44909: u64 [sp + 152] = 0\n 44913: u64 [sp + 144] = 0\n 44917: u64 [sp + 128] = 0x41\n 44922: a0 = 0x4\n 44925: a1 = sp + 0x80\n 44929: u64 [sp + 136] = 0\n 44933: ra = 606, jump @23\n      : @705 [@dyn 303] (gas: 3)\n 44940: a1 = 0x24\n 44943: a0 = 0\n 44945: ra = 608, jump @0\n      : @706 [@dyn 304] (gas: 5)\n 44952: i32 a1 = a0 + 0\n 44954: a0 = 0x1\n 44957: a2 = 0x24\n 44960: ecalli 10 // 'seal_return'\n 44962: fallthrough\n      : @707 (gas: 3)\n 44963: a0 = 0\n 44965: a1 = 0\n 44967: ra = 610, jump @0\n      : @708 [@dyn 305] (gas: 6)\n 44974: i32 a1 = a0 + 0\n 44976: a0 = 0x1\n 44979: a2 = 0\n 44981: ra = 0x264\n 44985: ecalli 10 // 'seal_return'\n 44987: fallthrough\n      : @709 [@dyn 306] (gas: 38)\n 44988: sp = sp + 0xffffffffffffff00\n 44992: u64 [sp + 0xf8] = ra\n 44996: u64 [sp + 0xf0] = s0\n 45000: u64 [sp + 0xe8] = s1\n 45004: s0 = sp + 0x100\n 45008: sp = sp & 0xffffffffffffffe0\n 45011: ra = u64 [a1]\n 45013: a4 = u64 [a2 + 0x8]\n 45016: t2 = u64 [a1 + 0x8]\n 45019: s1 = u64 [a2]\n 45021: a3 = ra + 0x1f\n 45024: t1 = a3 <u ra\n 45027: a5 = t2 + t1\n 45030: u64 [sp + 0x20] = s1\n 45033: a3 = a3 <u s1\n 45036: s1 = a5 ^ a4\n 45039: u64 [sp + 0x28] = a4\n 45042: a4 = a5 <u a4\n 45045: a4 = a3 if s1 == 0\n 45048: t0 = u64 [a1 + 0x10]\n 45051: u64 [sp + 0x38] = t2\n 45054: a3 = a5 <u t2\n 45057: a3 = t1 if t1 == 0\n 45060: t1 = u64 [a2 + 0x18]\n 45063: a5 = u64 [a1 + 0x18]\n 45066: s1 = u64 [a2 + 0x10]\n 45069: a3 = a3 + t0\n 45072: a1 = a3 <u t0\n 45075: u64 [sp + 0x30] = a5\n 45078: a1 = a1 + a5\n 45081: a2 = a1 ^ t1\n 45084: a1 = a1 <s t1\n 45087: a5 = a3 <u s1\n 45090: a1 = a5 if a2 == 0\n 45093: a3 = a3 ^ s1\n 45096: a2 = a2 | a3\n 45099: a4 = a1 if a2 != 0\n 45102: jump @714 if a4 == 0\n      : @710 (gas: 14)\n 45106: t2 = t0\n 45108: u64 [sp + 0x8] = s1\n 45111: u64 [sp + 0x10] = t1\n 45114: u64 [sp + 0x18] = a0\n 45117: a0 = ra | t2\n 45120: a1 = u64 [sp + 0x38]\n 45123: a2 = u64 [sp + 0x30]\n 45126: a1 = a1 | a2\n 45129: a0 = a0 | a1\n 45132: a0 = a0 >> 0x20\n 45135: a1 = a1 | t2\n 45138: a1 = a1 << 0x20\n 45141: a0 = a0 | a1\n 45144: jump @713 if a0 != 0\n      : @711 (gas: 41)\n 45148: s1 = t2\n 45150: i32 a1 = ra + 0\n 45152: i32 a0 = sp + 0xc0\n 45156: u64 [sp] = ra\n 45158: ecalli 3 // 'call_data_load'\n 45160: t0 = u64 [sp + 0xc0]\n 45164: t1 = u64 [sp + 0xc8]\n 45168: a2 = u64 [sp + 0xd0]\n 45172: a3 = u64 [sp + 0xd8]\n 45176: a0 = u64 [sp]\n 45178: a4 = a0 + 0x20\n 45181: a5 = a4 <u a0\n 45184: a1 = u64 [sp + 0x38]\n 45187: a0 = a1 + a5\n 45190: a1 = a0 <u a1\n 45193: a1 = a5 if a5 == 0\n 45196: a1 = a1 + s1\n 45199: a5 = a1 <u s1\n 45202: s1 = u64 [sp + 0x30]\n 45205: a5 = a5 + s1\n 45208: s1 = u64 [sp + 0x10]\n 45211: u64 [sp + 0x58] = s1\n 45214: s1 = u64 [sp + 0x8]\n 45217: u64 [sp + 0x50] = s1\n 45220: s1 = u64 [sp + 0x28]\n 45223: u64 [sp + 0x48] = s1\n 45226: s1 = u64 [sp + 0x20]\n 45229: u64 [sp + 0x40] = s1\n 45232: u64 [sp + 0x78] = a3\n 45235: u64 [sp + 0x70] = a2\n 45238: u64 [sp + 0x68] = t1\n 45241: u64 [sp + 0x60] = t0\n 45244: u64 [sp + 0x88] = a0\n 45248: u64 [sp + 0x80] = a4\n 45252: u64 [sp + 0x90] = a1\n 45256: a0 = sp + 0xa0\n 45260: a1 = sp + 0x80\n 45264: a2 = sp + 0x60\n 45267: a3 = sp + 0x40\n 45270: u64 [sp + 0x98] = a5\n 45274: ra = 614, jump @689\n      : @712 [@dyn 307] (gas: 15)\n 45280: a0 = u64 [sp + 0xb0]\n 45284: a1 = u64 [sp + 0xb8]\n 45288: a2 = u64 [sp + 0xa0]\n 45292: a3 = u64 [sp + 0xa8]\n 45296: a4 = u64 [sp + 0x18]\n 45299: u64 [a4 + 0x10] = a0\n 45302: u64 [a4 + 0x18] = a1\n 45305: u64 [a4] = a2\n 45307: u64 [a4 + 0x8] = a3\n 45310: sp = s0 + 0xffffffffffffff00\n 45314: ra = u64 [sp + 0xf8]\n 45318: s0 = u64 [sp + 0xf0]\n 45322: s1 = u64 [sp + 0xe8]\n 45326: sp = sp + 0x100\n 45330: ret\n      : @713 (gas: 1)\n 45332: trap\n      : @714 (gas: 3)\n 45333: a0 = 0\n 45335: a1 = 0\n 45337: ra = 616, jump @0\n      : @715 [@dyn 308] (gas: 6)\n 45344: i32 a1 = a0 + 0\n 45346: a0 = 0x1\n 45349: a2 = 0\n 45351: ra = 0x26a\n 45355: ecalli 10 // 'seal_return'\n 45357: fallthrough\n      : @716 [@dyn 309] (gas: 42)\n 45358: sp = sp + 0xfffffffffffffe80\n 45362: u64 [sp + 0x178] = ra\n 45366: u64 [sp + 0x170] = s0\n 45370: u64 [sp + 0x168] = s1\n 45374: s0 = sp + 0x180\n 45378: sp = sp & 0xffffffffffffffe0\n 45381: s1 = u64 [a2 + 0x8]\n 45384: t2 = u64 [a1 + 0x8]\n 45387: a5 = u64 [a2]\n 45389: ra = u64 [a1]\n 45391: t1 = u64 [a2 + 0x10]\n 45394: a4 = s1 ^ t2\n 45397: a3 = s1 <u t2\n 45400: t0 = a5 <u ra\n 45403: a3 = t0 if a4 == 0\n 45406: u64 [sp + 0x78] = s1\n 45409: a4 = s1 - t2\n 45412: a4 = a4 - t0\n 45415: u64 [sp + 0x70] = a5\n 45418: a5 = a5 - ra\n 45421: a5 = a5 <u 0x60\n 45424: a5 = a5 ^ 0x1\n 45427: t0 = u64 [a1 + 0x10]\n 45430: s1 = a4 >u 0\n 45432: a5 = s1 if a4 != 0\n 45435: a4 = u64 [a2 + 0x18]\n 45438: s1 = u64 [a1 + 0x18]\n 45441: a1 = t1 - t0\n 45444: a2 = a1 - a3\n 45447: a1 = a1 <u a3\n 45450: u64 [sp + 0x68] = t1\n 45453: a3 = t1 <u t0\n 45456: u64 [sp + 0x60] = a4\n 45459: a4 = a4 - s1\n 45462: a4 = a4 - a3\n 45465: a4 = a4 - a1\n 45468: a1 = a4 >s 0\n 45470: a3 = a2 >u 0\n 45472: a3 = a1 if a4 != 0\n 45475: a2 = a2 | a4\n 45478: a5 = a3 if a2 != 0\n 45481: jump @730 if a5 == 0\n      : @717 (gas: 10)\n 45485: a2 = ra | t0\n 45488: u64 [sp + 0x90] = t2\n 45492: u64 [sp + 0x88] = s1\n 45496: a1 = t2 | s1\n 45499: a2 = a2 | a1\n 45502: a2 = a2 >> 0x20\n 45505: a1 = a1 | t0\n 45508: a1 = a1 << 0x20\n 45511: a1 = a1 | a2\n 45514: jump @729 if a1 != 0\n      : @718 (gas: 8)\n 45518: s1 = t0\n 45520: u64 [sp + 0x48] = a0\n 45523: i32 a1 = ra + 0\n 45525: i32 a0 = sp + 0x140\n 45529: u64 [sp + 0x80] = a1\n 45533: u64 [sp + 0x98] = ra\n 45537: ecalli 3 // 'call_data_load'\n 45539: fallthrough\n      : @719 (gas: 10)\n 45540: a3 = u64 [sp + 0x150]\n 45544: a4 = u64 [sp + 0x158]\n 45548: a0 = 0x100000000\n 45558: a1 = a3 ^ a0\n 45561: a1 = a1 | a4\n 45564: a2 = a3 >> 0x20\n 45567: a2 = a2 <u 0x1\n 45570: a2 = 0 if a4 != 0\n 45572: a2 = 0 if a1 == 0\n 45574: jump @730 if a2 == 0\n      : @720 (gas: 13)\n 45578: u64 [sp + 0x38] = a4\n 45581: u64 [sp + 0x40] = a3\n 45584: u64 [sp + 0x50] = s1\n 45587: a1 = u64 [sp + 0x88]\n 45591: a2 = s1 | a1\n 45594: a0 = 0xffffffe0\n 45604: a1 = u64 [sp + 0x98]\n 45608: a0 = a1 <u a0\n 45611: s1 = u64 [sp + 0x90]\n 45615: a0 = 0 if s1 != 0\n 45617: u64 [sp + 0x58] = a2\n 45620: a0 = 0 if a2 != 0\n 45622: jump @729 if a0 == 0\n      : @721 (gas: 9)\n 45626: a0 = u64 [sp + 0x148]\n 45630: u64 [sp + 0x28] = a0\n 45633: a0 = u64 [sp + 0x140]\n 45637: u64 [sp + 0x30] = a0\n 45640: a0 = u64 [sp + 0x80]\n 45644: i32 a1 = a0 + 0x20\n 45647: i32 a0 = sp + 0x140\n 45651: ecalli 3 // 'call_data_load'\n 45653: fallthrough\n      : @722 (gas: 7)\n 45654: a0 = 0xffffffc0\n 45664: a1 = u64 [sp + 0x98]\n 45668: a0 = a1 <u a0\n 45671: a0 = 0 if s1 != 0\n 45673: a1 = u64 [sp + 0x58]\n 45676: a0 = 0 if a1 != 0\n 45678: jump @729 if a0 == 0\n      : @723 (gas: 13)\n 45682: a0 = u64 [sp + 0x158]\n 45686: u64 [sp + 0x10] = a0\n 45689: a0 = u64 [sp + 0x150]\n 45693: u64 [sp + 0x18] = a0\n 45696: a0 = u64 [sp + 0x148]\n 45700: u64 [sp + 0x20] = a0\n 45703: a0 = u64 [sp + 0x140]\n 45707: u64 [sp + 0x58] = a0\n 45710: a0 = u64 [sp + 0x80]\n 45714: i32 a1 = a0 + 0x40\n 45717: i32 a0 = sp + 0x120\n 45721: ecalli 3 // 'call_data_load'\n 45723: fallthrough\n      : @724 (gas: 7)\n 45724: a0 = u64 [sp + 0x138]\n 45728: a1 = u64 [sp + 0x130]\n 45732: a2 = u64 [sp + 0x128]\n 45736: a3 = a1 | a0\n 45739: a4 = a2 <u 0x1\n 45742: a4 = 0 if a3 != 0\n 45744: jump @730 if a4 == 0\n      : @725 (gas: 43)\n 45748: a3 = u64 [sp + 0x120]\n 45752: a4 = u64 [sp + 0x98]\n 45756: t0 = a3 + a4\n 45759: a3 = t0 <u a3\n 45762: a4 = u64 [sp + 0x90]\n 45766: a4 = a4 + a2\n 45769: t1 = a4 + a3\n 45772: a4 = t1 ^ a2\n 45775: s1 = t1 <u a2\n 45778: s1 = a3 if a4 == 0\n 45781: a2 = u64 [sp + 0x50]\n 45784: a2 = a2 + a1\n 45787: s1 = s1 + a2\n 45790: a3 = s1 <u a2\n 45793: a1 = a2 <u a1\n 45796: a2 = u64 [sp + 0x88]\n 45800: a0 = a0 + a2\n 45803: a0 = a0 + a1\n 45806: ra = a0 + a3\n 45809: a0 = t0 + 0x1f\n 45812: a1 = a0 <u t0\n 45815: a2 = t1 + a1\n 45818: a3 = a2 <u t1\n 45821: a3 = a1 if a1 == 0\n 45824: t2 = s1 + a3\n 45827: a1 = t2 <u s1\n 45830: a1 = a1 + ra\n 45833: a5 = u64 [sp + 0x78]\n 45836: a4 = a2 ^ a5\n 45839: a2 = a2 <u a5\n 45842: a5 = u64 [sp + 0x70]\n 45845: a0 = a0 <u a5\n 45848: a0 = a2 if a4 != 0\n 45851: a5 = u64 [sp + 0x68]\n 45854: a2 = t2 <u a5\n 45857: a4 = u64 [sp + 0x60]\n 45860: a3 = a1 ^ a4\n 45863: a1 = a1 <s a4\n 45866: a1 = a2 if a3 == 0\n 45869: a2 = t2 ^ a5\n 45872: a2 = a2 | a3\n 45875: a0 = a1 if a2 != 0\n 45878: jump @731 if a0 == 0\n      : @726 (gas: 11)\n 45882: a0 = t0 | s1\n 45885: u64 [sp + 0x98] = t1\n 45889: u64 [sp + 0x88] = ra\n 45893: a1 = t1 | ra\n 45896: a0 = a0 | a1\n 45899: a0 = a0 >> 0x20\n 45902: u64 [sp + 0x90] = s1\n 45906: a1 = a1 | s1\n 45909: a1 = a1 << 0x20\n 45912: a0 = a0 | a1\n 45915: jump @729 if a0 != 0\n      : @727 (gas: 40)\n 45919: i32 a1 = t0 + 0\n 45921: i32 a0 = sp + 0x140\n 45925: s1 = t0\n 45927: ecalli 3 // 'call_data_load'\n 45929: t0 = u64 [sp + 0x140]\n 45933: t1 = u64 [sp + 0x148]\n 45937: a2 = u64 [sp + 0x150]\n 45941: a3 = u64 [sp + 0x158]\n 45945: a4 = s1 + 0x20\n 45948: a5 = a4 <u s1\n 45951: a1 = u64 [sp + 0x98]\n 45955: a0 = a1 + a5\n 45958: a1 = a0 <u a1\n 45961: a1 = a5 if a5 == 0\n 45964: a5 = u64 [sp + 0x90]\n 45968: a1 = a1 + a5\n 45971: a5 = a1 <u a5\n 45974: s1 = u64 [sp + 0x88]\n 45978: a5 = a5 + s1\n 45981: s1 = u64 [sp + 0x60]\n 45984: u64 [sp + 0xb8] = s1\n 45988: s1 = u64 [sp + 0x68]\n 45991: u64 [sp + 0xb0] = s1\n 45995: s1 = u64 [sp + 0x78]\n 45998: u64 [sp + 0xa8] = s1\n 46002: s1 = u64 [sp + 0x70]\n 46005: u64 [sp + 0xa0] = s1\n 46009: u64 [sp + 0xd8] = a3\n 46013: u64 [sp + 0xd0] = a2\n 46017: u64 [sp + 0xc8] = t1\n 46021: u64 [sp + 0xc0] = t0\n 46025: u64 [sp + 0xe8] = a0\n 46029: u64 [sp + 0xe0] = a4\n 46033: u64 [sp + 0xf0] = a1\n 46037: a0 = sp + 0x100\n 46041: a1 = sp + 0xe0\n 46045: a2 = sp + 0xc0\n 46049: a3 = sp + 0xa0\n 46053: u64 [sp + 0xf8] = a5\n 46057: ra = 620, jump @689\n      : @728 [@dyn 310] (gas: 31)\n 46063: a0 = u64 [sp + 0x118]\n 46067: a1 = u64 [sp + 0x110]\n 46071: a2 = u64 [sp + 0x108]\n 46075: a3 = u64 [sp + 0x100]\n 46079: a4 = u64 [sp + 0x48]\n 46082: u64 [a4 + 0x58] = a0\n 46085: u64 [a4 + 0x50] = a1\n 46088: u64 [a4 + 0x48] = a2\n 46091: u64 [a4 + 0x40] = a3\n 46094: a0 = u64 [sp + 0x10]\n 46097: u64 [a4 + 0x38] = a0\n 46100: a0 = u64 [sp + 0x18]\n 46103: u64 [a4 + 0x30] = a0\n 46106: a0 = u64 [sp + 0x20]\n 46109: u64 [a4 + 0x28] = a0\n 46112: a0 = u64 [sp + 0x58]\n 46115: u64 [a4 + 0x20] = a0\n 46118: a0 = u64 [sp + 0x38]\n 46121: u64 [a4 + 0x18] = a0\n 46124: a0 = u64 [sp + 0x40]\n 46127: u64 [a4 + 0x10] = a0\n 46130: a0 = u64 [sp + 0x28]\n 46133: u64 [a4 + 0x8] = a0\n 46136: a0 = u64 [sp + 0x30]\n 46139: u64 [a4] = a0\n 46141: sp = s0 + 0xfffffffffffffe80\n 46145: ra = u64 [sp + 0x178]\n 46149: s0 = u64 [sp + 0x170]\n 46153: s1 = u64 [sp + 0x168]\n 46157: sp = sp + 0x180\n 46161: ret\n      : @729 (gas: 1)\n 46163: trap\n      : @730 (gas: 4)\n 46164: a0 = 0\n 46166: a1 = 0\n 46168: ra = 0x26e\n 46172: jump @0\n      : @731 (gas: 2)\n 46176: a1 = 0\n 46178: ra = 622, jump @0\n      : @732 [@dyn 311] (gas: 6)\n 46185: i32 a1 = a0 + 0\n 46187: a0 = 0x1\n 46190: a2 = 0\n 46192: ra = 0x270\n 46196: ecalli 10 // 'seal_return'\n 46198: fallthrough\n      : @733 [@dyn 312] (gas: 13)\n 46199: sp = sp + 0xfffffffffffffe40\n 46203: u64 [sp + 0x1b8] = ra\n 46207: u64 [sp + 0x1b0] = s0\n 46211: u64 [sp + 0x1a8] = s1\n 46215: s0 = sp + 0x1c0\n 46219: sp = sp & 0xffffffffffffffe0\n 46222: u64 [sp + 408] = 0\n 46226: u64 [sp + 400] = 0\n 46230: u64 [sp + 392] = 0\n 46234: u64 [sp + 384] = 0\n 46238: i32 a0 = sp + 0x180\n 46242: ecalli 13 // 'value_transferred'\n 46244: fallthrough\n      : @734 (gas: 8)\n 46245: a0 = u64 [sp + 0x190]\n 46249: a1 = u64 [sp + 0x198]\n 46253: a2 = u64 [sp + 0x188]\n 46257: a3 = u64 [sp + 0x180]\n 46261: a1 = a1 | a2\n 46264: a0 = a0 | a3\n 46267: a0 = a0 | a1\n 46270: jump @742 if a0 != 0\n      : @735 (gas: 13)\n 46274: a0 = u32 [0x20164]\n 46279: u64 [sp + 248] = 0\n 46283: u64 [sp + 240] = 0\n 46287: u64 [sp + 232] = 0\n 46291: u64 [sp + 0xe0] = a0\n 46295: u64 [sp + 280] = 0\n 46299: u64 [sp + 272] = 0\n 46303: u64 [sp + 256] = 0x4\n 46308: a0 = sp + 0x120\n 46312: a1 = sp + 0x100\n 46316: a2 = sp + 0xe0\n 46320: u64 [sp + 264] = 0\n 46324: ra = 626, jump @716\n      : @736 [@dyn 313] (gas: 8)\n 46330: t0 = u64 [sp + 0x130]\n 46334: a1 = u64 [sp + 0x128]\n 46338: a2 = u64 [sp + 0x120]\n 46342: a3 = t0 << 0x20\n 46345: a3 = a3 >> 0x20\n 46348: a4 = a2 | a1\n 46351: a3 = a3 | a4\n 46354: jump @742 if a3 == 0\n      : @737 (gas: 28)\n 46358: a0 = u64 [sp + 0x178]\n 46362: u64 [sp + 0x18] = a0\n 46365: t1 = u64 [sp + 0x170]\n 46369: t2 = u64 [sp + 0x168]\n 46373: ra = u64 [sp + 0x160]\n 46377: a5 = u64 [sp + 0x158]\n 46381: a3 = u64 [sp + 0x150]\n 46385: a4 = u64 [sp + 0x148]\n 46389: s1 = u64 [sp + 0x140]\n 46393: a0 = u64 [sp + 0x138]\n 46397: u64 [sp + 0x80] = a2\n 46401: u64 [sp + 0x88] = a1\n 46405: u64 [sp + 0x90] = t0\n 46409: u64 [sp + 0x98] = a0\n 46413: u64 [sp + 0x60] = s1\n 46416: u64 [sp + 0x68] = a4\n 46419: u64 [sp + 0x70] = a3\n 46422: u64 [sp + 0x78] = a5\n 46425: u64 [sp + 0x40] = ra\n 46428: u64 [sp + 0x48] = t2\n 46431: u64 [sp + 0x50] = t1\n 46434: a0 = sp + 0xc0\n 46438: a2 = sp + 0x80\n 46442: a3 = sp + 0x60\n 46445: a4 = sp + 0x40\n 46448: a5 = u64 [sp + 0x18]\n 46451: u64 [sp + 0x58] = a5\n 46454: ra = 628, jump @1414\n      : @738 [@dyn 314] (gas: 14)\n 46461: a3 = u64 [sp + 0xd8]\n 46465: a2 = u64 [sp + 0xd0]\n 46469: a0 = u64 [sp + 0xc8]\n 46473: a1 = u64 [sp + 0xc0]\n 46477: u64 [sp] = a3\n 46479: u64 [sp + 0x38] = a3\n 46482: u64 [sp + 0x8] = a2\n 46485: u64 [sp + 0x30] = a2\n 46488: u64 [sp + 0x10] = a0\n 46491: u64 [sp + 0x28] = a0\n 46494: a0 = sp + 0x20\n 46497: u64 [sp + 0x18] = a1\n 46500: u64 [sp + 0x20] = a1\n 46503: ra = 630, jump @1206\n      : @739 [@dyn 315] (gas: 3)\n 46510: a0 = 0x40\n 46513: a1 = 0x20\n 46516: ra = 632, jump @0\n      : @740 [@dyn 316] (gas: 100)\n 46523: a1 = u8 [a0 + 0x11]\n 46526: a2 = u8 [a0 + 0x10]\n 46529: a3 = u8 [a0 + 0x12]\n 46532: a4 = u8 [a0 + 0x13]\n 46535: a1 = a1 << 0x8\n 46538: a1 = a1 | a2\n 46541: a3 = a3 << 0x10\n 46544: a4 = a4 << 0x18\n 46547: a3 = a3 | a4\n 46550: a1 = a1 | a3\n 46553: a2 = u8 [a0 + 0x15]\n 46556: a3 = u8 [a0 + 0x14]\n 46559: a4 = u8 [a0 + 0x16]\n 46562: a5 = u8 [a0 + 0x17]\n 46565: a2 = a2 << 0x8\n 46568: a2 = a2 | a3\n 46571: a4 = a4 << 0x10\n 46574: a5 = a5 << 0x18\n 46577: a4 = a4 | a5\n 46580: a2 = a2 | a4\n 46583: a2 = a2 << 0x20\n 46586: t0 = a2 | a1\n 46589: a2 = u8 [a0 + 0x1]\n 46592: a3 = u8 [a0]\n 46594: a4 = u8 [a0 + 0x2]\n 46597: a5 = u8 [a0 + 0x3]\n 46600: a2 = a2 << 0x8\n 46603: a2 = a2 | a3\n 46606: a4 = a4 << 0x10\n 46609: a5 = a5 << 0x18\n 46612: a4 = a4 | a5\n 46615: a2 = a2 | a4\n 46618: a3 = u8 [a0 + 0x5]\n 46621: a4 = u8 [a0 + 0x4]\n 46624: a5 = u8 [a0 + 0x6]\n 46627: s1 = u8 [a0 + 0x7]\n 46630: a3 = a3 << 0x8\n 46633: a3 = a3 | a4\n 46636: a5 = a5 << 0x10\n 46639: s1 = s1 << 0x18\n 46642: a5 = a5 | s1\n 46645: a3 = a3 | a5\n 46648: a3 = a3 << 0x20\n 46651: a2 = a2 | a3\n 46654: a3 = u8 [a0 + 0x19]\n 46657: a4 = u8 [a0 + 0x18]\n 46660: a5 = u8 [a0 + 0x1a]\n 46663: s1 = u8 [a0 + 0x1b]\n 46666: a3 = a3 << 0x8\n 46669: a3 = a3 | a4\n 46672: a5 = a5 << 0x10\n 46675: s1 = s1 << 0x18\n 46678: a5 = a5 | s1\n 46681: a3 = a3 | a5\n 46684: a4 = u8 [a0 + 0x1d]\n 46687: a5 = u8 [a0 + 0x1c]\n 46690: s1 = u8 [a0 + 0x1e]\n 46693: a1 = u8 [a0 + 0x1f]\n 46696: a4 = a4 << 0x8\n 46699: a4 = a4 | a5\n 46702: s1 = s1 << 0x10\n 46705: a1 = a1 << 0x18\n 46708: a1 = a1 | s1\n 46711: a1 = a1 | a4\n 46714: a1 = a1 << 0x20\n 46717: a3 = a3 | a1\n 46720: a1 = u8 [a0 + 0x9]\n 46723: a4 = u8 [a0 + 0x8]\n 46726: a5 = u8 [a0 + 0xa]\n 46729: s1 = u8 [a0 + 0xb]\n 46732: a1 = a1 << 0x8\n 46735: a1 = a1 | a4\n 46738: a5 = a5 << 0x10\n 46741: s1 = s1 << 0x18\n 46744: a5 = a5 | s1\n 46747: a1 = a1 | a5\n 46750: a4 = u8 [a0 + 0xd]\n 46753: a5 = u8 [a0 + 0xc]\n 46756: s1 = u8 [a0 + 0xe]\n 46759: a0 = u8 [a0 + 0xf]\n 46762: a4 = a4 << 0x8\n 46765: a4 = a4 | a5\n 46768: s1 = s1 << 0x10\n 46771: a0 = a0 << 0x18\n 46774: a0 = a0 | s1\n 46777: a0 = a0 | a4\n 46780: a0 = a0 << 0x20\n 46783: a0 = a0 | a1\n 46786: a1 = reverse a0\n 46788: a0 = reverse a3\n 46790: a2 = reverse a2\n 46792: a3 = reverse t0\n 46794: a2 = a2 | a3\n 46797: a3 = a0 | a1\n 46800: a3 = a3 | a2\n 46803: a3 = a3 >> 0x20\n 46806: a1 = a1 | a2\n 46809: a1 = a1 << 0x20\n 46812: a1 = a1 | a3\n 46815: jump @744 if a1 == 0\n      : @741 (gas: 1)\n 46818: trap\n      : @742 (gas: 3)\n 46819: a0 = 0\n 46821: a1 = 0\n 46823: ra = 634, jump @0\n      : @743 [@dyn 317] (gas: 5)\n 46830: i32 a1 = a0 + 0\n 46832: a0 = 0x1\n 46835: a2 = 0\n 46837: ecalli 10 // 'seal_return'\n 46839: fallthrough\n      : @744 (gas: 4)\n 46840: i32 s1 = a0 + 0\n 46842: a1 = 0x20\n 46845: a0 = s1\n 46847: ra = 636, jump @0\n      : @745 [@dyn 318] (gas: 71)\n 46854: a1 = u64 [sp]\n 46856: a1 = reverse a1\n 46858: a2 = u64 [sp + 0x8]\n 46861: a2 = reverse a2\n 46863: a3 = u64 [sp + 0x10]\n 46866: a3 = reverse a3\n 46868: a4 = u64 [sp + 0x18]\n 46871: a4 = reverse a4\n 46873: a5 = a4 >> 0x38\n 46876: u8 [a0 + 0x1f] = a5\n 46879: a5 = a4 >> 0x30\n 46882: u8 [a0 + 0x1e] = a5\n 46885: a5 = a4 >> 0x28\n 46888: u8 [a0 + 0x1d] = a5\n 46891: a5 = a4 >> 0x20\n 46894: u8 [a0 + 0x1c] = a5\n 46897: a5 = a4 >> 0x18\n 46900: u8 [a0 + 0x1b] = a5\n 46903: a5 = a4 >> 0x10\n 46906: u8 [a0 + 0x1a] = a5\n 46909: a5 = a4 >> 0x8\n 46912: u8 [a0 + 0x19] = a5\n 46915: u8 [a0 + 0x18] = a4\n 46918: u8 [a0 + 0x10] = a3\n 46921: a4 = a3 >> 0x38\n 46924: u8 [a0 + 0x17] = a4\n 46927: a4 = a3 >> 0x30\n 46930: u8 [a0 + 0x16] = a4\n 46933: a4 = a3 >> 0x28\n 46936: u8 [a0 + 0x15] = a4\n 46939: a4 = a3 >> 0x20\n 46942: u8 [a0 + 0x14] = a4\n 46945: a4 = a3 >> 0x18\n 46948: u8 [a0 + 0x13] = a4\n 46951: a4 = a3 >> 0x10\n 46954: u8 [a0 + 0x12] = a4\n 46957: a3 = a3 >> 0x8\n 46960: u8 [a0 + 0x11] = a3\n 46963: u8 [a0 + 0x8] = a2\n 46966: a3 = a2 >> 0x38\n 46969: u8 [a0 + 0xf] = a3\n 46972: a3 = a2 >> 0x30\n 46975: u8 [a0 + 0xe] = a3\n 46978: a3 = a2 >> 0x28\n 46981: u8 [a0 + 0xd] = a3\n 46984: a3 = a2 >> 0x20\n 46987: u8 [a0 + 0xc] = a3\n 46990: a3 = a2 >> 0x18\n 46993: u8 [a0 + 0xb] = a3\n 46996: a3 = a2 >> 0x10\n 46999: u8 [a0 + 0xa] = a3\n 47002: a2 = a2 >> 0x8\n 47005: u8 [a0 + 0x9] = a2\n 47008: u8 [a0] = a1\n 47010: a2 = a1 >> 0x38\n 47013: u8 [a0 + 0x7] = a2\n 47016: a2 = a1 >> 0x30\n 47019: u8 [a0 + 0x6] = a2\n 47022: a2 = a1 >> 0x28\n 47025: u8 [a0 + 0x5] = a2\n 47028: a2 = a1 >> 0x20\n 47031: u8 [a0 + 0x4] = a2\n 47034: a2 = a1 >> 0x18\n 47037: u8 [a0 + 0x3] = a2\n 47040: a2 = a1 >> 0x10\n 47043: u8 [a0 + 0x2] = a2\n 47046: a1 = a1 >> 0x8\n 47049: u8 [a0 + 0x1] = a1\n 47052: a1 = 0x20\n 47055: a0 = s1\n 47057: ra = 638, jump @0\n      : @746 [@dyn 319] (gas: 6)\n 47064: i32 a1 = a0 + 0\n 47066: a2 = 0x20\n 47069: a0 = 0\n 47071: ra = 0x280\n 47075: ecalli 10 // 'seal_return'\n 47077: fallthrough\n      : @747 [@dyn 320] (gas: 9)\n 47078: a2 = u64 [a1 + 0x18]\n 47081: a3 = u64 [a1 + 0x10]\n 47084: a4 = u64 [a1 + 0x8]\n 47087: a1 = u64 [a1]\n 47089: u64 [a0 + 0x18] = a2\n 47092: u64 [a0 + 0x10] = a3\n 47095: u64 [a0 + 0x8] = a4\n 47098: u64 [a0] = a1\n 47100: ret\n      : @748 (gas: 8)\n 47102: a0 = u64 [sp + 0x10]\n 47105: a1 = u64 [sp + 0x18]\n 47108: a2 = u64 [sp + 0x8]\n 47111: a3 = u64 [sp]\n 47113: a1 = a1 | a2\n 47116: a0 = a0 | a3\n 47119: a0 = a0 | a1\n 47122: jump @753 if a0 != 0\n      : @749 (gas: 2)\n 47126: a0 = i32 [0x20164]\n 47131: jump @753 if a0 <=u 3\n      : @750 (gas: 3)\n 47136: a0 = 0x40\n 47139: a1 = 0x20\n 47142: ra = 642, jump @0\n      : @751 [@dyn 321] (gas: 100)\n 47149: a1 = u8 [a0 + 0x11]\n 47152: a2 = u8 [a0 + 0x10]\n 47155: a3 = u8 [a0 + 0x12]\n 47158: a4 = u8 [a0 + 0x13]\n 47161: a1 = a1 << 0x8\n 47164: a1 = a1 | a2\n 47167: a3 = a3 << 0x10\n 47170: a4 = a4 << 0x18\n 47173: a3 = a3 | a4\n 47176: a1 = a1 | a3\n 47179: a2 = u8 [a0 + 0x15]\n 47182: a3 = u8 [a0 + 0x14]\n 47185: a4 = u8 [a0 + 0x16]\n 47188: a5 = u8 [a0 + 0x17]\n 47191: a2 = a2 << 0x8\n 47194: a2 = a2 | a3\n 47197: a4 = a4 << 0x10\n 47200: a5 = a5 << 0x18\n 47203: a4 = a4 | a5\n 47206: a2 = a2 | a4\n 47209: a2 = a2 << 0x20\n 47212: t0 = a2 | a1\n 47215: a2 = u8 [a0 + 0x1]\n 47218: a3 = u8 [a0]\n 47220: a4 = u8 [a0 + 0x2]\n 47223: a5 = u8 [a0 + 0x3]\n 47226: a2 = a2 << 0x8\n 47229: a2 = a2 | a3\n 47232: a4 = a4 << 0x10\n 47235: a5 = a5 << 0x18\n 47238: a4 = a4 | a5\n 47241: a2 = a2 | a4\n 47244: a3 = u8 [a0 + 0x5]\n 47247: a4 = u8 [a0 + 0x4]\n 47250: a5 = u8 [a0 + 0x6]\n 47253: s1 = u8 [a0 + 0x7]\n 47256: a3 = a3 << 0x8\n 47259: a3 = a3 | a4\n 47262: a5 = a5 << 0x10\n 47265: s1 = s1 << 0x18\n 47268: a5 = a5 | s1\n 47271: a3 = a3 | a5\n 47274: a3 = a3 << 0x20\n 47277: a2 = a2 | a3\n 47280: a3 = u8 [a0 + 0x19]\n 47283: a4 = u8 [a0 + 0x18]\n 47286: a5 = u8 [a0 + 0x1a]\n 47289: s1 = u8 [a0 + 0x1b]\n 47292: a3 = a3 << 0x8\n 47295: a3 = a3 | a4\n 47298: a5 = a5 << 0x10\n 47301: s1 = s1 << 0x18\n 47304: a5 = a5 | s1\n 47307: a3 = a3 | a5\n 47310: a4 = u8 [a0 + 0x1d]\n 47313: a5 = u8 [a0 + 0x1c]\n 47316: s1 = u8 [a0 + 0x1e]\n 47319: a1 = u8 [a0 + 0x1f]\n 47322: a4 = a4 << 0x8\n 47325: a4 = a4 | a5\n 47328: s1 = s1 << 0x10\n 47331: a1 = a1 << 0x18\n 47334: a1 = a1 | s1\n 47337: a1 = a1 | a4\n 47340: a1 = a1 << 0x20\n 47343: a3 = a3 | a1\n 47346: a1 = u8 [a0 + 0x9]\n 47349: a4 = u8 [a0 + 0x8]\n 47352: a5 = u8 [a0 + 0xa]\n 47355: s1 = u8 [a0 + 0xb]\n 47358: a1 = a1 << 0x8\n 47361: a1 = a1 | a4\n 47364: a5 = a5 << 0x10\n 47367: s1 = s1 << 0x18\n 47370: a5 = a5 | s1\n 47373: a1 = a1 | a5\n 47376: a4 = u8 [a0 + 0xd]\n 47379: a5 = u8 [a0 + 0xc]\n 47382: s1 = u8 [a0 + 0xe]\n 47385: a0 = u8 [a0 + 0xf]\n 47388: a4 = a4 << 0x8\n 47391: a4 = a4 | a5\n 47394: s1 = s1 << 0x10\n 47397: a0 = a0 << 0x18\n 47400: a0 = a0 | s1\n 47403: a0 = a0 | a4\n 47406: a0 = a0 << 0x20\n 47409: a0 = a0 | a1\n 47412: a0 = reverse a0\n 47414: s1 = reverse a3\n 47416: a1 = reverse a2\n 47418: a2 = reverse t0\n 47420: a1 = a1 | a2\n 47423: a2 = s1 | a0\n 47426: a2 = a2 | a1\n 47429: a2 = a2 >> 0x20\n 47432: a0 = a0 | a1\n 47435: a0 = a0 << 0x20\n 47438: a0 = a0 | a2\n 47441: jump @755 if a0 == 0\n      : @752 (gas: 1)\n 47444: trap\n      : @753 (gas: 3)\n 47445: a0 = 0\n 47447: a1 = 0\n 47449: ra = 644, jump @0\n      : @754 [@dyn 322] (gas: 5)\n 47456: i32 a1 = a0 + 0\n 47458: a0 = 0x1\n 47461: a2 = 0\n 47463: ecalli 10 // 'seal_return'\n 47465: fallthrough\n      : @755 (gas: 4)\n 47466: i32 s1 = s1 + 0\n 47468: a1 = 0x20\n 47471: a0 = s1\n 47473: ra = 646, jump @0\n      : @756 [@dyn 323] (gas: 35)\n 47480: u8 [a0 + 31] = 0x32\n 47484: u8 [a0 + 30] = 0\n 47487: u8 [a0 + 29] = 0\n 47490: u8 [a0 + 28] = 0\n 47493: u8 [a0 + 27] = 0\n 47496: u8 [a0 + 26] = 0\n 47499: u8 [a0 + 25] = 0\n 47502: u8 [a0 + 24] = 0\n 47505: u8 [a0 + 23] = 0\n 47508: u8 [a0 + 22] = 0\n 47511: u8 [a0 + 21] = 0\n 47514: u8 [a0 + 20] = 0\n 47517: u8 [a0 + 19] = 0\n 47520: u8 [a0 + 18] = 0\n 47523: u8 [a0 + 17] = 0\n 47526: u8 [a0 + 16] = 0\n 47529: u8 [a0 + 15] = 0\n 47532: u8 [a0 + 14] = 0\n 47535: u8 [a0 + 13] = 0\n 47538: u8 [a0 + 12] = 0\n 47541: u8 [a0 + 11] = 0\n 47544: u8 [a0 + 10] = 0\n 47547: u8 [a0 + 9] = 0\n 47550: u8 [a0 + 8] = 0\n 47553: u8 [a0 + 7] = 0\n 47556: u8 [a0 + 6] = 0\n 47559: u8 [a0 + 5] = 0\n 47562: u8 [a0 + 4] = 0\n 47565: u8 [a0 + 3] = 0\n 47568: u8 [a0 + 2] = 0\n 47571: u8 [a0 + 1] = 0\n 47574: u8 [a0 + 0] = 0\n 47576: a1 = 0x20\n 47579: a0 = s1\n 47581: ra = 648, jump @0\n      : @757 [@dyn 324] (gas: 6)\n 47588: i32 a1 = a0 + 0\n 47590: a2 = 0x20\n 47593: a0 = 0\n 47595: ra = 0x28a\n 47599: ecalli 10 // 'seal_return'\n 47601: fallthrough\n      : @758 [@dyn 325] (gas: 36)\n 47602: sp = sp + 0xffffffffffffffa0\n 47605: u64 [sp + 0x58] = ra\n 47608: u64 [sp + 0x50] = s0\n 47611: u64 [sp + 0x48] = s1\n 47614: s0 = sp + 0x60\n 47617: sp = sp & 0xffffffffffffffe0\n 47620: s1 = a0\n 47622: u64 [sp + 24] = 0\n 47625: u64 [sp + 16] = 0\n 47628: u64 [sp + 8] = 0\n 47631: u64 [sp + 0] = 0x4\n 47634: u64 [sp + 56] = 0\n 47637: u64 [sp + 48] = 0\n 47640: u64 [sp + 40] = 0\n 47643: u64 [sp + 32] = 0\n 47646: u32 [sp + 64] = 0x20\n 47650: i32 a1 = sp + 0\n 47652: i32 a3 = sp + 0x20\n 47655: i32 a4 = sp + 0x40\n 47658: a2 = 0xffffffffffffffff\n 47661: a0 = 0\n 47663: ecalli 7 // 'get_storage'\n 47665: a0 = u64 [sp + 0x38]\n 47668: a1 = u64 [sp + 0x30]\n 47671: a2 = u64 [sp + 0x28]\n 47674: a3 = u64 [sp + 0x20]\n 47677: u64 [s1 + 0x18] = a0\n 47680: u64 [s1 + 0x10] = a1\n 47683: u64 [s1 + 0x8] = a2\n 47686: u64 [s1] = a3\n 47688: sp = s0 + 0xffffffffffffffa0\n 47691: ra = u64 [sp + 0x58]\n 47694: s0 = u64 [sp + 0x50]\n 47697: s1 = u64 [sp + 0x48]\n 47700: sp = sp + 0x60\n 47703: ret\n      : @759 (gas: 8)\n 47705: a0 = u64 [sp + 0x30]\n 47708: a1 = u64 [sp + 0x38]\n 47711: a2 = u64 [sp + 0x28]\n 47714: a3 = u64 [sp + 0x20]\n 47717: a1 = a1 | a2\n 47720: a0 = a0 | a3\n 47723: a0 = a0 | a1\n 47726: jump @764 if a0 != 0\n      : @760 (gas: 2)\n 47730: a0 = i32 [0x20164]\n 47735: jump @764 if a0 <=u 3\n      : @761 (gas: 26)\n 47740: u64 [sp + 88] = 0\n 47743: u64 [sp + 80] = 0\n 47746: u64 [sp + 72] = 0\n 47749: u64 [sp + 64] = 0x4\n 47753: u64 [sp + 120] = 0\n 47756: u64 [sp + 112] = 0\n 47759: u64 [sp + 104] = 0\n 47762: u64 [sp + 96] = 0\n 47765: u32 [sp + 128] = 0x20\n 47770: i32 a1 = sp + 0x40\n 47773: i32 a3 = sp + 0x60\n 47776: i32 a4 = sp + 0x80\n 47780: a2 = 0xffffffffffffffff\n 47783: a0 = 0\n 47785: ecalli 7 // 'get_storage'\n 47787: a0 = u64 [sp + 0x78]\n 47790: u64 [sp] = a0\n 47792: a0 = u64 [sp + 0x70]\n 47795: u64 [sp + 0x8] = a0\n 47798: a0 = u64 [sp + 0x68]\n 47801: u64 [sp + 0x10] = a0\n 47804: a0 = u64 [sp + 0x60]\n 47807: u64 [sp + 0x18] = a0\n 47810: a0 = 0x40\n 47813: a1 = 0x20\n 47816: ra = 652, jump @0\n      : @762 [@dyn 326] (gas: 100)\n 47823: a1 = u8 [a0 + 0x11]\n 47826: a2 = u8 [a0 + 0x10]\n 47829: a3 = u8 [a0 + 0x12]\n 47832: a4 = u8 [a0 + 0x13]\n 47835: a1 = a1 << 0x8\n 47838: a1 = a1 | a2\n 47841: a3 = a3 << 0x10\n 47844: a4 = a4 << 0x18\n 47847: a3 = a3 | a4\n 47850: a1 = a1 | a3\n 47853: a2 = u8 [a0 + 0x15]\n 47856: a3 = u8 [a0 + 0x14]\n 47859: a4 = u8 [a0 + 0x16]\n 47862: a5 = u8 [a0 + 0x17]\n 47865: a2 = a2 << 0x8\n 47868: a2 = a2 | a3\n 47871: a4 = a4 << 0x10\n 47874: a5 = a5 << 0x18\n 47877: a4 = a4 | a5\n 47880: a2 = a2 | a4\n 47883: a2 = a2 << 0x20\n 47886: t0 = a2 | a1\n 47889: a2 = u8 [a0 + 0x1]\n 47892: a3 = u8 [a0]\n 47894: a4 = u8 [a0 + 0x2]\n 47897: a5 = u8 [a0 + 0x3]\n 47900: a2 = a2 << 0x8\n 47903: a2 = a2 | a3\n 47906: a4 = a4 << 0x10\n 47909: a5 = a5 << 0x18\n 47912: a4 = a4 | a5\n 47915: a2 = a2 | a4\n 47918: a3 = u8 [a0 + 0x5]\n 47921: a4 = u8 [a0 + 0x4]\n 47924: a5 = u8 [a0 + 0x6]\n 47927: s1 = u8 [a0 + 0x7]\n 47930: a3 = a3 << 0x8\n 47933: a3 = a3 | a4\n 47936: a5 = a5 << 0x10\n 47939: s1 = s1 << 0x18\n 47942: a5 = a5 | s1\n 47945: a3 = a3 | a5\n 47948: a3 = a3 << 0x20\n 47951: a2 = a2 | a3\n 47954: a3 = u8 [a0 + 0x19]\n 47957: a4 = u8 [a0 + 0x18]\n 47960: a5 = u8 [a0 + 0x1a]\n 47963: s1 = u8 [a0 + 0x1b]\n 47966: a3 = a3 << 0x8\n 47969: a3 = a3 | a4\n 47972: a5 = a5 << 0x10\n 47975: s1 = s1 << 0x18\n 47978: a5 = a5 | s1\n 47981: a3 = a3 | a5\n 47984: a4 = u8 [a0 + 0x1d]\n 47987: a5 = u8 [a0 + 0x1c]\n 47990: s1 = u8 [a0 + 0x1e]\n 47993: a1 = u8 [a0 + 0x1f]\n 47996: a4 = a4 << 0x8\n 47999: a4 = a4 | a5\n 48002: s1 = s1 << 0x10\n 48005: a1 = a1 << 0x18\n 48008: a1 = a1 | s1\n 48011: a1 = a1 | a4\n 48014: a1 = a1 << 0x20\n 48017: a3 = a3 | a1\n 48020: a1 = u8 [a0 + 0x9]\n 48023: a4 = u8 [a0 + 0x8]\n 48026: a5 = u8 [a0 + 0xa]\n 48029: s1 = u8 [a0 + 0xb]\n 48032: a1 = a1 << 0x8\n 48035: a1 = a1 | a4\n 48038: a5 = a5 << 0x10\n 48041: s1 = s1 << 0x18\n 48044: a5 = a5 | s1\n 48047: a1 = a1 | a5\n 48050: a4 = u8 [a0 + 0xd]\n 48053: a5 = u8 [a0 + 0xc]\n 48056: s1 = u8 [a0 + 0xe]\n 48059: a0 = u8 [a0 + 0xf]\n 48062: a4 = a4 << 0x8\n 48065: a4 = a4 | a5\n 48068: s1 = s1 << 0x10\n 48071: a0 = a0 << 0x18\n 48074: a0 = a0 | s1\n 48077: a0 = a0 | a4\n 48080: a0 = a0 << 0x20\n 48083: a0 = a0 | a1\n 48086: a1 = reverse a0\n 48088: a0 = reverse a3\n 48090: a2 = reverse a2\n 48092: a3 = reverse t0\n 48094: a2 = a2 | a3\n 48097: a3 = a0 | a1\n 48100: a3 = a3 | a2\n 48103: a3 = a3 >> 0x20\n 48106: a1 = a1 | a2\n 48109: a1 = a1 << 0x20\n 48112: a1 = a1 | a3\n 48115: jump @766 if a1 == 0\n      : @763 (gas: 1)\n 48118: trap\n      : @764 (gas: 3)\n 48119: a0 = 0\n 48121: a1 = 0\n 48123: ra = 654, jump @0\n      : @765 [@dyn 327] (gas: 5)\n 48130: i32 a1 = a0 + 0\n 48132: a0 = 0x1\n 48135: a2 = 0\n 48137: ecalli 10 // 'seal_return'\n 48139: fallthrough\n      : @766 (gas: 4)\n 48140: i32 s1 = a0 + 0\n 48142: a1 = 0x20\n 48145: a0 = s1\n 48147: ra = 656, jump @0\n      : @767 [@dyn 328] (gas: 71)\n 48154: a1 = u64 [sp]\n 48156: a1 = reverse a1\n 48158: a2 = u64 [sp + 0x8]\n 48161: a2 = reverse a2\n 48163: a3 = u64 [sp + 0x10]\n 48166: a3 = reverse a3\n 48168: a4 = u64 [sp + 0x18]\n 48171: a4 = reverse a4\n 48173: a5 = a4 >> 0x38\n 48176: u8 [a0 + 0x1f] = a5\n 48179: a5 = a4 >> 0x30\n 48182: u8 [a0 + 0x1e] = a5\n 48185: a5 = a4 >> 0x28\n 48188: u8 [a0 + 0x1d] = a5\n 48191: a5 = a4 >> 0x20\n 48194: u8 [a0 + 0x1c] = a5\n 48197: a5 = a4 >> 0x18\n 48200: u8 [a0 + 0x1b] = a5\n 48203: a5 = a4 >> 0x10\n 48206: u8 [a0 + 0x1a] = a5\n 48209: a5 = a4 >> 0x8\n 48212: u8 [a0 + 0x19] = a5\n 48215: u8 [a0 + 0x18] = a4\n 48218: u8 [a0 + 0x10] = a3\n 48221: a4 = a3 >> 0x38\n 48224: u8 [a0 + 0x17] = a4\n 48227: a4 = a3 >> 0x30\n 48230: u8 [a0 + 0x16] = a4\n 48233: a4 = a3 >> 0x28\n 48236: u8 [a0 + 0x15] = a4\n 48239: a4 = a3 >> 0x20\n 48242: u8 [a0 + 0x14] = a4\n 48245: a4 = a3 >> 0x18\n 48248: u8 [a0 + 0x13] = a4\n 48251: a4 = a3 >> 0x10\n 48254: u8 [a0 + 0x12] = a4\n 48257: a3 = a3 >> 0x8\n 48260: u8 [a0 + 0x11] = a3\n 48263: u8 [a0 + 0x8] = a2\n 48266: a3 = a2 >> 0x38\n 48269: u8 [a0 + 0xf] = a3\n 48272: a3 = a2 >> 0x30\n 48275: u8 [a0 + 0xe] = a3\n 48278: a3 = a2 >> 0x28\n 48281: u8 [a0 + 0xd] = a3\n 48284: a3 = a2 >> 0x20\n 48287: u8 [a0 + 0xc] = a3\n 48290: a3 = a2 >> 0x18\n 48293: u8 [a0 + 0xb] = a3\n 48296: a3 = a2 >> 0x10\n 48299: u8 [a0 + 0xa] = a3\n 48302: a2 = a2 >> 0x8\n 48305: u8 [a0 + 0x9] = a2\n 48308: u8 [a0] = a1\n 48310: a2 = a1 >> 0x38\n 48313: u8 [a0 + 0x7] = a2\n 48316: a2 = a1 >> 0x30\n 48319: u8 [a0 + 0x6] = a2\n 48322: a2 = a1 >> 0x28\n 48325: u8 [a0 + 0x5] = a2\n 48328: a2 = a1 >> 0x20\n 48331: u8 [a0 + 0x4] = a2\n 48334: a2 = a1 >> 0x18\n 48337: u8 [a0 + 0x3] = a2\n 48340: a2 = a1 >> 0x10\n 48343: u8 [a0 + 0x2] = a2\n 48346: a1 = a1 >> 0x8\n 48349: u8 [a0 + 0x1] = a1\n 48352: a1 = 0x20\n 48355: a0 = s1\n 48357: ra = 658, jump @0\n      : @768 [@dyn 329] (gas: 6)\n 48364: i32 a1 = a0 + 0\n 48366: a2 = 0x20\n 48369: a0 = 0\n 48371: ra = 0x294\n 48375: ecalli 10 // 'seal_return'\n 48377: fallthrough\n      : @769 [@dyn 330] (gas: 47)\n 48378: sp = sp + 0xffffffffffffff80\n 48381: u64 [sp + 0x78] = ra\n 48384: u64 [sp + 0x70] = s0\n 48387: u64 [sp + 0x68] = s1\n 48390: s0 = sp + 0x80\n 48394: sp = sp & 0xffffffffffffffe0\n 48397: ra = u64 [a1 + 0x10]\n 48400: a5 = u64 [a1 + 0x8]\n 48403: a3 = u64 [a2 + 0x8]\n 48406: t1 = u64 [a1]\n 48408: a4 = u64 [a2]\n 48410: u64 [sp + 0x28] = a4\n 48413: t2 = u64 [a2 + 0x10]\n 48416: t0 = a3 ^ a5\n 48419: s1 = a3 <u a5\n 48422: a4 = a4 <u t1\n 48425: u64 [sp + 0x20] = a4\n 48428: s1 = a4 if t0 == 0\n 48431: t0 = u64 [a1 + 0x18]\n 48434: a1 = u64 [a2 + 0x18]\n 48437: u64 [sp + 0x18] = a1\n 48440: a2 = t2 - ra\n 48443: a1 = a2 - s1\n 48446: u64 [sp + 0x30] = a1\n 48449: a1 = a2 <u s1\n 48452: a4 = t2 <u ra\n 48455: u64 [sp + 0x38] = t0\n 48458: a2 = u64 [sp + 0x18]\n 48461: a2 = a2 - t0\n 48464: a2 = a2 - a4\n 48467: a2 = a2 - a1\n 48470: a1 = a3 - a5\n 48473: a3 = u64 [sp + 0x20]\n 48476: a1 = a1 - a3\n 48479: a3 = u64 [sp + 0x28]\n 48482: a3 = a3 - t1\n 48485: a4 = a1 >u 0\n 48487: a3 = a3 <u 0x40\n 48490: a3 = a3 ^ 0x1\n 48493: a3 = a4 if a1 != 0\n 48496: s1 = a2 >s 0\n 48498: a1 = u64 [sp + 0x30]\n 48501: a4 = a1 >u 0\n 48503: a4 = s1 if a2 != 0\n 48506: a1 = a1 | a2\n 48509: a3 = a4 if a1 != 0\n 48512: jump @778 if a3 == 0\n      : @770 (gas: 12)\n 48516: s1 = a0\n 48518: a0 = t1 | ra\n 48521: u64 [sp + 0x30] = a5\n 48524: a1 = u64 [sp + 0x38]\n 48527: a1 = a1 | a5\n 48530: a0 = a0 | a1\n 48533: a0 = a0 >> 0x20\n 48536: u64 [sp + 0x28] = ra\n 48539: a1 = a1 | ra\n 48542: a1 = a1 << 0x20\n 48545: a0 = a0 | a1\n 48548: jump @777 if a0 != 0\n      : @771 (gas: 6)\n 48552: u64 [sp + 0x20] = t1\n 48555: i32 a1 = t1 + 0\n 48557: i32 a0 = sp + 0x40\n 48560: u64 [sp + 0x8] = a1\n 48563: ecalli 3 // 'call_data_load'\n 48565: fallthrough\n      : @772 (gas: 10)\n 48566: a4 = u64 [sp + 0x50]\n 48569: a3 = u64 [sp + 0x58]\n 48572: a0 = 0x100000000\n 48582: a1 = a4 ^ a0\n 48585: a1 = a1 | a3\n 48588: a2 = a4 >> 0x20\n 48591: a2 = a2 <u 0x1\n 48594: a2 = 0 if a3 != 0\n 48596: a2 = 0 if a1 == 0\n 48598: jump @778 if a2 == 0\n      : @773 (gas: 12)\n 48602: u64 [sp + 0x10] = a4\n 48605: u64 [sp + 0x18] = a3\n 48608: a1 = u64 [sp + 0x28]\n 48611: a2 = u64 [sp + 0x38]\n 48614: a1 = a1 | a2\n 48617: a0 = 0xffffffe0\n 48627: a2 = u64 [sp + 0x20]\n 48630: a0 = a2 <u a0\n 48633: a2 = u64 [sp + 0x30]\n 48636: a0 = 0 if a2 != 0\n 48638: a0 = 0 if a1 != 0\n 48640: jump @777 if a0 == 0\n      : @774 (gas: 9)\n 48643: a0 = u64 [sp + 0x48]\n 48646: u64 [sp + 0x30] = a0\n 48649: a0 = u64 [sp + 0x40]\n 48652: u64 [sp + 0x38] = a0\n 48655: a0 = u64 [sp + 0x8]\n 48658: i32 a1 = a0 + 0x20\n 48661: i32 a0 = sp + 0x40\n 48664: ecalli 3 // 'call_data_load'\n 48666: fallthrough\n      : @775 (gas: 10)\n 48667: a1 = u64 [sp + 0x50]\n 48670: a0 = u64 [sp + 0x58]\n 48673: a2 = 0x100000000\n 48683: a2 = a2 ^ a1\n 48686: a2 = a2 | a0\n 48689: a3 = a1 >> 0x20\n 48692: a3 = a3 <u 0x1\n 48695: a3 = 0 if a0 != 0\n 48697: a3 = 0 if a2 == 0\n 48699: jump @778 if a3 == 0\n      : @776 (gas: 20)\n 48702: a2 = u64 [sp + 0x48]\n 48705: a3 = u64 [sp + 0x40]\n 48708: u64 [s1 + 0x28] = a2\n 48711: u64 [s1 + 0x20] = a3\n 48714: a2 = u64 [sp + 0x30]\n 48717: u64 [s1 + 0x8] = a2\n 48720: a2 = u64 [sp + 0x38]\n 48723: u64 [s1] = a2\n 48725: u64 [s1 + 0x30] = a1\n 48728: a1 = u64 [sp + 0x10]\n 48731: u64 [s1 + 0x10] = a1\n 48734: u64 [s1 + 0x38] = a0\n 48737: a0 = u64 [sp + 0x18]\n 48740: u64 [s1 + 0x18] = a0\n 48743: sp = s0 + 0xffffffffffffff80\n 48746: ra = u64 [sp + 0x78]\n 48749: s0 = u64 [sp + 0x70]\n 48752: s1 = u64 [sp + 0x68]\n 48755: sp = sp + 0x80\n 48759: ret\n      : @777 (gas: 1)\n 48761: trap\n      : @778 (gas: 3)\n 48762: a0 = 0\n 48764: a1 = 0\n 48766: ra = 662, jump @0\n      : @779 [@dyn 331] (gas: 6)\n 48773: i32 a1 = a0 + 0\n 48775: a0 = 0x1\n 48778: a2 = 0\n 48780: ra = 0x298\n 48784: ecalli 10 // 'seal_return'\n 48786: fallthrough\n      : @780 [@dyn 332] (gas: 13)\n 48787: sp = sp + 0xfffffffffffffe60\n 48791: u64 [sp + 0x198] = ra\n 48795: u64 [sp + 0x190] = s0\n 48799: u64 [sp + 0x188] = s1\n 48803: s0 = sp + 0x1a0\n 48807: sp = sp & 0xffffffffffffffe0\n 48810: u64 [sp + 312] = 0\n 48814: u64 [sp + 304] = 0\n 48818: u64 [sp + 296] = 0\n 48822: u64 [sp + 288] = 0\n 48826: i32 a0 = sp + 0x120\n 48830: ecalli 13 // 'value_transferred'\n 48832: fallthrough\n      : @781 (gas: 8)\n 48833: a0 = u64 [sp + 0x130]\n 48837: a1 = u64 [sp + 0x138]\n 48841: a2 = u64 [sp + 0x128]\n 48845: a3 = u64 [sp + 0x120]\n 48849: a1 = a1 | a2\n 48852: a0 = a0 | a3\n 48855: a0 = a0 | a1\n 48858: jump @789 if a0 != 0\n      : @782 (gas: 13)\n 48862: a0 = u32 [0x20164]\n 48867: u64 [sp + 184] = 0\n 48871: u64 [sp + 176] = 0\n 48875: u64 [sp + 168] = 0\n 48879: u64 [sp + 0xa0] = a0\n 48883: u64 [sp + 216] = 0\n 48887: u64 [sp + 208] = 0\n 48891: u64 [sp + 192] = 0x4\n 48896: a0 = sp + 0xe0\n 48900: a1 = sp + 0xc0\n 48904: a2 = sp + 0xa0\n 48908: u64 [sp + 200] = 0\n 48912: ra = 666, jump @769\n      : @783 [@dyn 333] (gas: 26)\n 48918: a0 = u64 [sp + 0x118]\n 48922: u64 [sp + 0x58] = a0\n 48925: a0 = u64 [sp + 0x110]\n 48929: u64 [sp + 0x50] = a0\n 48932: a0 = u64 [sp + 0x108]\n 48936: u64 [sp + 0x48] = a0\n 48939: a0 = u64 [sp + 0x100]\n 48943: u64 [sp + 0x40] = a0\n 48946: a0 = u64 [sp + 0xf8]\n 48950: u64 [sp + 0x38] = a0\n 48953: a0 = u64 [sp + 0xf0]\n 48957: u64 [sp + 0x30] = a0\n 48960: a0 = u64 [sp + 0xe8]\n 48964: u64 [sp + 0x28] = a0\n 48967: a0 = u64 [sp + 0xe0]\n 48971: u64 [sp + 0x20] = a0\n 48974: i32 a0 = sp + 0x140\n 48978: ecalli 5 // 'caller'\n 48980: a0 = u64 [sp + 0x148]\n 48984: u64 [sp + 0x18] = a0\n 48987: a0 = u64 [sp + 0x140]\n 48991: u64 [sp + 0x10] = a0\n 48994: s1 = u32 [sp + 0x150]\n 48998: i32 a0 = sp + 0x160\n 49002: ecalli 0 // 'address'\n 49003: fallthrough\n      : @784 (gas: 11)\n 49004: a0 = u32 [sp + 0x170]\n 49008: a1 = u64 [sp + 0x160]\n 49012: a2 = u64 [sp + 0x168]\n 49016: a0 = a0 ^ s1\n 49019: a3 = u64 [sp + 0x10]\n 49022: a1 = a1 ^ a3\n 49025: a0 = a0 | a1\n 49028: a1 = u64 [sp + 0x18]\n 49031: a1 = a1 ^ a2\n 49034: a0 = a0 | a1\n 49037: jump @789 if a0 != 0\n      : @785 (gas: 47)\n 49041: a0 = u64 [sp + 0x20]\n 49044: u64 [sp + 0x80] = a0\n 49048: a0 = u64 [sp + 0x28]\n 49051: u64 [sp + 0x88] = a0\n 49055: a0 = u64 [sp + 0x30]\n 49058: u64 [sp + 0x90] = a0\n 49062: a0 = u64 [sp + 0x38]\n 49065: u64 [sp + 0x98] = a0\n 49069: a0 = u64 [sp + 0x40]\n 49072: u64 [sp + 0x60] = a0\n 49075: a0 = u64 [sp + 0x48]\n 49078: u64 [sp + 0x68] = a0\n 49081: a0 = u64 [sp + 0x50]\n 49084: u64 [sp + 0x70] = a0\n 49087: a0 = sp + 0x80\n 49091: a1 = sp + 0x60\n 49094: a2 = u64 [sp + 0x58]\n 49097: u64 [sp + 0x78] = a2\n 49100: ra = 0x29c\n 49104: sp = sp + 0xffffffffffffff20\n 49108: u64 [sp + 0xd8] = ra\n 49112: u64 [sp + 0xd0] = s0\n 49116: u64 [sp + 0xc8] = s1\n 49120: s0 = sp + 0xe0\n 49124: sp = sp & 0xffffffffffffffe0\n 49127: a2 = u64 [a1 + 0x18]\n 49130: u64 [sp + 0x28] = a2\n 49133: a2 = u64 [a1 + 0x10]\n 49136: u64 [sp + 0x20] = a2\n 49139: a2 = u64 [a1 + 0x8]\n 49142: u64 [sp + 0x18] = a2\n 49145: a1 = u64 [a1]\n 49147: u64 [sp + 0x8] = a1\n 49150: a1 = u64 [a0 + 0x18]\n 49153: u64 [sp + 0x30] = a1\n 49156: a1 = u64 [a0 + 0x10]\n 49159: s1 = u64 [a0]\n 49161: a0 = u64 [a0 + 0x8]\n 49164: u64 [sp + 0x38] = a0\n 49167: u64 [sp + 0x10] = a1\n 49170: a0 = a1 << 0x20\n 49173: a0 = a0 >> 0x20\n 49176: u64 [sp] = a0\n 49178: a1 = 0x20\n 49181: a0 = 0\n 49183: ra = 0x472\n 49187: jump @0\n      : @786 [@dyn 334] (gas: 3)\n 49191: a0 = 0x40\n 49194: a1 = 0x20\n 49197: ra = 670, jump @0\n      : @787 [@dyn 335] (gas: 100)\n 49204: a1 = u8 [a0 + 0x11]\n 49207: a2 = u8 [a0 + 0x10]\n 49210: a3 = u8 [a0 + 0x12]\n 49213: a4 = u8 [a0 + 0x13]\n 49216: a1 = a1 << 0x8\n 49219: a1 = a1 | a2\n 49222: a3 = a3 << 0x10\n 49225: a4 = a4 << 0x18\n 49228: a3 = a3 | a4\n 49231: a1 = a1 | a3\n 49234: a2 = u8 [a0 + 0x15]\n 49237: a3 = u8 [a0 + 0x14]\n 49240: a4 = u8 [a0 + 0x16]\n 49243: a5 = u8 [a0 + 0x17]\n 49246: a2 = a2 << 0x8\n 49249: a2 = a2 | a3\n 49252: a4 = a4 << 0x10\n 49255: a5 = a5 << 0x18\n 49258: a4 = a4 | a5\n 49261: a2 = a2 | a4\n 49264: a2 = a2 << 0x20\n 49267: t0 = a2 | a1\n 49270: a2 = u8 [a0 + 0x1]\n 49273: a3 = u8 [a0]\n 49275: a4 = u8 [a0 + 0x2]\n 49278: a5 = u8 [a0 + 0x3]\n 49281: a2 = a2 << 0x8\n 49284: a2 = a2 | a3\n 49287: a4 = a4 << 0x10\n 49290: a5 = a5 << 0x18\n 49293: a4 = a4 | a5\n 49296: a2 = a2 | a4\n 49299: a3 = u8 [a0 + 0x5]\n 49302: a4 = u8 [a0 + 0x4]\n 49305: a5 = u8 [a0 + 0x6]\n 49308: s1 = u8 [a0 + 0x7]\n 49311: a3 = a3 << 0x8\n 49314: a3 = a3 | a4\n 49317: a5 = a5 << 0x10\n 49320: s1 = s1 << 0x18\n 49323: a5 = a5 | s1\n 49326: a3 = a3 | a5\n 49329: a3 = a3 << 0x20\n 49332: a2 = a2 | a3\n 49335: a3 = u8 [a0 + 0x19]\n 49338: a4 = u8 [a0 + 0x18]\n 49341: a5 = u8 [a0 + 0x1a]\n 49344: s1 = u8 [a0 + 0x1b]\n 49347: a3 = a3 << 0x8\n 49350: a3 = a3 | a4\n 49353: a5 = a5 << 0x10\n 49356: s1 = s1 << 0x18\n 49359: a5 = a5 | s1\n 49362: a3 = a3 | a5\n 49365: a4 = u8 [a0 + 0x1d]\n 49368: a5 = u8 [a0 + 0x1c]\n 49371: s1 = u8 [a0 + 0x1e]\n 49374: a1 = u8 [a0 + 0x1f]\n 49377: a4 = a4 << 0x8\n 49380: a4 = a4 | a5\n 49383: s1 = s1 << 0x10\n 49386: a1 = a1 << 0x18\n 49389: a1 = a1 | s1\n 49392: a1 = a1 | a4\n 49395: a1 = a1 << 0x20\n 49398: a3 = a3 | a1\n 49401: a1 = u8 [a0 + 0x9]\n 49404: a4 = u8 [a0 + 0x8]\n 49407: a5 = u8 [a0 + 0xa]\n 49410: s1 = u8 [a0 + 0xb]\n 49413: a1 = a1 << 0x8\n 49416: a1 = a1 | a4\n 49419: a5 = a5 << 0x10\n 49422: s1 = s1 << 0x18\n 49425: a5 = a5 | s1\n 49428: a1 = a1 | a5\n 49431: a4 = u8 [a0 + 0xd]\n 49434: a5 = u8 [a0 + 0xc]\n 49437: s1 = u8 [a0 + 0xe]\n 49440: a0 = u8 [a0 + 0xf]\n 49443: a4 = a4 << 0x8\n 49446: a4 = a4 | a5\n 49449: s1 = s1 << 0x10\n 49452: a0 = a0 << 0x18\n 49455: a0 = a0 | s1\n 49458: a0 = a0 | a4\n 49461: a0 = a0 << 0x20\n 49464: a0 = a0 | a1\n 49467: a1 = reverse a0\n 49469: a0 = reverse a3\n 49471: a2 = reverse a2\n 49473: a3 = reverse t0\n 49475: a2 = a2 | a3\n 49478: a3 = a0 | a1\n 49481: a3 = a3 | a2\n 49484: a3 = a3 >> 0x20\n 49487: a1 = a1 | a2\n 49490: a1 = a1 << 0x20\n 49493: a1 = a1 | a3\n 49496: jump @791 if a1 == 0\n      : @788 (gas: 1)\n 49499: trap\n      : @789 (gas: 3)\n 49500: a0 = 0\n 49502: a1 = 0\n 49504: ra = 672, jump @0\n      : @790 [@dyn 336] (gas: 7)\n 49511: i32 a1 = a0 + 0\n 49513: a0 = 0x1\n 49516: a2 = 0\n 49518: ecalli 10 // 'seal_return'\n 49520: i32 a0 = a0 + 0\n 49522: ra = 0x2a2\n 49526: jump @0\n      : @791 (gas: 2)\n 49530: i32 a0 = a0 + 0\n 49532: ra = 674, jump @0\n      : @792 [@dyn 337] (gas: 6)\n 49539: i32 a1 = a0 + 0\n 49541: a0 = 0\n 49543: a2 = 0\n 49545: ra = 0x2a4\n 49549: ecalli 10 // 'seal_return'\n 49551: fallthrough\n      : @793 [@dyn 338] (gas: 12)\n 49552: sp = sp + 0xffffffffffffff80\n 49555: u64 [sp + 0x78] = ra\n 49558: u64 [sp + 0x70] = s0\n 49561: s0 = sp + 0x80\n 49565: sp = sp & 0xffffffffffffffe0\n 49568: u64 [sp + 56] = 0\n 49571: u64 [sp + 48] = 0\n 49574: u64 [sp + 40] = 0\n 49577: u64 [sp + 32] = 0\n 49580: i32 a0 = sp + 0x20\n 49583: ecalli 13 // 'value_transferred'\n 49585: fallthrough\n      : @794 (gas: 8)\n 49586: a0 = u64 [sp + 0x30]\n 49589: a1 = u64 [sp + 0x38]\n 49592: a2 = u64 [sp + 0x28]\n 49595: a3 = u64 [sp + 0x20]\n 49598: a1 = a1 | a2\n 49601: a0 = a0 | a3\n 49604: a0 = a0 | a1\n 49607: jump @800 if a0 != 0\n      : @795 (gas: 2)\n 49611: a0 = i32 [0x20164]\n 49616: jump @800 if a0 <=u 35\n      : @796 (gas: 13)\n 49621: i32 a0 = sp + 0x40\n 49624: a1 = 0x4\n 49627: ecalli 3 // 'call_data_load'\n 49629: a1 = u64 [sp + 0x40]\n 49632: a0 = u64 [sp + 0x48]\n 49635: a2 = u64 [sp + 0x50]\n 49638: a3 = u64 [sp + 0x58]\n 49641: u64 [sp + 0x18] = a3\n 49644: u64 [sp + 0x10] = a2\n 49647: u64 [sp + 0x8] = a0\n 49650: a0 = sp\n 49652: u64 [sp] = a1\n 49654: ra = 678, jump @1289\n      : @797 [@dyn 339] (gas: 3)\n 49661: a0 = 0x40\n 49664: a1 = 0x20\n 49667: ra = 680, jump @0\n      : @798 [@dyn 340] (gas: 100)\n 49674: a1 = u8 [a0 + 0x11]\n 49677: a2 = u8 [a0 + 0x10]\n 49680: a3 = u8 [a0 + 0x12]\n 49683: a4 = u8 [a0 + 0x13]\n 49686: a1 = a1 << 0x8\n 49689: a1 = a1 | a2\n 49692: a3 = a3 << 0x10\n 49695: a4 = a4 << 0x18\n 49698: a3 = a3 | a4\n 49701: a1 = a1 | a3\n 49704: a2 = u8 [a0 + 0x15]\n 49707: a3 = u8 [a0 + 0x14]\n 49710: a4 = u8 [a0 + 0x16]\n 49713: a5 = u8 [a0 + 0x17]\n 49716: a2 = a2 << 0x8\n 49719: a2 = a2 | a3\n 49722: a4 = a4 << 0x10\n 49725: a5 = a5 << 0x18\n 49728: a4 = a4 | a5\n 49731: a2 = a2 | a4\n 49734: a2 = a2 << 0x20\n 49737: t0 = a2 | a1\n 49740: a2 = u8 [a0 + 0x1]\n 49743: a3 = u8 [a0]\n 49745: a4 = u8 [a0 + 0x2]\n 49748: a5 = u8 [a0 + 0x3]\n 49751: a2 = a2 << 0x8\n 49754: a2 = a2 | a3\n 49757: a4 = a4 << 0x10\n 49760: a5 = a5 << 0x18\n 49763: a4 = a4 | a5\n 49766: a2 = a2 | a4\n 49769: a3 = u8 [a0 + 0x5]\n 49772: a4 = u8 [a0 + 0x4]\n 49775: a5 = u8 [a0 + 0x6]\n 49778: a1 = u8 [a0 + 0x7]\n 49781: a3 = a3 << 0x8\n 49784: a3 = a3 | a4\n 49787: a5 = a5 << 0x10\n 49790: a1 = a1 << 0x18\n 49793: a1 = a1 | a5\n 49796: a1 = a1 | a3\n 49799: a1 = a1 << 0x20\n 49802: t1 = a1 | a2\n 49805: a1 = u8 [a0 + 0x19]\n 49808: a3 = u8 [a0 + 0x18]\n 49811: a4 = u8 [a0 + 0x1a]\n 49814: a5 = u8 [a0 + 0x1b]\n 49817: a1 = a1 << 0x8\n 49820: a1 = a1 | a3\n 49823: a4 = a4 << 0x10\n 49826: a5 = a5 << 0x18\n 49829: a4 = a4 | a5\n 49832: a1 = a1 | a4\n 49835: a3 = u8 [a0 + 0x1d]\n 49838: a4 = u8 [a0 + 0x1c]\n 49841: a5 = u8 [a0 + 0x1e]\n 49844: a2 = u8 [a0 + 0x1f]\n 49847: a3 = a3 << 0x8\n 49850: a3 = a3 | a4\n 49853: a5 = a5 << 0x10\n 49856: a2 = a2 << 0x18\n 49859: a2 = a2 | a5\n 49862: a2 = a2 | a3\n 49865: a2 = a2 << 0x20\n 49868: a3 = a2 | a1\n 49871: a1 = u8 [a0 + 0x9]\n 49874: a2 = u8 [a0 + 0x8]\n 49877: a4 = u8 [a0 + 0xa]\n 49880: a5 = u8 [a0 + 0xb]\n 49883: a1 = a1 << 0x8\n 49886: a1 = a1 | a2\n 49889: a4 = a4 << 0x10\n 49892: a5 = a5 << 0x18\n 49895: a4 = a4 | a5\n 49898: a1 = a1 | a4\n 49901: a2 = u8 [a0 + 0xd]\n 49904: a4 = u8 [a0 + 0xc]\n 49907: a5 = u8 [a0 + 0xe]\n 49910: a0 = u8 [a0 + 0xf]\n 49913: a2 = a2 << 0x8\n 49916: a2 = a2 | a4\n 49919: a5 = a5 << 0x10\n 49922: a0 = a0 << 0x18\n 49925: a0 = a0 | a5\n 49928: a0 = a0 | a2\n 49931: a0 = a0 << 0x20\n 49934: a0 = a0 | a1\n 49937: a1 = reverse a0\n 49939: a0 = reverse a3\n 49941: a2 = reverse t1\n 49943: a3 = reverse t0\n 49945: a2 = a2 | a3\n 49948: a3 = a0 | a1\n 49951: a3 = a3 | a2\n 49954: a3 = a3 >> 0x20\n 49957: a1 = a1 | a2\n 49960: a1 = a1 << 0x20\n 49963: a1 = a1 | a3\n 49966: jump @802 if a1 == 0\n      : @799 (gas: 1)\n 49969: trap\n      : @800 (gas: 3)\n 49970: a0 = 0\n 49972: a1 = 0\n 49974: ra = 682, jump @0\n      : @801 [@dyn 341] (gas: 7)\n 49981: i32 a1 = a0 + 0\n 49983: a0 = 0x1\n 49986: a2 = 0\n 49988: ecalli 10 // 'seal_return'\n 49990: i32 a0 = a0 + 0\n 49992: ra = 0x2ac\n 49996: jump @0\n      : @802 (gas: 2)\n 50000: i32 a0 = a0 + 0\n 50002: ra = 684, jump @0\n      : @803 [@dyn 342] (gas: 6)\n 50009: i32 a1 = a0 + 0\n 50011: a0 = 0\n 50013: a2 = 0\n 50015: ra = 0x2ae\n 50019: ecalli 10 // 'seal_return'\n 50021: fallthrough\n      : @804 [@dyn 343] (gas: 24)\n 50022: sp = sp + 0xffffffffffffff40\n 50026: u64 [sp + 0xb8] = ra\n 50030: u64 [sp + 0xb0] = s0\n 50034: u64 [sp + 0xa8] = s1\n 50038: s0 = sp + 0xc0\n 50042: sp = sp & 0xffffffffffffffe0\n 50045: a1 = u64 [a0 + 0x18]\n 50048: u64 [sp + 0x38] = a1\n 50051: a1 = u64 [a0 + 0x10]\n 50054: u64 [sp + 0x30] = a1\n 50057: a1 = u64 [a0 + 0x8]\n 50060: u64 [sp + 0x28] = a1\n 50063: a0 = u64 [a0]\n 50065: u64 [sp + 0x20] = a0\n 50068: i32 a0 = sp + 0x60\n 50071: ecalli 5 // 'caller'\n 50073: a0 = u64 [sp + 0x68]\n 50076: u64 [sp + 0x18] = a0\n 50079: a0 = u64 [sp + 0x60]\n 50082: u64 [sp + 0x10] = a0\n 50085: s1 = u32 [sp + 0x70]\n 50088: i32 a0 = sp + 0x80\n 50092: ecalli 0 // 'address'\n 50093: fallthrough\n      : @805 (gas: 11)\n 50094: a0 = u32 [sp + 0x90]\n 50098: a1 = u64 [sp + 0x80]\n 50102: a2 = u64 [sp + 0x88]\n 50106: a0 = a0 ^ s1\n 50109: a3 = u64 [sp + 0x10]\n 50112: a1 = a1 ^ a3\n 50115: a0 = a0 | a1\n 50118: a1 = u64 [sp + 0x18]\n 50121: a1 = a1 ^ a2\n 50124: a0 = a0 | a1\n 50127: jump @808 if a0 != 0\n      : @806 (gas: 10)\n 50130: a0 = u64 [sp + 0x20]\n 50133: u64 [sp + 0x40] = a0\n 50136: a0 = u64 [sp + 0x28]\n 50139: u64 [sp + 0x48] = a0\n 50142: a0 = u64 [sp + 0x30]\n 50145: u64 [sp + 0x50] = a0\n 50148: a0 = sp + 0x40\n 50151: a1 = u64 [sp + 0x38]\n 50154: u64 [sp + 0x58] = a1\n 50157: ra = 688, jump @810\n      : @807 [@dyn 344] (gas: 6)\n 50162: sp = s0 + 0xffffffffffffff40\n 50166: ra = u64 [sp + 0xb8]\n 50170: s0 = u64 [sp + 0xb0]\n 50174: s1 = u64 [sp + 0xa8]\n 50178: sp = sp + 0xc0\n 50182: ret\n      : @808 (gas: 3)\n 50184: a0 = 0\n 50186: a1 = 0\n 50188: ra = 690, jump @0\n      : @809 [@dyn 345] (gas: 6)\n 50195: i32 a1 = a0 + 0\n 50197: a0 = 0x1\n 50200: a2 = 0\n 50202: ra = 0x2b4\n 50206: ecalli 10 // 'seal_return'\n 50208: fallthrough\n      : @810 [@dyn 346] (gas: 19)\n 50209: sp = sp + 0xffffffffffffff60\n 50213: u64 [sp + 0x98] = ra\n 50217: u64 [sp + 0x90] = s0\n 50221: u64 [sp + 0x88] = s1\n 50225: s0 = sp + 0xa0\n 50229: sp = sp & 0xffffffffffffffe0\n 50232: a1 = u64 [a0 + 0x18]\n 50235: u64 [sp + 0x18] = a1\n 50238: a1 = u64 [a0 + 0x10]\n 50241: a2 = u64 [a0]\n 50243: u64 [sp] = a2\n 50245: s1 = u64 [a0 + 0x8]\n 50248: u64 [sp + 0x10] = a1\n 50251: a0 = a1 << 0x20\n 50254: a0 = a0 >> 0x20\n 50257: u64 [sp + 0x8] = a0\n 50260: a1 = 0x20\n 50263: a0 = 0\n 50265: ra = 694, jump @0\n      : @811 [@dyn 347] (gas: 60)\n 50272: a1 = u64 [sp + 0x8]\n 50275: a1 = reverse a1\n 50277: a3 = u64 [sp]\n 50279: u64 [sp + 0x8] = s1\n 50282: a2 = reverse s1\n 50284: s1 = a3\n 50286: a3 = reverse a3\n 50288: u8 [a0 + 0x18] = a3\n 50291: u8 [a0 + 0x10] = a2\n 50294: u8 [a0 + 11] = 0\n 50297: u8 [a0 + 10] = 0\n 50300: u8 [a0 + 9] = 0\n 50303: u8 [a0 + 7] = 0\n 50306: u8 [a0 + 6] = 0\n 50309: u8 [a0 + 5] = 0\n 50312: u8 [a0 + 4] = 0\n 50315: u8 [a0 + 3] = 0\n 50318: u8 [a0 + 2] = 0\n 50321: u8 [a0 + 1] = 0\n 50324: u8 [a0 + 0] = 0\n 50326: a4 = a3 >> 0x38\n 50329: u8 [a0 + 0x1f] = a4\n 50332: a4 = a3 >> 0x30\n 50335: u8 [a0 + 0x1e] = a4\n 50338: a4 = a3 >> 0x28\n 50341: u8 [a0 + 0x1d] = a4\n 50344: a4 = a3 >> 0x20\n 50347: u8 [a0 + 0x1c] = a4\n 50350: a4 = a3 >> 0x18\n 50353: u8 [a0 + 0x1b] = a4\n 50356: a4 = a3 >> 0x10\n 50359: u8 [a0 + 0x1a] = a4\n 50362: a3 = a3 >> 0x8\n 50365: u8 [a0 + 0x19] = a3\n 50368: a3 = a2 >> 0x38\n 50371: u8 [a0 + 0x17] = a3\n 50374: a3 = a2 >> 0x30\n 50377: u8 [a0 + 0x16] = a3\n 50380: a3 = a2 >> 0x28\n 50383: u8 [a0 + 0x15] = a3\n 50386: a3 = a2 >> 0x20\n 50389: u8 [a0 + 0x14] = a3\n 50392: a3 = a2 >> 0x18\n 50395: u8 [a0 + 0x13] = a3\n 50398: a3 = a2 >> 0x10\n 50401: u8 [a0 + 0x12] = a3\n 50404: a2 = a2 >> 0x8\n 50407: u8 [a0 + 0x11] = a2\n 50410: u8 [a0 + 0x8] = a1\n 50413: a2 = a1 >> 0x38\n 50416: u8 [a0 + 0xf] = a2\n 50419: a2 = a1 >> 0x30\n 50422: u8 [a0 + 0xe] = a2\n 50425: a2 = a1 >> 0x28\n 50428: u8 [a0 + 0xd] = a2\n 50431: a1 = a1 >> 0x20\n 50434: u8 [a0 + 0xc] = a1\n 50437: a0 = 0x20\n 50440: a1 = 0x20\n 50443: ra = 696, jump @0\n      : @812 [@dyn 348] (gas: 35)\n 50450: u8 [a0 + 31] = 0x2\n 50454: u8 [a0 + 30] = 0\n 50457: u8 [a0 + 29] = 0\n 50460: u8 [a0 + 28] = 0\n 50463: u8 [a0 + 27] = 0\n 50466: u8 [a0 + 26] = 0\n 50469: u8 [a0 + 25] = 0\n 50472: u8 [a0 + 24] = 0\n 50475: u8 [a0 + 23] = 0\n 50478: u8 [a0 + 22] = 0\n 50481: u8 [a0 + 21] = 0\n 50484: u8 [a0 + 20] = 0\n 50487: u8 [a0 + 19] = 0\n 50490: u8 [a0 + 18] = 0\n 50493: u8 [a0 + 17] = 0\n 50496: u8 [a0 + 16] = 0\n 50499: u8 [a0 + 15] = 0\n 50502: u8 [a0 + 14] = 0\n 50505: u8 [a0 + 13] = 0\n 50508: u8 [a0 + 12] = 0\n 50511: u8 [a0 + 11] = 0\n 50514: u8 [a0 + 10] = 0\n 50517: u8 [a0 + 9] = 0\n 50520: u8 [a0 + 8] = 0\n 50523: u8 [a0 + 7] = 0\n 50526: u8 [a0 + 6] = 0\n 50529: u8 [a0 + 5] = 0\n 50532: u8 [a0 + 4] = 0\n 50535: u8 [a0 + 3] = 0\n 50538: u8 [a0 + 2] = 0\n 50541: u8 [a0 + 1] = 0\n 50544: u8 [a0 + 0] = 0\n 50546: a1 = 0x40\n 50549: a0 = 0\n 50551: ra = 698, jump @0\n      : @813 [@dyn 349] (gas: 28)\n 50558: i32 a0 = a0 + 0\n 50560: i32 a2 = sp + 0x60\n 50563: a1 = 0x40\n 50566: ecalli 8 // 'hash_keccak_256'\n 50568: a0 = u64 [sp + 0x78]\n 50571: a1 = u64 [sp + 0x70]\n 50574: a2 = u64 [sp + 0x68]\n 50577: a3 = u64 [sp + 0x60]\n 50580: a0 = reverse a0\n 50582: a1 = reverse a1\n 50584: a2 = reverse a2\n 50586: a3 = reverse a3\n 50588: u64 [sp + 0x58] = a3\n 50591: u64 [sp + 0x50] = a2\n 50594: u64 [sp + 0x48] = a1\n 50597: u64 [sp + 0x40] = a0\n 50600: u64 [sp + 120] = 0\n 50603: u64 [sp + 112] = 0\n 50606: u64 [sp + 104] = 0\n 50609: u64 [sp + 96] = 0\n 50612: u32 [sp + 128] = 0x20\n 50617: i32 a1 = sp + 0x40\n 50620: i32 a3 = sp + 0x60\n 50623: i32 a4 = sp + 0x80\n 50627: a2 = 0xffffffffffffffff\n 50630: a0 = 0\n 50632: ecalli 7 // 'get_storage'\n 50634: fallthrough\n      : @814 (gas: 2)\n 50635: a0 = u8 [sp + 0x60]\n 50638: jump @817 if a0 == 0\n      : @815 (gas: 9)\n 50641: u64 [sp + 0x20] = s1\n 50644: a0 = u64 [sp + 0x8]\n 50647: u64 [sp + 0x28] = a0\n 50650: a0 = u64 [sp + 0x10]\n 50653: u64 [sp + 0x30] = a0\n 50656: a0 = sp + 0x20\n 50659: a1 = u64 [sp + 0x18]\n 50662: u64 [sp + 0x38] = a1\n 50665: ra = 700, jump @827\n      : @816 [@dyn 350] (gas: 6)\n 50671: sp = s0 + 0xffffffffffffff60\n 50675: ra = u64 [sp + 0x98]\n 50679: s0 = u64 [sp + 0x90]\n 50683: s1 = u64 [sp + 0x88]\n 50687: sp = sp + 0xa0\n 50691: ret\n      : @817 (gas: 2)\n 50693: a1 = 0\n 50695: ra = 702, jump @0\n      : @818 [@dyn 351] (gas: 6)\n 50702: i32 a1 = a0 + 0\n 50704: a0 = 0x1\n 50707: a2 = 0\n 50709: ra = 0x2c0\n 50713: ecalli 10 // 'seal_return'\n 50715: fallthrough\n      : @819 [@dyn 352] (gas: 9)\n 50716: a2 = u64 [a1 + 0x18]\n 50719: a3 = u64 [a1 + 0x10]\n 50722: a4 = u64 [a1 + 0x8]\n 50725: a1 = u64 [a1]\n 50727: u64 [a0 + 0x18] = a2\n 50730: u64 [a0 + 0x10] = a3\n 50733: u64 [a0 + 0x8] = a4\n 50736: u64 [a0] = a1\n 50738: ret\n      : @820 (gas: 8)\n 50740: a3 = u64 [sp + 0x1d8]\n 50744: a2 = u64 [sp + 0x1d0]\n 50748: a1 = u64 [sp + 0x1c8]\n 50752: a0 = u64 [sp + 0x1c0]\n 50756: a4 = a1 | a3\n 50759: a5 = a0 | a2\n 50762: a4 = a4 | a5\n 50765: jump @823 if a4 == 0\n      : @821 (gas: 27)\n 50769: a4 = a0 | a1\n 50772: a4 = a4 <u 0x1\n 50775: a5 = a2 <u a4\n 50778: a3 = a3 - a5\n 50781: u64 [sp + 0x48] = a3\n 50784: a4 = a2 - a4\n 50787: u64 [sp + 0x50] = a4\n 50790: a2 = a0 <u 0x1\n 50793: a1 = a1 - a2\n 50796: u64 [sp + 0x58] = a1\n 50799: a0 = a0 + 0xffffffffffffffff\n 50802: u64 [sp + 0x60] = a0\n 50805: u64 [sp + 0x120] = s1\n 50809: u64 [sp + 0x100] = a0\n 50813: a0 = u64 [sp + 0x78]\n 50816: u64 [sp + 0x128] = a0\n 50820: u64 [sp + 0x108] = a1\n 50824: a0 = u64 [sp + 0x70]\n 50827: u64 [sp + 0x130] = a0\n 50831: a0 = u64 [sp + 0x68]\n 50834: u64 [sp + 0x138] = a0\n 50838: u64 [sp + 0x110] = a4\n 50842: a0 = sp + 0x140\n 50846: a1 = sp + 0x120\n 50850: a2 = sp + 0x100\n 50854: u64 [sp + 0x118] = a3\n 50858: ra = 706, jump @270\n      : @822 [@dyn 353] (gas: 274)\n 50865: a0 = u64 [sp + 0x178]\n 50869: u64 [sp + 0x18] = a0\n 50872: a0 = u64 [sp + 0x170]\n 50876: u64 [sp + 0x10] = a0\n 50879: u64 [sp + 0x40] = s1\n 50882: s1 = u64 [sp + 0x168]\n 50886: a0 = u64 [sp + 0x160]\n 50890: u64 [sp + 0x8] = a0\n 50893: a3 = u64 [sp + 0x158]\n 50897: u64 [sp + 0x20] = a3\n 50900: a2 = u64 [sp + 0x150]\n 50904: u64 [sp + 0x28] = a2\n 50907: a1 = u64 [sp + 0x148]\n 50911: u64 [sp + 0x30] = a1\n 50914: a0 = u64 [sp + 0x140]\n 50918: u64 [sp + 0x38] = a0\n 50921: u64 [sp + 0x1b8] = a3\n 50925: u64 [sp + 0x1b0] = a2\n 50929: u64 [sp + 0x1a8] = a1\n 50933: u64 [sp + 0x1a0] = a0\n 50937: u64 [sp + 472] = 0\n 50941: u64 [sp + 464] = 0\n 50945: u64 [sp + 456] = 0\n 50949: u64 [sp + 448] = 0\n 50953: u32 [sp + 384] = 0x20\n 50958: i32 a1 = sp + 0x1a0\n 50962: i32 a3 = sp + 0x1c0\n 50966: i32 a4 = sp + 0x180\n 50970: a2 = 0xffffffffffffffff\n 50973: a0 = 0\n 50975: ecalli 7 // 'get_storage'\n 50977: a4 = u64 [sp + 0x8]\n 50980: a0 = a4 >> 0x3d\n 50983: a1 = s1 << 0x3\n 50986: a1 = a1 | a0\n 50989: s1 = s1 >> 0x3d\n 50992: a2 = u64 [sp + 0x10]\n 50995: a0 = a2 << 0x3\n 50998: s1 = s1 | a0\n 51001: a0 = a2 >> 0x3d\n 51004: a2 = u64 [sp + 0x18]\n 51007: a2 = a2 << 0x3\n 51010: a2 = a2 | a0\n 51013: a0 = a4 << 0x3\n 51016: a3 = a1 >u 0\n 51018: a0 = a0 <u 0x100\n 51022: t0 = a0 ^ 0x1\n 51025: t0 = a3 if a1 != 0\n 51028: a1 = a2 >u 0\n 51030: a3 = s1 >u 0\n 51032: a3 = a1 if a2 != 0\n 51035: a0 = u64 [sp + 0x1d8]\n 51039: u64 [sp + 0x18] = a0\n 51042: a2 = a2 | s1\n 51045: a0 = u64 [sp + 0x1d0]\n 51049: u64 [sp + 0x10] = a0\n 51052: t0 = a3 if a2 != 0\n 51055: t2 = u64 [sp + 0x1c8]\n 51059: ra = u64 [sp + 0x1c0]\n 51063: u8 [sp + 243] = 0xff\n 51069: u8 [sp + 242] = 0xff\n 51075: u8 [sp + 241] = 0xff\n 51081: u8 [sp + 240] = 0xff\n 51087: u8 [sp + 239] = 0xff\n 51093: u8 [sp + 238] = 0xff\n 51099: u8 [sp + 237] = 0xff\n 51105: u8 [sp + 236] = 0xff\n 51111: u8 [sp + 235] = 0xff\n 51117: u8 [sp + 234] = 0xff\n 51123: u8 [sp + 233] = 0xff\n 51129: u8 [sp + 232] = 0xff\n 51135: u8 [sp + 231] = 0xff\n 51141: u8 [sp + 230] = 0xff\n 51147: u8 [sp + 229] = 0xff\n 51153: u8 [sp + 228] = 0xff\n 51159: u8 [sp + 227] = 0xff\n 51165: u8 [sp + 226] = 0xff\n 51171: u8 [sp + 225] = 0xff\n 51177: u8 [sp + 224] = 0xff\n 51183: a1 = a4 & 0x1f\n 51186: a5 = sp + 0xe0\n 51190: a5 = a5 - a1\n 51193: u8 [sp + 255] = 0\n 51197: u8 [sp + 254] = 0\n 51201: u8 [sp + 253] = 0\n 51205: u8 [sp + 252] = 0\n 51209: u8 [sp + 251] = 0\n 51213: u8 [sp + 250] = 0\n 51217: u8 [sp + 249] = 0\n 51221: u8 [sp + 248] = 0\n 51225: u8 [sp + 247] = 0\n 51229: u8 [sp + 246] = 0\n 51233: u8 [sp + 245] = 0\n 51237: u8 [sp + 244] = 0\n 51241: u8 [sp + 223] = 0\n 51245: u8 [sp + 222] = 0\n 51249: u8 [sp + 221] = 0\n 51253: u8 [sp + 220] = 0\n 51257: u8 [sp + 219] = 0\n 51261: u8 [sp + 218] = 0\n 51265: u8 [sp + 217] = 0\n 51269: u8 [sp + 216] = 0\n 51273: u8 [sp + 215] = 0\n 51277: u8 [sp + 214] = 0\n 51281: u8 [sp + 213] = 0\n 51285: u8 [sp + 212] = 0\n 51289: u8 [sp + 211] = 0\n 51293: u8 [sp + 210] = 0\n 51297: u8 [sp + 209] = 0\n 51301: u8 [sp + 208] = 0\n 51305: u8 [sp + 207] = 0\n 51309: u8 [sp + 206] = 0\n 51313: u8 [sp + 205] = 0\n 51317: u8 [sp + 204] = 0\n 51321: u8 [sp + 203] = 0\n 51325: u8 [sp + 202] = 0\n 51329: u8 [sp + 201] = 0\n 51333: u8 [sp + 200] = 0\n 51337: u8 [sp + 199] = 0\n 51341: u8 [sp + 198] = 0\n 51345: u8 [sp + 197] = 0\n 51349: u8 [sp + 196] = 0\n 51353: u8 [sp + 195] = 0\n 51357: u8 [sp + 194] = 0\n 51361: u8 [sp + 193] = 0\n 51365: u8 [sp + 192] = 0\n 51369: a1 = u8 [a5 + 0x19]\n 51372: a2 = u8 [a5 + 0x18]\n 51375: s1 = u8 [a5 + 0x1a]\n 51378: a3 = u8 [a5 + 0x1b]\n 51381: a1 = a1 << 0x8\n 51384: a1 = a1 | a2\n 51387: s1 = s1 << 0x10\n 51390: a3 = a3 << 0x18\n 51393: a3 = a3 | s1\n 51396: a1 = a1 | a3\n 51399: a2 = u8 [a5 + 0x1d]\n 51402: a3 = u8 [a5 + 0x1c]\n 51405: s1 = u8 [a5 + 0x1e]\n 51408: a4 = u8 [a5 + 0x1f]\n 51411: a2 = a2 << 0x8\n 51414: a2 = a2 | a3\n 51417: s1 = s1 << 0x10\n 51420: a4 = a4 << 0x18\n 51423: a4 = a4 | s1\n 51426: a2 = a2 | a4\n 51429: a2 = a2 << 0x20\n 51432: s1 = a2 | a1\n 51435: a1 = u8 [a5 + 0x11]\n 51438: a2 = u8 [a5 + 0x10]\n 51441: a3 = u8 [a5 + 0x12]\n 51444: a4 = u8 [a5 + 0x13]\n 51447: a1 = a1 << 0x8\n 51450: a1 = a1 | a2\n 51453: a3 = a3 << 0x10\n 51456: a4 = a4 << 0x18\n 51459: a3 = a3 | a4\n 51462: a1 = a1 | a3\n 51465: a2 = u8 [a5 + 0x15]\n 51468: a3 = u8 [a5 + 0x14]\n 51471: a4 = u8 [a5 + 0x16]\n 51474: a0 = u8 [a5 + 0x17]\n 51477: a2 = a2 << 0x8\n 51480: a2 = a2 | a3\n 51483: a4 = a4 << 0x10\n 51486: a0 = a0 << 0x18\n 51489: a0 = a0 | a4\n 51492: a0 = a0 | a2\n 51495: a0 = a0 << 0x20\n 51498: t1 = a0 | a1\n 51501: a0 = u8 [a5 + 0x9]\n 51504: a2 = u8 [a5 + 0x8]\n 51507: a3 = u8 [a5 + 0xa]\n 51510: a4 = u8 [a5 + 0xb]\n 51513: a0 = a0 << 0x8\n 51516: a0 = a0 | a2\n 51519: a3 = a3 << 0x10\n 51522: a4 = a4 << 0x18\n 51525: a3 = a3 | a4\n 51528: a1 = a3 | a0\n 51531: a2 = u8 [a5 + 0xd]\n 51534: a3 = u8 [a5 + 0xc]\n 51537: a4 = u8 [a5 + 0xe]\n 51540: a0 = u8 [a5 + 0xf]\n 51543: a2 = a2 << 0x8\n 51546: a2 = a2 | a3\n 51549: a4 = a4 << 0x10\n 51552: a0 = a0 << 0x18\n 51555: a0 = a0 | a4\n 51558: a0 = a0 | a2\n 51561: a0 = a0 << 0x20\n 51564: a2 = a0 | a1\n 51567: a0 = u8 [a5 + 0x1]\n 51570: a1 = u8 [a5]\n 51572: a3 = u8 [a5 + 0x2]\n 51575: a4 = u8 [a5 + 0x3]\n 51578: a0 = a0 << 0x8\n 51581: a0 = a0 | a1\n 51584: a3 = a3 << 0x10\n 51587: a4 = a4 << 0x18\n 51590: a3 = a3 | a4\n 51593: a0 = a0 | a3\n 51596: a1 = u8 [a5 + 0x5]\n 51599: a3 = u8 [a5 + 0x4]\n 51602: a4 = u8 [a5 + 0x6]\n 51605: a5 = u8 [a5 + 0x7]\n 51608: a1 = a1 << 0x8\n 51611: a1 = a1 | a3\n 51614: a4 = a4 << 0x10\n 51617: a5 = a5 << 0x18\n 51620: a4 = a4 | a5\n 51623: a1 = a1 | a4\n 51626: a1 = a1 << 0x20\n 51629: a0 = a0 | a1\n 51632: a0 = a0 ^ 0xffffffffffffffff\n 51635: a1 = a2 ^ 0xffffffffffffffff\n 51638: a2 = t1 ^ 0xffffffffffffffff\n 51641: a3 = s1 ^ 0xffffffffffffffff\n 51644: a3 = 0xffffffffffffffff if t0 != 0\n 51647: a2 = 0xffffffffffffffff if t0 != 0\n 51650: a1 = 0xffffffffffffffff if t0 != 0\n 51653: a0 = 0xffffffffffffffff if t0 != 0\n 51656: a0 = ra & a0\n 51659: a1 = t2 & a1\n 51662: a4 = u64 [sp + 0x10]\n 51665: a2 = a2 & a4\n 51668: a4 = u64 [sp + 0x18]\n 51671: a3 = a3 & a4\n 51674: a4 = u64 [sp + 0x20]\n 51677: u64 [sp + 0x1b8] = a4\n 51681: a4 = u64 [sp + 0x28]\n 51684: u64 [sp + 0x1b0] = a4\n 51688: a4 = u64 [sp + 0x30]\n 51691: u64 [sp + 0x1a8] = a4\n 51695: a4 = u64 [sp + 0x38]\n 51698: u64 [sp + 0x1a0] = a4\n 51702: u64 [sp + 0x1d8] = a3\n 51706: u64 [sp + 0x1d0] = a2\n 51710: u64 [sp + 0x1c8] = a1\n 51714: u64 [sp + 0x1c0] = a0\n 51718: i32 a1 = sp + 0x1a0\n 51722: i32 a3 = sp + 0x1c0\n 51726: a2 = 0xffffffffffffffff\n 51729: a4 = 0x20\n 51732: a0 = 0\n 51734: ecalli 12 // 'set_storage'\n 51736: a0 = u64 [sp + 0x68]\n 51739: u64 [sp + 0x1b8] = a0\n 51743: a0 = u64 [sp + 0x70]\n 51746: u64 [sp + 0x1b0] = a0\n 51750: a0 = u64 [sp + 0x78]\n 51753: u64 [sp + 0x1a8] = a0\n 51757: a0 = u64 [sp + 0x40]\n 51760: u64 [sp + 0x1a0] = a0\n 51764: a0 = u64 [sp + 0x48]\n 51767: u64 [sp + 0x1d8] = a0\n 51771: a0 = u64 [sp + 0x50]\n 51774: u64 [sp + 0x1d0] = a0\n 51778: a0 = u64 [sp + 0x58]\n 51781: u64 [sp + 0x1c8] = a0\n 51785: a0 = u64 [sp + 0x60]\n 51788: u64 [sp + 0x1c0] = a0\n 51792: i32 a1 = sp + 0x1a0\n 51796: i32 a3 = sp + 0x1c0\n 51800: a2 = 0xffffffffffffffff\n 51803: a4 = 0x20\n 51806: a0 = 0\n 51808: ecalli 12 // 'set_storage'\n 51810: sp = s0 + 0xfffffffffffffe00\n 51814: ra = u64 [sp + 0x1f8]\n 51818: s0 = u64 [sp + 0x1f0]\n 51822: s1 = u64 [sp + 0x1e8]\n 51826: sp = sp + 0x200\n 51830: ret\n      : @823 (gas: 8)\n 51832: u64 [sp + 176] = 0\n 51836: u64 [sp + 168] = 0\n 51840: u64 [sp + 160] = 0\n 51844: a0 = 0x4e487b7100000000\n 51854: a1 = sp + 0xa0\n 51858: u64 [sp + 0xb8] = a0\n 51862: a0 = 0\n 51864: ra = 708, jump @23\n      : @824 [@dyn 354] (gas: 7)\n 51871: u64 [sp + 152] = 0\n 51875: u64 [sp + 144] = 0\n 51879: u64 [sp + 128] = 0x31\n 51884: a0 = 0x4\n 51887: a1 = sp + 0x80\n 51891: u64 [sp + 136] = 0\n 51895: ra = 710, jump @23\n      : @825 [@dyn 355] (gas: 3)\n 51902: a1 = 0x24\n 51905: a0 = 0\n 51907: ra = 712, jump @0\n      : @826 [@dyn 356] (gas: 6)\n 51914: i32 a1 = a0 + 0\n 51916: a0 = 0x1\n 51919: a2 = 0x24\n 51922: ra = 0x2ca\n 51926: ecalli 10 // 'seal_return'\n 51928: fallthrough\n      : @827 [@dyn 357] (gas: 16)\n 51929: sp = sp + 0xfffffffffffffb80\n 51933: u64 [sp + 0x478] = ra\n 51937: u64 [sp + 0x470] = s0\n 51941: u64 [sp + 0x468] = s1\n 51945: s0 = sp + 0x480\n 51949: sp = sp & 0xffffffffffffffe0\n 51952: a1 = u64 [a0]\n 51954: u64 [sp + 0x60] = a1\n 51957: a1 = u64 [a0 + 0x8]\n 51960: u64 [sp + 0x58] = a1\n 51963: s1 = u32 [a0 + 0x10]\n 51966: a0 = 0xffffffff\n 51976: u64 [sp + 0x50] = a0\n 51979: a1 = 0x20\n 51982: a0 = 0\n 51984: ra = 716, jump @0\n      : @828 [@dyn 358] (gas: 62)\n 51991: u64 [sp + 0x30] = s1\n 51994: a2 = reverse s1\n 51996: a1 = u64 [sp + 0x58]\n 51999: a4 = reverse a1\n 52001: a1 = u64 [sp + 0x60]\n 52004: a3 = reverse a1\n 52006: u8 [a0 + 0x18] = a3\n 52009: u8 [a0 + 0x10] = a4\n 52012: u8 [a0 + 11] = 0\n 52015: u8 [a0 + 10] = 0\n 52018: u8 [a0 + 9] = 0\n 52021: u8 [a0 + 0x8] = a2\n 52024: u8 [a0 + 7] = 0\n 52027: u8 [a0 + 6] = 0\n 52030: u8 [a0 + 5] = 0\n 52033: u8 [a0 + 4] = 0\n 52036: u8 [a0 + 3] = 0\n 52039: u8 [a0 + 2] = 0\n 52042: u8 [a0 + 1] = 0\n 52045: u8 [a0 + 0] = 0\n 52047: a1 = a3 >> 0x38\n 52050: u8 [a0 + 0x1f] = a1\n 52053: a1 = a3 >> 0x30\n 52056: u8 [a0 + 0x1e] = a1\n 52059: a1 = a3 >> 0x28\n 52062: u8 [a0 + 0x1d] = a1\n 52065: a1 = a3 >> 0x20\n 52068: u8 [a0 + 0x1c] = a1\n 52071: a1 = a3 >> 0x18\n 52074: u8 [a0 + 0x1b] = a1\n 52077: a1 = a3 >> 0x10\n 52080: u8 [a0 + 0x1a] = a1\n 52083: u64 [sp + 0x20] = a3\n 52086: a1 = a3 >> 0x8\n 52089: u8 [a0 + 0x19] = a1\n 52092: a1 = a4 >> 0x38\n 52095: u8 [a0 + 0x17] = a1\n 52098: a1 = a4 >> 0x30\n 52101: u8 [a0 + 0x16] = a1\n 52104: a1 = a4 >> 0x28\n 52107: u8 [a0 + 0x15] = a1\n 52110: a1 = a4 >> 0x20\n 52113: u8 [a0 + 0x14] = a1\n 52116: a1 = a4 >> 0x18\n 52119: u8 [a0 + 0x13] = a1\n 52122: a1 = a4 >> 0x10\n 52125: u8 [a0 + 0x12] = a1\n 52128: u64 [sp + 0x18] = a4\n 52131: a1 = a4 >> 0x8\n 52134: u8 [a0 + 0x11] = a1\n 52137: a1 = a2 >> 0x38\n 52140: u8 [a0 + 0xf] = a1\n 52143: a1 = a2 >> 0x30\n 52146: u8 [a0 + 0xe] = a1\n 52149: a1 = a2 >> 0x28\n 52152: u8 [a0 + 0xd] = a1\n 52155: u64 [sp + 0x28] = a2\n 52158: a1 = a2 >> 0x20\n 52161: u8 [a0 + 0xc] = a1\n 52164: a0 = 0x20\n 52167: a1 = 0x20\n 52170: ra = 718, jump @0\n      : @829 [@dyn 359] (gas: 35)\n 52177: u8 [a0 + 31] = 0x2\n 52181: u8 [a0 + 30] = 0\n 52184: u8 [a0 + 29] = 0\n 52187: u8 [a0 + 28] = 0\n 52190: u8 [a0 + 27] = 0\n 52193: u8 [a0 + 26] = 0\n 52196: u8 [a0 + 25] = 0\n 52199: u8 [a0 + 24] = 0\n 52202: u8 [a0 + 23] = 0\n 52205: u8 [a0 + 22] = 0\n 52208: u8 [a0 + 21] = 0\n 52211: u8 [a0 + 20] = 0\n 52214: u8 [a0 + 19] = 0\n 52217: u8 [a0 + 18] = 0\n 52220: u8 [a0 + 17] = 0\n 52223: u8 [a0 + 16] = 0\n 52226: u8 [a0 + 15] = 0\n 52229: u8 [a0 + 14] = 0\n 52232: u8 [a0 + 13] = 0\n 52235: u8 [a0 + 12] = 0\n 52238: u8 [a0 + 11] = 0\n 52241: u8 [a0 + 10] = 0\n 52244: u8 [a0 + 9] = 0\n 52247: u8 [a0 + 8] = 0\n 52250: u8 [a0 + 7] = 0\n 52253: u8 [a0 + 6] = 0\n 52256: u8 [a0 + 5] = 0\n 52259: u8 [a0 + 4] = 0\n 52262: u8 [a0 + 3] = 0\n 52265: u8 [a0 + 2] = 0\n 52268: u8 [a0 + 1] = 0\n 52271: u8 [a0 + 0] = 0\n 52273: a1 = 0x40\n 52276: a0 = 0\n 52278: ra = 720, jump @0\n      : @830 [@dyn 360] (gas: 60)\n 52285: i32 a0 = a0 + 0\n 52287: i32 a2 = sp + 0x420\n 52291: a1 = 0x40\n 52294: u64 [sp + 0x48] = a2\n 52297: ecalli 8 // 'hash_keccak_256'\n 52299: a0 = u64 [sp + 0x438]\n 52303: a1 = u64 [sp + 0x430]\n 52307: a2 = u64 [sp + 0x428]\n 52311: a3 = u64 [sp + 0x420]\n 52315: a0 = reverse a0\n 52317: u64 [sp + 0x98] = a0\n 52321: a1 = reverse a1\n 52323: u64 [sp + 0x90] = a1\n 52327: a2 = reverse a2\n 52329: u64 [sp + 0x88] = a2\n 52333: s1 = reverse a3\n 52335: u64 [sp + 0x3f8] = s1\n 52339: u64 [sp + 0x3f0] = a2\n 52343: u64 [sp + 0x3e8] = a1\n 52347: u64 [sp + 0x3e0] = a0\n 52351: u64 [sp + 1080] = 0\n 52355: u64 [sp + 1072] = 0\n 52359: u64 [sp + 1064] = 0\n 52363: u64 [sp + 1056] = 0\n 52367: u32 [sp + 1024] = 0x20\n 52372: i32 a1 = sp + 0x3e0\n 52376: i32 a3 = sp + 0x420\n 52380: i32 a4 = sp + 0x400\n 52384: a2 = 0xffffffffffffffff\n 52387: a0 = 0\n 52389: u64 [sp + 0x40] = a1\n 52392: u64 [sp + 0x38] = a4\n 52395: ecalli 7 // 'get_storage'\n 52397: a0 = u64 [sp + 0x420]\n 52401: a1 = u64 [sp + 0x428]\n 52405: a2 = u64 [sp + 0x430]\n 52409: a3 = u64 [sp + 0x438]\n 52413: a0 = a0 & 0xffffffffffffff00\n 52417: u64 [sp + 0x3f8] = s1\n 52421: a4 = u64 [sp + 0x88]\n 52425: u64 [sp + 0x3f0] = a4\n 52429: a4 = u64 [sp + 0x90]\n 52433: u64 [sp + 0x3e8] = a4\n 52437: a4 = u64 [sp + 0x98]\n 52441: u64 [sp + 0x3e0] = a4\n 52445: u64 [sp + 0x438] = a3\n 52449: u64 [sp + 0x430] = a2\n 52453: u64 [sp + 0x428] = a1\n 52457: u64 [sp + 0x420] = a0\n 52461: i32 a1 = sp + 0x3e0\n 52465: i32 a3 = sp + 0x420\n 52469: a2 = 0xffffffffffffffff\n 52472: a4 = 0x20\n 52475: a0 = 0\n 52477: ecalli 12 // 'set_storage'\n 52479: s1 = 0\n 52481: u64 [sp + 152] = 0\n 52485: u64 [sp + 136] = 0\n 52489: u64 [sp + 144] = 0\n 52493: fallthrough\n      : @831 (gas: 16)\n 52494: u64 [sp + 1016] = 0\n 52498: u64 [sp + 1008] = 0\n 52502: u64 [sp + 1000] = 0\n 52506: u64 [sp + 992] = 0x3\n 52511: u64 [sp + 1080] = 0\n 52515: u64 [sp + 1072] = 0\n 52519: u64 [sp + 1064] = 0\n 52523: u64 [sp + 1056] = 0\n 52527: u32 [sp + 1024] = 0x20\n 52532: a2 = 0xffffffffffffffff\n 52535: a0 = 0\n 52537: a1 = u64 [sp + 0x40]\n 52540: a3 = u64 [sp + 0x48]\n 52543: a4 = u64 [sp + 0x38]\n 52546: ecalli 7 // 'get_storage'\n 52548: fallthrough\n      : @832 (gas: 8)\n 52549: a3 = u64 [sp + 0x438]\n 52553: a2 = u64 [sp + 0x430]\n 52557: a1 = u64 [sp + 0x428]\n 52561: a0 = u64 [sp + 0x420]\n 52565: a4 = a1 | a3\n 52568: a5 = a0 | a2\n 52571: a4 = a4 | a5\n 52574: jump @834 if a4 != 0\n      : @833 (gas: 1)\n 52577: jump @853\n      : @834 (gas: 24)\n 52580: a4 = a0 | a1\n 52583: a4 = a4 <u 0x1\n 52586: a5 = a2 <u a4\n 52589: a3 = a3 - a5\n 52592: t0 = a2 - a4\n 52595: a4 = a0 <u 0x1\n 52598: a1 = a1 - a4\n 52601: a0 = a0 + 0xffffffffffffffff\n 52604: a0 = s1 <u a0\n 52607: a5 = u64 [sp + 0x98]\n 52611: a4 = a5 ^ a1\n 52614: a1 = a5 <u a1\n 52617: a1 = a0 if a4 == 0\n 52620: t1 = s1\n 52622: s1 = u64 [sp + 0x88]\n 52626: a0 = s1 <u t0\n 52629: a4 = u64 [sp + 0x90]\n 52633: a2 = a4 ^ a3\n 52636: a3 = a4 <u a3\n 52639: a3 = a0 if a2 == 0\n 52642: a0 = s1 ^ t0\n 52645: a0 = a0 | a2\n 52648: a3 = a1 if a0 == 0\n 52651: jump @844 if a3 == 0\n      : @835 (gas: 16)\n 52655: u64 [sp + 0x360] = t1\n 52659: u64 [sp + 920] = 0\n 52663: u64 [sp + 912] = 0\n 52667: u64 [sp + 904] = 0\n 52671: u64 [sp + 896] = 0x3\n 52676: u64 [sp + 0x368] = a5\n 52680: u64 [sp + 0x370] = s1\n 52684: a0 = sp + 0x3a0\n 52688: a1 = sp + 0x380\n 52692: a2 = sp + 0x360\n 52696: u64 [sp + 0x378] = a4\n 52700: u64 [sp + 0x98] = a5\n 52704: u64 [sp + 0x90] = a4\n 52708: u64 [sp + 0x88] = s1\n 52712: s1 = t1\n 52714: ra = 722, jump @270\n      : @836 [@dyn 361] (gas: 28)\n 52721: a0 = u64 [sp + 0x3d8]\n 52725: u64 [sp + 0x80] = a0\n 52729: a0 = u64 [sp + 0x3d0]\n 52733: u64 [sp + 0x78] = a0\n 52736: u64 [sp + 0x68] = s1\n 52739: s1 = u64 [sp + 0x3c8]\n 52743: a0 = u64 [sp + 0x3c0]\n 52747: u64 [sp + 0x70] = a0\n 52750: a0 = u64 [sp + 0x3b8]\n 52754: a1 = u64 [sp + 0x3b0]\n 52758: a2 = u64 [sp + 0x3a8]\n 52762: a3 = u64 [sp + 0x3a0]\n 52766: u64 [sp + 0x3f8] = a0\n 52770: u64 [sp + 0x3f0] = a1\n 52774: u64 [sp + 0x3e8] = a2\n 52778: u64 [sp + 0x3e0] = a3\n 52782: u64 [sp + 1080] = 0\n 52786: u64 [sp + 1072] = 0\n 52790: u64 [sp + 1064] = 0\n 52794: u64 [sp + 1056] = 0\n 52798: u32 [sp + 1024] = 0x20\n 52803: i32 a1 = sp + 0x3e0\n 52807: i32 a3 = sp + 0x420\n 52811: i32 a4 = sp + 0x400\n 52815: a2 = 0xffffffffffffffff\n 52818: a0 = 0\n 52820: ecalli 7 // 'get_storage'\n 52822: fallthrough\n      : @837 (gas: 191)\n 52823: a1 = u64 [sp + 0x420]\n 52827: a2 = u64 [sp + 0x428]\n 52831: t0 = u64 [sp + 0x70]\n 52834: a0 = t0 >> 0x3d\n 52837: a3 = s1 << 0x3\n 52840: a3 = a3 | a0\n 52843: s1 = s1 >> 0x3d\n 52846: a4 = u64 [sp + 0x78]\n 52849: a0 = a4 << 0x3\n 52852: s1 = s1 | a0\n 52855: a0 = a4 >> 0x3d\n 52858: a4 = u64 [sp + 0x80]\n 52862: a4 = a4 << 0x3\n 52865: a4 = a4 | a0\n 52868: a0 = t0 << 0x3\n 52871: a5 = a3 >u 0\n 52873: a0 = a0 <u 0x100\n 52877: a0 = a0 ^ 0x1\n 52880: a0 = a5 if a3 != 0\n 52883: a3 = a4 >u 0\n 52885: a5 = s1 >u 0\n 52887: a5 = a3 if a4 != 0\n 52890: a3 = u64 [sp + 0x430]\n 52894: s1 = s1 | a4\n 52897: a4 = u64 [sp + 0x438]\n 52901: a0 = a5 if s1 != 0\n 52904: u8 [sp + 863] = 0\n 52908: u8 [sp + 862] = 0\n 52912: u8 [sp + 861] = 0\n 52916: u8 [sp + 860] = 0\n 52920: u8 [sp + 859] = 0\n 52924: u8 [sp + 858] = 0\n 52928: u8 [sp + 857] = 0\n 52932: u8 [sp + 856] = 0\n 52936: u8 [sp + 855] = 0\n 52940: u8 [sp + 854] = 0\n 52944: u8 [sp + 853] = 0\n 52948: u8 [sp + 852] = 0\n 52952: u8 [sp + 851] = 0\n 52956: u8 [sp + 850] = 0\n 52960: u8 [sp + 849] = 0\n 52964: u8 [sp + 848] = 0\n 52968: u8 [sp + 847] = 0\n 52972: u8 [sp + 846] = 0\n 52976: u8 [sp + 845] = 0\n 52980: u8 [sp + 844] = 0\n 52984: u8 [sp + 843] = 0\n 52988: u8 [sp + 842] = 0\n 52992: u8 [sp + 841] = 0\n 52996: u8 [sp + 840] = 0\n 53000: u8 [sp + 839] = 0\n 53004: u8 [sp + 838] = 0\n 53008: u8 [sp + 837] = 0\n 53012: u8 [sp + 836] = 0\n 53016: u8 [sp + 835] = 0\n 53020: u8 [sp + 834] = 0\n 53024: u8 [sp + 833] = 0\n 53028: u8 [sp + 832] = 0\n 53032: u8 [sp + 0x338] = a4\n 53036: u8 [sp + 0x330] = a3\n 53040: u8 [sp + 0x328] = a2\n 53044: u8 [sp + 0x320] = a1\n 53048: a5 = a4 >> 0x38\n 53051: u8 [sp + 0x33f] = a5\n 53055: a5 = a4 >> 0x30\n 53058: u8 [sp + 0x33e] = a5\n 53062: a5 = a4 >> 0x28\n 53065: u8 [sp + 0x33d] = a5\n 53069: a5 = a4 >> 0x20\n 53072: u8 [sp + 0x33c] = a5\n 53076: a5 = a4 >> 0x18\n 53079: u8 [sp + 0x33b] = a5\n 53083: a5 = a4 >> 0x10\n 53086: u8 [sp + 0x33a] = a5\n 53090: a4 = a4 >> 0x8\n 53093: u8 [sp + 0x339] = a4\n 53097: a4 = a3 >> 0x38\n 53100: u8 [sp + 0x337] = a4\n 53104: a4 = a3 >> 0x30\n 53107: u8 [sp + 0x336] = a4\n 53111: a4 = a3 >> 0x28\n 53114: u8 [sp + 0x335] = a4\n 53118: a4 = a3 >> 0x20\n 53121: u8 [sp + 0x334] = a4\n 53125: a4 = a3 >> 0x18\n 53128: u8 [sp + 0x333] = a4\n 53132: a4 = a3 >> 0x10\n 53135: u8 [sp + 0x332] = a4\n 53139: a3 = a3 >> 0x8\n 53142: u8 [sp + 0x331] = a3\n 53146: a3 = a2 >> 0x38\n 53149: u8 [sp + 0x32f] = a3\n 53153: a3 = a2 >> 0x30\n 53156: u8 [sp + 0x32e] = a3\n 53160: a3 = a2 >> 0x28\n 53163: u8 [sp + 0x32d] = a3\n 53167: a3 = a2 >> 0x20\n 53170: u8 [sp + 0x32c] = a3\n 53174: a3 = a2 >> 0x18\n 53177: u8 [sp + 0x32b] = a3\n 53181: a3 = a2 >> 0x10\n 53184: u8 [sp + 0x32a] = a3\n 53188: a2 = a2 >> 0x8\n 53191: u8 [sp + 0x329] = a2\n 53195: a2 = a1 >> 0x38\n 53198: u8 [sp + 0x327] = a2\n 53202: a2 = a1 >> 0x30\n 53205: u8 [sp + 0x326] = a2\n 53209: a2 = a1 >> 0x28\n 53212: u8 [sp + 0x325] = a2\n 53216: a2 = a1 >> 0x20\n 53219: u8 [sp + 0x324] = a2\n 53223: a2 = a1 >> 0x18\n 53226: u8 [sp + 0x323] = a2\n 53230: a2 = a1 >> 0x10\n 53233: u8 [sp + 0x322] = a2\n 53237: a1 = a1 >> 0x8\n 53240: u8 [sp + 0x321] = a1\n 53244: a1 = t0 & 0x1f\n 53247: a2 = sp + 0x320\n 53251: a1 = a1 + a2\n 53254: a2 = u8 [a1 + 0x9]\n 53257: a3 = u8 [a1 + 0x8]\n 53260: a4 = u8 [a1 + 0xa]\n 53263: a5 = u8 [a1 + 0xb]\n 53266: a2 = a2 << 0x8\n 53269: a2 = a2 | a3\n 53272: a4 = a4 << 0x10\n 53275: a5 = a5 << 0x18\n 53278: a4 = a4 | a5\n 53281: a2 = a2 | a4\n 53284: a3 = u8 [a1 + 0xd]\n 53287: a4 = u8 [a1 + 0xc]\n 53290: a5 = u8 [a1 + 0xe]\n 53293: s1 = u8 [a1 + 0xf]\n 53296: a3 = a3 << 0x8\n 53299: a3 = a3 | a4\n 53302: a5 = a5 << 0x10\n 53305: s1 = s1 << 0x18\n 53308: a5 = a5 | s1\n 53311: a3 = a3 | a5\n 53314: a3 = a3 << 0x20\n 53317: t0 = a3 | a2\n 53320: a3 = u8 [a1 + 0x1]\n 53323: a4 = u8 [a1]\n 53325: a5 = u8 [a1 + 0x2]\n 53328: s1 = u8 [a1 + 0x3]\n 53331: a3 = a3 << 0x8\n 53334: a3 = a3 | a4\n 53337: a5 = a5 << 0x10\n 53340: s1 = s1 << 0x18\n 53343: a5 = a5 | s1\n 53346: a3 = a3 | a5\n 53349: a4 = u8 [a1 + 0x5]\n 53352: a5 = u8 [a1 + 0x4]\n 53355: s1 = u8 [a1 + 0x6]\n 53358: a2 = u8 [a1 + 0x7]\n 53361: a4 = a4 << 0x8\n 53364: a4 = a4 | a5\n 53367: s1 = s1 << 0x10\n 53370: a2 = a2 << 0x18\n 53373: a2 = a2 | s1\n 53376: a2 = a2 | a4\n 53379: a2 = a2 << 0x20\n 53382: a2 = a2 | a3\n 53385: a3 = u8 [a1 + 0x11]\n 53388: a4 = u8 [a1 + 0x10]\n 53391: a5 = u8 [a1 + 0x12]\n 53394: a1 = u8 [a1 + 0x13]\n 53397: a3 = a3 << 0x8\n 53400: a3 = a3 | a4\n 53403: a5 = a5 << 0x10\n 53406: a1 = a1 << 0x18\n 53409: a1 = a1 | a5\n 53412: a1 = a1 | a3\n 53415: a2 = a2 & 0xffffffffffffffff\n 53418: a3 = t0 & 0xffffffffffffffff\n 53421: a4 = u64 [sp + 0x50]\n 53424: a1 = a1 & a4\n 53427: a3 = 0 if a0 != 0\n 53429: a2 = 0 if a0 != 0\n 53431: a1 = 0 if a0 != 0\n 53433: a0 = u64 [sp + 0x30]\n 53436: a0 = a0 ^ a1\n 53439: a1 = u64 [sp + 0x60]\n 53442: a1 = a1 ^ a2\n 53445: a0 = a0 | a1\n 53448: a1 = u64 [sp + 0x58]\n 53451: a1 = a1 ^ a3\n 53454: a0 = a0 | a1\n 53457: jump @839 if a0 == 0\n      : @838 (gas: 17)\n 53460: a2 = u64 [sp + 0x68]\n 53463: a2 = a2 + 0x1\n 53466: a0 = a2 <u 0x1\n 53469: a1 = u64 [sp + 0x98]\n 53473: a1 = a1 + a0\n 53476: u64 [sp + 0x98] = a1\n 53480: a0 = a2 | a1\n 53483: a0 = a0 <u 0x1\n 53486: a1 = u64 [sp + 0x88]\n 53490: a0 = a0 + a1\n 53493: a1 = a0 <u a1\n 53496: a3 = u64 [sp + 0x90]\n 53500: a3 = a3 + a1\n 53503: u64 [sp + 0x90] = a3\n 53507: u64 [sp + 0x88] = a0\n 53511: s1 = a2\n 53513: jump @831\n      : @839 (gas: 17)\n 53516: u64 [sp + 1016] = 0\n 53520: u64 [sp + 1008] = 0\n 53524: u64 [sp + 1000] = 0\n 53528: s1 = 0x3\n 53531: u64 [sp + 0x3e0] = s1\n 53535: u64 [sp + 1080] = 0\n 53539: u64 [sp + 1072] = 0\n 53543: u64 [sp + 1064] = 0\n 53547: u64 [sp + 1056] = 0\n 53551: u32 [sp + 1024] = 0x20\n 53556: i32 a1 = sp + 0x3e0\n 53560: i32 a3 = sp + 0x420\n 53564: i32 a4 = sp + 0x400\n 53568: a2 = 0xffffffffffffffff\n 53571: a0 = 0\n 53573: ecalli 7 // 'get_storage'\n 53575: fallthrough\n      : @840 (gas: 8)\n 53576: a3 = u64 [sp + 0x438]\n 53580: a2 = u64 [sp + 0x430]\n 53584: a1 = u64 [sp + 0x428]\n 53588: a0 = u64 [sp + 0x420]\n 53592: a4 = a1 | a3\n 53595: a5 = a0 | a2\n 53598: a4 = a4 | a5\n 53601: jump @857 if a4 == 0\n      : @841 (gas: 20)\n 53605: a4 = a0 | a1\n 53608: a4 = a4 <u 0x1\n 53611: a5 = a2 <u a4\n 53614: a3 = a3 - a5\n 53617: a2 = a2 - a4\n 53620: a4 = a0 <u 0x1\n 53623: a1 = a1 - a4\n 53626: a0 = a0 + 0xffffffffffffffff\n 53629: u64 [sp + 728] = 0\n 53633: u64 [sp + 720] = 0\n 53637: u64 [sp + 712] = 0\n 53641: u64 [sp + 704] = 0x3\n 53646: u64 [sp + 0x2a0] = a0\n 53650: u64 [sp + 0x2a8] = a1\n 53654: u64 [sp + 0x2b0] = a2\n 53658: a0 = sp + 0x2e0\n 53662: a1 = sp + 0x2c0\n 53666: a2 = sp + 0x2a0\n 53670: u64 [sp + 0x2b8] = a3\n 53674: ra = 724, jump @270\n      : @842 [@dyn 362] (gas: 227)\n 53681: a0 = u64 [sp + 0x318]\n 53685: u64 [sp + 0x80] = a0\n 53689: a0 = u64 [sp + 0x310]\n 53693: u64 [sp + 0x78] = a0\n 53696: s1 = u64 [sp + 0x308]\n 53700: a0 = u64 [sp + 0x300]\n 53704: u64 [sp + 0x70] = a0\n 53707: a0 = u64 [sp + 0x2f8]\n 53711: a1 = u64 [sp + 0x2f0]\n 53715: a2 = u64 [sp + 0x2e8]\n 53719: a3 = u64 [sp + 0x2e0]\n 53723: u64 [sp + 0x3f8] = a0\n 53727: u64 [sp + 0x3f0] = a1\n 53731: u64 [sp + 0x3e8] = a2\n 53735: u64 [sp + 0x3e0] = a3\n 53739: u64 [sp + 1080] = 0\n 53743: u64 [sp + 1072] = 0\n 53747: u64 [sp + 1064] = 0\n 53751: u64 [sp + 1056] = 0\n 53755: u32 [sp + 1024] = 0x20\n 53760: i32 a1 = sp + 0x3e0\n 53764: i32 a3 = sp + 0x420\n 53768: i32 a4 = sp + 0x400\n 53772: a2 = 0xffffffffffffffff\n 53775: a0 = 0\n 53777: ecalli 7 // 'get_storage'\n 53779: a1 = u64 [sp + 0x420]\n 53783: a2 = u64 [sp + 0x428]\n 53787: t0 = u64 [sp + 0x70]\n 53790: a0 = t0 >> 0x3d\n 53793: a3 = s1 << 0x3\n 53796: a3 = a3 | a0\n 53799: s1 = s1 >> 0x3d\n 53802: a4 = u64 [sp + 0x78]\n 53805: a0 = a4 << 0x3\n 53808: s1 = s1 | a0\n 53811: a0 = a4 >> 0x3d\n 53814: a4 = u64 [sp + 0x80]\n 53818: a4 = a4 << 0x3\n 53821: a4 = a4 | a0\n 53824: a0 = t0 << 0x3\n 53827: a5 = a3 >u 0\n 53829: a0 = a0 <u 0x100\n 53833: a0 = a0 ^ 0x1\n 53836: a0 = a5 if a3 != 0\n 53839: a3 = a4 >u 0\n 53841: a5 = s1 >u 0\n 53843: a5 = a3 if a4 != 0\n 53846: a3 = u64 [sp + 0x430]\n 53850: s1 = s1 | a4\n 53853: a4 = u64 [sp + 0x438]\n 53857: a0 = a5 if s1 != 0\n 53860: u8 [sp + 543] = 0\n 53864: u8 [sp + 542] = 0\n 53868: u8 [sp + 541] = 0\n 53872: u8 [sp + 540] = 0\n 53876: u8 [sp + 539] = 0\n 53880: u8 [sp + 538] = 0\n 53884: u8 [sp + 537] = 0\n 53888: u8 [sp + 536] = 0\n 53892: u8 [sp + 535] = 0\n 53896: u8 [sp + 534] = 0\n 53900: u8 [sp + 533] = 0\n 53904: u8 [sp + 532] = 0\n 53908: u8 [sp + 531] = 0\n 53912: u8 [sp + 530] = 0\n 53916: u8 [sp + 529] = 0\n 53920: u8 [sp + 528] = 0\n 53924: u8 [sp + 527] = 0\n 53928: u8 [sp + 526] = 0\n 53932: u8 [sp + 525] = 0\n 53936: u8 [sp + 524] = 0\n 53940: u8 [sp + 523] = 0\n 53944: u8 [sp + 522] = 0\n 53948: u8 [sp + 521] = 0\n 53952: u8 [sp + 520] = 0\n 53956: u8 [sp + 519] = 0\n 53960: u8 [sp + 518] = 0\n 53964: u8 [sp + 517] = 0\n 53968: u8 [sp + 516] = 0\n 53972: u8 [sp + 515] = 0\n 53976: u8 [sp + 514] = 0\n 53980: u8 [sp + 513] = 0\n 53984: u8 [sp + 512] = 0\n 53988: u8 [sp + 0x1f8] = a4\n 53992: u8 [sp + 0x1f0] = a3\n 53996: u8 [sp + 0x1e8] = a2\n 54000: u8 [sp + 0x1e0] = a1\n 54004: a5 = a4 >> 0x38\n 54007: u8 [sp + 0x1ff] = a5\n 54011: a5 = a4 >> 0x30\n 54014: u8 [sp + 0x1fe] = a5\n 54018: a5 = a4 >> 0x28\n 54021: u8 [sp + 0x1fd] = a5\n 54025: a5 = a4 >> 0x20\n 54028: u8 [sp + 0x1fc] = a5\n 54032: a5 = a4 >> 0x18\n 54035: u8 [sp + 0x1fb] = a5\n 54039: a5 = a4 >> 0x10\n 54042: u8 [sp + 0x1fa] = a5\n 54046: a4 = a4 >> 0x8\n 54049: u8 [sp + 0x1f9] = a4\n 54053: a4 = a3 >> 0x38\n 54056: u8 [sp + 0x1f7] = a4\n 54060: a4 = a3 >> 0x30\n 54063: u8 [sp + 0x1f6] = a4\n 54067: a4 = a3 >> 0x28\n 54070: u8 [sp + 0x1f5] = a4\n 54074: a4 = a3 >> 0x20\n 54077: u8 [sp + 0x1f4] = a4\n 54081: a4 = a3 >> 0x18\n 54084: u8 [sp + 0x1f3] = a4\n 54088: a4 = a3 >> 0x10\n 54091: u8 [sp + 0x1f2] = a4\n 54095: a3 = a3 >> 0x8\n 54098: u8 [sp + 0x1f1] = a3\n 54102: a3 = a2 >> 0x38\n 54105: u8 [sp + 0x1ef] = a3\n 54109: a3 = a2 >> 0x30\n 54112: u8 [sp + 0x1ee] = a3\n 54116: a3 = a2 >> 0x28\n 54119: u8 [sp + 0x1ed] = a3\n 54123: a3 = a2 >> 0x20\n 54126: u8 [sp + 0x1ec] = a3\n 54130: a3 = a2 >> 0x18\n 54133: u8 [sp + 0x1eb] = a3\n 54137: a3 = a2 >> 0x10\n 54140: u8 [sp + 0x1ea] = a3\n 54144: a2 = a2 >> 0x8\n 54147: u8 [sp + 0x1e9] = a2\n 54151: a2 = a1 >> 0x38\n 54154: u8 [sp + 0x1e7] = a2\n 54158: a2 = a1 >> 0x30\n 54161: u8 [sp + 0x1e6] = a2\n 54165: a2 = a1 >> 0x28\n 54168: u8 [sp + 0x1e5] = a2\n 54172: a2 = a1 >> 0x20\n 54175: u8 [sp + 0x1e4] = a2\n 54179: a2 = a1 >> 0x18\n 54182: u8 [sp + 0x1e3] = a2\n 54186: a2 = a1 >> 0x10\n 54189: u8 [sp + 0x1e2] = a2\n 54193: a1 = a1 >> 0x8\n 54196: u8 [sp + 0x1e1] = a1\n 54200: a1 = t0 & 0x1f\n 54203: a2 = sp + 0x1e0\n 54207: a1 = a1 + a2\n 54210: a2 = u8 [a1 + 0x1]\n 54213: a3 = u8 [a1]\n 54215: a4 = u8 [a1 + 0x2]\n 54218: a5 = u8 [a1 + 0x3]\n 54221: a2 = a2 << 0x8\n 54224: a2 = a2 | a3\n 54227: a4 = a4 << 0x10\n 54230: a5 = a5 << 0x18\n 54233: a4 = a4 | a5\n 54236: a2 = a2 | a4\n 54239: a3 = u8 [a1 + 0x5]\n 54242: a4 = u8 [a1 + 0x4]\n 54245: a5 = u8 [a1 + 0x6]\n 54248: s1 = u8 [a1 + 0x7]\n 54251: a3 = a3 << 0x8\n 54254: a3 = a3 | a4\n 54257: a5 = a5 << 0x10\n 54260: s1 = s1 << 0x18\n 54263: a5 = a5 | s1\n 54266: a3 = a3 | a5\n 54269: a3 = a3 << 0x20\n 54272: t0 = a3 | a2\n 54275: a3 = u8 [a1 + 0x9]\n 54278: a4 = u8 [a1 + 0x8]\n 54281: a5 = u8 [a1 + 0xa]\n 54284: s1 = u8 [a1 + 0xb]\n 54287: a3 = a3 << 0x8\n 54290: a3 = a3 | a4\n 54293: a5 = a5 << 0x10\n 54296: s1 = s1 << 0x18\n 54299: a5 = a5 | s1\n 54302: a3 = a3 | a5\n 54305: a4 = u8 [a1 + 0xd]\n 54308: a5 = u8 [a1 + 0xc]\n 54311: s1 = u8 [a1 + 0xe]\n 54314: a2 = u8 [a1 + 0xf]\n 54317: a4 = a4 << 0x8\n 54320: a4 = a4 | a5\n 54323: s1 = s1 << 0x10\n 54326: a2 = a2 << 0x18\n 54329: a2 = a2 | s1\n 54332: a2 = a2 | a4\n 54335: a2 = a2 << 0x20\n 54338: a2 = a2 | a3\n 54341: a3 = u8 [a1 + 0x11]\n 54344: a4 = u8 [a1 + 0x10]\n 54347: a5 = u8 [a1 + 0x12]\n 54350: a1 = u8 [a1 + 0x13]\n 54353: a3 = a3 << 0x8\n 54356: a3 = a3 | a4\n 54359: a5 = a5 << 0x10\n 54362: a1 = a1 << 0x18\n 54365: a1 = a1 | a5\n 54368: a1 = a1 | a3\n 54371: a3 = a2 & 0xffffffffffffffff\n 54374: a2 = t0 & 0xffffffffffffffff\n 54377: a4 = u64 [sp + 0x50]\n 54380: a1 = a1 & a4\n 54383: a2 = 0 if a0 != 0\n 54385: u64 [sp + 0x58] = a2\n 54388: a3 = 0 if a0 != 0\n 54390: u64 [sp + 0x48] = a3\n 54393: a1 = 0 if a0 != 0\n 54395: u64 [sp + 0x40] = a1\n 54398: a0 = u64 [sp + 0x90]\n 54402: u64 [sp + 0x238] = a0\n 54406: a0 = u64 [sp + 0x88]\n 54410: u64 [sp + 0x230] = a0\n 54414: a0 = u64 [sp + 0x98]\n 54418: u64 [sp + 0x228] = a0\n 54422: a0 = u64 [sp + 0x68]\n 54425: u64 [sp + 0x220] = a0\n 54429: u64 [sp + 600] = 0\n 54433: u64 [sp + 592] = 0\n 54437: u64 [sp + 584] = 0\n 54441: a0 = sp + 0x260\n 54445: a1 = sp + 0x240\n 54449: a2 = sp + 0x220\n 54453: u64 [sp + 576] = 0x3\n 54458: ra = 726, jump @270\n      : @843 [@dyn 363] (gas: 443)\n 54465: a0 = u64 [sp + 0x298]\n 54469: u64 [sp + 0x78] = a0\n 54472: a0 = u64 [sp + 0x290]\n 54476: u64 [sp + 0x70] = a0\n 54479: s1 = u64 [sp + 0x288]\n 54483: a0 = u64 [sp + 0x280]\n 54487: u64 [sp + 0x38] = a0\n 54490: a3 = u64 [sp + 0x278]\n 54494: u64 [sp + 0x80] = a3\n 54498: a2 = u64 [sp + 0x270]\n 54502: u64 [sp + 0x88] = a2\n 54506: a1 = u64 [sp + 0x268]\n 54510: u64 [sp + 0x90] = a1\n 54514: a0 = u64 [sp + 0x260]\n 54518: u64 [sp + 0x98] = a0\n 54522: u64 [sp + 0x3f8] = a3\n 54526: u64 [sp + 0x3f0] = a2\n 54530: u64 [sp + 0x3e8] = a1\n 54534: u64 [sp + 0x3e0] = a0\n 54538: u64 [sp + 1080] = 0\n 54542: u64 [sp + 1072] = 0\n 54546: u64 [sp + 1064] = 0\n 54550: u64 [sp + 1056] = 0\n 54554: u32 [sp + 1024] = 0x20\n 54559: i32 a1 = sp + 0x3e0\n 54563: i32 a3 = sp + 0x420\n 54567: i32 a4 = sp + 0x400\n 54571: a2 = 0xffffffffffffffff\n 54574: a0 = 0\n 54576: ecalli 7 // 'get_storage'\n 54578: a2 = u64 [sp + 0x38]\n 54581: a0 = a2 >> 0x3d\n 54584: a1 = s1 << 0x3\n 54587: a0 = a0 | a1\n 54590: a1 = a2 << 0x3\n 54593: a1 = a1 <u 0x100\n 54597: t1 = a1 ^ 0x1\n 54600: a1 = a0 >u 0\n 54602: t1 = a1 if a0 != 0\n 54605: s1 = s1 >> 0x3d\n 54608: a1 = u64 [sp + 0x70]\n 54611: a0 = a1 << 0x3\n 54614: a0 = a0 | s1\n 54617: a1 = a1 >> 0x3d\n 54620: a3 = u64 [sp + 0x78]\n 54623: a3 = a3 << 0x3\n 54626: a1 = a1 | a3\n 54629: a3 = a1 >u 0\n 54631: a4 = a0 >u 0\n 54633: a4 = a3 if a1 != 0\n 54636: a0 = a0 | a1\n 54639: t1 = a4 if a0 != 0\n 54642: a0 = u64 [sp + 0x420]\n 54646: u64 [sp + 0x78] = a0\n 54649: a0 = u64 [sp + 0x428]\n 54653: u64 [sp + 0x70] = a0\n 54656: a0 = u64 [sp + 0x430]\n 54660: u64 [sp + 0x68] = a0\n 54663: a0 = u64 [sp + 0x438]\n 54667: u64 [sp + 0x60] = a0\n 54670: u8 [sp + 455] = 0xff\n 54676: u8 [sp + 463] = 0xff\n 54682: u8 [sp + 454] = 0xffff\n 54689: u8 [sp + 462] = 0xffff\n 54696: u8 [sp + 453] = 0xffffff\n 54704: u8 [sp + 461] = 0xffffff\n 54712: a0 = 0xffffffffff\n 54722: u8 [sp + 0x1c3] = a0\n 54726: u8 [sp + 0x1cb] = a0\n 54730: a0 = 0xffffffffffff\n 54740: u8 [sp + 0x1c2] = a0\n 54744: u8 [sp + 0x1ca] = a0\n 54748: u8 [sp + 448] = 0xffffffffffffffff\n 54753: u8 [sp + 456] = 0xffffffffffffffff\n 54758: a0 = 0xffffffffffffff\n 54768: u8 [sp + 0x1c1] = a0\n 54772: u8 [sp + 0x1c9] = a0\n 54776: a1 = u64 [sp + 0x50]\n 54779: a0 = a1 >> 0x18\n 54782: u8 [sp + 0x1d3] = a0\n 54786: a0 = a1 >> 0x10\n 54789: u8 [sp + 0x1d2] = a0\n 54793: u8 [sp + 0x1c4] = a1\n 54797: u8 [sp + 0x1d0] = a1\n 54801: u8 [sp + 0x1cc] = a1\n 54805: a0 = a1 >> 0x8\n 54808: u8 [sp + 0x1d1] = a0\n 54812: u8 [sp + 479] = 0\n 54816: u8 [sp + 478] = 0\n 54820: u8 [sp + 477] = 0\n 54824: u8 [sp + 476] = 0\n 54828: u8 [sp + 475] = 0\n 54832: u8 [sp + 474] = 0\n 54836: u8 [sp + 473] = 0\n 54840: u8 [sp + 472] = 0\n 54844: u8 [sp + 471] = 0\n 54848: u8 [sp + 470] = 0\n 54852: u8 [sp + 469] = 0\n 54856: u8 [sp + 468] = 0\n 54860: u8 [sp + 447] = 0\n 54864: u8 [sp + 446] = 0\n 54868: u8 [sp + 445] = 0\n 54872: u8 [sp + 444] = 0\n 54876: u8 [sp + 443] = 0\n 54880: u8 [sp + 442] = 0\n 54884: u8 [sp + 441] = 0\n 54888: u8 [sp + 440] = 0\n 54892: u8 [sp + 439] = 0\n 54896: u8 [sp + 438] = 0\n 54900: u8 [sp + 437] = 0\n 54904: u8 [sp + 436] = 0\n 54908: u8 [sp + 435] = 0\n 54912: u8 [sp + 434] = 0\n 54916: u8 [sp + 433] = 0\n 54920: u8 [sp + 432] = 0\n 54924: u8 [sp + 431] = 0\n 54928: u8 [sp + 430] = 0\n 54932: u8 [sp + 429] = 0\n 54936: u8 [sp + 428] = 0\n 54940: u8 [sp + 427] = 0\n 54944: u8 [sp + 426] = 0\n 54948: u8 [sp + 425] = 0\n 54952: u8 [sp + 424] = 0\n 54956: u8 [sp + 423] = 0\n 54960: u8 [sp + 422] = 0\n 54964: u8 [sp + 421] = 0\n 54968: u8 [sp + 420] = 0\n 54972: u8 [sp + 419] = 0\n 54976: u8 [sp + 418] = 0\n 54980: u8 [sp + 417] = 0\n 54984: u8 [sp + 416] = 0\n 54988: a4 = a2 & 0x1f\n 54991: a3 = sp + 0x1c0\n 54995: a3 = a3 - a4\n 54998: a0 = u8 [a3 + 0x19]\n 55001: a1 = u8 [a3 + 0x18]\n 55004: a5 = u8 [a3 + 0x1a]\n 55007: s1 = u8 [a3 + 0x1b]\n 55010: a0 = a0 << 0x8\n 55013: a0 = a0 | a1\n 55016: a5 = a5 << 0x10\n 55019: s1 = s1 << 0x18\n 55022: a5 = a5 | s1\n 55025: t0 = a5 | a0\n 55028: a1 = u8 [a3 + 0x1d]\n 55031: a5 = u8 [a3 + 0x1c]\n 55034: s1 = u8 [a3 + 0x1e]\n 55037: a0 = u8 [a3 + 0x1f]\n 55040: a1 = a1 << 0x8\n 55043: a1 = a1 | a5\n 55046: s1 = s1 << 0x10\n 55049: a0 = a0 << 0x18\n 55052: a0 = a0 | s1\n 55055: a0 = a0 | a1\n 55058: a0 = a0 << 0x20\n 55061: a0 = a0 | t0\n 55064: u64 [sp + 0x50] = a0\n 55067: a0 = u8 [a3 + 0x11]\n 55070: a1 = u8 [a3 + 0x10]\n 55073: a5 = u8 [a3 + 0x12]\n 55076: s1 = u8 [a3 + 0x13]\n 55079: a0 = a0 << 0x8\n 55082: a0 = a0 | a1\n 55085: a5 = a5 << 0x10\n 55088: s1 = s1 << 0x18\n 55091: a5 = a5 | s1\n 55094: t0 = a5 | a0\n 55097: a1 = u8 [a3 + 0x15]\n 55100: a5 = u8 [a3 + 0x14]\n 55103: s1 = u8 [a3 + 0x16]\n 55106: a0 = u8 [a3 + 0x17]\n 55109: a1 = a1 << 0x8\n 55112: a1 = a1 | a5\n 55115: s1 = s1 << 0x10\n 55118: a0 = a0 << 0x18\n 55121: a0 = a0 | s1\n 55124: a0 = a0 | a1\n 55127: a0 = a0 << 0x20\n 55130: a0 = a0 | t0\n 55133: u64 [sp + 0x38] = a0\n 55136: a0 = u8 [a3 + 0x9]\n 55139: a1 = u8 [a3 + 0x8]\n 55142: a5 = u8 [a3 + 0xa]\n 55145: s1 = u8 [a3 + 0xb]\n 55148: a0 = a0 << 0x8\n 55151: a0 = a0 | a1\n 55154: a5 = a5 << 0x10\n 55157: s1 = s1 << 0x18\n 55160: a5 = a5 | s1\n 55163: a2 = a5 | a0\n 55166: a1 = u8 [a3 + 0xd]\n 55169: a5 = u8 [a3 + 0xc]\n 55172: s1 = u8 [a3 + 0xe]\n 55175: a0 = u8 [a3 + 0xf]\n 55178: a1 = a1 << 0x8\n 55181: a1 = a1 | a5\n 55184: s1 = s1 << 0x10\n 55187: a0 = a0 << 0x18\n 55190: a0 = a0 | s1\n 55193: a0 = a0 | a1\n 55196: a0 = a0 << 0x20\n 55199: ra = a0 | a2\n 55202: a0 = u8 [a3 + 0x1]\n 55205: a1 = u8 [a3]\n 55207: a2 = u8 [a3 + 0x2]\n 55210: s1 = u8 [a3 + 0x3]\n 55213: a0 = a0 << 0x8\n 55216: a0 = a0 | a1\n 55219: a2 = a2 << 0x10\n 55222: s1 = s1 << 0x18\n 55225: a2 = a2 | s1\n 55228: a0 = a0 | a2\n 55231: a1 = u8 [a3 + 0x5]\n 55234: a2 = u8 [a3 + 0x4]\n 55237: s1 = u8 [a3 + 0x6]\n 55240: a3 = u8 [a3 + 0x7]\n 55243: a1 = a1 << 0x8\n 55246: a1 = a1 | a2\n 55249: s1 = s1 << 0x10\n 55252: a3 = a3 << 0x18\n 55255: a3 = a3 | s1\n 55258: a1 = a1 | a3\n 55261: a1 = a1 << 0x20\n 55264: t2 = a1 | a0\n 55267: a1 = u64 [sp + 0x40]\n 55270: a0 = a1 >> 0x18\n 55273: u8 [sp + 0x193] = a0\n 55277: a0 = a1 >> 0x10\n 55280: u8 [sp + 0x192] = a0\n 55284: u8 [sp + 0x190] = a1\n 55288: a0 = a1 >> 0x8\n 55291: u8 [sp + 0x191] = a0\n 55295: a1 = u64 [sp + 0x48]\n 55298: a0 = a1 >> 0x38\n 55301: u8 [sp + 0x18f] = a0\n 55305: a0 = a1 >> 0x30\n 55308: u8 [sp + 0x18e] = a0\n 55312: a0 = a1 >> 0x28\n 55315: u8 [sp + 0x18d] = a0\n 55319: a0 = a1 >> 0x20\n 55322: u8 [sp + 0x18c] = a0\n 55326: a0 = a1 >> 0x18\n 55329: u8 [sp + 0x18b] = a0\n 55333: a0 = a1 >> 0x10\n 55336: u8 [sp + 0x18a] = a0\n 55340: u8 [sp + 0x188] = a1\n 55344: a0 = a1 >> 0x8\n 55347: u8 [sp + 0x189] = a0\n 55351: a1 = u64 [sp + 0x58]\n 55354: a0 = a1 >> 0x38\n 55357: u8 [sp + 0x187] = a0\n 55361: a0 = a1 >> 0x30\n 55364: u8 [sp + 0x186] = a0\n 55368: a0 = a1 >> 0x28\n 55371: u8 [sp + 0x185] = a0\n 55375: a0 = a1 >> 0x20\n 55378: u8 [sp + 0x184] = a0\n 55382: a0 = a1 >> 0x18\n 55385: u8 [sp + 0x183] = a0\n 55389: a0 = a1 >> 0x10\n 55392: u8 [sp + 0x182] = a0\n 55396: u8 [sp + 0x180] = a1\n 55400: a0 = a1 >> 0x8\n 55403: u8 [sp + 0x181] = a0\n 55407: a0 = sp + 0x180\n 55411: a4 = a0 - a4\n 55414: u8 [sp + 415] = 0\n 55418: u8 [sp + 414] = 0\n 55422: u8 [sp + 413] = 0\n 55426: u8 [sp + 412] = 0\n 55430: u8 [sp + 411] = 0\n 55434: u8 [sp + 410] = 0\n 55438: u8 [sp + 409] = 0\n 55442: u8 [sp + 408] = 0\n 55446: u8 [sp + 407] = 0\n 55450: u8 [sp + 406] = 0\n 55454: u8 [sp + 405] = 0\n 55458: u8 [sp + 404] = 0\n 55462: u8 [sp + 383] = 0\n 55466: u8 [sp + 382] = 0\n 55470: u8 [sp + 381] = 0\n 55474: u8 [sp + 380] = 0\n 55478: u8 [sp + 379] = 0\n 55482: u8 [sp + 378] = 0\n 55486: u8 [sp + 377] = 0\n 55490: u8 [sp + 376] = 0\n 55494: u8 [sp + 375] = 0\n 55498: u8 [sp + 374] = 0\n 55502: u8 [sp + 373] = 0\n 55506: u8 [sp + 372] = 0\n 55510: u8 [sp + 371] = 0\n 55514: u8 [sp + 370] = 0\n 55518: u8 [sp + 369] = 0\n 55522: u8 [sp + 368] = 0\n 55526: u8 [sp + 367] = 0\n 55530: u8 [sp + 366] = 0\n 55534: u8 [sp + 365] = 0\n 55538: u8 [sp + 364] = 0\n 55542: u8 [sp + 363] = 0\n 55546: u8 [sp + 362] = 0\n 55550: u8 [sp + 361] = 0\n 55554: u8 [sp + 360] = 0\n 55558: u8 [sp + 359] = 0\n 55562: u8 [sp + 358] = 0\n 55566: u8 [sp + 357] = 0\n 55570: u8 [sp + 356] = 0\n 55574: u8 [sp + 355] = 0\n 55578: u8 [sp + 354] = 0\n 55582: u8 [sp + 353] = 0\n 55586: u8 [sp + 352] = 0\n 55590: a0 = u8 [a4 + 0x19]\n 55593: a1 = u8 [a4 + 0x18]\n 55596: a2 = u8 [a4 + 0x1a]\n 55599: s1 = u8 [a4 + 0x1b]\n 55602: a0 = a0 << 0x8\n 55605: a0 = a0 | a1\n 55608: a2 = a2 << 0x10\n 55611: s1 = s1 << 0x18\n 55614: a2 = a2 | s1\n 55617: a3 = a2 | a0\n 55620: a1 = u8 [a4 + 0x1d]\n 55623: a2 = u8 [a4 + 0x1c]\n 55626: s1 = u8 [a4 + 0x1e]\n 55629: a0 = u8 [a4 + 0x1f]\n 55632: a1 = a1 << 0x8\n 55635: a1 = a1 | a2\n 55638: s1 = s1 << 0x10\n 55641: a0 = a0 << 0x18\n 55644: a0 = a0 | s1\n 55647: a0 = a0 | a1\n 55650: a0 = a0 << 0x20\n 55653: s1 = a0 | a3\n 55656: a0 = u8 [a4 + 0x11]\n 55659: a1 = u8 [a4 + 0x10]\n 55662: a2 = u8 [a4 + 0x12]\n 55665: a3 = u8 [a4 + 0x13]\n 55668: a0 = a0 << 0x8\n 55671: a0 = a0 | a1\n 55674: a2 = a2 << 0x10\n 55677: a3 = a3 << 0x18\n 55680: a2 = a2 | a3\n 55683: a5 = a2 | a0\n 55686: a1 = u8 [a4 + 0x15]\n 55689: a2 = u8 [a4 + 0x14]\n 55692: a3 = u8 [a4 + 0x16]\n 55695: a0 = u8 [a4 + 0x17]\n 55698: a1 = a1 << 0x8\n 55701: a1 = a1 | a2\n 55704: a3 = a3 << 0x10\n 55707: a0 = a0 << 0x18\n 55710: a0 = a0 | a3\n 55713: a0 = a0 | a1\n 55716: a0 = a0 << 0x20\n 55719: t0 = a0 | a5\n 55722: a0 = u8 [a4 + 0x9]\n 55725: a2 = u8 [a4 + 0x8]\n 55728: a3 = u8 [a4 + 0xa]\n 55731: a5 = u8 [a4 + 0xb]\n 55734: a0 = a0 << 0x8\n 55737: a0 = a0 | a2\n 55740: a3 = a3 << 0x10\n 55743: a5 = a5 << 0x18\n 55746: a3 = a3 | a5\n 55749: a1 = a3 | a0\n 55752: a2 = u8 [a4 + 0xd]\n 55755: a3 = u8 [a4 + 0xc]\n 55758: a5 = u8 [a4 + 0xe]\n 55761: a0 = u8 [a4 + 0xf]\n 55764: a2 = a2 << 0x8\n 55767: a2 = a2 | a3\n 55770: a5 = a5 << 0x10\n 55773: a0 = a0 << 0x18\n 55776: a0 = a0 | a5\n 55779: a0 = a0 | a2\n 55782: a0 = a0 << 0x20\n 55785: a0 = a0 | a1\n 55788: a1 = u8 [a4 + 0x1]\n 55791: a2 = u8 [a4]\n 55793: a3 = u8 [a4 + 0x2]\n 55796: a5 = u8 [a4 + 0x3]\n 55799: a1 = a1 << 0x8\n 55802: a1 = a1 | a2\n 55805: a3 = a3 << 0x10\n 55808: a5 = a5 << 0x18\n 55811: a3 = a3 | a5\n 55814: a1 = a1 | a3\n 55817: a2 = u8 [a4 + 0x5]\n 55820: a3 = u8 [a4 + 0x4]\n 55823: a5 = u8 [a4 + 0x6]\n 55826: a4 = u8 [a4 + 0x7]\n 55829: a2 = a2 << 0x8\n 55832: a2 = a2 | a3\n 55835: a5 = a5 << 0x10\n 55838: a4 = a4 << 0x18\n 55841: a4 = a4 | a5\n 55844: a2 = a2 | a4\n 55847: a2 = a2 << 0x20\n 55850: a4 = a2 | a1\n 55853: t2 = 0 if t1 != 0\n 55855: ra = 0 if t1 != 0\n 55857: a5 = u64 [sp + 0x38]\n 55860: a5 = 0 if t1 != 0\n 55862: a2 = u64 [sp + 0x50]\n 55865: a2 = 0 if t1 != 0\n 55867: a4 = 0 if t1 != 0\n 55869: a0 = 0 if t1 != 0\n 55871: t0 = 0 if t1 != 0\n 55873: s1 = 0 if t1 != 0\n 55875: a1 = u64 [sp + 0x60]\n 55878: t1 = a1 & ~a2\n 55881: a2 = a2 & s1\n 55884: a1 = u64 [sp + 0x68]\n 55887: a3 = a1 & ~a5\n 55890: a5 = t0 & a5\n 55893: a1 = u64 [sp + 0x70]\n 55896: s1 = a1 & ~ra\n 55899: a0 = a0 & ra\n 55902: a1 = u64 [sp + 0x78]\n 55905: a1 = a1 & ~t2\n 55908: a4 = a4 & t2\n 55911: a1 = a1 | a4\n 55914: a0 = a0 | s1\n 55917: a3 = a3 | a5\n 55920: a2 = t1 | a2\n 55923: a4 = u64 [sp + 0x80]\n 55927: u64 [sp + 0x3f8] = a4\n 55931: a4 = u64 [sp + 0x88]\n 55935: u64 [sp + 0x3f0] = a4\n 55939: a4 = u64 [sp + 0x90]\n 55943: u64 [sp + 0x3e8] = a4\n 55947: a4 = u64 [sp + 0x98]\n 55951: u64 [sp + 0x3e0] = a4\n 55955: u64 [sp + 0x438] = a2\n 55959: u64 [sp + 0x430] = a3\n 55963: u64 [sp + 0x428] = a0\n 55967: u64 [sp + 0x420] = a1\n 55971: i32 a1 = sp + 0x3e0\n 55975: i32 a3 = sp + 0x420\n 55979: a2 = 0xffffffffffffffff\n 55982: a4 = 0x20\n 55985: a0 = 0\n 55987: ecalli 12 // 'set_storage'\n 55989: fallthrough\n      : @844 (gas: 35)\n 55990: u64 [sp + 344] = 0\n 55994: u64 [sp + 336] = 0\n 55998: u64 [sp + 328] = 0\n 56002: a0 = sp + 0x140\n 56006: u64 [sp + 320] = 0x3\n 56011: ra = 0x2d8\n 56015: sp = sp + 0xfffffffffffffe00\n 56019: u64 [sp + 0x1f8] = ra\n 56023: u64 [sp + 0x1f0] = s0\n 56027: u64 [sp + 0x1e8] = s1\n 56031: s0 = sp + 0x200\n 56035: sp = sp & 0xffffffffffffffe0\n 56038: a3 = u64 [a0 + 0x18]\n 56041: a2 = u64 [a0 + 0x10]\n 56044: a1 = u64 [a0 + 0x8]\n 56047: s1 = u64 [a0]\n 56049: u64 [sp + 0x68] = a3\n 56052: u64 [sp + 0x1b8] = a3\n 56056: u64 [sp + 0x70] = a2\n 56059: u64 [sp + 0x1b0] = a2\n 56063: u64 [sp + 0x78] = a1\n 56066: u64 [sp + 0x1a8] = a1\n 56070: u64 [sp + 0x1a0] = s1\n 56074: u64 [sp + 472] = 0\n 56078: u64 [sp + 464] = 0\n 56082: u64 [sp + 456] = 0\n 56086: u64 [sp + 448] = 0\n 56090: u32 [sp + 384] = 0x20\n 56095: i32 a1 = sp + 0x1a0\n 56099: i32 a3 = sp + 0x1c0\n 56103: i32 a4 = sp + 0x180\n 56107: a2 = 0xffffffffffffffff\n 56110: a0 = 0\n 56112: ecalli 7 // 'get_storage'\n 56114: jump @820\n      : @845 [@dyn 364] (gas: 38)\n 56117: u64 [sp + 1016] = 0\n 56121: u64 [sp + 1008] = 0\n 56125: u64 [sp + 1000] = 0\n 56129: u64 [sp + 992] = 0x4\n 56134: u64 [sp + 1080] = 0\n 56138: u64 [sp + 1072] = 0\n 56142: u64 [sp + 1064] = 0\n 56146: u64 [sp + 1056] = 0\n 56150: u32 [sp + 1024] = 0x20\n 56155: i32 a1 = sp + 0x3e0\n 56159: i32 a3 = sp + 0x420\n 56163: i32 a4 = sp + 0x400\n 56167: a2 = 0xffffffffffffffff\n 56170: a0 = 0\n 56172: ecalli 7 // 'get_storage'\n 56174: a0 = u64 [sp + 0x420]\n 56178: u64 [sp + 0x98] = a0\n 56182: a0 = u64 [sp + 0x428]\n 56186: u64 [sp + 0x90] = a0\n 56190: a0 = u64 [sp + 0x430]\n 56194: u64 [sp + 0x88] = a0\n 56198: s1 = u64 [sp + 0x438]\n 56202: u64 [sp + 1016] = 0\n 56206: u64 [sp + 1008] = 0\n 56210: u64 [sp + 1000] = 0\n 56214: u64 [sp + 992] = 0x3\n 56219: u64 [sp + 1080] = 0\n 56223: u64 [sp + 1072] = 0\n 56227: u64 [sp + 1064] = 0\n 56231: u64 [sp + 1056] = 0\n 56235: u32 [sp + 1024] = 0x20\n 56240: i32 a1 = sp + 0x3e0\n 56244: i32 a3 = sp + 0x420\n 56248: i32 a4 = sp + 0x400\n 56252: a2 = 0xffffffffffffffff\n 56255: a0 = 0\n 56257: ecalli 7 // 'get_storage'\n 56259: fallthrough\n      : @846 (gas: 19)\n 56260: a0 = u64 [sp + 0x438]\n 56264: t0 = u64 [sp + 0x420]\n 56268: a2 = u64 [sp + 0x430]\n 56272: a3 = u64 [sp + 0x428]\n 56276: a4 = s1 ^ a0\n 56279: s1 = a0 <u s1\n 56282: a0 = u64 [sp + 0x88]\n 56286: a5 = a2 <u a0\n 56289: a5 = s1 if a4 != 0\n 56292: a1 = u64 [sp + 0x90]\n 56296: s1 = a1 ^ a3\n 56299: a3 = a3 <u a1\n 56302: a1 = u64 [sp + 0x98]\n 56306: a1 = t0 <u a1\n 56309: a1 = a3 if s1 != 0\n 56312: a0 = a0 ^ a2\n 56315: a0 = a0 | a4\n 56318: a1 = a5 if a0 != 0\n 56321: jump @848 if a1 == 0\n      : @847 (gas: 25)\n 56324: u64 [sp + 1016] = 0\n 56328: u64 [sp + 1008] = 0\n 56332: u64 [sp + 1000] = 0\n 56336: u64 [sp + 992] = 0x3\n 56341: u64 [sp + 1080] = 0\n 56345: u64 [sp + 1072] = 0\n 56349: u64 [sp + 1064] = 0\n 56353: u64 [sp + 1056] = 0\n 56357: u32 [sp + 1024] = 0x20\n 56362: i32 a1 = sp + 0x3e0\n 56366: i32 a3 = sp + 0x420\n 56370: i32 a4 = sp + 0x400\n 56374: a2 = 0xffffffffffffffff\n 56377: a0 = 0\n 56379: ecalli 7 // 'get_storage'\n 56381: a1 = u64 [sp + 0x420]\n 56385: a0 = u64 [sp + 0x428]\n 56389: a2 = u64 [sp + 0x430]\n 56393: a3 = u64 [sp + 0x438]\n 56397: u64 [sp + 0x138] = a3\n 56401: u64 [sp + 0x130] = a2\n 56405: u64 [sp + 0x128] = a0\n 56409: a0 = sp + 0x120\n 56413: u64 [sp + 0x120] = a1\n 56417: ra = 730, jump @1179\n      : @848 [@dyn 365] (gas: 3)\n 56423: a0 = 0x40\n 56426: a1 = 0x20\n 56429: ra = 732, jump @0\n      : @849 [@dyn 366] (gas: 100)\n 56436: a1 = u8 [a0 + 0x11]\n 56439: a2 = u8 [a0 + 0x10]\n 56442: a3 = u8 [a0 + 0x12]\n 56445: a4 = u8 [a0 + 0x13]\n 56448: a1 = a1 << 0x8\n 56451: a1 = a1 | a2\n 56454: a3 = a3 << 0x10\n 56457: a4 = a4 << 0x18\n 56460: a3 = a3 | a4\n 56463: a1 = a1 | a3\n 56466: a2 = u8 [a0 + 0x15]\n 56469: a3 = u8 [a0 + 0x14]\n 56472: a4 = u8 [a0 + 0x16]\n 56475: a5 = u8 [a0 + 0x17]\n 56478: a2 = a2 << 0x8\n 56481: a2 = a2 | a3\n 56484: a4 = a4 << 0x10\n 56487: a5 = a5 << 0x18\n 56490: a4 = a4 | a5\n 56493: a2 = a2 | a4\n 56496: a2 = a2 << 0x20\n 56499: t0 = a2 | a1\n 56502: a2 = u8 [a0 + 0x1]\n 56505: a3 = u8 [a0]\n 56507: a4 = u8 [a0 + 0x2]\n 56510: a5 = u8 [a0 + 0x3]\n 56513: a2 = a2 << 0x8\n 56516: a2 = a2 | a3\n 56519: a4 = a4 << 0x10\n 56522: a5 = a5 << 0x18\n 56525: a4 = a4 | a5\n 56528: a2 = a2 | a4\n 56531: a3 = u8 [a0 + 0x5]\n 56534: a4 = u8 [a0 + 0x4]\n 56537: a5 = u8 [a0 + 0x6]\n 56540: s1 = u8 [a0 + 0x7]\n 56543: a3 = a3 << 0x8\n 56546: a3 = a3 | a4\n 56549: a5 = a5 << 0x10\n 56552: s1 = s1 << 0x18\n 56555: a5 = a5 | s1\n 56558: a3 = a3 | a5\n 56561: a3 = a3 << 0x20\n 56564: a2 = a2 | a3\n 56567: a3 = u8 [a0 + 0x19]\n 56570: a4 = u8 [a0 + 0x18]\n 56573: a5 = u8 [a0 + 0x1a]\n 56576: s1 = u8 [a0 + 0x1b]\n 56579: a3 = a3 << 0x8\n 56582: a3 = a3 | a4\n 56585: a5 = a5 << 0x10\n 56588: s1 = s1 << 0x18\n 56591: a5 = a5 | s1\n 56594: a3 = a3 | a5\n 56597: a4 = u8 [a0 + 0x1d]\n 56600: a5 = u8 [a0 + 0x1c]\n 56603: s1 = u8 [a0 + 0x1e]\n 56606: a1 = u8 [a0 + 0x1f]\n 56609: a4 = a4 << 0x8\n 56612: a4 = a4 | a5\n 56615: s1 = s1 << 0x10\n 56618: a1 = a1 << 0x18\n 56621: a1 = a1 | s1\n 56624: a1 = a1 | a4\n 56627: a1 = a1 << 0x20\n 56630: a3 = a3 | a1\n 56633: a1 = u8 [a0 + 0x9]\n 56636: a4 = u8 [a0 + 0x8]\n 56639: a5 = u8 [a0 + 0xa]\n 56642: s1 = u8 [a0 + 0xb]\n 56645: a1 = a1 << 0x8\n 56648: a1 = a1 | a4\n 56651: a5 = a5 << 0x10\n 56654: s1 = s1 << 0x18\n 56657: a5 = a5 | s1\n 56660: a1 = a1 | a5\n 56663: a4 = u8 [a0 + 0xd]\n 56666: a5 = u8 [a0 + 0xc]\n 56669: s1 = u8 [a0 + 0xe]\n 56672: a0 = u8 [a0 + 0xf]\n 56675: a4 = a4 << 0x8\n 56678: a4 = a4 | a5\n 56681: s1 = s1 << 0x10\n 56684: a0 = a0 << 0x18\n 56687: a0 = a0 | s1\n 56690: a0 = a0 | a4\n 56693: a0 = a0 << 0x20\n 56696: a0 = a0 | a1\n 56699: a1 = reverse a0\n 56701: a0 = reverse a3\n 56703: a2 = reverse a2\n 56705: a3 = reverse t0\n 56707: a2 = a2 | a3\n 56710: a3 = a0 | a1\n 56713: a3 = a3 | a2\n 56716: a3 = a3 >> 0x20\n 56719: a1 = a1 | a2\n 56722: a1 = a1 << 0x20\n 56725: a1 = a1 | a3\n 56728: jump @852 if a1 != 0\n      : @850 (gas: 2)\n 56731: i32 a0 = a0 + 0\n 56733: ra = 734, jump @0\n      : @851 [@dyn 367] (gas: 26)\n 56740: a1 = u64 [0x20000]\n 56745: a2 = u64 [0x20008]\n 56750: a3 = u64 [0x20010]\n 56755: a4 = u64 [0x20018]\n 56760: u64 [sp + 0x438] = a1\n 56764: u64 [sp + 0x430] = a2\n 56768: u64 [sp + 0x428] = a3\n 56772: u64 [sp + 0x420] = a4\n 56776: a1 = u64 [sp + 0x18]\n 56779: u64 [sp + 0x450] = a1\n 56783: a1 = u64 [sp + 0x28]\n 56786: u64 [sp + 0x448] = a1\n 56790: u64 [sp + 1088] = 0\n 56794: a1 = u64 [sp + 0x20]\n 56797: u64 [sp + 0x458] = a1\n 56801: i32 a2 = a0 + 0\n 56803: i32 a0 = sp + 0x420\n 56807: a1 = 0x2\n 56810: a3 = 0\n 56812: ecalli 6 // 'deposit_event'\n 56814: sp = s0 + 0xfffffffffffffb80\n 56818: ra = u64 [sp + 0x478]\n 56822: s0 = u64 [sp + 0x470]\n 56826: s1 = u64 [sp + 0x468]\n 56830: sp = sp + 0x480\n 56834: ret\n      : @852 (gas: 1)\n 56836: trap\n      : @853 (gas: 8)\n 56837: u64 [sp + 208] = 0\n 56841: u64 [sp + 200] = 0\n 56845: u64 [sp + 192] = 0\n 56849: a0 = 0x4e487b7100000000\n 56859: a1 = sp + 0xc0\n 56863: u64 [sp + 0xd8] = a0\n 56867: a0 = 0\n 56869: ra = 736, jump @23\n      : @854 [@dyn 368] (gas: 7)\n 56876: u64 [sp + 184] = 0\n 56880: u64 [sp + 176] = 0\n 56884: u64 [sp + 160] = 0x11\n 56889: a0 = 0x4\n 56892: a1 = sp + 0xa0\n 56896: u64 [sp + 168] = 0\n 56900: ra = 738, jump @23\n      : @855 [@dyn 369] (gas: 3)\n 56907: a1 = 0x24\n 56910: a0 = 0\n 56912: ra = 740, jump @0\n      : @856 [@dyn 370] (gas: 5)\n 56919: i32 a1 = a0 + 0\n 56921: a0 = 0x1\n 56924: a2 = 0x24\n 56927: ecalli 10 // 'seal_return'\n 56929: fallthrough\n      : @857 (gas: 8)\n 56930: u64 [sp + 272] = 0\n 56934: u64 [sp + 264] = 0\n 56938: u64 [sp + 256] = 0\n 56942: a0 = 0x4e487b7100000000\n 56952: a1 = sp + 0x100\n 56956: u64 [sp + 0x118] = a0\n 56960: a0 = 0\n 56962: ra = 742, jump @23\n      : @858 [@dyn 371] (gas: 8)\n 56969: u64 [sp + 248] = 0\n 56973: u64 [sp + 240] = 0\n 56977: u64 [sp + 224] = 0x11\n 56982: a0 = 0x4\n 56985: a1 = sp + 0xe0\n 56989: u64 [sp + 232] = 0\n 56993: ra = 0x2e2\n 56997: jump @23\n      : @859 [@dyn 372] (gas: 56)\n 57001: a1 = u64 [sp + 0x10]\n 57004: a1 = reverse a1\n 57006: a2 = u64 [sp + 0x18]\n 57009: a2 = reverse a2\n 57011: a3 = s1 >> 0x18\n 57014: u8 [a0 + 0xf] = a3\n 57017: a3 = s1 >> 0x10\n 57020: u8 [a0 + 0xe] = a3\n 57023: a3 = s1 >> 0x8\n 57026: u8 [a0 + 0xd] = a3\n 57029: u8 [a0 + 0xc] = s1\n 57032: u8 [a0 + 11] = 0\n 57035: u8 [a0 + 10] = 0\n 57038: u8 [a0 + 9] = 0\n 57041: u8 [a0 + 8] = 0\n 57044: u8 [a0 + 7] = 0\n 57047: u8 [a0 + 6] = 0\n 57050: u8 [a0 + 5] = 0\n 57053: u8 [a0 + 4] = 0\n 57056: u8 [a0 + 3] = 0\n 57059: u8 [a0 + 2] = 0\n 57062: u8 [a0 + 1] = 0\n 57065: u8 [a0 + 0] = 0\n 57067: u8 [a0 + 0x18] = a2\n 57070: u8 [a0 + 0x10] = a1\n 57073: a3 = a2 >> 0x38\n 57076: u8 [a0 + 0x1f] = a3\n 57079: a3 = a2 >> 0x30\n 57082: u8 [a0 + 0x1e] = a3\n 57085: a3 = a2 >> 0x28\n 57088: u8 [a0 + 0x1d] = a3\n 57091: a3 = a2 >> 0x20\n 57094: u8 [a0 + 0x1c] = a3\n 57097: a3 = a2 >> 0x18\n 57100: u8 [a0 + 0x1b] = a3\n 57103: a3 = a2 >> 0x10\n 57106: u8 [a0 + 0x1a] = a3\n 57109: a2 = a2 >> 0x8\n 57112: u8 [a0 + 0x19] = a2\n 57115: a2 = a1 >> 0x38\n 57118: u8 [a0 + 0x17] = a2\n 57121: a2 = a1 >> 0x30\n 57124: u8 [a0 + 0x16] = a2\n 57127: a2 = a1 >> 0x28\n 57130: u8 [a0 + 0x15] = a2\n 57133: a2 = a1 >> 0x20\n 57136: u8 [a0 + 0x14] = a2\n 57139: a2 = a1 >> 0x18\n 57142: u8 [a0 + 0x13] = a2\n 57145: a2 = a1 >> 0x10\n 57148: u8 [a0 + 0x12] = a2\n 57151: a1 = a1 >> 0x8\n 57154: u8 [a0 + 0x11] = a1\n 57157: a0 = 0x20\n 57160: a1 = 0x20\n 57163: ra = 746, jump @0\n      : @860 [@dyn 373] (gas: 35)\n 57170: u8 [a0 + 31] = 0x2\n 57174: u8 [a0 + 30] = 0\n 57177: u8 [a0 + 29] = 0\n 57180: u8 [a0 + 28] = 0\n 57183: u8 [a0 + 27] = 0\n 57186: u8 [a0 + 26] = 0\n 57189: u8 [a0 + 25] = 0\n 57192: u8 [a0 + 24] = 0\n 57195: u8 [a0 + 23] = 0\n 57198: u8 [a0 + 22] = 0\n 57201: u8 [a0 + 21] = 0\n 57204: u8 [a0 + 20] = 0\n 57207: u8 [a0 + 19] = 0\n 57210: u8 [a0 + 18] = 0\n 57213: u8 [a0 + 17] = 0\n 57216: u8 [a0 + 16] = 0\n 57219: u8 [a0 + 15] = 0\n 57222: u8 [a0 + 14] = 0\n 57225: u8 [a0 + 13] = 0\n 57228: u8 [a0 + 12] = 0\n 57231: u8 [a0 + 11] = 0\n 57234: u8 [a0 + 10] = 0\n 57237: u8 [a0 + 9] = 0\n 57240: u8 [a0 + 8] = 0\n 57243: u8 [a0 + 7] = 0\n 57246: u8 [a0 + 6] = 0\n 57249: u8 [a0 + 5] = 0\n 57252: u8 [a0 + 4] = 0\n 57255: u8 [a0 + 3] = 0\n 57258: u8 [a0 + 2] = 0\n 57261: u8 [a0 + 1] = 0\n 57264: u8 [a0 + 0] = 0\n 57266: a1 = 0x40\n 57269: a0 = 0\n 57271: ra = 748, jump @0\n      : @861 [@dyn 374] (gas: 28)\n 57278: i32 a0 = a0 + 0\n 57280: i32 a2 = sp + 0xa0\n 57284: a1 = 0x40\n 57287: ecalli 8 // 'hash_keccak_256'\n 57289: a0 = u64 [sp + 0xb8]\n 57293: a1 = u64 [sp + 0xb0]\n 57297: a2 = u64 [sp + 0xa8]\n 57301: a3 = u64 [sp + 0xa0]\n 57305: a0 = reverse a0\n 57307: a1 = reverse a1\n 57309: a2 = reverse a2\n 57311: a3 = reverse a3\n 57313: u64 [sp + 0x98] = a3\n 57317: u64 [sp + 0x90] = a2\n 57321: u64 [sp + 0x88] = a1\n 57325: u64 [sp + 0x80] = a0\n 57329: u64 [sp + 184] = 0\n 57333: u64 [sp + 176] = 0\n 57337: u64 [sp + 168] = 0\n 57341: u64 [sp + 160] = 0\n 57345: u32 [sp + 192] = 0x20\n 57350: i32 a1 = sp + 0x80\n 57354: i32 a3 = sp + 0xa0\n 57358: i32 a4 = sp + 0xc0\n 57362: a2 = 0xffffffffffffffff\n 57365: a0 = 0\n 57367: ecalli 7 // 'get_storage'\n 57369: fallthrough\n      : @862 (gas: 2)\n 57370: a0 = u8 [sp + 0xa0]\n 57374: jump @865 if a0 == 0\n      : @863 (gas: 10)\n 57377: a0 = u64 [sp + 0x20]\n 57380: u64 [sp + 0x40] = a0\n 57383: a0 = u64 [sp + 0x28]\n 57386: u64 [sp + 0x48] = a0\n 57389: a0 = u64 [sp + 0x30]\n 57392: u64 [sp + 0x50] = a0\n 57395: a0 = sp + 0x40\n 57398: a1 = u64 [sp + 0x38]\n 57401: u64 [sp + 0x58] = a1\n 57404: ra = 750, jump @867\n      : @864 [@dyn 375] (gas: 6)\n 57409: sp = s0 + 0xffffffffffffff20\n 57413: ra = u64 [sp + 0xd8]\n 57417: s0 = u64 [sp + 0xd0]\n 57421: s1 = u64 [sp + 0xc8]\n 57425: sp = sp + 0xe0\n 57429: ret\n      : @865 (gas: 2)\n 57431: a1 = 0\n 57433: ra = 752, jump @0\n      : @866 [@dyn 376] (gas: 6)\n 57440: i32 a1 = a0 + 0\n 57442: a0 = 0x1\n 57445: a2 = 0\n 57447: ra = 0x2f2\n 57451: ecalli 10 // 'seal_return'\n 57453: fallthrough\n      : @867 [@dyn 377] (gas: 33)\n 57454: sp = sp + 0xffffffffffffff00\n 57458: u64 [sp + 0xf8] = ra\n 57462: u64 [sp + 0xf0] = s0\n 57466: u64 [sp + 0xe8] = s1\n 57470: s0 = sp + 0x100\n 57474: sp = sp & 0xffffffffffffffe0\n 57477: a1 = u64 [a0]\n 57479: u64 [sp + 0x58] = a1\n 57482: a1 = u64 [a0 + 0x8]\n 57485: u64 [sp + 0x50] = a1\n 57488: a1 = u64 [a0 + 0x10]\n 57491: u64 [sp + 0x48] = a1\n 57494: s1 = u64 [a0 + 0x18]\n 57497: i32 a0 = sp + 0x80\n 57501: ecalli 5 // 'caller'\n 57503: a0 = u64 [sp + 0x88]\n 57507: a1 = i32 [sp + 0x90]\n 57511: a3 = u64 [sp + 0x80]\n 57515: u64 [sp + 0x38] = a3\n 57518: a0 = reverse a0\n 57520: a2 = a0 << 0x20\n 57523: a1 = reverse a1\n 57525: a1 = a1 >> 0x20\n 57528: a1 = a1 | a2\n 57531: u64 [sp + 0x30] = a1\n 57534: a0 = a0 >> 0x20\n 57537: a1 = reverse a3\n 57539: a1 = a1 << 0x20\n 57542: a0 = a0 | a1\n 57545: u64 [sp + 0x28] = a0\n 57548: a1 = 0x20\n 57551: a0 = 0\n 57553: ra = 756, jump @0\n      : @868 [@dyn 378] (gas: 71)\n 57560: u64 [sp + 0x40] = s1\n 57563: a1 = reverse s1\n 57565: a2 = u64 [sp + 0x48]\n 57568: a2 = reverse a2\n 57570: a3 = u64 [sp + 0x50]\n 57573: a3 = reverse a3\n 57575: a4 = u64 [sp + 0x58]\n 57578: a4 = reverse a4\n 57580: a5 = a4 >> 0x38\n 57583: u8 [a0 + 0x1f] = a5\n 57586: a5 = a4 >> 0x30\n 57589: u8 [a0 + 0x1e] = a5\n 57592: a5 = a4 >> 0x28\n 57595: u8 [a0 + 0x1d] = a5\n 57598: a5 = a4 >> 0x20\n 57601: u8 [a0 + 0x1c] = a5\n 57604: a5 = a4 >> 0x18\n 57607: u8 [a0 + 0x1b] = a5\n 57610: a5 = a4 >> 0x10\n 57613: u8 [a0 + 0x1a] = a5\n 57616: a5 = a4 >> 0x8\n 57619: u8 [a0 + 0x19] = a5\n 57622: u8 [a0 + 0x18] = a4\n 57625: a4 = a3 >> 0x38\n 57628: u8 [a0 + 0x17] = a4\n 57631: a4 = a3 >> 0x30\n 57634: u8 [a0 + 0x16] = a4\n 57637: a4 = a3 >> 0x28\n 57640: u8 [a0 + 0x15] = a4\n 57643: a4 = a3 >> 0x20\n 57646: u8 [a0 + 0x14] = a4\n 57649: a4 = a3 >> 0x18\n 57652: u8 [a0 + 0x13] = a4\n 57655: a4 = a3 >> 0x10\n 57658: u8 [a0 + 0x12] = a4\n 57661: a4 = a3 >> 0x8\n 57664: u8 [a0 + 0x11] = a4\n 57667: u8 [a0 + 0x10] = a3\n 57670: a3 = a2 >> 0x38\n 57673: u8 [a0 + 0xf] = a3\n 57676: a3 = a2 >> 0x30\n 57679: u8 [a0 + 0xe] = a3\n 57682: a3 = a2 >> 0x28\n 57685: u8 [a0 + 0xd] = a3\n 57688: a3 = a2 >> 0x20\n 57691: u8 [a0 + 0xc] = a3\n 57694: a3 = a2 >> 0x18\n 57697: u8 [a0 + 0xb] = a3\n 57700: a3 = a2 >> 0x10\n 57703: u8 [a0 + 0xa] = a3\n 57706: a3 = a2 >> 0x8\n 57709: u8 [a0 + 0x9] = a3\n 57712: u8 [a0 + 0x8] = a2\n 57715: a2 = a1 >> 0x38\n 57718: u8 [a0 + 0x7] = a2\n 57721: a2 = a1 >> 0x30\n 57724: u8 [a0 + 0x6] = a2\n 57727: a2 = a1 >> 0x28\n 57730: u8 [a0 + 0x5] = a2\n 57733: a2 = a1 >> 0x20\n 57736: u8 [a0 + 0x4] = a2\n 57739: a2 = a1 >> 0x18\n 57742: u8 [a0 + 0x3] = a2\n 57745: a2 = a1 >> 0x10\n 57748: u8 [a0 + 0x2] = a2\n 57751: a2 = a1 >> 0x8\n 57754: u8 [a0 + 0x1] = a2\n 57757: u8 [a0] = a1\n 57759: a0 = 0x20\n 57762: a1 = 0x20\n 57765: ra = 758, jump @0\n      : @869 [@dyn 379] (gas: 35)\n 57772: u8 [a0 + 31] = 0x1\n 57776: u8 [a0 + 30] = 0\n 57779: u8 [a0 + 29] = 0\n 57782: u8 [a0 + 28] = 0\n 57785: u8 [a0 + 27] = 0\n 57788: u8 [a0 + 26] = 0\n 57791: u8 [a0 + 25] = 0\n 57794: u8 [a0 + 24] = 0\n 57797: u8 [a0 + 23] = 0\n 57800: u8 [a0 + 22] = 0\n 57803: u8 [a0 + 21] = 0\n 57806: u8 [a0 + 20] = 0\n 57809: u8 [a0 + 19] = 0\n 57812: u8 [a0 + 18] = 0\n 57815: u8 [a0 + 17] = 0\n 57818: u8 [a0 + 16] = 0\n 57821: u8 [a0 + 15] = 0\n 57824: u8 [a0 + 14] = 0\n 57827: u8 [a0 + 13] = 0\n 57830: u8 [a0 + 12] = 0\n 57833: u8 [a0 + 11] = 0\n 57836: u8 [a0 + 10] = 0\n 57839: u8 [a0 + 9] = 0\n 57842: u8 [a0 + 8] = 0\n 57845: u8 [a0 + 7] = 0\n 57848: u8 [a0 + 6] = 0\n 57851: u8 [a0 + 5] = 0\n 57854: u8 [a0 + 4] = 0\n 57857: u8 [a0 + 3] = 0\n 57860: u8 [a0 + 2] = 0\n 57863: u8 [a0 + 1] = 0\n 57866: u8 [a0 + 0] = 0\n 57868: a1 = 0x40\n 57871: a0 = 0\n 57873: ra = 760, jump @0\n      : @870 [@dyn 380] (gas: 14)\n 57880: i32 a0 = a0 + 0\n 57882: i32 a2 = sp + 0xc0\n 57886: a1 = 0x40\n 57889: ecalli 8 // 'hash_keccak_256'\n 57891: a0 = u64 [sp + 0xc0]\n 57895: u64 [sp + 0x20] = a0\n 57898: a0 = u64 [sp + 0xc8]\n 57902: u64 [sp + 0x18] = a0\n 57905: a0 = u64 [sp + 0xd0]\n 57909: u64 [sp + 0x10] = a0\n 57912: s1 = u64 [sp + 0xd8]\n 57916: a1 = 0x20\n 57919: a0 = 0\n 57921: ra = 762, jump @0\n      : @871 [@dyn 381] (gas: 57)\n 57928: a1 = u64 [sp + 0x28]\n 57931: a1 = reverse a1\n 57933: a2 = u64 [sp + 0x30]\n 57936: a2 = reverse a2\n 57938: a3 = a2 >> 0x38\n 57941: u8 [a0 + 0x1f] = a3\n 57944: a3 = a2 >> 0x30\n 57947: u8 [a0 + 0x1e] = a3\n 57950: a3 = a2 >> 0x28\n 57953: u8 [a0 + 0x1d] = a3\n 57956: a3 = a2 >> 0x20\n 57959: u8 [a0 + 0x1c] = a3\n 57962: a3 = a2 >> 0x18\n 57965: u8 [a0 + 0x1b] = a3\n 57968: a3 = a2 >> 0x10\n 57971: u8 [a0 + 0x1a] = a3\n 57974: a3 = a2 >> 0x8\n 57977: u8 [a0 + 0x19] = a3\n 57980: u8 [a0 + 0x18] = a2\n 57983: a2 = a1 >> 0x38\n 57986: u8 [a0 + 0x17] = a2\n 57989: a2 = a1 >> 0x30\n 57992: u8 [a0 + 0x16] = a2\n 57995: a2 = a1 >> 0x28\n 57998: u8 [a0 + 0x15] = a2\n 58001: a2 = a1 >> 0x20\n 58004: u8 [a0 + 0x14] = a2\n 58007: a2 = a1 >> 0x18\n 58010: u8 [a0 + 0x13] = a2\n 58013: a2 = a1 >> 0x10\n 58016: u8 [a0 + 0x12] = a2\n 58019: a2 = a1 >> 0x8\n 58022: u8 [a0 + 0x11] = a2\n 58025: u8 [a0 + 0x10] = a1\n 58028: a2 = u64 [sp + 0x38]\n 58031: a1 = a2 >> 0x18\n 58034: u8 [a0 + 0xf] = a1\n 58037: a1 = a2 >> 0x10\n 58040: u8 [a0 + 0xe] = a1\n 58043: a1 = a2 >> 0x8\n 58046: u8 [a0 + 0xd] = a1\n 58049: u8 [a0 + 0xc] = a2\n 58052: u8 [a0 + 11] = 0\n 58055: u8 [a0 + 10] = 0\n 58058: u8 [a0 + 9] = 0\n 58061: u8 [a0 + 8] = 0\n 58064: u8 [a0 + 7] = 0\n 58067: u8 [a0 + 6] = 0\n 58070: u8 [a0 + 5] = 0\n 58073: u8 [a0 + 4] = 0\n 58076: u8 [a0 + 3] = 0\n 58079: u8 [a0 + 2] = 0\n 58082: u8 [a0 + 1] = 0\n 58085: u8 [a0 + 0] = 0\n 58087: a0 = 0x20\n 58090: a1 = 0x20\n 58093: ra = 764, jump @0\n      : @872 [@dyn 382] (gas: 66)\n 58100: a1 = s1 >> 0x38\n 58103: u8 [a0 + 0x1f] = a1\n 58106: a1 = s1 >> 0x30\n 58109: u8 [a0 + 0x1e] = a1\n 58112: a1 = s1 >> 0x28\n 58115: u8 [a0 + 0x1d] = a1\n 58118: a1 = s1 >> 0x20\n 58121: u8 [a0 + 0x1c] = a1\n 58124: a1 = s1 >> 0x18\n 58127: u8 [a0 + 0x1b] = a1\n 58130: a1 = s1 >> 0x10\n 58133: u8 [a0 + 0x1a] = a1\n 58136: a1 = s1 >> 0x8\n 58139: u8 [a0 + 0x19] = a1\n 58142: u8 [a0 + 0x18] = s1\n 58145: a2 = u64 [sp + 0x10]\n 58148: a1 = a2 >> 0x38\n 58151: u8 [a0 + 0x17] = a1\n 58154: a1 = a2 >> 0x30\n 58157: u8 [a0 + 0x16] = a1\n 58160: a1 = a2 >> 0x28\n 58163: u8 [a0 + 0x15] = a1\n 58166: a1 = a2 >> 0x20\n 58169: u8 [a0 + 0x14] = a1\n 58172: a1 = a2 >> 0x18\n 58175: u8 [a0 + 0x13] = a1\n 58178: a1 = a2 >> 0x10\n 58181: u8 [a0 + 0x12] = a1\n 58184: a1 = a2 >> 0x8\n 58187: u8 [a0 + 0x11] = a1\n 58190: u8 [a0 + 0x10] = a2\n 58193: a2 = u64 [sp + 0x18]\n 58196: a1 = a2 >> 0x38\n 58199: u8 [a0 + 0xf] = a1\n 58202: a1 = a2 >> 0x30\n 58205: u8 [a0 + 0xe] = a1\n 58208: a1 = a2 >> 0x28\n 58211: u8 [a0 + 0xd] = a1\n 58214: a1 = a2 >> 0x20\n 58217: u8 [a0 + 0xc] = a1\n 58220: a1 = a2 >> 0x18\n 58223: u8 [a0 + 0xb] = a1\n 58226: a1 = a2 >> 0x10\n 58229: u8 [a0 + 0xa] = a1\n 58232: a1 = a2 >> 0x8\n 58235: u8 [a0 + 0x9] = a1\n 58238: u8 [a0 + 0x8] = a2\n 58241: a2 = u64 [sp + 0x20]\n 58244: a1 = a2 >> 0x38\n 58247: u8 [a0 + 0x7] = a1\n 58250: a1 = a2 >> 0x30\n 58253: u8 [a0 + 0x6] = a1\n 58256: a1 = a2 >> 0x28\n 58259: u8 [a0 + 0x5] = a1\n 58262: a1 = a2 >> 0x20\n 58265: u8 [a0 + 0x4] = a1\n 58268: a1 = a2 >> 0x18\n 58271: u8 [a0 + 0x3] = a1\n 58274: a1 = a2 >> 0x10\n 58277: u8 [a0 + 0x2] = a1\n 58280: a1 = a2 >> 0x8\n 58283: u8 [a0 + 0x1] = a1\n 58286: u8 [a0] = a2\n 58288: a1 = 0x40\n 58291: a0 = 0\n 58293: ra = 766, jump @0\n      : @873 [@dyn 383] (gas: 28)\n 58300: i32 a0 = a0 + 0\n 58302: i32 a2 = sp + 0xc0\n 58306: a1 = 0x40\n 58309: ecalli 8 // 'hash_keccak_256'\n 58311: a0 = u64 [sp + 0xd8]\n 58315: a1 = u64 [sp + 0xd0]\n 58319: a2 = u64 [sp + 0xc8]\n 58323: a3 = u64 [sp + 0xc0]\n 58327: a0 = reverse a0\n 58329: a1 = reverse a1\n 58331: a2 = reverse a2\n 58333: a3 = reverse a3\n 58335: u64 [sp + 0xb8] = a3\n 58339: u64 [sp + 0xb0] = a2\n 58343: u64 [sp + 0xa8] = a1\n 58347: u64 [sp + 0xa0] = a0\n 58351: u64 [sp + 216] = 0\n 58355: u64 [sp + 208] = 0\n 58359: u64 [sp + 200] = 0\n 58363: u64 [sp + 192] = 0\n 58367: u32 [sp + 224] = 0x20\n 58372: i32 a1 = sp + 0xa0\n 58376: i32 a3 = sp + 0xc0\n 58380: i32 a4 = sp + 0xe0\n 58384: a2 = 0xffffffffffffffff\n 58387: a0 = 0\n 58389: ecalli 7 // 'get_storage'\n 58391: fallthrough\n      : @874 (gas: 2)\n 58392: a0 = u8 [sp + 0xc0]\n 58396: jump @877 if a0 == 0\n      : @875 (gas: 10)\n 58399: a0 = u64 [sp + 0x58]\n 58402: u64 [sp + 0x60] = a0\n 58405: a0 = u64 [sp + 0x50]\n 58408: u64 [sp + 0x68] = a0\n 58411: a0 = u64 [sp + 0x48]\n 58414: u64 [sp + 0x70] = a0\n 58417: a0 = sp + 0x60\n 58420: a1 = u64 [sp + 0x40]\n 58423: u64 [sp + 0x78] = a1\n 58426: ra = 768, jump @879\n      : @876 [@dyn 384] (gas: 6)\n 58431: sp = s0 + 0xffffffffffffff00\n 58435: ra = u64 [sp + 0xf8]\n 58439: s0 = u64 [sp + 0xf0]\n 58443: s1 = u64 [sp + 0xe8]\n 58447: sp = sp + 0x100\n 58451: ret\n      : @877 (gas: 2)\n 58453: a1 = 0\n 58455: ra = 770, jump @0\n      : @878 [@dyn 385] (gas: 6)\n 58462: i32 a1 = a0 + 0\n 58464: a0 = 0x1\n 58467: a2 = 0\n 58469: ra = 0x304\n 58473: ecalli 10 // 'seal_return'\n 58475: fallthrough\n      : @879 [@dyn 386] (gas: 16)\n 58476: sp = sp + 0xffffffffffffff60\n 58480: u64 [sp + 0x98] = ra\n 58484: u64 [sp + 0x90] = s0\n 58488: u64 [sp + 0x88] = s1\n 58492: s0 = sp + 0xa0\n 58496: sp = sp & 0xffffffffffffffe0\n 58499: a1 = u64 [a0]\n 58501: u64 [sp] = a1\n 58503: a1 = u64 [a0 + 0x8]\n 58506: u64 [sp + 0x18] = a1\n 58509: a1 = u64 [a0 + 0x10]\n 58512: u64 [sp + 0x10] = a1\n 58515: s1 = u64 [a0 + 0x18]\n 58518: a1 = 0x20\n 58521: a0 = 0\n 58523: ra = 774, jump @0\n      : @880 [@dyn 387] (gas: 71)\n 58530: u64 [sp + 0x8] = s1\n 58533: a1 = reverse s1\n 58535: s1 = u64 [sp]\n 58537: a2 = u64 [sp + 0x10]\n 58540: a2 = reverse a2\n 58542: a3 = u64 [sp + 0x18]\n 58545: a3 = reverse a3\n 58547: a4 = reverse s1\n 58549: u8 [a0 + 0x18] = a4\n 58552: u8 [a0 + 0x10] = a3\n 58555: u8 [a0 + 0x8] = a2\n 58558: u8 [a0] = a1\n 58560: a5 = a4 >> 0x38\n 58563: u8 [a0 + 0x1f] = a5\n 58566: a5 = a4 >> 0x30\n 58569: u8 [a0 + 0x1e] = a5\n 58572: a5 = a4 >> 0x28\n 58575: u8 [a0 + 0x1d] = a5\n 58578: a5 = a4 >> 0x20\n 58581: u8 [a0 + 0x1c] = a5\n 58584: a5 = a4 >> 0x18\n 58587: u8 [a0 + 0x1b] = a5\n 58590: a5 = a4 >> 0x10\n 58593: u8 [a0 + 0x1a] = a5\n 58596: a4 = a4 >> 0x8\n 58599: u8 [a0 + 0x19] = a4\n 58602: a4 = a3 >> 0x38\n 58605: u8 [a0 + 0x17] = a4\n 58608: a4 = a3 >> 0x30\n 58611: u8 [a0 + 0x16] = a4\n 58614: a4 = a3 >> 0x28\n 58617: u8 [a0 + 0x15] = a4\n 58620: a4 = a3 >> 0x20\n 58623: u8 [a0 + 0x14] = a4\n 58626: a4 = a3 >> 0x18\n 58629: u8 [a0 + 0x13] = a4\n 58632: a4 = a3 >> 0x10\n 58635: u8 [a0 + 0x12] = a4\n 58638: a3 = a3 >> 0x8\n 58641: u8 [a0 + 0x11] = a3\n 58644: a3 = a2 >> 0x38\n 58647: u8 [a0 + 0xf] = a3\n 58650: a3 = a2 >> 0x30\n 58653: u8 [a0 + 0xe] = a3\n 58656: a3 = a2 >> 0x28\n 58659: u8 [a0 + 0xd] = a3\n 58662: a3 = a2 >> 0x20\n 58665: u8 [a0 + 0xc] = a3\n 58668: a3 = a2 >> 0x18\n 58671: u8 [a0 + 0xb] = a3\n 58674: a3 = a2 >> 0x10\n 58677: u8 [a0 + 0xa] = a3\n 58680: a2 = a2 >> 0x8\n 58683: u8 [a0 + 0x9] = a2\n 58686: a2 = a1 >> 0x38\n 58689: u8 [a0 + 0x7] = a2\n 58692: a2 = a1 >> 0x30\n 58695: u8 [a0 + 0x6] = a2\n 58698: a2 = a1 >> 0x28\n 58701: u8 [a0 + 0x5] = a2\n 58704: a2 = a1 >> 0x20\n 58707: u8 [a0 + 0x4] = a2\n 58710: a2 = a1 >> 0x18\n 58713: u8 [a0 + 0x3] = a2\n 58716: a2 = a1 >> 0x10\n 58719: u8 [a0 + 0x2] = a2\n 58722: a1 = a1 >> 0x8\n 58725: u8 [a0 + 0x1] = a1\n 58728: a0 = 0x20\n 58731: a1 = 0x20\n 58734: ra = 776, jump @0\n      : @881 [@dyn 388] (gas: 35)\n 58741: u8 [a0 + 31] = 0\n 58744: u8 [a0 + 30] = 0\n 58747: u8 [a0 + 29] = 0\n 58750: u8 [a0 + 28] = 0\n 58753: u8 [a0 + 27] = 0\n 58756: u8 [a0 + 26] = 0\n 58759: u8 [a0 + 25] = 0\n 58762: u8 [a0 + 24] = 0\n 58765: u8 [a0 + 23] = 0\n 58768: u8 [a0 + 22] = 0\n 58771: u8 [a0 + 21] = 0\n 58774: u8 [a0 + 20] = 0\n 58777: u8 [a0 + 19] = 0\n 58780: u8 [a0 + 18] = 0\n 58783: u8 [a0 + 17] = 0\n 58786: u8 [a0 + 16] = 0\n 58789: u8 [a0 + 15] = 0\n 58792: u8 [a0 + 14] = 0\n 58795: u8 [a0 + 13] = 0\n 58798: u8 [a0 + 12] = 0\n 58801: u8 [a0 + 11] = 0\n 58804: u8 [a0 + 10] = 0\n 58807: u8 [a0 + 9] = 0\n 58810: u8 [a0 + 8] = 0\n 58813: u8 [a0 + 7] = 0\n 58816: u8 [a0 + 6] = 0\n 58819: u8 [a0 + 5] = 0\n 58822: u8 [a0 + 4] = 0\n 58825: u8 [a0 + 3] = 0\n 58828: u8 [a0 + 2] = 0\n 58831: u8 [a0 + 1] = 0\n 58834: u8 [a0 + 0] = 0\n 58836: a1 = 0x40\n 58839: a0 = 0\n 58841: ra = 778, jump @0\n      : @882 [@dyn 389] (gas: 36)\n 58848: i32 a0 = a0 + 0\n 58850: i32 a2 = sp + 0x60\n 58853: a1 = 0x40\n 58856: ecalli 8 // 'hash_keccak_256'\n 58858: a0 = u64 [sp + 0x60]\n 58861: a1 = u64 [sp + 0x68]\n 58864: a2 = u64 [sp + 0x70]\n 58867: a3 = u64 [sp + 0x78]\n 58870: a0 = reverse a0\n 58872: a1 = reverse a1\n 58874: a2 = reverse a2\n 58876: a3 = reverse a3\n 58878: a4 = a3 + 0x3\n 58881: a3 = a4 <u a3\n 58884: a5 = a2 + a3\n 58887: a2 = a5 <u a2\n 58890: a2 = a3 if a3 == 0\n 58893: a2 = a2 + a1\n 58896: a1 = a2 <u a1\n 58899: a0 = a0 + a1\n 58902: u64 [sp + 0x48] = a5\n 58905: u64 [sp + 0x40] = a4\n 58908: u64 [sp + 0x50] = a2\n 58911: u64 [sp + 0x58] = a0\n 58914: u64 [sp + 120] = 0\n 58917: u64 [sp + 112] = 0\n 58920: u64 [sp + 104] = 0\n 58923: u64 [sp + 96] = 0\n 58926: u32 [sp + 128] = 0x20\n 58931: i32 a1 = sp + 0x40\n 58934: i32 a3 = sp + 0x60\n 58937: i32 a4 = sp + 0x80\n 58941: a2 = 0xffffffffffffffff\n 58944: a0 = 0\n 58946: ecalli 7 // 'get_storage'\n 58948: fallthrough\n      : @883 (gas: 2)\n 58949: a0 = u8 [sp + 0x60]\n 58952: jump @886 if a0 != 0\n      : @884 (gas: 9)\n 58955: u64 [sp + 0x20] = s1\n 58958: a0 = u64 [sp + 0x18]\n 58961: u64 [sp + 0x28] = a0\n 58964: a0 = u64 [sp + 0x10]\n 58967: u64 [sp + 0x30] = a0\n 58970: a0 = sp + 0x20\n 58973: a1 = u64 [sp + 0x8]\n 58976: u64 [sp + 0x38] = a1\n 58979: ra = 780, jump @888\n      : @885 [@dyn 390] (gas: 6)\n 58984: sp = s0 + 0xffffffffffffff60\n 58988: ra = u64 [sp + 0x98]\n 58992: s0 = u64 [sp + 0x90]\n 58996: s1 = u64 [sp + 0x88]\n 59000: sp = sp + 0xa0\n 59004: ret\n      : @886 (gas: 3)\n 59006: a0 = 0\n 59008: a1 = 0\n 59010: ra = 782, jump @0\n      : @887 [@dyn 391] (gas: 6)\n 59017: i32 a1 = a0 + 0\n 59019: a0 = 0x1\n 59022: a2 = 0\n 59024: ra = 0x310\n 59028: ecalli 10 // 'seal_return'\n 59030: fallthrough\n      : @888 [@dyn 392] (gas: 16)\n 59031: sp = sp + 0xfffffffffffffea0\n 59035: u64 [sp + 0x158] = ra\n 59039: u64 [sp + 0x150] = s0\n 59043: u64 [sp + 0x148] = s1\n 59047: s0 = sp + 0x160\n 59051: sp = sp & 0xffffffffffffffe0\n 59054: a1 = u64 [a0]\n 59056: u64 [sp + 0x58] = a1\n 59059: a1 = u64 [a0 + 0x8]\n 59062: u64 [sp + 0x50] = a1\n 59065: a1 = u64 [a0 + 0x10]\n 59068: u64 [sp + 0x48] = a1\n 59071: s1 = u64 [a0 + 0x18]\n 59074: a1 = 0x20\n 59077: a0 = 0\n 59079: ra = 786, jump @0\n      : @889 [@dyn 393] (gas: 74)\n 59086: a2 = reverse s1\n 59088: a1 = u64 [sp + 0x48]\n 59091: a3 = reverse a1\n 59093: a1 = u64 [sp + 0x50]\n 59096: a5 = reverse a1\n 59098: a1 = u64 [sp + 0x58]\n 59101: a4 = reverse a1\n 59103: u8 [a0 + 0x18] = a4\n 59106: u8 [a0 + 0x10] = a5\n 59109: u8 [a0 + 0x8] = a3\n 59112: u8 [a0] = a2\n 59114: a1 = a4 >> 0x38\n 59117: u8 [a0 + 0x1f] = a1\n 59120: a1 = a4 >> 0x30\n 59123: u8 [a0 + 0x1e] = a1\n 59126: a1 = a4 >> 0x28\n 59129: u8 [a0 + 0x1d] = a1\n 59132: a1 = a4 >> 0x20\n 59135: u8 [a0 + 0x1c] = a1\n 59138: a1 = a4 >> 0x18\n 59141: u8 [a0 + 0x1b] = a1\n 59144: a1 = a4 >> 0x10\n 59147: u8 [a0 + 0x1a] = a1\n 59150: u64 [sp + 0x18] = a4\n 59153: a1 = a4 >> 0x8\n 59156: u8 [a0 + 0x19] = a1\n 59159: a1 = a5 >> 0x38\n 59162: u8 [a0 + 0x17] = a1\n 59165: a1 = a5 >> 0x30\n 59168: u8 [a0 + 0x16] = a1\n 59171: a1 = a5 >> 0x28\n 59174: u8 [a0 + 0x15] = a1\n 59177: a1 = a5 >> 0x20\n 59180: u8 [a0 + 0x14] = a1\n 59183: a1 = a5 >> 0x18\n 59186: u8 [a0 + 0x13] = a1\n 59189: a1 = a5 >> 0x10\n 59192: u8 [a0 + 0x12] = a1\n 59195: u64 [sp + 0x10] = a5\n 59198: a1 = a5 >> 0x8\n 59201: u8 [a0 + 0x11] = a1\n 59204: a1 = a3 >> 0x38\n 59207: u8 [a0 + 0xf] = a1\n 59210: a1 = a3 >> 0x30\n 59213: u8 [a0 + 0xe] = a1\n 59216: a1 = a3 >> 0x28\n 59219: u8 [a0 + 0xd] = a1\n 59222: a1 = a3 >> 0x20\n 59225: u8 [a0 + 0xc] = a1\n 59228: a1 = a3 >> 0x18\n 59231: u8 [a0 + 0xb] = a1\n 59234: a1 = a3 >> 0x10\n 59237: u8 [a0 + 0xa] = a1\n 59240: u64 [sp + 0x20] = a3\n 59243: a1 = a3 >> 0x8\n 59246: u8 [a0 + 0x9] = a1\n 59249: a1 = a2 >> 0x38\n 59252: u8 [a0 + 0x7] = a1\n 59255: a1 = a2 >> 0x30\n 59258: u8 [a0 + 0x6] = a1\n 59261: a1 = a2 >> 0x28\n 59264: u8 [a0 + 0x5] = a1\n 59267: a1 = a2 >> 0x20\n 59270: u8 [a0 + 0x4] = a1\n 59273: a1 = a2 >> 0x18\n 59276: u8 [a0 + 0x3] = a1\n 59279: a1 = a2 >> 0x10\n 59282: u8 [a0 + 0x2] = a1\n 59285: u64 [sp + 0x28] = a2\n 59288: a1 = a2 >> 0x8\n 59291: u8 [a0 + 0x1] = a1\n 59294: a0 = 0x20\n 59297: a1 = 0x20\n 59300: ra = 788, jump @0\n      : @890 [@dyn 394] (gas: 35)\n 59307: u8 [a0 + 31] = 0x1\n 59311: u8 [a0 + 30] = 0\n 59314: u8 [a0 + 29] = 0\n 59317: u8 [a0 + 28] = 0\n 59320: u8 [a0 + 27] = 0\n 59323: u8 [a0 + 26] = 0\n 59326: u8 [a0 + 25] = 0\n 59329: u8 [a0 + 24] = 0\n 59332: u8 [a0 + 23] = 0\n 59335: u8 [a0 + 22] = 0\n 59338: u8 [a0 + 21] = 0\n 59341: u8 [a0 + 20] = 0\n 59344: u8 [a0 + 19] = 0\n 59347: u8 [a0 + 18] = 0\n 59350: u8 [a0 + 17] = 0\n 59353: u8 [a0 + 16] = 0\n 59356: u8 [a0 + 15] = 0\n 59359: u8 [a0 + 14] = 0\n 59362: u8 [a0 + 13] = 0\n 59365: u8 [a0 + 12] = 0\n 59368: u8 [a0 + 11] = 0\n 59371: u8 [a0 + 10] = 0\n 59374: u8 [a0 + 9] = 0\n 59377: u8 [a0 + 8] = 0\n 59380: u8 [a0 + 7] = 0\n 59383: u8 [a0 + 6] = 0\n 59386: u8 [a0 + 5] = 0\n 59389: u8 [a0 + 4] = 0\n 59392: u8 [a0 + 3] = 0\n 59395: u8 [a0 + 2] = 0\n 59398: u8 [a0 + 1] = 0\n 59401: u8 [a0 + 0] = 0\n 59403: a1 = 0x40\n 59406: a0 = 0\n 59408: ra = 790, jump @0\n      : @891 [@dyn 395] (gas: 31)\n 59415: i32 a0 = a0 + 0\n 59417: i32 a2 = sp + 0xe0\n 59421: a1 = 0x40\n 59424: ecalli 8 // 'hash_keccak_256'\n 59426: a0 = u64 [sp + 0xe0]\n 59430: u64 [sp + 0x58] = a0\n 59433: a0 = u64 [sp + 0xe8]\n 59437: u64 [sp + 0x50] = a0\n 59440: a0 = u64 [sp + 0xf0]\n 59444: u64 [sp + 0x48] = a0\n 59447: a0 = u64 [sp + 0xf8]\n 59451: u64 [sp + 0x40] = a0\n 59454: i32 a0 = sp + 0x60\n 59457: ecalli 5 // 'caller'\n 59459: a0 = u64 [sp + 0x68]\n 59462: a1 = i32 [sp + 0x70]\n 59465: s1 = u64 [sp + 0x60]\n 59468: a0 = reverse a0\n 59470: a2 = a0 << 0x20\n 59473: a1 = reverse a1\n 59475: a1 = a1 >> 0x20\n 59478: a1 = a1 | a2\n 59481: u64 [sp + 0x38] = a1\n 59484: a0 = a0 >> 0x20\n 59487: a1 = reverse s1\n 59489: a1 = a1 << 0x20\n 59492: a0 = a0 | a1\n 59495: u64 [sp + 0x30] = a0\n 59498: a1 = 0x20\n 59501: a0 = 0\n 59503: ra = 792, jump @0\n      : @892 [@dyn 396] (gas: 56)\n 59510: a1 = u64 [sp + 0x30]\n 59513: a1 = reverse a1\n 59515: a2 = u64 [sp + 0x38]\n 59518: a2 = reverse a2\n 59520: a3 = s1 >> 0x18\n 59523: u8 [a0 + 0xf] = a3\n 59526: a3 = s1 >> 0x10\n 59529: u8 [a0 + 0xe] = a3\n 59532: a3 = s1 >> 0x8\n 59535: u8 [a0 + 0xd] = a3\n 59538: u8 [a0 + 0xc] = s1\n 59541: u8 [a0 + 11] = 0\n 59544: u8 [a0 + 10] = 0\n 59547: u8 [a0 + 9] = 0\n 59550: u8 [a0 + 8] = 0\n 59553: u8 [a0 + 7] = 0\n 59556: u8 [a0 + 6] = 0\n 59559: u8 [a0 + 5] = 0\n 59562: u8 [a0 + 4] = 0\n 59565: u8 [a0 + 3] = 0\n 59568: u8 [a0 + 2] = 0\n 59571: u8 [a0 + 1] = 0\n 59574: u8 [a0 + 0] = 0\n 59576: u8 [a0 + 0x18] = a2\n 59579: u8 [a0 + 0x10] = a1\n 59582: a3 = a2 >> 0x38\n 59585: u8 [a0 + 0x1f] = a3\n 59588: a3 = a2 >> 0x30\n 59591: u8 [a0 + 0x1e] = a3\n 59594: a3 = a2 >> 0x28\n 59597: u8 [a0 + 0x1d] = a3\n 59600: a3 = a2 >> 0x20\n 59603: u8 [a0 + 0x1c] = a3\n 59606: a3 = a2 >> 0x18\n 59609: u8 [a0 + 0x1b] = a3\n 59612: a3 = a2 >> 0x10\n 59615: u8 [a0 + 0x1a] = a3\n 59618: a2 = a2 >> 0x8\n 59621: u8 [a0 + 0x19] = a2\n 59624: a2 = a1 >> 0x38\n 59627: u8 [a0 + 0x17] = a2\n 59630: a2 = a1 >> 0x30\n 59633: u8 [a0 + 0x16] = a2\n 59636: a2 = a1 >> 0x28\n 59639: u8 [a0 + 0x15] = a2\n 59642: a2 = a1 >> 0x20\n 59645: u8 [a0 + 0x14] = a2\n 59648: a2 = a1 >> 0x18\n 59651: u8 [a0 + 0x13] = a2\n 59654: a2 = a1 >> 0x10\n 59657: u8 [a0 + 0x12] = a2\n 59660: a1 = a1 >> 0x8\n 59663: u8 [a0 + 0x11] = a1\n 59666: a0 = 0x20\n 59669: a1 = 0x20\n 59672: ra = 794, jump @0\n      : @893 [@dyn 397] (gas: 67)\n 59679: a2 = u64 [sp + 0x40]\n 59682: a1 = a2 >> 0x38\n 59685: u8 [a0 + 0x1f] = a1\n 59688: a1 = a2 >> 0x30\n 59691: u8 [a0 + 0x1e] = a1\n 59694: a1 = a2 >> 0x28\n 59697: u8 [a0 + 0x1d] = a1\n 59700: a1 = a2 >> 0x20\n 59703: u8 [a0 + 0x1c] = a1\n 59706: a1 = a2 >> 0x18\n 59709: u8 [a0 + 0x1b] = a1\n 59712: a1 = a2 >> 0x10\n 59715: u8 [a0 + 0x1a] = a1\n 59718: a1 = a2 >> 0x8\n 59721: u8 [a0 + 0x19] = a1\n 59724: u8 [a0 + 0x18] = a2\n 59727: a2 = u64 [sp + 0x48]\n 59730: a1 = a2 >> 0x38\n 59733: u8 [a0 + 0x17] = a1\n 59736: a1 = a2 >> 0x30\n 59739: u8 [a0 + 0x16] = a1\n 59742: a1 = a2 >> 0x28\n 59745: u8 [a0 + 0x15] = a1\n 59748: a1 = a2 >> 0x20\n 59751: u8 [a0 + 0x14] = a1\n 59754: a1 = a2 >> 0x18\n 59757: u8 [a0 + 0x13] = a1\n 59760: a1 = a2 >> 0x10\n 59763: u8 [a0 + 0x12] = a1\n 59766: a1 = a2 >> 0x8\n 59769: u8 [a0 + 0x11] = a1\n 59772: u8 [a0 + 0x10] = a2\n 59775: a2 = u64 [sp + 0x50]\n 59778: a1 = a2 >> 0x38\n 59781: u8 [a0 + 0xf] = a1\n 59784: a1 = a2 >> 0x30\n 59787: u8 [a0 + 0xe] = a1\n 59790: a1 = a2 >> 0x28\n 59793: u8 [a0 + 0xd] = a1\n 59796: a1 = a2 >> 0x20\n 59799: u8 [a0 + 0xc] = a1\n 59802: a1 = a2 >> 0x18\n 59805: u8 [a0 + 0xb] = a1\n 59808: a1 = a2 >> 0x10\n 59811: u8 [a0 + 0xa] = a1\n 59814: a1 = a2 >> 0x8\n 59817: u8 [a0 + 0x9] = a1\n 59820: u8 [a0 + 0x8] = a2\n 59823: a2 = u64 [sp + 0x58]\n 59826: a1 = a2 >> 0x38\n 59829: u8 [a0 + 0x7] = a1\n 59832: a1 = a2 >> 0x30\n 59835: u8 [a0 + 0x6] = a1\n 59838: a1 = a2 >> 0x28\n 59841: u8 [a0 + 0x5] = a1\n 59844: a1 = a2 >> 0x20\n 59847: u8 [a0 + 0x4] = a1\n 59850: a1 = a2 >> 0x18\n 59853: u8 [a0 + 0x3] = a1\n 59856: a1 = a2 >> 0x10\n 59859: u8 [a0 + 0x2] = a1\n 59862: a1 = a2 >> 0x8\n 59865: u8 [a0 + 0x1] = a1\n 59868: u8 [a0] = a2\n 59870: a1 = 0x40\n 59873: a0 = 0\n 59875: ra = 796, jump @0\n      : @894 [@dyn 398] (gas: 63)\n 59882: i32 a0 = a0 + 0\n 59884: i32 a2 = sp + 0xe0\n 59888: a1 = 0x40\n 59891: ecalli 8 // 'hash_keccak_256'\n 59893: a0 = u64 [sp + 0xf8]\n 59897: a1 = u64 [sp + 0xf0]\n 59901: a2 = u64 [sp + 0xe8]\n 59905: a3 = u64 [sp + 0xe0]\n 59909: a0 = reverse a0\n 59911: u64 [sp + 0x58] = a0\n 59914: a1 = reverse a1\n 59916: u64 [sp + 0x50] = a1\n 59919: a2 = reverse a2\n 59921: u64 [sp + 0x48] = a2\n 59924: s1 = reverse a3\n 59926: u64 [sp + 0xd8] = s1\n 59930: u64 [sp + 0xd0] = a2\n 59934: u64 [sp + 0xc8] = a1\n 59938: u64 [sp + 0xc0] = a0\n 59942: u64 [sp + 248] = 0\n 59946: u64 [sp + 240] = 0\n 59950: u64 [sp + 232] = 0\n 59954: u64 [sp + 224] = 0\n 59958: u32 [sp + 160] = 0x20\n 59963: i32 a1 = sp + 0xc0\n 59967: i32 a3 = sp + 0xe0\n 59971: i32 a4 = sp + 0xa0\n 59975: a2 = 0xffffffffffffffff\n 59978: a0 = 0\n 59980: ecalli 7 // 'get_storage'\n 59982: a0 = u64 [sp + 0xe0]\n 59986: a1 = u64 [sp + 0xe8]\n 59990: a2 = u64 [sp + 0xf0]\n 59994: a3 = u64 [sp + 0xf8]\n 59998: a0 = a0 & 0xffffffffffffff00\n 60002: u64 [sp + 0xd8] = s1\n 60006: a4 = u64 [sp + 0x48]\n 60009: u64 [sp + 0xd0] = a4\n 60013: a4 = u64 [sp + 0x50]\n 60016: u64 [sp + 0xc8] = a4\n 60020: a4 = u64 [sp + 0x58]\n 60023: u64 [sp + 0xc0] = a4\n 60027: u64 [sp + 0xf8] = a3\n 60031: u64 [sp + 0xf0] = a2\n 60035: u64 [sp + 0xe8] = a1\n 60039: u64 [sp + 0xe0] = a0\n 60043: i32 a1 = sp + 0xc0\n 60047: i32 a3 = sp + 0xe0\n 60051: a2 = 0xffffffffffffffff\n 60054: a4 = 0x20\n 60057: a0 = 0\n 60059: ecalli 12 // 'set_storage'\n 60061: i32 a0 = sp + 0x80\n 60065: ecalli 5 // 'caller'\n 60067: a0 = u32 [sp + 0x90]\n 60071: u64 [sp + 0x50] = a0\n 60074: a0 = u64 [sp + 0x88]\n 60078: u64 [sp + 0x48] = a0\n 60081: a0 = u64 [sp + 0x80]\n 60085: u64 [sp + 0x58] = a0\n 60088: a0 = 0x40\n 60091: a1 = 0x20\n 60094: ra = 798, jump @0\n      : @895 [@dyn 399] (gas: 100)\n 60101: a1 = u8 [a0 + 0x11]\n 60104: a2 = u8 [a0 + 0x10]\n 60107: a3 = u8 [a0 + 0x12]\n 60110: a4 = u8 [a0 + 0x13]\n 60113: a1 = a1 << 0x8\n 60116: a1 = a1 | a2\n 60119: a3 = a3 << 0x10\n 60122: a4 = a4 << 0x18\n 60125: a3 = a3 | a4\n 60128: a1 = a1 | a3\n 60131: a2 = u8 [a0 + 0x15]\n 60134: a3 = u8 [a0 + 0x14]\n 60137: a4 = u8 [a0 + 0x16]\n 60140: a5 = u8 [a0 + 0x17]\n 60143: a2 = a2 << 0x8\n 60146: a2 = a2 | a3\n 60149: a4 = a4 << 0x10\n 60152: a5 = a5 << 0x18\n 60155: a4 = a4 | a5\n 60158: a2 = a2 | a4\n 60161: a2 = a2 << 0x20\n 60164: t0 = a2 | a1\n 60167: a2 = u8 [a0 + 0x1]\n 60170: a3 = u8 [a0]\n 60172: a4 = u8 [a0 + 0x2]\n 60175: a5 = u8 [a0 + 0x3]\n 60178: a2 = a2 << 0x8\n 60181: a2 = a2 | a3\n 60184: a4 = a4 << 0x10\n 60187: a5 = a5 << 0x18\n 60190: a4 = a4 | a5\n 60193: a2 = a2 | a4\n 60196: a3 = u8 [a0 + 0x5]\n 60199: a4 = u8 [a0 + 0x4]\n 60202: a5 = u8 [a0 + 0x6]\n 60205: s1 = u8 [a0 + 0x7]\n 60208: a3 = a3 << 0x8\n 60211: a3 = a3 | a4\n 60214: a5 = a5 << 0x10\n 60217: s1 = s1 << 0x18\n 60220: a5 = a5 | s1\n 60223: a3 = a3 | a5\n 60226: a3 = a3 << 0x20\n 60229: a2 = a2 | a3\n 60232: a3 = u8 [a0 + 0x19]\n 60235: a4 = u8 [a0 + 0x18]\n 60238: a5 = u8 [a0 + 0x1a]\n 60241: s1 = u8 [a0 + 0x1b]\n 60244: a3 = a3 << 0x8\n 60247: a3 = a3 | a4\n 60250: a5 = a5 << 0x10\n 60253: s1 = s1 << 0x18\n 60256: a5 = a5 | s1\n 60259: a3 = a3 | a5\n 60262: a4 = u8 [a0 + 0x1d]\n 60265: a5 = u8 [a0 + 0x1c]\n 60268: s1 = u8 [a0 + 0x1e]\n 60271: a1 = u8 [a0 + 0x1f]\n 60274: a4 = a4 << 0x8\n 60277: a4 = a4 | a5\n 60280: s1 = s1 << 0x10\n 60283: a1 = a1 << 0x18\n 60286: a1 = a1 | s1\n 60289: a1 = a1 | a4\n 60292: a1 = a1 << 0x20\n 60295: a3 = a3 | a1\n 60298: a1 = u8 [a0 + 0x9]\n 60301: a4 = u8 [a0 + 0x8]\n 60304: a5 = u8 [a0 + 0xa]\n 60307: s1 = u8 [a0 + 0xb]\n 60310: a1 = a1 << 0x8\n 60313: a1 = a1 | a4\n 60316: a5 = a5 << 0x10\n 60319: s1 = s1 << 0x18\n 60322: a5 = a5 | s1\n 60325: a1 = a1 | a5\n 60328: a4 = u8 [a0 + 0xd]\n 60331: a5 = u8 [a0 + 0xc]\n 60334: s1 = u8 [a0 + 0xe]\n 60337: a0 = u8 [a0 + 0xf]\n 60340: a4 = a4 << 0x8\n 60343: a4 = a4 | a5\n 60346: s1 = s1 << 0x10\n 60349: a0 = a0 << 0x18\n 60352: a0 = a0 | s1\n 60355: a0 = a0 | a4\n 60358: a0 = a0 << 0x20\n 60361: a0 = a0 | a1\n 60364: a1 = reverse a0\n 60366: a0 = reverse a3\n 60368: a2 = reverse a2\n 60370: a3 = reverse t0\n 60372: a2 = a2 | a3\n 60375: a3 = a0 | a1\n 60378: a3 = a3 | a2\n 60381: a3 = a3 >> 0x20\n 60384: a1 = a1 | a2\n 60387: a1 = a1 << 0x20\n 60390: a1 = a1 | a3\n 60393: jump @898 if a1 != 0\n      : @896 (gas: 17)\n 60397: s1 = u64 [sp + 0x58]\n 60400: a1 = reverse s1\n 60402: a1 = a1 << 0x20\n 60405: a2 = u64 [sp + 0x48]\n 60408: a2 = reverse a2\n 60410: a3 = a2 >> 0x20\n 60413: a1 = a1 | a3\n 60416: u64 [sp + 0x48] = a1\n 60419: a2 = a2 << 0x20\n 60422: a1 = u64 [sp + 0x50]\n 60425: a1 = reverse a1\n 60427: a1 = a1 >> 0x20\n 60430: a1 = a1 | a2\n 60433: u64 [sp + 0x50] = a1\n 60436: i32 a0 = a0 + 0\n 60438: a1 = 0\n 60440: ra = 800, jump @0\n      : @897 [@dyn 400] (gas: 36)\n 60447: a1 = u64 [0x20020]\n 60452: a2 = u64 [0x20028]\n 60457: a3 = u64 [0x20030]\n 60462: a4 = u64 [0x20038]\n 60467: u64 [sp + 0xf8] = a1\n 60471: u64 [sp + 0xf0] = a2\n 60475: u64 [sp + 0xe8] = a3\n 60479: u64 [sp + 0xe0] = a4\n 60483: a1 = u64 [sp + 0x50]\n 60486: a1 = reverse a1\n 60488: a2 = u64 [sp + 0x48]\n 60491: a2 = reverse a2\n 60493: a3 = s1 << 0x20\n 60496: u64 [sp + 0x108] = a3\n 60500: u64 [sp + 256] = 0\n 60504: u64 [sp + 0x110] = a2\n 60508: u64 [sp + 0x118] = a1\n 60512: a1 = u64 [sp + 0x10]\n 60515: u64 [sp + 0x130] = a1\n 60519: a1 = u64 [sp + 0x20]\n 60522: u64 [sp + 0x128] = a1\n 60526: a1 = u64 [sp + 0x28]\n 60529: u64 [sp + 0x120] = a1\n 60533: a1 = u64 [sp + 0x18]\n 60536: u64 [sp + 0x138] = a1\n 60540: i32 a2 = a0 + 0\n 60542: i32 a0 = sp + 0xe0\n 60546: a1 = 0x3\n 60549: a3 = 0\n 60551: ecalli 6 // 'deposit_event'\n 60553: sp = s0 + 0xfffffffffffffea0\n 60557: ra = u64 [sp + 0x158]\n 60561: s0 = u64 [sp + 0x150]\n 60565: s1 = u64 [sp + 0x148]\n 60569: sp = sp + 0x160\n 60573: ret\n      : @898 (gas: 1)\n 60575: trap\n      : @899 (gas: 5)\n 60576: u64 [a2 + 24] = 0\n 60579: u64 [a2 + 16] = 0\n 60582: u64 [a2 + 8] = 0\n 60585: u64 [a2 + 0] = 0\n 60587: fallthrough\n      : @900 (gas: 13)\n 60588: a5 = a5 + 0x1\n 60591: u64 [s1 + 0x98] = a5\n 60595: a0 = a5 <u 0x1\n 60598: t0 = t0 + a0\n 60601: u64 [s1 + 0x90] = t0\n 60605: a0 = a5 | t0\n 60608: a0 = a0 <u 0x1\n 60611: a0 = a0 + t2\n 60614: a1 = a0 <u t2\n 60617: t1 = t1 + a1\n 60620: u64 [s1 + 0x88] = t1\n 60624: u64 [s1 + 0x80] = a0\n 60628: fallthrough\n      : @901 (gas: 16)\n 60629: u64 [s1 + 248] = 0\n 60633: u64 [s1 + 240] = 0\n 60637: u64 [s1 + 232] = 0\n 60641: u64 [s1 + 224] = 0x5\n 60646: u64 [s1 + 280] = 0\n 60650: u64 [s1 + 272] = 0\n 60654: u64 [s1 + 264] = 0\n 60658: u64 [s1 + 256] = 0\n 60662: u32 [s1 + 288] = 0x20\n 60667: a2 = 0xffffffffffffffff\n 60670: a0 = 0\n 60672: a1 = u64 [s1 + 0x50]\n 60675: a3 = u64 [s1 + 0x58]\n 60678: a4 = u64 [s1 + 0x48]\n 60681: ecalli 7 // 'get_storage'\n 60683: fallthrough\n      : @902 (gas: 20)\n 60684: a0 = u64 [s1 + 0x118]\n 60688: a1 = u64 [s1 + 0x100]\n 60692: t1 = u64 [s1 + 0x110]\n 60696: a3 = u64 [s1 + 0x108]\n 60700: a4 = u64 [s1 + 0x88]\n 60704: ra = a4 ^ a0\n 60707: a0 = a4 <u a0\n 60710: t2 = u64 [s1 + 0x80]\n 60714: a5 = t2 <u t1\n 60717: a5 = a0 if ra != 0\n 60720: a2 = u64 [s1 + 0x90]\n 60724: t0 = a2 ^ a3\n 60727: a0 = a2 <u a3\n 60730: a3 = u64 [s1 + 0x98]\n 60734: a1 = a3 <u a1\n 60737: a1 = a0 if t0 != 0\n 60740: a0 = t2 ^ t1\n 60743: a0 = a0 | ra\n 60746: a1 = a5 if a0 != 0\n 60749: jump @922 if a1 == 0\n      : @903 (gas: 13)\n 60753: a5 = a3\n 60755: t0 = a2\n 60757: t1 = a4\n 60759: a1 = reverse a4\n 60761: a2 = reverse t2\n 60763: a3 = reverse t0\n 60765: a4 = reverse a5\n 60767: a0 = u64 [s1 + 0x20]\n 60770: u64 [s1 + 0x78] = a1\n 60773: u64 [s1 + 0x70] = a2\n 60776: u64 [s1 + 0x68] = a3\n 60779: u64 [s1 + 0x60] = a4\n 60782: jump @911 if a0 == 0\n      : @904 (gas: 3)\n 60786: a1 = 0x20\n 60789: a0 = 0\n 60791: ra = 802, jump @0\n      : @905 [@dyn 401] (gas: 67)\n 60798: a2 = u64 [s1 + 0x60]\n 60801: a1 = a2 >> 0x38\n 60804: u8 [a0 + 0x1f] = a1\n 60807: a1 = a2 >> 0x30\n 60810: u8 [a0 + 0x1e] = a1\n 60813: a1 = a2 >> 0x28\n 60816: u8 [a0 + 0x1d] = a1\n 60819: a1 = a2 >> 0x20\n 60822: u8 [a0 + 0x1c] = a1\n 60825: a1 = a2 >> 0x18\n 60828: u8 [a0 + 0x1b] = a1\n 60831: a1 = a2 >> 0x10\n 60834: u8 [a0 + 0x1a] = a1\n 60837: a1 = a2 >> 0x8\n 60840: u8 [a0 + 0x19] = a1\n 60843: u8 [a0 + 0x18] = a2\n 60846: a2 = u64 [s1 + 0x68]\n 60849: u8 [a0 + 0x10] = a2\n 60852: a1 = a2 >> 0x38\n 60855: u8 [a0 + 0x17] = a1\n 60858: a1 = a2 >> 0x30\n 60861: u8 [a0 + 0x16] = a1\n 60864: a1 = a2 >> 0x28\n 60867: u8 [a0 + 0x15] = a1\n 60870: a1 = a2 >> 0x20\n 60873: u8 [a0 + 0x14] = a1\n 60876: a1 = a2 >> 0x18\n 60879: u8 [a0 + 0x13] = a1\n 60882: a1 = a2 >> 0x10\n 60885: u8 [a0 + 0x12] = a1\n 60888: a1 = a2 >> 0x8\n 60891: u8 [a0 + 0x11] = a1\n 60894: a2 = u64 [s1 + 0x70]\n 60897: u8 [a0 + 0x8] = a2\n 60900: a1 = a2 >> 0x38\n 60903: u8 [a0 + 0xf] = a1\n 60906: a1 = a2 >> 0x30\n 60909: u8 [a0 + 0xe] = a1\n 60912: a1 = a2 >> 0x28\n 60915: u8 [a0 + 0xd] = a1\n 60918: a1 = a2 >> 0x20\n 60921: u8 [a0 + 0xc] = a1\n 60924: a1 = a2 >> 0x18\n 60927: u8 [a0 + 0xb] = a1\n 60930: a1 = a2 >> 0x10\n 60933: u8 [a0 + 0xa] = a1\n 60936: a1 = a2 >> 0x8\n 60939: u8 [a0 + 0x9] = a1\n 60942: a2 = u64 [s1 + 0x78]\n 60945: u8 [a0] = a2\n 60947: a1 = a2 >> 0x38\n 60950: u8 [a0 + 0x7] = a1\n 60953: a1 = a2 >> 0x30\n 60956: u8 [a0 + 0x6] = a1\n 60959: a1 = a2 >> 0x28\n 60962: u8 [a0 + 0x5] = a1\n 60965: a1 = a2 >> 0x20\n 60968: u8 [a0 + 0x4] = a1\n 60971: a1 = a2 >> 0x18\n 60974: u8 [a0 + 0x3] = a1\n 60977: a1 = a2 >> 0x10\n 60980: u8 [a0 + 0x2] = a1\n 60983: a1 = a2 >> 0x8\n 60986: u8 [a0 + 0x1] = a1\n 60989: a0 = 0x20\n 60992: a1 = 0x20\n 60995: ra = 804, jump @0\n      : @906 [@dyn 402] (gas: 35)\n 61002: u8 [a0 + 31] = 0\n 61005: u8 [a0 + 30] = 0\n 61008: u8 [a0 + 29] = 0\n 61011: u8 [a0 + 28] = 0\n 61014: u8 [a0 + 27] = 0\n 61017: u8 [a0 + 26] = 0\n 61020: u8 [a0 + 25] = 0\n 61023: u8 [a0 + 24] = 0\n 61026: u8 [a0 + 23] = 0\n 61029: u8 [a0 + 22] = 0\n 61032: u8 [a0 + 21] = 0\n 61035: u8 [a0 + 20] = 0\n 61038: u8 [a0 + 19] = 0\n 61041: u8 [a0 + 18] = 0\n 61044: u8 [a0 + 17] = 0\n 61047: u8 [a0 + 16] = 0\n 61050: u8 [a0 + 15] = 0\n 61053: u8 [a0 + 14] = 0\n 61056: u8 [a0 + 13] = 0\n 61059: u8 [a0 + 12] = 0\n 61062: u8 [a0 + 11] = 0\n 61065: u8 [a0 + 10] = 0\n 61068: u8 [a0 + 9] = 0\n 61071: u8 [a0 + 8] = 0\n 61074: u8 [a0 + 7] = 0\n 61077: u8 [a0 + 6] = 0\n 61080: u8 [a0 + 5] = 0\n 61083: u8 [a0 + 4] = 0\n 61086: u8 [a0 + 3] = 0\n 61089: u8 [a0 + 2] = 0\n 61092: u8 [a0 + 1] = 0\n 61095: u8 [a0 + 0] = 0\n 61097: a1 = 0x40\n 61100: a0 = 0\n 61102: ra = 806, jump @0\n      : @907 [@dyn 403] (gas: 36)\n 61109: i32 a0 = a0 + 0\n 61111: i32 a2 = s1 + 0x100\n 61115: a1 = 0x40\n 61118: ecalli 8 // 'hash_keccak_256'\n 61120: a0 = u64 [s1 + 0x100]\n 61124: a1 = u64 [s1 + 0x108]\n 61128: a2 = u64 [s1 + 0x110]\n 61132: a3 = u64 [s1 + 0x118]\n 61136: a0 = reverse a0\n 61138: a1 = reverse a1\n 61140: a2 = reverse a2\n 61142: a3 = reverse a3\n 61144: a4 = a3 + 0x3\n 61147: a3 = a4 <u a3\n 61150: a5 = a2 + a3\n 61153: a2 = a5 <u a2\n 61156: a2 = a3 if a3 == 0\n 61159: a2 = a2 + a1\n 61162: a1 = a2 <u a1\n 61165: a0 = a0 + a1\n 61168: u64 [s1 + 0xe8] = a5\n 61172: u64 [s1 + 0xe0] = a4\n 61176: u64 [s1 + 0xf0] = a2\n 61180: u64 [s1 + 0xf8] = a0\n 61184: u64 [s1 + 280] = 0\n 61188: u64 [s1 + 272] = 0\n 61192: u64 [s1 + 264] = 0\n 61196: u64 [s1 + 256] = 0\n 61200: u32 [s1 + 288] = 0x20\n 61205: i32 a1 = s1 + 0xe0\n 61209: i32 a3 = s1 + 0x100\n 61213: i32 a4 = s1 + 0x120\n 61217: a2 = 0xffffffffffffffff\n 61220: a0 = 0\n 61222: ecalli 7 // 'get_storage'\n 61224: fallthrough\n      : @908 (gas: 14)\n 61225: t2 = u64 [s1 + 0x80]\n 61229: t1 = u64 [s1 + 0x88]\n 61233: t0 = u64 [s1 + 0x90]\n 61237: a5 = u64 [s1 + 0x98]\n 61241: a0 = u8 [s1 + 0x100]\n 61245: a1 = a0 <u 0x1\n 61248: a2 = sp + 0xffffffffffffffe0\n 61251: a2 = a2 & 0xffffffffffffffe0\n 61254: sp = a2\n 61256: u64 [a2 + 24] = 0\n 61259: u64 [a2 + 16] = 0\n 61262: u64 [a2 + 8] = 0\n 61265: u64 [a2] = a1\n 61267: jump @917 if a0 == 0\n      : @909 (gas: 2)\n 61271: a0 = u64 [s1 + 0x10]\n 61274: jump @912 if a0 != 0\n      : @910 (gas: 1)\n 61277: jump @899\n      : @911 (gas: 9)\n 61280: a0 = sp + 0xffffffffffffffe0\n 61283: a2 = a0 & 0xffffffffffffffe0\n 61286: sp = a2\n 61288: u64 [a2 + 24] = 0\n 61291: u64 [a2 + 16] = 0\n 61294: u64 [a2 + 8] = 0\n 61297: u64 [a2 + 0] = 0\n 61299: a0 = u64 [s1 + 0x10]\n 61302: jump @899 if a0 == 0\n      : @912 (gas: 8)\n 61306: a1 = 0x20\n 61309: a0 = 0\n 61311: u64 [s1 + 0x98] = a5\n 61315: u64 [s1 + 0x90] = t0\n 61319: u64 [s1 + 0x88] = t1\n 61323: u64 [s1 + 0x80] = t2\n 61327: u64 [s1 + 0x18] = a2\n 61330: ra = 808, jump @0\n      : @913 [@dyn 404] (gas: 67)\n 61337: a2 = u64 [s1 + 0x60]\n 61340: a1 = a2 >> 0x38\n 61343: u8 [a0 + 0x1f] = a1\n 61346: a1 = a2 >> 0x30\n 61349: u8 [a0 + 0x1e] = a1\n 61352: a1 = a2 >> 0x28\n 61355: u8 [a0 + 0x1d] = a1\n 61358: a1 = a2 >> 0x20\n 61361: u8 [a0 + 0x1c] = a1\n 61364: a1 = a2 >> 0x18\n 61367: u8 [a0 + 0x1b] = a1\n 61370: a1 = a2 >> 0x10\n 61373: u8 [a0 + 0x1a] = a1\n 61376: a1 = a2 >> 0x8\n 61379: u8 [a0 + 0x19] = a1\n 61382: u8 [a0 + 0x18] = a2\n 61385: a2 = u64 [s1 + 0x68]\n 61388: u8 [a0 + 0x10] = a2\n 61391: a1 = a2 >> 0x38\n 61394: u8 [a0 + 0x17] = a1\n 61397: a1 = a2 >> 0x30\n 61400: u8 [a0 + 0x16] = a1\n 61403: a1 = a2 >> 0x28\n 61406: u8 [a0 + 0x15] = a1\n 61409: a1 = a2 >> 0x20\n 61412: u8 [a0 + 0x14] = a1\n 61415: a1 = a2 >> 0x18\n 61418: u8 [a0 + 0x13] = a1\n 61421: a1 = a2 >> 0x10\n 61424: u8 [a0 + 0x12] = a1\n 61427: a1 = a2 >> 0x8\n 61430: u8 [a0 + 0x11] = a1\n 61433: a2 = u64 [s1 + 0x70]\n 61436: u8 [a0 + 0x8] = a2\n 61439: a1 = a2 >> 0x38\n 61442: u8 [a0 + 0xf] = a1\n 61445: a1 = a2 >> 0x30\n 61448: u8 [a0 + 0xe] = a1\n 61451: a1 = a2 >> 0x28\n 61454: u8 [a0 + 0xd] = a1\n 61457: a1 = a2 >> 0x20\n 61460: u8 [a0 + 0xc] = a1\n 61463: a1 = a2 >> 0x18\n 61466: u8 [a0 + 0xb] = a1\n 61469: a1 = a2 >> 0x10\n 61472: u8 [a0 + 0xa] = a1\n 61475: a1 = a2 >> 0x8\n 61478: u8 [a0 + 0x9] = a1\n 61481: a2 = u64 [s1 + 0x78]\n 61484: u8 [a0] = a2\n 61486: a1 = a2 >> 0x38\n 61489: u8 [a0 + 0x7] = a1\n 61492: a1 = a2 >> 0x30\n 61495: u8 [a0 + 0x6] = a1\n 61498: a1 = a2 >> 0x28\n 61501: u8 [a0 + 0x5] = a1\n 61504: a1 = a2 >> 0x20\n 61507: u8 [a0 + 0x4] = a1\n 61510: a1 = a2 >> 0x18\n 61513: u8 [a0 + 0x3] = a1\n 61516: a1 = a2 >> 0x10\n 61519: u8 [a0 + 0x2] = a1\n 61522: a1 = a2 >> 0x8\n 61525: u8 [a0 + 0x1] = a1\n 61528: a0 = 0x20\n 61531: a1 = 0x20\n 61534: ra = 810, jump @0\n      : @914 [@dyn 405] (gas: 35)\n 61541: u8 [a0 + 31] = 0\n 61544: u8 [a0 + 30] = 0\n 61547: u8 [a0 + 29] = 0\n 61550: u8 [a0 + 28] = 0\n 61553: u8 [a0 + 27] = 0\n 61556: u8 [a0 + 26] = 0\n 61559: u8 [a0 + 25] = 0\n 61562: u8 [a0 + 24] = 0\n 61565: u8 [a0 + 23] = 0\n 61568: u8 [a0 + 22] = 0\n 61571: u8 [a0 + 21] = 0\n 61574: u8 [a0 + 20] = 0\n 61577: u8 [a0 + 19] = 0\n 61580: u8 [a0 + 18] = 0\n 61583: u8 [a0 + 17] = 0\n 61586: u8 [a0 + 16] = 0\n 61589: u8 [a0 + 15] = 0\n 61592: u8 [a0 + 14] = 0\n 61595: u8 [a0 + 13] = 0\n 61598: u8 [a0 + 12] = 0\n 61601: u8 [a0 + 11] = 0\n 61604: u8 [a0 + 10] = 0\n 61607: u8 [a0 + 9] = 0\n 61610: u8 [a0 + 8] = 0\n 61613: u8 [a0 + 7] = 0\n 61616: u8 [a0 + 6] = 0\n 61619: u8 [a0 + 5] = 0\n 61622: u8 [a0 + 4] = 0\n 61625: u8 [a0 + 3] = 0\n 61628: u8 [a0 + 2] = 0\n 61631: u8 [a0 + 1] = 0\n 61634: u8 [a0 + 0] = 0\n 61636: a1 = 0x40\n 61639: a0 = 0\n 61641: ra = 812, jump @0\n      : @915 [@dyn 406] (gas: 36)\n 61648: i32 a0 = a0 + 0\n 61650: a1 = 0x40\n 61653: a2 = u64 [s1 + 0x58]\n 61656: ecalli 8 // 'hash_keccak_256'\n 61658: a0 = u64 [s1 + 0x100]\n 61662: a1 = u64 [s1 + 0x108]\n 61666: a2 = u64 [s1 + 0x110]\n 61670: a3 = u64 [s1 + 0x118]\n 61674: a0 = reverse a0\n 61676: a1 = reverse a1\n 61678: a2 = reverse a2\n 61680: a3 = reverse a3\n 61682: a4 = a3 + 0x3\n 61685: a3 = a4 <u a3\n 61688: a5 = a2 + a3\n 61691: a2 = a5 <u a2\n 61694: a2 = a3 if a3 == 0\n 61697: a2 = a2 + a1\n 61700: a1 = a2 <u a1\n 61703: a0 = a0 + a1\n 61706: u64 [s1 + 0xe8] = a5\n 61710: u64 [s1 + 0xe0] = a4\n 61714: u64 [s1 + 0xf0] = a2\n 61718: u64 [s1 + 0xf8] = a0\n 61722: u64 [s1 + 280] = 0\n 61726: u64 [s1 + 272] = 0\n 61730: u64 [s1 + 264] = 0\n 61734: u64 [s1 + 256] = 0\n 61738: u32 [s1 + 288] = 0x20\n 61743: a2 = 0xffffffffffffffff\n 61746: a0 = 0\n 61748: a1 = u64 [s1 + 0x50]\n 61751: a3 = u64 [s1 + 0x58]\n 61754: a4 = u64 [s1 + 0x48]\n 61757: ecalli 7 // 'get_storage'\n 61759: fallthrough\n      : @916 (gas: 11)\n 61760: t2 = u64 [s1 + 0x80]\n 61764: t1 = u64 [s1 + 0x88]\n 61768: t0 = u64 [s1 + 0x90]\n 61772: a5 = u64 [s1 + 0x98]\n 61776: a0 = u8 [s1 + 0x100]\n 61780: a1 = u64 [s1 + 0x18]\n 61783: u64 [a1 + 24] = 0\n 61786: u64 [a1 + 16] = 0\n 61789: u64 [a1 + 8] = 0\n 61792: u64 [a1] = a0\n 61794: jump @900 if a0 == 0\n      : @917 (gas: 20)\n 61798: a2 = u64 [s1 + 0x40]\n 61801: a2 = a2 + 0x1\n 61804: a0 = a2 <u 0x1\n 61807: a3 = u64 [s1 + 0x38]\n 61810: a3 = a3 + a0\n 61813: a0 = a2 | a3\n 61816: a0 = a0 <u 0x1\n 61819: a1 = u64 [s1 + 0x28]\n 61822: a0 = a0 + a1\n 61825: a1 = a0 <u a1\n 61828: a4 = u64 [s1 + 0x30]\n 61831: a4 = a4 + a1\n 61834: u64 [s1 + 0x38] = a3\n 61837: u64 [s1 + 0x30] = a4\n 61840: a1 = a3 | a4\n 61843: u64 [s1 + 0x40] = a2\n 61846: a2 = a2 | a0\n 61849: a1 = a1 | a2\n 61852: u64 [s1 + 0x28] = a0\n 61855: jump @900 if a1 != 0\n      : @918 (gas: 8)\n 61859: u64 [s1 + 208] = 0\n 61863: u64 [s1 + 200] = 0\n 61867: u64 [s1 + 192] = 0\n 61871: a0 = 0x4e487b7100000000\n 61881: a1 = s1 + 0xc0\n 61885: u64 [s1 + 0xd8] = a0\n 61889: a0 = 0\n 61891: ra = 814, jump @23\n      : @919 [@dyn 407] (gas: 7)\n 61898: u64 [s1 + 184] = 0\n 61902: u64 [s1 + 176] = 0\n 61906: u64 [s1 + 160] = 0x11\n 61911: a0 = 0x4\n 61914: a1 = s1 + 0xa0\n 61918: u64 [s1 + 168] = 0\n 61922: ra = 816, jump @23\n      : @920 [@dyn 408] (gas: 3)\n 61929: a1 = 0x24\n 61932: a0 = 0\n 61934: ra = 818, jump @0\n      : @921 [@dyn 409] (gas: 5)\n 61941: i32 a1 = a0 + 0\n 61943: a0 = 0x1\n 61946: a2 = 0x24\n 61949: ecalli 10 // 'seal_return'\n 61951: fallthrough\n      : @922 (gas: 15)\n 61952: a0 = u64 [s1 + 0x8]\n 61955: a1 = u64 [s1 + 0x40]\n 61958: u64 [a0] = a1\n 61960: a1 = u64 [s1 + 0x38]\n 61963: u64 [a0 + 0x8] = a1\n 61966: a1 = u64 [s1 + 0x28]\n 61969: u64 [a0 + 0x10] = a1\n 61972: a1 = u64 [s1 + 0x30]\n 61975: u64 [a0 + 0x18] = a1\n 61978: sp = s0 + 0xfffffffffffffec0\n 61982: ra = u64 [sp + 0x138]\n 61986: s0 = u64 [sp + 0x130]\n 61990: s1 = u64 [sp + 0x128]\n 61994: sp = sp + 0x140\n 61998: ret\n      : @923 [@dyn 410] (gas: 59)\n 62000: u64 [sp + 0x20] = s1\n 62003: a1 = reverse s1\n 62005: a2 = u64 [sp + 0x38]\n 62008: a2 = reverse a2\n 62010: s1 = u64 [sp + 0x18]\n 62013: a3 = reverse s1\n 62015: u8 [a0 + 0x18] = a3\n 62018: u8 [a0 + 0x10] = a2\n 62021: u8 [a0 + 11] = 0\n 62024: u8 [a0 + 10] = 0\n 62027: u8 [a0 + 9] = 0\n 62030: u8 [a0 + 7] = 0\n 62033: u8 [a0 + 6] = 0\n 62036: u8 [a0 + 5] = 0\n 62039: u8 [a0 + 4] = 0\n 62042: u8 [a0 + 3] = 0\n 62045: u8 [a0 + 2] = 0\n 62048: u8 [a0 + 1] = 0\n 62051: u8 [a0 + 0] = 0\n 62053: a4 = a3 >> 0x38\n 62056: u8 [a0 + 0x1f] = a4\n 62059: a4 = a3 >> 0x30\n 62062: u8 [a0 + 0x1e] = a4\n 62065: a4 = a3 >> 0x28\n 62068: u8 [a0 + 0x1d] = a4\n 62071: a4 = a3 >> 0x20\n 62074: u8 [a0 + 0x1c] = a4\n 62077: a4 = a3 >> 0x18\n 62080: u8 [a0 + 0x1b] = a4\n 62083: a4 = a3 >> 0x10\n 62086: u8 [a0 + 0x1a] = a4\n 62089: a3 = a3 >> 0x8\n 62092: u8 [a0 + 0x19] = a3\n 62095: a3 = a2 >> 0x38\n 62098: u8 [a0 + 0x17] = a3\n 62101: a3 = a2 >> 0x30\n 62104: u8 [a0 + 0x16] = a3\n 62107: a3 = a2 >> 0x28\n 62110: u8 [a0 + 0x15] = a3\n 62113: a3 = a2 >> 0x20\n 62116: u8 [a0 + 0x14] = a3\n 62119: a3 = a2 >> 0x18\n 62122: u8 [a0 + 0x13] = a3\n 62125: a3 = a2 >> 0x10\n 62128: u8 [a0 + 0x12] = a3\n 62131: a2 = a2 >> 0x8\n 62134: u8 [a0 + 0x11] = a2\n 62137: u8 [a0 + 0x8] = a1\n 62140: a2 = a1 >> 0x38\n 62143: u8 [a0 + 0xf] = a2\n 62146: a2 = a1 >> 0x30\n 62149: u8 [a0 + 0xe] = a2\n 62152: a2 = a1 >> 0x28\n 62155: u8 [a0 + 0xd] = a2\n 62158: a1 = a1 >> 0x20\n 62161: u8 [a0 + 0xc] = a1\n 62164: a0 = 0x20\n 62167: a1 = 0x20\n 62170: ra = 822, jump @0\n      : @924 [@dyn 411] (gas: 35)\n 62177: u8 [a0 + 31] = 0x2\n 62181: u8 [a0 + 30] = 0\n 62184: u8 [a0 + 29] = 0\n 62187: u8 [a0 + 28] = 0\n 62190: u8 [a0 + 27] = 0\n 62193: u8 [a0 + 26] = 0\n 62196: u8 [a0 + 25] = 0\n 62199: u8 [a0 + 24] = 0\n 62202: u8 [a0 + 23] = 0\n 62205: u8 [a0 + 22] = 0\n 62208: u8 [a0 + 21] = 0\n 62211: u8 [a0 + 20] = 0\n 62214: u8 [a0 + 19] = 0\n 62217: u8 [a0 + 18] = 0\n 62220: u8 [a0 + 17] = 0\n 62223: u8 [a0 + 16] = 0\n 62226: u8 [a0 + 15] = 0\n 62229: u8 [a0 + 14] = 0\n 62232: u8 [a0 + 13] = 0\n 62235: u8 [a0 + 12] = 0\n 62238: u8 [a0 + 11] = 0\n 62241: u8 [a0 + 10] = 0\n 62244: u8 [a0 + 9] = 0\n 62247: u8 [a0 + 8] = 0\n 62250: u8 [a0 + 7] = 0\n 62253: u8 [a0 + 6] = 0\n 62256: u8 [a0 + 5] = 0\n 62259: u8 [a0 + 4] = 0\n 62262: u8 [a0 + 3] = 0\n 62265: u8 [a0 + 2] = 0\n 62268: u8 [a0 + 1] = 0\n 62271: u8 [a0 + 0] = 0\n 62273: a1 = 0x40\n 62276: a0 = 0\n 62278: ra = 824, jump @0\n      : @925 [@dyn 412] (gas: 28)\n 62285: i32 a0 = a0 + 0\n 62287: i32 a2 = sp + 0x80\n 62291: a1 = 0x40\n 62294: ecalli 8 // 'hash_keccak_256'\n 62296: a0 = u64 [sp + 0x98]\n 62300: a1 = u64 [sp + 0x90]\n 62304: a2 = u64 [sp + 0x88]\n 62308: a3 = u64 [sp + 0x80]\n 62312: a0 = reverse a0\n 62314: a1 = reverse a1\n 62316: a2 = reverse a2\n 62318: a3 = reverse a3\n 62320: u64 [sp + 0x78] = a3\n 62323: u64 [sp + 0x70] = a2\n 62326: u64 [sp + 0x68] = a1\n 62329: u64 [sp + 0x60] = a0\n 62332: u64 [sp + 152] = 0\n 62336: u64 [sp + 144] = 0\n 62340: u64 [sp + 136] = 0\n 62344: u64 [sp + 128] = 0\n 62348: u32 [sp + 160] = 0x20\n 62353: i32 a1 = sp + 0x60\n 62356: i32 a3 = sp + 0x80\n 62360: i32 a4 = sp + 0xa0\n 62364: a2 = 0xffffffffffffffff\n 62367: a0 = 0\n 62369: ecalli 7 // 'get_storage'\n 62371: fallthrough\n      : @926 (gas: 2)\n 62372: a0 = u8 [sp + 0x80]\n 62376: jump @930 if a0 != 0\n      : @927 (gas: 5)\n 62379: a0 = u64 [sp + 0x20]\n 62382: a0 = a0 | s1\n 62385: a1 = u64 [sp + 0x38]\n 62388: a0 = a0 | a1\n 62391: jump @931 if a0 == 0\n      : @928 (gas: 8)\n 62394: u64 [sp + 0x40] = s1\n 62397: u64 [sp + 0x48] = a1\n 62400: a0 = u64 [sp + 0x28]\n 62403: u64 [sp + 0x50] = a0\n 62406: a0 = sp + 0x40\n 62409: a1 = u64 [sp + 0x30]\n 62412: u64 [sp + 0x58] = a1\n 62415: ra = 826, jump @938\n      : @929 [@dyn 413] (gas: 6)\n 62421: sp = s0 + 0xffffffffffffff40\n 62425: ra = u64 [sp + 0xb8]\n 62429: s0 = u64 [sp + 0xb0]\n 62433: s1 = u64 [sp + 0xa8]\n 62437: sp = sp + 0xc0\n 62441: ret\n      : @930 (gas: 4)\n 62443: a0 = 0\n 62445: a1 = 0\n 62447: ra = 0x33c\n 62451: jump @0\n      : @931 (gas: 2)\n 62455: a1 = 0\n 62457: ra = 828, jump @0\n      : @932 [@dyn 414] (gas: 6)\n 62464: i32 a1 = a0 + 0\n 62466: a0 = 0x1\n 62469: a2 = 0\n 62471: ra = 0x33e\n 62475: ecalli 10 // 'seal_return'\n 62477: fallthrough\n      : @933 [@dyn 415] (gas: 13)\n 62478: sp = sp + 0xffffffffffffffd0\n 62481: u64 [sp + 0x28] = ra\n 62484: u64 [sp + 0x20] = s0\n 62487: s0 = sp + 0x30\n 62490: sp = sp & 0xfffffffffffffff0\n 62493: a1 = u64 [a0 + 0x10]\n 62496: a2 = u64 [a0 + 0x8]\n 62499: a3 = u64 [a0]\n 62501: a4 = a1 << 0x20\n 62504: a4 = a4 >> 0x20\n 62507: a5 = a3 | a2\n 62510: a4 = a4 | a5\n 62513: jump @936 if a4 == 0\n      : @934 (gas: 7)\n 62516: a4 = u64 [a0 + 0x18]\n 62519: u64 [sp] = a3\n 62521: u64 [sp + 0x8] = a2\n 62524: u64 [sp + 0x10] = a1\n 62527: a0 = sp\n 62529: u64 [sp + 0x18] = a4\n 62532: ra = 832, jump @938\n      : @935 [@dyn 416] (gas: 5)\n 62537: sp = s0 + 0xffffffffffffffd0\n 62540: ra = u64 [sp + 0x28]\n 62543: s0 = u64 [sp + 0x20]\n 62546: sp = sp + 0x30\n 62549: ret\n      : @936 (gas: 3)\n 62551: a0 = 0\n 62553: a1 = 0\n 62555: ra = 834, jump @0\n      : @937 [@dyn 417] (gas: 6)\n 62562: i32 a1 = a0 + 0\n 62564: a0 = 0x1\n 62567: a2 = 0\n 62569: ra = 0x344\n 62573: ecalli 10 // 'seal_return'\n 62575: fallthrough\n      : @938 [@dyn 418] (gas: 30)\n 62576: sp = sp + 0xfffffffffffffee0\n 62580: u64 [sp + 0x118] = ra\n 62584: u64 [sp + 0x110] = s0\n 62588: u64 [sp + 0x108] = s1\n 62592: s0 = sp + 0x120\n 62596: sp = sp & 0xffffffffffffffe0\n 62599: a1 = u64 [a0 + 0x18]\n 62602: u64 [sp + 0x58] = a1\n 62605: a1 = u64 [a0 + 0x10]\n 62608: u64 [sp + 0x50] = a1\n 62611: a1 = u64 [a0 + 0x8]\n 62614: u64 [sp + 0x48] = a1\n 62617: a0 = u64 [a0]\n 62619: u64 [sp + 0x40] = a0\n 62622: u64 [sp + 216] = 0\n 62626: u64 [sp + 208] = 0\n 62630: u64 [sp + 200] = 0\n 62634: u64 [sp + 192] = 0x3\n 62639: u64 [sp + 248] = 0\n 62643: u64 [sp + 240] = 0\n 62647: u64 [sp + 232] = 0\n 62651: u64 [sp + 224] = 0\n 62655: u32 [sp + 256] = 0x20\n 62660: i32 a1 = sp + 0xc0\n 62664: i32 a3 = sp + 0xe0\n 62668: i32 a4 = sp + 0x100\n 62672: a2 = 0xffffffffffffffff\n 62675: a0 = 0\n 62677: ecalli 7 // 'get_storage'\n 62679: fallthrough\n      : @939 (gas: 23)\n 62680: a2 = u64 [sp + 0xe0]\n 62684: a4 = u64 [sp + 0xf8]\n 62688: a3 = u64 [sp + 0xe8]\n 62692: s1 = u64 [sp + 0xf0]\n 62696: u64 [sp + 0x8] = a2\n 62699: a2 = a2 + 0x1\n 62702: a0 = a2 <u 0x1\n 62705: u64 [sp + 0x10] = a3\n 62708: a3 = a3 + a0\n 62711: a0 = a2 | a3\n 62714: a0 = a0 <u 0x1\n 62717: a1 = s1 + a0\n 62720: a0 = a1 <u s1\n 62723: u64 [sp + 0x18] = a4\n 62726: a0 = a0 + a4\n 62729: u64 [sp + 0x28] = a3\n 62732: u64 [sp + 0x20] = a0\n 62735: a0 = a0 | a3\n 62738: u64 [sp + 0x38] = a1\n 62741: u64 [sp + 0x30] = a2\n 62744: a1 = a1 | a2\n 62747: a0 = a0 | a1\n 62750: jump @948 if a0 == 0\n      : @940 (gas: 16)\n 62754: u64 [sp + 216] = 0\n 62758: u64 [sp + 208] = 0\n 62762: u64 [sp + 200] = 0\n 62766: u64 [sp + 192] = 0x4\n 62771: u64 [sp + 248] = 0\n 62775: u64 [sp + 240] = 0\n 62779: u64 [sp + 232] = 0\n 62783: u64 [sp + 224] = 0\n 62787: u32 [sp + 256] = 0x20\n 62792: i32 a1 = sp + 0xc0\n 62796: i32 a3 = sp + 0xe0\n 62800: i32 a4 = sp + 0x100\n 62804: a2 = 0xffffffffffffffff\n 62807: a0 = 0\n 62809: ecalli 7 // 'get_storage'\n 62811: fallthrough\n      : @941 (gas: 13)\n 62812: a2 = u64 [sp + 0x10]\n 62815: a0 = a2 >u 0\n 62817: a1 = u64 [sp + 0x8]\n 62820: a1 = a1 <u 0x32\n 62823: a1 = a1 ^ 0x1\n 62826: a1 = a0 if a2 != 0\n 62829: a0 = s1 >u 0\n 62831: a3 = u64 [sp + 0x18]\n 62834: a2 = a3 >u 0\n 62836: a2 = a0 if a3 == 0\n 62839: a0 = s1 | a3\n 62842: a2 = a1 if a0 == 0\n 62845: jump @946 if a2 != 0\n      : @942 (gas: 20)\n 62849: t0 = u64 [sp + 0xe0]\n 62853: a1 = u64 [sp + 0xe8]\n 62857: a2 = u64 [sp + 0xf8]\n 62861: a3 = u64 [sp + 0xf0]\n 62865: a0 = u64 [sp + 0x30]\n 62868: a4 = a0 <u t0\n 62871: a0 = u64 [sp + 0x28]\n 62874: a5 = a1 ^ a0\n 62877: s1 = a0 <u a1\n 62880: s1 = a4 if a5 == 0\n 62883: a4 = u64 [sp + 0x38]\n 62886: t1 = a4 <u a3\n 62889: a0 = u64 [sp + 0x20]\n 62892: a5 = a2 ^ a0\n 62895: a0 = a0 <u a2\n 62898: a0 = t1 if a5 == 0\n 62901: a4 = a4 ^ a3\n 62904: a4 = a4 | a5\n 62907: a0 = s1 if a4 == 0\n 62910: jump @946 if a0 != 0\n      : @943 (gas: 4)\n 62913: a0 = t0 | a3\n 62916: a1 = a1 | a2\n 62919: a0 = a0 | a1\n 62922: jump @946 if a0 == 0\n      : @944 (gas: 10)\n 62925: a0 = u64 [sp + 0x40]\n 62928: u64 [sp + 0xa0] = a0\n 62932: a0 = u64 [sp + 0x48]\n 62935: u64 [sp + 0xa8] = a0\n 62939: a0 = u64 [sp + 0x50]\n 62942: u64 [sp + 0xb0] = a0\n 62946: a0 = sp + 0xa0\n 62950: a1 = u64 [sp + 0x58]\n 62953: u64 [sp + 0xb8] = a1\n 62957: ra = 838, jump @960\n      : @945 [@dyn 419] (gas: 6)\n 62963: sp = s0 + 0xfffffffffffffee0\n 62967: ra = u64 [sp + 0x118]\n 62971: s0 = u64 [sp + 0x110]\n 62975: s1 = u64 [sp + 0x108]\n 62979: sp = sp + 0x120\n 62983: ret\n      : @946 (gas: 3)\n 62985: a0 = 0\n 62987: a1 = 0\n 62989: ra = 840, jump @0\n      : @947 [@dyn 420] (gas: 5)\n 62996: i32 a1 = a0 + 0\n 62998: a0 = 0x1\n 63001: a2 = 0\n 63003: ecalli 10 // 'seal_return'\n 63005: fallthrough\n      : @948 (gas: 8)\n 63006: u64 [sp + 144] = 0\n 63010: u64 [sp + 136] = 0\n 63014: u64 [sp + 128] = 0\n 63018: a0 = 0x4e487b7100000000\n 63028: a1 = sp + 0x80\n 63032: u64 [sp + 0x98] = a0\n 63036: a0 = 0\n 63038: ra = 842, jump @23\n      : @949 [@dyn 421] (gas: 7)\n 63045: u64 [sp + 120] = 0\n 63048: u64 [sp + 112] = 0\n 63051: u64 [sp + 96] = 0x11\n 63055: a0 = 0x4\n 63058: a1 = sp + 0x60\n 63061: u64 [sp + 104] = 0\n 63064: ra = 844, jump @23\n      : @950 [@dyn 422] (gas: 3)\n 63071: a1 = 0x24\n 63074: a0 = 0\n 63076: ra = 846, jump @0\n      : @951 [@dyn 423] (gas: 6)\n 63083: i32 a1 = a0 + 0\n 63085: a0 = 0x1\n 63088: a2 = 0x24\n 63091: ra = 0x350\n 63095: ecalli 10 // 'seal_return'\n 63097: fallthrough\n      : @952 [@dyn 424] (gas: 36)\n 63098: sp = sp + 0xfffffffffffffdc0\n 63102: u64 [sp + 0x238] = ra\n 63106: u64 [sp + 0x230] = s0\n 63110: u64 [sp + 0x228] = s1\n 63114: s0 = sp + 0x240\n 63118: sp = sp & 0xffffffffffffffe0\n 63121: a2 = u64 [a1 + 0x10]\n 63124: u64 [sp + 0x38] = a2\n 63127: a2 = u64 [a1 + 0x8]\n 63130: u64 [sp + 0x30] = a2\n 63133: a1 = u64 [a1]\n 63135: u64 [sp + 0x28] = a1\n 63138: a3 = u64 [a0 + 0x18]\n 63141: a2 = u64 [a0 + 0x10]\n 63144: a1 = u64 [a0 + 0x8]\n 63147: a0 = u64 [a0]\n 63149: u64 [sp + 0x60] = a3\n 63152: u64 [sp + 0x1f8] = a3\n 63156: u64 [sp + 0x68] = a2\n 63159: u64 [sp + 0x1f0] = a2\n 63163: u64 [sp + 0x70] = a1\n 63166: u64 [sp + 0x1e8] = a1\n 63170: u64 [sp + 0x78] = a0\n 63173: u64 [sp + 0x1e0] = a0\n 63177: u64 [sp + 536] = 0\n 63181: u64 [sp + 528] = 0\n 63185: u64 [sp + 520] = 0\n 63189: u64 [sp + 512] = 0\n 63193: u32 [sp + 448] = 0x20\n 63198: i32 a1 = sp + 0x1e0\n 63202: i32 a3 = sp + 0x200\n 63206: i32 a4 = sp + 0x1c0\n 63210: a2 = 0xffffffffffffffff\n 63213: a0 = 0\n 63215: ecalli 7 // 'get_storage'\n 63217: fallthrough\n      : @953 (gas: 7)\n 63218: a4 = u64 [sp + 0x218]\n 63222: a3 = u64 [sp + 0x210]\n 63226: a2 = u64 [sp + 0x208]\n 63230: a0 = a3 | a4\n 63233: a1 = a2 <u 0x1\n 63236: a1 = 0 if a0 != 0\n 63238: jump @956 if a1 == 0\n      : @954 (gas: 50)\n 63242: a0 = u64 [sp + 0x200]\n 63246: u64 [sp + 0x58] = a0\n 63249: a0 = a0 + 0x1\n 63252: a1 = a0 <u 0x1\n 63255: a1 = a1 + a2\n 63258: u64 [sp + 0x200] = a0\n 63262: a0 = a0 | a1\n 63265: u64 [sp + 0x208] = a1\n 63269: a0 = a0 <u 0x1\n 63272: a0 = a0 + a3\n 63275: u64 [sp + 0x210] = a0\n 63279: a0 = a0 <u a3\n 63282: a0 = a0 + a4\n 63285: u64 [sp + 0x218] = a0\n 63289: a0 = u64 [sp + 0x70]\n 63292: u64 [sp + 0x1e8] = a0\n 63296: a0 = u64 [sp + 0x78]\n 63299: u64 [sp + 0x1e0] = a0\n 63303: a0 = u64 [sp + 0x68]\n 63306: u64 [sp + 0x1f0] = a0\n 63310: s1 = u64 [sp + 0x60]\n 63313: u64 [sp + 0x1f8] = s1\n 63317: i32 a1 = sp + 0x1e0\n 63321: u64 [sp + 0x50] = a3\n 63324: i32 a3 = sp + 0x200\n 63328: u64 [sp + 0x48] = a2\n 63331: a2 = 0xffffffffffffffff\n 63334: u64 [sp + 0x40] = a4\n 63337: a4 = 0x20\n 63340: a0 = 0\n 63342: ecalli 12 // 'set_storage'\n 63344: a0 = u64 [sp + 0x40]\n 63347: u64 [sp + 0x158] = a0\n 63351: a0 = u64 [sp + 0x50]\n 63354: u64 [sp + 0x150] = a0\n 63358: a0 = u64 [sp + 0x48]\n 63361: u64 [sp + 0x148] = a0\n 63365: a0 = u64 [sp + 0x58]\n 63368: u64 [sp + 0x140] = a0\n 63372: u64 [sp + 0x178] = s1\n 63376: a0 = u64 [sp + 0x68]\n 63379: u64 [sp + 0x170] = a0\n 63383: a0 = u64 [sp + 0x70]\n 63386: u64 [sp + 0x168] = a0\n 63390: a0 = sp + 0x180\n 63394: a1 = sp + 0x160\n 63398: a2 = sp + 0x140\n 63402: a3 = u64 [sp + 0x78]\n 63405: u64 [sp + 0x160] = a3\n 63409: ra = 850, jump @270\n      : @955 [@dyn 425] (gas: 444)\n 63416: a0 = u64 [sp + 0x1b8]\n 63420: u64 [sp + 0x58] = a0\n 63423: a0 = u64 [sp + 0x1b0]\n 63427: u64 [sp + 0x50] = a0\n 63430: s1 = u64 [sp + 0x1a8]\n 63434: a0 = u64 [sp + 0x1a0]\n 63438: u64 [sp + 0x20] = a0\n 63441: a3 = u64 [sp + 0x198]\n 63445: u64 [sp + 0x60] = a3\n 63448: a2 = u64 [sp + 0x190]\n 63452: u64 [sp + 0x68] = a2\n 63455: a1 = u64 [sp + 0x188]\n 63459: u64 [sp + 0x70] = a1\n 63462: a0 = u64 [sp + 0x180]\n 63466: u64 [sp + 0x78] = a0\n 63469: u64 [sp + 0x1f8] = a3\n 63473: u64 [sp + 0x1f0] = a2\n 63477: u64 [sp + 0x1e8] = a1\n 63481: u64 [sp + 0x1e0] = a0\n 63485: u64 [sp + 536] = 0\n 63489: u64 [sp + 528] = 0\n 63493: u64 [sp + 520] = 0\n 63497: u64 [sp + 512] = 0\n 63501: u32 [sp + 448] = 0x20\n 63506: i32 a1 = sp + 0x1e0\n 63510: i32 a3 = sp + 0x200\n 63514: i32 a4 = sp + 0x1c0\n 63518: a2 = 0xffffffffffffffff\n 63521: a0 = 0\n 63523: ecalli 7 // 'get_storage'\n 63525: a2 = u64 [sp + 0x20]\n 63528: a0 = a2 >> 0x3d\n 63531: a1 = s1 << 0x3\n 63534: a0 = a0 | a1\n 63537: a1 = a2 << 0x3\n 63540: a1 = a1 <u 0x100\n 63544: t1 = a1 ^ 0x1\n 63547: a1 = a0 >u 0\n 63549: t1 = a1 if a0 != 0\n 63552: s1 = s1 >> 0x3d\n 63555: a1 = u64 [sp + 0x50]\n 63558: a0 = a1 << 0x3\n 63561: a0 = a0 | s1\n 63564: a1 = a1 >> 0x3d\n 63567: a3 = u64 [sp + 0x58]\n 63570: a3 = a3 << 0x3\n 63573: a1 = a1 | a3\n 63576: a3 = a1 >u 0\n 63578: a4 = a0 >u 0\n 63580: a4 = a3 if a1 != 0\n 63583: a0 = a0 | a1\n 63586: t1 = a4 if a0 != 0\n 63589: a0 = u64 [sp + 0x200]\n 63593: u64 [sp + 0x58] = a0\n 63596: a0 = u64 [sp + 0x208]\n 63600: u64 [sp + 0x50] = a0\n 63603: a0 = u64 [sp + 0x210]\n 63607: u64 [sp + 0x48] = a0\n 63610: a0 = u64 [sp + 0x218]\n 63614: u64 [sp + 0x40] = a0\n 63617: u8 [sp + 307] = 0xff\n 63623: u8 [sp + 303] = 0xff\n 63629: u8 [sp + 302] = 0xff\n 63635: u8 [sp + 301] = 0xff\n 63641: u8 [sp + 299] = 0xff\n 63647: u8 [sp + 295] = 0xff\n 63653: u8 [sp + 294] = 0xff\n 63659: u8 [sp + 293] = 0xff\n 63665: u8 [sp + 291] = 0xff\n 63671: a0 = 0xffffffff\n 63681: u8 [sp + 0x12c] = a0\n 63685: u8 [sp + 0x124] = a0\n 63689: a0 = 0xffffffffffff\n 63699: u8 [sp + 0x132] = a0\n 63703: u8 [sp + 0x12a] = a0\n 63707: u8 [sp + 0x122] = a0\n 63711: u8 [sp + 304] = 0xffffffffffffffff\n 63716: u8 [sp + 296] = 0xffffffffffffffff\n 63721: u8 [sp + 288] = 0xffffffffffffffff\n 63726: a0 = 0xffffffffffffff\n 63736: u8 [sp + 0x131] = a0\n 63740: u8 [sp + 0x129] = a0\n 63744: u8 [sp + 0x121] = a0\n 63748: u8 [sp + 319] = 0\n 63752: u8 [sp + 318] = 0\n 63756: u8 [sp + 317] = 0\n 63760: u8 [sp + 316] = 0\n 63764: u8 [sp + 315] = 0\n 63768: u8 [sp + 314] = 0\n 63772: u8 [sp + 313] = 0\n 63776: u8 [sp + 312] = 0\n 63780: u8 [sp + 311] = 0\n 63784: u8 [sp + 310] = 0\n 63788: u8 [sp + 309] = 0\n 63792: u8 [sp + 308] = 0\n 63796: u8 [sp + 287] = 0\n 63800: u8 [sp + 286] = 0\n 63804: u8 [sp + 285] = 0\n 63808: u8 [sp + 284] = 0\n 63812: u8 [sp + 283] = 0\n 63816: u8 [sp + 282] = 0\n 63820: u8 [sp + 281] = 0\n 63824: u8 [sp + 280] = 0\n 63828: u8 [sp + 279] = 0\n 63832: u8 [sp + 278] = 0\n 63836: u8 [sp + 277] = 0\n 63840: u8 [sp + 276] = 0\n 63844: u8 [sp + 275] = 0\n 63848: u8 [sp + 274] = 0\n 63852: u8 [sp + 273] = 0\n 63856: u8 [sp + 272] = 0\n 63860: u8 [sp + 271] = 0\n 63864: u8 [sp + 270] = 0\n 63868: u8 [sp + 269] = 0\n 63872: u8 [sp + 268] = 0\n 63876: u8 [sp + 267] = 0\n 63880: u8 [sp + 266] = 0\n 63884: u8 [sp + 265] = 0\n 63888: u8 [sp + 264] = 0\n 63892: u8 [sp + 263] = 0\n 63896: u8 [sp + 262] = 0\n 63900: u8 [sp + 261] = 0\n 63904: u8 [sp + 260] = 0\n 63908: u8 [sp + 259] = 0\n 63912: u8 [sp + 258] = 0\n 63916: u8 [sp + 257] = 0\n 63920: u8 [sp + 256] = 0\n 63924: a4 = a2 & 0x1f\n 63927: a3 = sp + 0x120\n 63931: a3 = a3 - a4\n 63934: a0 = u8 [a3 + 0x19]\n 63937: a1 = u8 [a3 + 0x18]\n 63940: a5 = u8 [a3 + 0x1a]\n 63943: s1 = u8 [a3 + 0x1b]\n 63946: a0 = a0 << 0x8\n 63949: a0 = a0 | a1\n 63952: a5 = a5 << 0x10\n 63955: s1 = s1 << 0x18\n 63958: a5 = a5 | s1\n 63961: t0 = a5 | a0\n 63964: a1 = u8 [a3 + 0x1d]\n 63967: a5 = u8 [a3 + 0x1c]\n 63970: s1 = u8 [a3 + 0x1e]\n 63973: a0 = u8 [a3 + 0x1f]\n 63976: a1 = a1 << 0x8\n 63979: a1 = a1 | a5\n 63982: s1 = s1 << 0x10\n 63985: a0 = a0 << 0x18\n 63988: a0 = a0 | s1\n 63991: a0 = a0 | a1\n 63994: a0 = a0 << 0x20\n 63997: a0 = a0 | t0\n 64000: u64 [sp + 0x20] = a0\n 64003: a0 = u8 [a3 + 0x11]\n 64006: a1 = u8 [a3 + 0x10]\n 64009: a5 = u8 [a3 + 0x12]\n 64012: s1 = u8 [a3 + 0x13]\n 64015: a0 = a0 << 0x8\n 64018: a0 = a0 | a1\n 64021: a5 = a5 << 0x10\n 64024: s1 = s1 << 0x18\n 64027: a5 = a5 | s1\n 64030: t0 = a5 | a0\n 64033: a1 = u8 [a3 + 0x15]\n 64036: a5 = u8 [a3 + 0x14]\n 64039: s1 = u8 [a3 + 0x16]\n 64042: a0 = u8 [a3 + 0x17]\n 64045: a1 = a1 << 0x8\n 64048: a1 = a1 | a5\n 64051: s1 = s1 << 0x10\n 64054: a0 = a0 << 0x18\n 64057: a0 = a0 | s1\n 64060: a0 = a0 | a1\n 64063: a0 = a0 << 0x20\n 64066: a0 = a0 | t0\n 64069: u64 [sp + 0x18] = a0\n 64072: a0 = u8 [a3 + 0x9]\n 64075: a1 = u8 [a3 + 0x8]\n 64078: a5 = u8 [a3 + 0xa]\n 64081: s1 = u8 [a3 + 0xb]\n 64084: a0 = a0 << 0x8\n 64087: a0 = a0 | a1\n 64090: a5 = a5 << 0x10\n 64093: s1 = s1 << 0x18\n 64096: a5 = a5 | s1\n 64099: a2 = a5 | a0\n 64102: a1 = u8 [a3 + 0xd]\n 64105: a5 = u8 [a3 + 0xc]\n 64108: s1 = u8 [a3 + 0xe]\n 64111: a0 = u8 [a3 + 0xf]\n 64114: a1 = a1 << 0x8\n 64117: a1 = a1 | a5\n 64120: s1 = s1 << 0x10\n 64123: a0 = a0 << 0x18\n 64126: a0 = a0 | s1\n 64129: a0 = a0 | a1\n 64132: a0 = a0 << 0x20\n 64135: ra = a0 | a2\n 64138: a0 = u8 [a3 + 0x1]\n 64141: a1 = u8 [a3]\n 64143: a2 = u8 [a3 + 0x2]\n 64146: s1 = u8 [a3 + 0x3]\n 64149: a0 = a0 << 0x8\n 64152: a0 = a0 | a1\n 64155: a2 = a2 << 0x10\n 64158: s1 = s1 << 0x18\n 64161: a2 = a2 | s1\n 64164: a0 = a0 | a2\n 64167: a1 = u8 [a3 + 0x5]\n 64170: a2 = u8 [a3 + 0x4]\n 64173: s1 = u8 [a3 + 0x6]\n 64176: a3 = u8 [a3 + 0x7]\n 64179: a1 = a1 << 0x8\n 64182: a1 = a1 | a2\n 64185: s1 = s1 << 0x10\n 64188: a3 = a3 << 0x18\n 64191: a3 = a3 | s1\n 64194: a1 = a1 | a3\n 64197: a1 = a1 << 0x20\n 64200: t2 = a1 | a0\n 64203: a1 = u64 [sp + 0x28]\n 64206: a0 = a1 >> 0x38\n 64209: u8 [sp + 0xe7] = a0\n 64213: a0 = a1 >> 0x30\n 64216: u8 [sp + 0xe6] = a0\n 64220: a0 = a1 >> 0x28\n 64223: u8 [sp + 0xe5] = a0\n 64227: a0 = a1 >> 0x20\n 64230: u8 [sp + 0xe4] = a0\n 64234: a0 = a1 >> 0x18\n 64237: u8 [sp + 0xe3] = a0\n 64241: a0 = a1 >> 0x10\n 64244: u8 [sp + 0xe2] = a0\n 64248: u8 [sp + 0xe0] = a1\n 64252: a0 = a1 >> 0x8\n 64255: u8 [sp + 0xe1] = a0\n 64259: a1 = u64 [sp + 0x30]\n 64262: a0 = a1 >> 0x38\n 64265: u8 [sp + 0xef] = a0\n 64269: a0 = a1 >> 0x30\n 64272: u8 [sp + 0xee] = a0\n 64276: a0 = a1 >> 0x28\n 64279: u8 [sp + 0xed] = a0\n 64283: a0 = a1 >> 0x20\n 64286: u8 [sp + 0xec] = a0\n 64290: a0 = a1 >> 0x18\n 64293: u8 [sp + 0xeb] = a0\n 64297: a0 = a1 >> 0x10\n 64300: u8 [sp + 0xea] = a0\n 64304: u8 [sp + 0xe8] = a1\n 64308: a0 = a1 >> 0x8\n 64311: u8 [sp + 0xe9] = a0\n 64315: a1 = u64 [sp + 0x38]\n 64318: a0 = a1 >> 0x18\n 64321: u8 [sp + 0xf3] = a0\n 64325: a0 = a1 >> 0x10\n 64328: u8 [sp + 0xf2] = a0\n 64332: u8 [sp + 0xf0] = a1\n 64336: a0 = a1 >> 0x8\n 64339: u8 [sp + 0xf1] = a0\n 64343: a0 = sp + 0xe0\n 64347: a4 = a0 - a4\n 64350: u8 [sp + 255] = 0\n 64354: u8 [sp + 254] = 0\n 64358: u8 [sp + 253] = 0\n 64362: u8 [sp + 252] = 0\n 64366: u8 [sp + 251] = 0\n 64370: u8 [sp + 250] = 0\n 64374: u8 [sp + 249] = 0\n 64378: u8 [sp + 248] = 0\n 64382: u8 [sp + 247] = 0\n 64386: u8 [sp + 246] = 0\n 64390: u8 [sp + 245] = 0\n 64394: u8 [sp + 244] = 0\n 64398: u8 [sp + 223] = 0\n 64402: u8 [sp + 222] = 0\n 64406: u8 [sp + 221] = 0\n 64410: u8 [sp + 220] = 0\n 64414: u8 [sp + 219] = 0\n 64418: u8 [sp + 218] = 0\n 64422: u8 [sp + 217] = 0\n 64426: u8 [sp + 216] = 0\n 64430: u8 [sp + 215] = 0\n 64434: u8 [sp + 214] = 0\n 64438: u8 [sp + 213] = 0\n 64442: u8 [sp + 212] = 0\n 64446: u8 [sp + 211] = 0\n 64450: u8 [sp + 210] = 0\n 64454: u8 [sp + 209] = 0\n 64458: u8 [sp + 208] = 0\n 64462: u8 [sp + 207] = 0\n 64466: u8 [sp + 206] = 0\n 64470: u8 [sp + 205] = 0\n 64474: u8 [sp + 204] = 0\n 64478: u8 [sp + 203] = 0\n 64482: u8 [sp + 202] = 0\n 64486: u8 [sp + 201] = 0\n 64490: u8 [sp + 200] = 0\n 64494: u8 [sp + 199] = 0\n 64498: u8 [sp + 198] = 0\n 64502: u8 [sp + 197] = 0\n 64506: u8 [sp + 196] = 0\n 64510: u8 [sp + 195] = 0\n 64514: u8 [sp + 194] = 0\n 64518: u8 [sp + 193] = 0\n 64522: u8 [sp + 192] = 0\n 64526: a0 = u8 [a4 + 0x19]\n 64529: a1 = u8 [a4 + 0x18]\n 64532: a2 = u8 [a4 + 0x1a]\n 64535: s1 = u8 [a4 + 0x1b]\n 64538: a0 = a0 << 0x8\n 64541: a0 = a0 | a1\n 64544: a2 = a2 << 0x10\n 64547: s1 = s1 << 0x18\n 64550: a2 = a2 | s1\n 64553: a3 = a2 | a0\n 64556: a1 = u8 [a4 + 0x1d]\n 64559: a2 = u8 [a4 + 0x1c]\n 64562: s1 = u8 [a4 + 0x1e]\n 64565: a0 = u8 [a4 + 0x1f]\n 64568: a1 = a1 << 0x8\n 64571: a1 = a1 | a2\n 64574: s1 = s1 << 0x10\n 64577: a0 = a0 << 0x18\n 64580: a0 = a0 | s1\n 64583: a0 = a0 | a1\n 64586: a0 = a0 << 0x20\n 64589: s1 = a0 | a3\n 64592: a0 = u8 [a4 + 0x11]\n 64595: a1 = u8 [a4 + 0x10]\n 64598: a2 = u8 [a4 + 0x12]\n 64601: a3 = u8 [a4 + 0x13]\n 64604: a0 = a0 << 0x8\n 64607: a0 = a0 | a1\n 64610: a2 = a2 << 0x10\n 64613: a3 = a3 << 0x18\n 64616: a2 = a2 | a3\n 64619: a5 = a2 | a0\n 64622: a1 = u8 [a4 + 0x15]\n 64625: a2 = u8 [a4 + 0x14]\n 64628: a3 = u8 [a4 + 0x16]\n 64631: a0 = u8 [a4 + 0x17]\n 64634: a1 = a1 << 0x8\n 64637: a1 = a1 | a2\n 64640: a3 = a3 << 0x10\n 64643: a0 = a0 << 0x18\n 64646: a0 = a0 | a3\n 64649: a0 = a0 | a1\n 64652: a0 = a0 << 0x20\n 64655: t0 = a0 | a5\n 64658: a0 = u8 [a4 + 0x9]\n 64661: a2 = u8 [a4 + 0x8]\n 64664: a3 = u8 [a4 + 0xa]\n 64667: a5 = u8 [a4 + 0xb]\n 64670: a0 = a0 << 0x8\n 64673: a0 = a0 | a2\n 64676: a3 = a3 << 0x10\n 64679: a5 = a5 << 0x18\n 64682: a3 = a3 | a5\n 64685: a1 = a3 | a0\n 64688: a2 = u8 [a4 + 0xd]\n 64691: a3 = u8 [a4 + 0xc]\n 64694: a5 = u8 [a4 + 0xe]\n 64697: a0 = u8 [a4 + 0xf]\n 64700: a2 = a2 << 0x8\n 64703: a2 = a2 | a3\n 64706: a5 = a5 << 0x10\n 64709: a0 = a0 << 0x18\n 64712: a0 = a0 | a5\n 64715: a0 = a0 | a2\n 64718: a0 = a0 << 0x20\n 64721: a0 = a0 | a1\n 64724: a1 = u8 [a4 + 0x1]\n 64727: a2 = u8 [a4]\n 64729: a3 = u8 [a4 + 0x2]\n 64732: a5 = u8 [a4 + 0x3]\n 64735: a1 = a1 << 0x8\n 64738: a1 = a1 | a2\n 64741: a3 = a3 << 0x10\n 64744: a5 = a5 << 0x18\n 64747: a3 = a3 | a5\n 64750: a1 = a1 | a3\n 64753: a2 = u8 [a4 + 0x5]\n 64756: a3 = u8 [a4 + 0x4]\n 64759: a5 = u8 [a4 + 0x6]\n 64762: a4 = u8 [a4 + 0x7]\n 64765: a2 = a2 << 0x8\n 64768: a2 = a2 | a3\n 64771: a5 = a5 << 0x10\n 64774: a4 = a4 << 0x18\n 64777: a4 = a4 | a5\n 64780: a2 = a2 | a4\n 64783: a2 = a2 << 0x20\n 64786: a4 = a2 | a1\n 64789: t2 = 0 if t1 != 0\n 64791: ra = 0 if t1 != 0\n 64793: a5 = u64 [sp + 0x18]\n 64796: a5 = 0 if t1 != 0\n 64798: a2 = u64 [sp + 0x20]\n 64801: a2 = 0 if t1 != 0\n 64803: a4 = 0 if t1 != 0\n 64805: a0 = 0 if t1 != 0\n 64807: t0 = 0 if t1 != 0\n 64809: s1 = 0 if t1 != 0\n 64811: a1 = u64 [sp + 0x40]\n 64814: t1 = a1 & ~a2\n 64817: a2 = a2 & s1\n 64820: a1 = u64 [sp + 0x48]\n 64823: a3 = a1 & ~a5\n 64826: a5 = t0 & a5\n 64829: a1 = u64 [sp + 0x50]\n 64832: s1 = a1 & ~ra\n 64835: a0 = a0 & ra\n 64838: a1 = u64 [sp + 0x58]\n 64841: a1 = a1 & ~t2\n 64844: a4 = a4 & t2\n 64847: a1 = a1 | a4\n 64850: a0 = a0 | s1\n 64853: a3 = a3 | a5\n 64856: a2 = t1 | a2\n 64859: a4 = u64 [sp + 0x60]\n 64862: u64 [sp + 0x1f8] = a4\n 64866: a4 = u64 [sp + 0x68]\n 64869: u64 [sp + 0x1f0] = a4\n 64873: a4 = u64 [sp + 0x70]\n 64876: u64 [sp + 0x1e8] = a4\n 64880: a4 = u64 [sp + 0x78]\n 64883: u64 [sp + 0x1e0] = a4\n 64887: u64 [sp + 0x218] = a2\n 64891: u64 [sp + 0x210] = a3\n 64895: u64 [sp + 0x208] = a0\n 64899: u64 [sp + 0x200] = a1\n 64903: i32 a1 = sp + 0x1e0\n 64907: i32 a3 = sp + 0x200\n 64911: a2 = 0xffffffffffffffff\n 64914: a4 = 0x20\n 64917: a0 = 0\n 64919: ecalli 12 // 'set_storage'\n 64921: sp = s0 + 0xfffffffffffffdc0\n 64925: ra = u64 [sp + 0x238]\n 64929: s0 = u64 [sp + 0x230]\n 64933: s1 = u64 [sp + 0x228]\n 64937: sp = sp + 0x240\n 64941: ret\n      : @956 (gas: 8)\n 64943: u64 [sp + 176] = 0\n 64947: u64 [sp + 168] = 0\n 64951: u64 [sp + 160] = 0\n 64955: a0 = 0x4e487b7100000000\n 64965: a1 = sp + 0xa0\n 64969: u64 [sp + 0xb8] = a0\n 64973: a0 = 0\n 64975: ra = 852, jump @23\n      : @957 [@dyn 426] (gas: 7)\n 64982: u64 [sp + 152] = 0\n 64986: u64 [sp + 144] = 0\n 64990: u64 [sp + 128] = 0x41\n 64995: a0 = 0x4\n 64998: a1 = sp + 0x80\n 65002: u64 [sp + 136] = 0\n 65006: ra = 854, jump @23\n      : @958 [@dyn 427] (gas: 3)\n 65013: a1 = 0x24\n 65016: a0 = 0\n 65018: ra = 856, jump @0\n      : @959 [@dyn 428] (gas: 6)\n 65025: i32 a1 = a0 + 0\n 65027: a0 = 0x1\n 65030: a2 = 0x24\n 65033: ra = 0x35a\n 65037: ecalli 10 // 'seal_return'\n 65039: fallthrough\n      : @960 [@dyn 429] (gas: 20)\n 65040: sp = sp + 0xfffffffffffffec0\n 65044: u64 [sp + 0x138] = ra\n 65048: u64 [sp + 0x130] = s0\n 65052: u64 [sp + 0x128] = s1\n 65056: s0 = sp + 0x140\n 65060: sp = sp & 0xffffffffffffffe0\n 65063: a1 = u64 [a0 + 0x18]\n 65066: u64 [sp + 0x50] = a1\n 65069: a1 = u64 [a0 + 0x10]\n 65072: u64 [sp + 0x48] = a1\n 65075: a2 = u64 [a0]\n 65077: u64 [sp + 0x58] = a2\n 65080: s1 = u64 [a0 + 0x8]\n 65083: u64 [sp + 0x40] = s1\n 65086: a0 = a1 << 0x20\n 65089: a0 = a0 >> 0x20\n 65092: u64 [sp + 0x38] = a0\n 65095: a1 = 0x20\n 65098: a0 = 0\n 65100: ra = 860, jump @0\n      : @961 [@dyn 430] (gas: 61)\n 65107: a1 = u64 [sp + 0x38]\n 65110: a2 = reverse a1\n 65112: a4 = reverse s1\n 65114: a1 = u64 [sp + 0x58]\n 65117: a3 = reverse a1\n 65119: u8 [a0 + 0x18] = a3\n 65122: u8 [a0 + 0x10] = a4\n 65125: u8 [a0 + 11] = 0\n 65128: u8 [a0 + 10] = 0\n 65131: u8 [a0 + 9] = 0\n 65134: u8 [a0 + 7] = 0\n 65137: u8 [a0 + 6] = 0\n 65140: u8 [a0 + 5] = 0\n 65143: u8 [a0 + 4] = 0\n 65146: u8 [a0 + 3] = 0\n 65149: u8 [a0 + 2] = 0\n 65152: u8 [a0 + 1] = 0\n 65155: u8 [a0 + 0] = 0\n 65157: a1 = a3 >> 0x38\n 65160: u8 [a0 + 0x1f] = a1\n 65163: a1 = a3 >> 0x30\n 65166: u8 [a0 + 0x1e] = a1\n 65169: a1 = a3 >> 0x28\n 65172: u8 [a0 + 0x1d] = a1\n 65175: a1 = a3 >> 0x20\n 65178: u8 [a0 + 0x1c] = a1\n 65181: a1 = a3 >> 0x18\n 65184: u8 [a0 + 0x1b] = a1\n 65187: a1 = a3 >> 0x10\n 65190: u8 [a0 + 0x1a] = a1\n 65193: u64 [sp + 0x18] = a3\n 65196: a1 = a3 >> 0x8\n 65199: u8 [a0 + 0x19] = a1\n 65202: a1 = a4 >> 0x38\n 65205: u8 [a0 + 0x17] = a1\n 65208: a1 = a4 >> 0x30\n 65211: u8 [a0 + 0x16] = a1\n 65214: a1 = a4 >> 0x28\n 65217: u8 [a0 + 0x15] = a1\n 65220: a1 = a4 >> 0x20\n 65223: u8 [a0 + 0x14] = a1\n 65226: a1 = a4 >> 0x18\n 65229: u8 [a0 + 0x13] = a1\n 65232: a1 = a4 >> 0x10\n 65235: u8 [a0 + 0x12] = a1\n 65238: u64 [sp + 0x10] = a4\n 65241: a1 = a4 >> 0x8\n 65244: u8 [a0 + 0x11] = a1\n 65247: u8 [a0 + 0x8] = a2\n 65250: a1 = a2 >> 0x38\n 65253: u8 [a0 + 0xf] = a1\n 65256: a1 = a2 >> 0x30\n 65259: u8 [a0 + 0xe] = a1\n 65262: a1 = a2 >> 0x28\n 65265: u8 [a0 + 0xd] = a1\n 65268: u64 [sp + 0x20] = a2\n 65271: a1 = a2 >> 0x20\n 65274: u8 [a0 + 0xc] = a1\n 65277: a0 = 0x20\n 65280: a1 = 0x20\n 65283: ra = 862, jump @0\n      : @962 [@dyn 431] (gas: 35)\n 65290: u8 [a0 + 31] = 0x2\n 65294: u8 [a0 + 30] = 0\n 65297: u8 [a0 + 29] = 0\n 65300: u8 [a0 + 28] = 0\n 65303: u8 [a0 + 27] = 0\n 65306: u8 [a0 + 26] = 0\n 65309: u8 [a0 + 25] = 0\n 65312: u8 [a0 + 24] = 0\n 65315: u8 [a0 + 23] = 0\n 65318: u8 [a0 + 22] = 0\n 65321: u8 [a0 + 21] = 0\n 65324: u8 [a0 + 20] = 0\n 65327: u8 [a0 + 19] = 0\n 65330: u8 [a0 + 18] = 0\n 65333: u8 [a0 + 17] = 0\n 65336: u8 [a0 + 16] = 0\n 65339: u8 [a0 + 15] = 0\n 65342: u8 [a0 + 14] = 0\n 65345: u8 [a0 + 13] = 0\n 65348: u8 [a0 + 12] = 0\n 65351: u8 [a0 + 11] = 0\n 65354: u8 [a0 + 10] = 0\n 65357: u8 [a0 + 9] = 0\n 65360: u8 [a0 + 8] = 0\n 65363: u8 [a0 + 7] = 0\n 65366: u8 [a0 + 6] = 0\n 65369: u8 [a0 + 5] = 0\n 65372: u8 [a0 + 4] = 0\n 65375: u8 [a0 + 3] = 0\n 65378: u8 [a0 + 2] = 0\n 65381: u8 [a0 + 1] = 0\n 65384: u8 [a0 + 0] = 0\n 65386: a1 = 0x40\n 65389: a0 = 0\n 65391: ra = 864, jump @0\n      : @963 [@dyn 432] (gas: 68)\n 65398: i32 a0 = a0 + 0\n 65400: i32 a2 = sp + 0xe0\n 65404: a1 = 0x40\n 65407: ecalli 8 // 'hash_keccak_256'\n 65409: a0 = u64 [sp + 0xf8]\n 65413: a1 = u64 [sp + 0xf0]\n 65417: a2 = u64 [sp + 0xe8]\n 65421: a3 = u64 [sp + 0xe0]\n 65425: a0 = reverse a0\n 65427: u64 [sp + 0x38] = a0\n 65430: a1 = reverse a1\n 65432: u64 [sp + 0x30] = a1\n 65435: a2 = reverse a2\n 65437: u64 [sp + 0x28] = a2\n 65440: s1 = reverse a3\n 65442: u64 [sp + 0xd8] = s1\n 65446: u64 [sp + 0xd0] = a2\n 65450: u64 [sp + 0xc8] = a1\n 65454: u64 [sp + 0xc0] = a0\n 65458: u64 [sp + 248] = 0\n 65462: u64 [sp + 240] = 0\n 65466: u64 [sp + 232] = 0\n 65470: u64 [sp + 224] = 0\n 65474: u32 [sp + 160] = 0x20\n 65479: i32 a1 = sp + 0xc0\n 65483: i32 a3 = sp + 0xe0\n 65487: i32 a4 = sp + 0xa0\n 65491: a2 = 0xffffffffffffffff\n 65494: a0 = 0\n 65496: ecalli 7 // 'get_storage'\n 65498: a0 = u64 [sp + 0xe0]\n 65502: a1 = u64 [sp + 0xe8]\n 65506: a2 = u64 [sp + 0xf0]\n 65510: a3 = u64 [sp + 0xf8]\n 65514: a0 = a0 & 0xffffffffffffff00\n 65518: a0 = a0 | 0x1\n 65521: u64 [sp + 0xd8] = s1\n 65525: a4 = u64 [sp + 0x28]\n 65528: u64 [sp + 0xd0] = a4\n 65532: a4 = u64 [sp + 0x30]\n 65535: u64 [sp + 0xc8] = a4\n 65539: a4 = u64 [sp + 0x38]\n 65542: u64 [sp + 0xc0] = a4\n 65546: u64 [sp + 0xf8] = a3\n 65550: u64 [sp + 0xf0] = a2\n 65554: u64 [sp + 0xe8] = a1\n 65558: u64 [sp + 0xe0] = a0\n 65562: i32 a1 = sp + 0xc0\n 65566: i32 a3 = sp + 0xe0\n 65570: a2 = 0xffffffffffffffff\n 65573: a4 = 0x20\n 65576: a0 = 0\n 65578: ecalli 12 // 'set_storage'\n 65580: a0 = u64 [sp + 0x50]\n 65583: u64 [sp + 0x78] = a0\n 65586: a0 = u64 [sp + 0x48]\n 65589: u64 [sp + 0x70] = a0\n 65592: a0 = u64 [sp + 0x40]\n 65595: u64 [sp + 0x68] = a0\n 65598: a0 = u64 [sp + 0x58]\n 65601: u64 [sp + 0x60] = a0\n 65604: u64 [sp + 152] = 0\n 65608: u64 [sp + 144] = 0\n 65612: u64 [sp + 136] = 0\n 65616: a0 = sp + 0x80\n 65620: a1 = sp + 0x60\n 65623: u64 [sp + 128] = 0x3\n 65628: ra = 866, jump @952\n      : @964 [@dyn 433] (gas: 3)\n 65634: a0 = 0x40\n 65637: a1 = 0x20\n 65640: ra = 868, jump @0\n      : @965 [@dyn 434] (gas: 100)\n 65647: a1 = u8 [a0 + 0x11]\n 65650: a2 = u8 [a0 + 0x10]\n 65653: a3 = u8 [a0 + 0x12]\n 65656: a4 = u8 [a0 + 0x13]\n 65659: a1 = a1 << 0x8\n 65662: a1 = a1 | a2\n 65665: a3 = a3 << 0x10\n 65668: a4 = a4 << 0x18\n 65671: a3 = a3 | a4\n 65674: a1 = a1 | a3\n 65677: a2 = u8 [a0 + 0x15]\n 65680: a3 = u8 [a0 + 0x14]\n 65683: a4 = u8 [a0 + 0x16]\n 65686: a5 = u8 [a0 + 0x17]\n 65689: a2 = a2 << 0x8\n 65692: a2 = a2 | a3\n 65695: a4 = a4 << 0x10\n 65698: a5 = a5 << 0x18\n 65701: a4 = a4 | a5\n 65704: a2 = a2 | a4\n 65707: a2 = a2 << 0x20\n 65710: t0 = a2 | a1\n 65713: a2 = u8 [a0 + 0x1]\n 65716: a3 = u8 [a0]\n 65718: a4 = u8 [a0 + 0x2]\n 65721: a5 = u8 [a0 + 0x3]\n 65724: a2 = a2 << 0x8\n 65727: a2 = a2 | a3\n 65730: a4 = a4 << 0x10\n 65733: a5 = a5 << 0x18\n 65736: a4 = a4 | a5\n 65739: a2 = a2 | a4\n 65742: a3 = u8 [a0 + 0x5]\n 65745: a4 = u8 [a0 + 0x4]\n 65748: a5 = u8 [a0 + 0x6]\n 65751: s1 = u8 [a0 + 0x7]\n 65754: a3 = a3 << 0x8\n 65757: a3 = a3 | a4\n 65760: a5 = a5 << 0x10\n 65763: s1 = s1 << 0x18\n 65766: a5 = a5 | s1\n 65769: a3 = a3 | a5\n 65772: a3 = a3 << 0x20\n 65775: a2 = a2 | a3\n 65778: a3 = u8 [a0 + 0x19]\n 65781: a4 = u8 [a0 + 0x18]\n 65784: a5 = u8 [a0 + 0x1a]\n 65787: s1 = u8 [a0 + 0x1b]\n 65790: a3 = a3 << 0x8\n 65793: a3 = a3 | a4\n 65796: a5 = a5 << 0x10\n 65799: s1 = s1 << 0x18\n 65802: a5 = a5 | s1\n 65805: a3 = a3 | a5\n 65808: a4 = u8 [a0 + 0x1d]\n 65811: a5 = u8 [a0 + 0x1c]\n 65814: s1 = u8 [a0 + 0x1e]\n 65817: a1 = u8 [a0 + 0x1f]\n 65820: a4 = a4 << 0x8\n 65823: a4 = a4 | a5\n 65826: s1 = s1 << 0x10\n 65829: a1 = a1 << 0x18\n 65832: a1 = a1 | s1\n 65835: a1 = a1 | a4\n 65838: a1 = a1 << 0x20\n 65841: a3 = a3 | a1\n 65844: a1 = u8 [a0 + 0x9]\n 65847: a4 = u8 [a0 + 0x8]\n 65850: a5 = u8 [a0 + 0xa]\n 65853: s1 = u8 [a0 + 0xb]\n 65856: a1 = a1 << 0x8\n 65859: a1 = a1 | a4\n 65862: a5 = a5 << 0x10\n 65865: s1 = s1 << 0x18\n 65868: a5 = a5 | s1\n 65871: a1 = a1 | a5\n 65874: a4 = u8 [a0 + 0xd]\n 65877: a5 = u8 [a0 + 0xc]\n 65880: s1 = u8 [a0 + 0xe]\n 65883: a0 = u8 [a0 + 0xf]\n 65886: a4 = a4 << 0x8\n 65889: a4 = a4 | a5\n 65892: s1 = s1 << 0x10\n 65895: a0 = a0 << 0x18\n 65898: a0 = a0 | s1\n 65901: a0 = a0 | a4\n 65904: a0 = a0 << 0x20\n 65907: a0 = a0 | a1\n 65910: a1 = reverse a0\n 65912: a0 = reverse a3\n 65914: a2 = reverse a2\n 65916: a3 = reverse t0\n 65918: a2 = a2 | a3\n 65921: a3 = a0 | a1\n 65924: a3 = a3 | a2\n 65927: a3 = a3 >> 0x20\n 65930: a1 = a1 | a2\n 65933: a1 = a1 << 0x20\n 65936: a1 = a1 | a3\n 65939: jump @968 if a1 != 0\n      : @966 (gas: 2)\n 65942: i32 a0 = a0 + 0\n 65944: ra = 870, jump @0\n      : @967 [@dyn 435] (gas: 26)\n 65951: a1 = u64 [0x20040]\n 65956: a2 = u64 [0x20048]\n 65961: a3 = u64 [0x20050]\n 65966: a4 = u64 [0x20058]\n 65971: u64 [sp + 0xf8] = a1\n 65975: u64 [sp + 0xf0] = a2\n 65979: u64 [sp + 0xe8] = a3\n 65983: u64 [sp + 0xe0] = a4\n 65987: a1 = u64 [sp + 0x10]\n 65990: u64 [sp + 0x110] = a1\n 65994: a1 = u64 [sp + 0x20]\n 65997: u64 [sp + 0x108] = a1\n 66001: u64 [sp + 256] = 0\n 66005: a1 = u64 [sp + 0x18]\n 66008: u64 [sp + 0x118] = a1\n 66012: i32 a2 = a0 + 0\n 66014: i32 a0 = sp + 0xe0\n 66018: a1 = 0x2\n 66021: a3 = 0\n 66023: ecalli 6 // 'deposit_event'\n 66025: sp = s0 + 0xfffffffffffffec0\n 66029: ra = u64 [sp + 0x138]\n 66033: s0 = u64 [sp + 0x130]\n 66037: s1 = u64 [sp + 0x128]\n 66041: sp = sp + 0x140\n 66045: ret\n      : @968 (gas: 1)\n 66047: trap\n      : @969 (gas: 42)\n 66048: sp = sp + 0xfffffffffffffdc0\n 66052: u64 [sp + 0x238] = ra\n 66056: u64 [sp + 0x230] = s0\n 66060: u64 [sp + 0x228] = s1\n 66064: s0 = sp + 0x240\n 66068: sp = sp & 0xffffffffffffffe0\n 66071: u64 [sp + 0x8] = a0\n 66074: u64 [sp + 176] = 0\n 66078: a5 = 0\n 66080: u64 [sp + 168] = 0\n 66084: a4 = 0\n 66086: s1 = 0\n 66088: a3 = 0\n 66090: t2 = 0\n 66092: a0 = 0\n 66094: t1 = u64 [a1]\n 66096: ra = u64 [a1 + 0x8]\n 66099: t0 = u64 [a1 + 0x10]\n 66102: a2 = u64 [a1 + 0x18]\n 66105: a1 = reverse t1\n 66107: u64 [sp + 0x48] = a1\n 66110: a1 = reverse ra\n 66112: u64 [sp + 0x40] = a1\n 66115: t0 = reverse t0\n 66117: a1 = reverse a2\n 66119: u64 [sp + 0x30] = a1\n 66122: i32 a2 = sp + 0x1e0\n 66126: u64 [sp + 0x60] = a2\n 66129: i32 a2 = sp + 0x200\n 66133: u64 [sp + 0x58] = a2\n 66136: i32 a2 = sp + 0x220\n 66140: u64 [sp + 0x50] = a2\n 66143: a2 = t0 >> 0x38\n 66146: u64 [sp + 0x28] = a2\n 66149: a2 = t0 >> 0x30\n 66152: u64 [sp + 0x20] = a2\n 66155: a2 = t0 >> 0x28\n 66158: u64 [sp + 0x18] = a2\n 66161: u64 [sp + 0x38] = t0\n 66164: a2 = t0 >> 0x20\n 66167: u64 [sp + 0x10] = a2\n 66170: jump @973\n      : @970 (gas: 20)\n 66173: a2 = u64 [sp + 0xb0]\n 66177: a2 = a2 + 0x1\n 66180: a0 = a2 <u 0x1\n 66183: a3 = u64 [sp + 0xc0]\n 66187: a3 = a3 + a0\n 66190: a0 = a2 | a3\n 66193: a0 = a0 <u 0x1\n 66196: a1 = u64 [sp + 0xa8]\n 66200: a0 = a0 + a1\n 66203: a1 = a0 <u a1\n 66206: a4 = u64 [sp + 0xb8]\n 66210: a4 = a4 + a1\n 66213: u64 [sp + 0xc0] = a3\n 66217: u64 [sp + 0xb8] = a4\n 66221: a1 = a3 | a4\n 66224: u64 [sp + 0xb0] = a2\n 66228: a2 = a2 | a0\n 66231: a1 = a1 | a2\n 66234: s1 = a0\n 66236: jump @988 if a1 == 0\n      : @971 (gas: 16)\n 66240: u64 [sp + 504] = 0\n 66244: u64 [sp + 496] = 0\n 66248: u64 [sp + 488] = 0\n 66252: u64 [sp + 480] = 0x4\n 66257: u64 [sp + 536] = 0\n 66261: u64 [sp + 528] = 0\n 66265: u64 [sp + 520] = 0\n 66269: u64 [sp + 512] = 0\n 66273: u32 [sp + 544] = 0x20\n 66278: i32 a1 = sp + 0x1e0\n 66282: i32 a3 = sp + 0x200\n 66286: i32 a4 = sp + 0x220\n 66290: a2 = 0xffffffffffffffff\n 66293: a0 = 0\n 66295: ecalli 7 // 'get_storage'\n 66297: fallthrough\n      : @972 (gas: 29)\n 66298: t1 = 0x20\n 66301: a0 = u64 [sp + 0x218]\n 66305: a1 = u64 [sp + 0x208]\n 66309: a2 = u64 [sp + 0x200]\n 66313: a3 = u64 [sp + 0x210]\n 66317: a4 = u64 [sp + 0xb8]\n 66321: a0 = a0 ^ a4\n 66324: a5 = u64 [sp + 0xc0]\n 66328: a1 = a1 ^ a5\n 66331: a0 = a0 | a1\n 66334: u64 [sp + 0xa8] = s1\n 66338: a1 = s1 ^ a3\n 66341: a3 = u64 [sp + 0xb0]\n 66345: a2 = a2 ^ a3\n 66348: a1 = a1 | a2\n 66351: t0 = a1 | a0\n 66354: s1 = u64 [sp + 0xa0]\n 66358: s1 = s1 + 0x1\n 66361: a1 = s1 <u 0x1\n 66364: a3 = u64 [sp + 0xd8]\n 66368: a3 = a3 + a1\n 66371: a1 = s1 | a3\n 66374: a1 = a1 <u 0x1\n 66377: a0 = u64 [sp + 0xc8]\n 66381: t2 = a0 + a1\n 66384: a2 = t2 <u a0\n 66387: a0 = u64 [sp + 0xd0]\n 66391: a0 = a0 + a2\n 66394: jump @986 if t0 == 0\n      : @973 (gas: 21)\n 66398: u64 [sp + 0xc8] = t2\n 66402: u64 [sp + 0xd0] = a0\n 66406: u64 [sp + 0xd8] = a3\n 66410: u64 [sp + 0xb8] = a4\n 66414: u64 [sp + 0xc0] = a5\n 66418: u64 [sp + 504] = 0\n 66422: u64 [sp + 496] = 0\n 66426: u64 [sp + 488] = 0\n 66430: u64 [sp + 480] = 0x3\n 66435: u64 [sp + 536] = 0\n 66439: u64 [sp + 528] = 0\n 66443: u64 [sp + 520] = 0\n 66447: u64 [sp + 512] = 0\n 66451: u32 [sp + 544] = 0x20\n 66456: a2 = 0xffffffffffffffff\n 66459: a0 = 0\n 66461: a1 = u64 [sp + 0x60]\n 66464: a3 = u64 [sp + 0x58]\n 66467: a4 = u64 [sp + 0x50]\n 66470: ecalli 7 // 'get_storage'\n 66472: fallthrough\n      : @974 (gas: 19)\n 66473: a3 = u64 [sp + 0xc8]\n 66477: a4 = u64 [sp + 0xd0]\n 66481: a2 = u64 [sp + 0xd8]\n 66485: a0 = u64 [sp + 0x218]\n 66489: t2 = u64 [sp + 0x200]\n 66493: t0 = u64 [sp + 0x210]\n 66497: a1 = u64 [sp + 0x208]\n 66501: t1 = a4 ^ a0\n 66504: a0 = a4 <u a0\n 66507: a5 = a3 <u t0\n 66510: a5 = a0 if t1 != 0\n 66513: ra = a2 ^ a1\n 66516: a0 = a2 <u a1\n 66519: a1 = s1 <u t2\n 66522: a1 = a0 if ra != 0\n 66525: a0 = a3 ^ t0\n 66528: a0 = a0 | t1\n 66531: a1 = a5 if a0 != 0\n 66534: jump @985 if a1 == 0\n      : @975 (gas: 3)\n 66538: a1 = 0x20\n 66541: a0 = 0\n 66543: ra = 872, jump @0\n      : @976 [@dyn 436] (gas: 67)\n 66550: a3 = u64 [sp + 0x40]\n 66553: u8 [a0 + 0x10] = a3\n 66556: a1 = u64 [sp + 0x28]\n 66559: u8 [a0 + 0xf] = a1\n 66562: a1 = u64 [sp + 0x20]\n 66565: u8 [a0 + 0xe] = a1\n 66568: a1 = u64 [sp + 0x18]\n 66571: u8 [a0 + 0xd] = a1\n 66574: a1 = u64 [sp + 0x10]\n 66577: u8 [a0 + 0xc] = a1\n 66580: a2 = u64 [sp + 0x38]\n 66583: a1 = a2 >> 0x18\n 66586: u8 [a0 + 0xb] = a1\n 66589: a1 = a2 >> 0x10\n 66592: u8 [a0 + 0xa] = a1\n 66595: a1 = a2 >> 0x8\n 66598: u8 [a0 + 0x9] = a1\n 66601: u8 [a0 + 0x8] = a2\n 66604: a2 = u64 [sp + 0x30]\n 66607: a1 = a2 >> 0x38\n 66610: u8 [a0 + 0x7] = a1\n 66613: a1 = a2 >> 0x30\n 66616: u8 [a0 + 0x6] = a1\n 66619: a1 = a2 >> 0x28\n 66622: u8 [a0 + 0x5] = a1\n 66625: a1 = a2 >> 0x20\n 66628: u8 [a0 + 0x4] = a1\n 66631: a1 = a2 >> 0x18\n 66634: u8 [a0 + 0x3] = a1\n 66637: a1 = a2 >> 0x10\n 66640: u8 [a0 + 0x2] = a1\n 66643: a1 = a2 >> 0x8\n 66646: u8 [a0 + 0x1] = a1\n 66649: u8 [a0] = a2\n 66651: a2 = u64 [sp + 0x48]\n 66654: u8 [a0 + 0x18] = a2\n 66657: a1 = a3 >> 0x38\n 66660: u8 [a0 + 0x17] = a1\n 66663: a1 = a3 >> 0x30\n 66666: u8 [a0 + 0x16] = a1\n 66669: a1 = a3 >> 0x28\n 66672: u8 [a0 + 0x15] = a1\n 66675: a1 = a3 >> 0x20\n 66678: u8 [a0 + 0x14] = a1\n 66681: a1 = a3 >> 0x18\n 66684: u8 [a0 + 0x13] = a1\n 66687: a1 = a3 >> 0x10\n 66690: u8 [a0 + 0x12] = a1\n 66693: a1 = a3 >> 0x8\n 66696: u8 [a0 + 0x11] = a1\n 66699: a1 = a2 >> 0x38\n 66702: u8 [a0 + 0x1f] = a1\n 66705: a1 = a2 >> 0x30\n 66708: u8 [a0 + 0x1e] = a1\n 66711: a1 = a2 >> 0x28\n 66714: u8 [a0 + 0x1d] = a1\n 66717: a1 = a2 >> 0x20\n 66720: u8 [a0 + 0x1c] = a1\n 66723: a1 = a2 >> 0x18\n 66726: u8 [a0 + 0x1b] = a1\n 66729: a1 = a2 >> 0x10\n 66732: u8 [a0 + 0x1a] = a1\n 66735: a1 = a2 >> 0x8\n 66738: u8 [a0 + 0x19] = a1\n 66741: a0 = 0x20\n 66744: a1 = 0x20\n 66747: ra = 874, jump @0\n      : @977 [@dyn 437] (gas: 35)\n 66754: u8 [a0 + 31] = 0x1\n 66758: u8 [a0 + 30] = 0\n 66761: u8 [a0 + 29] = 0\n 66764: u8 [a0 + 28] = 0\n 66767: u8 [a0 + 27] = 0\n 66770: u8 [a0 + 26] = 0\n 66773: u8 [a0 + 25] = 0\n 66776: u8 [a0 + 24] = 0\n 66779: u8 [a0 + 23] = 0\n 66782: u8 [a0 + 22] = 0\n 66785: u8 [a0 + 21] = 0\n 66788: u8 [a0 + 20] = 0\n 66791: u8 [a0 + 19] = 0\n 66794: u8 [a0 + 18] = 0\n 66797: u8 [a0 + 17] = 0\n 66800: u8 [a0 + 16] = 0\n 66803: u8 [a0 + 15] = 0\n 66806: u8 [a0 + 14] = 0\n 66809: u8 [a0 + 13] = 0\n 66812: u8 [a0 + 12] = 0\n 66815: u8 [a0 + 11] = 0\n 66818: u8 [a0 + 10] = 0\n 66821: u8 [a0 + 9] = 0\n 66824: u8 [a0 + 8] = 0\n 66827: u8 [a0 + 7] = 0\n 66830: u8 [a0 + 6] = 0\n 66833: u8 [a0 + 5] = 0\n 66836: u8 [a0 + 4] = 0\n 66839: u8 [a0 + 3] = 0\n 66842: u8 [a0 + 2] = 0\n 66845: u8 [a0 + 1] = 0\n 66848: u8 [a0 + 0] = 0\n 66850: a1 = 0x40\n 66853: a0 = 0\n 66855: ra = 876, jump @0\n      : @978 [@dyn 438] (gas: 28)\n 66862: i32 a0 = a0 + 0\n 66864: i32 a2 = sp + 0x200\n 66868: a1 = 0x40\n 66871: ecalli 8 // 'hash_keccak_256'\n 66873: a0 = u64 [sp + 0x200]\n 66877: u64 [sp + 0x98] = a0\n 66881: a0 = u64 [sp + 0x208]\n 66885: u64 [sp + 0x90] = a0\n 66889: a0 = u64 [sp + 0x210]\n 66893: u64 [sp + 0x88] = a0\n 66897: a0 = u64 [sp + 0x218]\n 66901: u64 [sp + 0x80] = a0\n 66905: a0 = u64 [sp + 0xd0]\n 66909: u64 [sp + 0x178] = a0\n 66913: a0 = u64 [sp + 0xc8]\n 66917: u64 [sp + 0x170] = a0\n 66921: a0 = u64 [sp + 0xd8]\n 66925: u64 [sp + 0x168] = a0\n 66929: u64 [sp + 0xa0] = s1\n 66933: u64 [sp + 0x160] = s1\n 66937: u64 [sp + 408] = 0\n 66941: u64 [sp + 400] = 0\n 66945: u64 [sp + 392] = 0\n 66949: a0 = sp + 0x1a0\n 66953: a1 = sp + 0x180\n 66957: a2 = sp + 0x160\n 66961: u64 [sp + 384] = 0x3\n 66966: ra = 878, jump @270\n      : @979 [@dyn 439] (gas: 209)\n 66973: a0 = u64 [sp + 0x1d8]\n 66977: u64 [sp + 0x78] = a0\n 66980: a0 = u64 [sp + 0x1d0]\n 66984: u64 [sp + 0x70] = a0\n 66987: s1 = u64 [sp + 0x1c8]\n 66991: a0 = u64 [sp + 0x1c0]\n 66995: u64 [sp + 0x68] = a0\n 66998: a0 = u64 [sp + 0x1b8]\n 67002: a1 = u64 [sp + 0x1b0]\n 67006: a2 = u64 [sp + 0x1a8]\n 67010: a3 = u64 [sp + 0x1a0]\n 67014: u64 [sp + 0x1f8] = a0\n 67018: u64 [sp + 0x1f0] = a1\n 67022: u64 [sp + 0x1e8] = a2\n 67026: u64 [sp + 0x1e0] = a3\n 67030: u64 [sp + 536] = 0\n 67034: u64 [sp + 528] = 0\n 67038: u64 [sp + 520] = 0\n 67042: u64 [sp + 512] = 0\n 67046: u32 [sp + 544] = 0x20\n 67051: i32 a1 = sp + 0x1e0\n 67055: i32 a3 = sp + 0x200\n 67059: i32 a4 = sp + 0x220\n 67063: a2 = 0xffffffffffffffff\n 67066: a0 = 0\n 67068: ecalli 7 // 'get_storage'\n 67070: a1 = u64 [sp + 0x200]\n 67074: a2 = u64 [sp + 0x208]\n 67078: t0 = u64 [sp + 0x68]\n 67081: a0 = t0 >> 0x3d\n 67084: a3 = s1 << 0x3\n 67087: a3 = a3 | a0\n 67090: s1 = s1 >> 0x3d\n 67093: a4 = u64 [sp + 0x70]\n 67096: a0 = a4 << 0x3\n 67099: s1 = s1 | a0\n 67102: a0 = a4 >> 0x3d\n 67105: a4 = u64 [sp + 0x78]\n 67108: a4 = a4 << 0x3\n 67111: a4 = a4 | a0\n 67114: a0 = t0 << 0x3\n 67117: a5 = a3 >u 0\n 67119: a0 = a0 <u 0x100\n 67123: t1 = a0 ^ 0x1\n 67126: t1 = a5 if a3 != 0\n 67129: a3 = a4 >u 0\n 67131: a5 = s1 >u 0\n 67133: a5 = a3 if a4 != 0\n 67136: a3 = u64 [sp + 0x210]\n 67140: s1 = s1 | a4\n 67143: a4 = u64 [sp + 0x218]\n 67147: t1 = a5 if s1 != 0\n 67150: u8 [sp + 351] = 0\n 67154: u8 [sp + 350] = 0\n 67158: u8 [sp + 349] = 0\n 67162: u8 [sp + 348] = 0\n 67166: u8 [sp + 347] = 0\n 67170: u8 [sp + 346] = 0\n 67174: u8 [sp + 345] = 0\n 67178: u8 [sp + 344] = 0\n 67182: u8 [sp + 343] = 0\n 67186: u8 [sp + 342] = 0\n 67190: u8 [sp + 341] = 0\n 67194: u8 [sp + 340] = 0\n 67198: u8 [sp + 339] = 0\n 67202: u8 [sp + 338] = 0\n 67206: u8 [sp + 337] = 0\n 67210: u8 [sp + 336] = 0\n 67214: u8 [sp + 335] = 0\n 67218: u8 [sp + 334] = 0\n 67222: u8 [sp + 333] = 0\n 67226: u8 [sp + 332] = 0\n 67230: u8 [sp + 331] = 0\n 67234: u8 [sp + 330] = 0\n 67238: u8 [sp + 329] = 0\n 67242: u8 [sp + 328] = 0\n 67246: u8 [sp + 327] = 0\n 67250: u8 [sp + 326] = 0\n 67254: u8 [sp + 325] = 0\n 67258: u8 [sp + 324] = 0\n 67262: u8 [sp + 323] = 0\n 67266: u8 [sp + 322] = 0\n 67270: u8 [sp + 321] = 0\n 67274: u8 [sp + 320] = 0\n 67278: u8 [sp + 0x138] = a4\n 67282: u8 [sp + 0x130] = a3\n 67286: u8 [sp + 0x128] = a2\n 67290: u8 [sp + 0x120] = a1\n 67294: a5 = a4 >> 0x38\n 67297: u8 [sp + 0x13f] = a5\n 67301: a5 = a4 >> 0x30\n 67304: u8 [sp + 0x13e] = a5\n 67308: a5 = a4 >> 0x28\n 67311: u8 [sp + 0x13d] = a5\n 67315: a5 = a4 >> 0x20\n 67318: u8 [sp + 0x13c] = a5\n 67322: a5 = a4 >> 0x18\n 67325: u8 [sp + 0x13b] = a5\n 67329: a5 = a4 >> 0x10\n 67332: u8 [sp + 0x13a] = a5\n 67336: a4 = a4 >> 0x8\n 67339: u8 [sp + 0x139] = a4\n 67343: a4 = a3 >> 0x38\n 67346: u8 [sp + 0x137] = a4\n 67350: a4 = a3 >> 0x30\n 67353: u8 [sp + 0x136] = a4\n 67357: a4 = a3 >> 0x28\n 67360: u8 [sp + 0x135] = a4\n 67364: a4 = a3 >> 0x20\n 67367: u8 [sp + 0x134] = a4\n 67371: a4 = a3 >> 0x18\n 67374: u8 [sp + 0x133] = a4\n 67378: a4 = a3 >> 0x10\n 67381: u8 [sp + 0x132] = a4\n 67385: a3 = a3 >> 0x8\n 67388: u8 [sp + 0x131] = a3\n 67392: a3 = a2 >> 0x38\n 67395: u8 [sp + 0x12f] = a3\n 67399: a3 = a2 >> 0x30\n 67402: u8 [sp + 0x12e] = a3\n 67406: a3 = a2 >> 0x28\n 67409: u8 [sp + 0x12d] = a3\n 67413: a3 = a2 >> 0x20\n 67416: u8 [sp + 0x12c] = a3\n 67420: a3 = a2 >> 0x18\n 67423: u8 [sp + 0x12b] = a3\n 67427: a3 = a2 >> 0x10\n 67430: u8 [sp + 0x12a] = a3\n 67434: a2 = a2 >> 0x8\n 67437: u8 [sp + 0x129] = a2\n 67441: a2 = a1 >> 0x38\n 67444: u8 [sp + 0x127] = a2\n 67448: a2 = a1 >> 0x30\n 67451: u8 [sp + 0x126] = a2\n 67455: a2 = a1 >> 0x28\n 67458: u8 [sp + 0x125] = a2\n 67462: a2 = a1 >> 0x20\n 67465: u8 [sp + 0x124] = a2\n 67469: a2 = a1 >> 0x18\n 67472: u8 [sp + 0x123] = a2\n 67476: a2 = a1 >> 0x10\n 67479: u8 [sp + 0x122] = a2\n 67483: a1 = a1 >> 0x8\n 67486: u8 [sp + 0x121] = a1\n 67490: a1 = t0 & 0x1f\n 67493: a2 = sp + 0x120\n 67497: a1 = a1 + a2\n 67500: a2 = u8 [a1 + 0x9]\n 67503: a3 = u8 [a1 + 0x8]\n 67506: a4 = u8 [a1 + 0xa]\n 67509: a5 = u8 [a1 + 0xb]\n 67512: a2 = a2 << 0x8\n 67515: a2 = a2 | a3\n 67518: a4 = a4 << 0x10\n 67521: a5 = a5 << 0x18\n 67524: a4 = a4 | a5\n 67527: a2 = a2 | a4\n 67530: a3 = u8 [a1 + 0xd]\n 67533: a4 = u8 [a1 + 0xc]\n 67536: a5 = u8 [a1 + 0xe]\n 67539: s1 = u8 [a1 + 0xf]\n 67542: a3 = a3 << 0x8\n 67545: a3 = a3 | a4\n 67548: a5 = a5 << 0x10\n 67551: s1 = s1 << 0x18\n 67554: a5 = a5 | s1\n 67557: a3 = a3 | a5\n 67560: a3 = a3 << 0x20\n 67563: a0 = a3 | a2\n 67566: a2 = u8 [a1 + 0x1]\n 67569: a3 = u8 [a1]\n 67571: a4 = u8 [a1 + 0x2]\n 67574: a5 = u8 [a1 + 0x3]\n 67577: a2 = a2 << 0x8\n 67580: a2 = a2 | a3\n 67583: a4 = a4 << 0x10\n 67586: a5 = a5 << 0x18\n 67589: a4 = a4 | a5\n 67592: a2 = a2 | a4\n 67595: a3 = u8 [a1 + 0x5]\n 67598: a4 = u8 [a1 + 0x4]\n 67601: a5 = u8 [a1 + 0x6]\n 67604: s1 = u8 [a1 + 0x7]\n 67607: a3 = a3 << 0x8\n 67610: a3 = a3 | a4\n 67613: a5 = a5 << 0x10\n 67616: s1 = s1 << 0x18\n 67619: a5 = a5 | s1\n 67622: a3 = a3 | a5\n 67625: a3 = a3 << 0x20\n 67628: a5 = a3 | a2\n 67631: a2 = u8 [a1 + 0x11]\n 67634: a3 = u8 [a1 + 0x10]\n 67637: a4 = u8 [a1 + 0x12]\n 67640: a1 = u8 [a1 + 0x13]\n 67643: a2 = a2 << 0x8\n 67646: a2 = a2 | a3\n 67649: a4 = a4 << 0x10\n 67652: a1 = a1 << 0x18\n 67655: a1 = a1 | a4\n 67658: s1 = a1 | a2\n 67661: s1 = 0 if t1 != 0\n 67663: a5 = 0 if t1 != 0\n 67665: u64 [sp + 0x78] = a5\n 67668: a0 = 0 if t1 != 0\n 67670: u64 [sp + 0x70] = a0\n 67673: a1 = 0x20\n 67676: a0 = 0\n 67678: ra = 880, jump @0\n      : @980 [@dyn 440] (gas: 61)\n 67685: a1 = u64 [sp + 0x70]\n 67688: a1 = reverse a1\n 67690: a2 = u64 [sp + 0x78]\n 67693: a2 = reverse a2\n 67695: a3 = reverse s1\n 67697: u8 [a0 + 7] = 0\n 67700: u8 [a0 + 6] = 0\n 67703: u8 [a0 + 5] = 0\n 67706: u8 [a0 + 4] = 0\n 67709: u8 [a0 + 3] = 0\n 67712: u8 [a0 + 2] = 0\n 67715: u8 [a0 + 1] = 0\n 67718: u8 [a0 + 0] = 0\n 67720: u8 [a0 + 0x8] = a3\n 67723: a4 = a3 >> 0x38\n 67726: u8 [a0 + 0xf] = a4\n 67729: a4 = a3 >> 0x30\n 67732: u8 [a0 + 0xe] = a4\n 67735: a4 = a3 >> 0x28\n 67738: u8 [a0 + 0xd] = a4\n 67741: a4 = a3 >> 0x20\n 67744: u8 [a0 + 0xc] = a4\n 67747: a4 = a3 >> 0x18\n 67750: u8 [a0 + 0xb] = a4\n 67753: a4 = a3 >> 0x10\n 67756: u8 [a0 + 0xa] = a4\n 67759: a3 = a3 >> 0x8\n 67762: u8 [a0 + 0x9] = a3\n 67765: u8 [a0 + 0x18] = a2\n 67768: u8 [a0 + 0x10] = a1\n 67771: a3 = a2 >> 0x38\n 67774: u8 [a0 + 0x1f] = a3\n 67777: a3 = a2 >> 0x30\n 67780: u8 [a0 + 0x1e] = a3\n 67783: a3 = a2 >> 0x28\n 67786: u8 [a0 + 0x1d] = a3\n 67789: a3 = a2 >> 0x20\n 67792: u8 [a0 + 0x1c] = a3\n 67795: a3 = a2 >> 0x18\n 67798: u8 [a0 + 0x1b] = a3\n 67801: a3 = a2 >> 0x10\n 67804: u8 [a0 + 0x1a] = a3\n 67807: a2 = a2 >> 0x8\n 67810: u8 [a0 + 0x19] = a2\n 67813: a2 = a1 >> 0x38\n 67816: u8 [a0 + 0x17] = a2\n 67819: a2 = a1 >> 0x30\n 67822: u8 [a0 + 0x16] = a2\n 67825: a2 = a1 >> 0x28\n 67828: u8 [a0 + 0x15] = a2\n 67831: a2 = a1 >> 0x20\n 67834: u8 [a0 + 0x14] = a2\n 67837: a2 = a1 >> 0x18\n 67840: u8 [a0 + 0x13] = a2\n 67843: a2 = a1 >> 0x10\n 67846: u8 [a0 + 0x12] = a2\n 67849: a1 = a1 >> 0x8\n 67852: u8 [a0 + 0x11] = a1\n 67855: a0 = 0x20\n 67858: a1 = 0x20\n 67861: ra = 882, jump @0\n      : @981 [@dyn 441] (gas: 67)\n 67868: a2 = u64 [sp + 0x80]\n 67872: a1 = a2 >> 0x38\n 67875: u8 [a0 + 0x1f] = a1\n 67878: a1 = a2 >> 0x30\n 67881: u8 [a0 + 0x1e] = a1\n 67884: a1 = a2 >> 0x28\n 67887: u8 [a0 + 0x1d] = a1\n 67890: a1 = a2 >> 0x20\n 67893: u8 [a0 + 0x1c] = a1\n 67896: a1 = a2 >> 0x18\n 67899: u8 [a0 + 0x1b] = a1\n 67902: a1 = a2 >> 0x10\n 67905: u8 [a0 + 0x1a] = a1\n 67908: a1 = a2 >> 0x8\n 67911: u8 [a0 + 0x19] = a1\n 67914: u8 [a0 + 0x18] = a2\n 67917: a2 = u64 [sp + 0x88]\n 67921: a1 = a2 >> 0x38\n 67924: u8 [a0 + 0x17] = a1\n 67927: a1 = a2 >> 0x30\n 67930: u8 [a0 + 0x16] = a1\n 67933: a1 = a2 >> 0x28\n 67936: u8 [a0 + 0x15] = a1\n 67939: a1 = a2 >> 0x20\n 67942: u8 [a0 + 0x14] = a1\n 67945: a1 = a2 >> 0x18\n 67948: u8 [a0 + 0x13] = a1\n 67951: a1 = a2 >> 0x10\n 67954: u8 [a0 + 0x12] = a1\n 67957: a1 = a2 >> 0x8\n 67960: u8 [a0 + 0x11] = a1\n 67963: u8 [a0 + 0x10] = a2\n 67966: a2 = u64 [sp + 0x90]\n 67970: a1 = a2 >> 0x38\n 67973: u8 [a0 + 0xf] = a1\n 67976: a1 = a2 >> 0x30\n 67979: u8 [a0 + 0xe] = a1\n 67982: a1 = a2 >> 0x28\n 67985: u8 [a0 + 0xd] = a1\n 67988: a1 = a2 >> 0x20\n 67991: u8 [a0 + 0xc] = a1\n 67994: a1 = a2 >> 0x18\n 67997: u8 [a0 + 0xb] = a1\n 68000: a1 = a2 >> 0x10\n 68003: u8 [a0 + 0xa] = a1\n 68006: a1 = a2 >> 0x8\n 68009: u8 [a0 + 0x9] = a1\n 68012: u8 [a0 + 0x8] = a2\n 68015: a2 = u64 [sp + 0x98]\n 68019: a1 = a2 >> 0x38\n 68022: u8 [a0 + 0x7] = a1\n 68025: a1 = a2 >> 0x30\n 68028: u8 [a0 + 0x6] = a1\n 68031: a1 = a2 >> 0x28\n 68034: u8 [a0 + 0x5] = a1\n 68037: a1 = a2 >> 0x20\n 68040: u8 [a0 + 0x4] = a1\n 68043: a1 = a2 >> 0x18\n 68046: u8 [a0 + 0x3] = a1\n 68049: a1 = a2 >> 0x10\n 68052: u8 [a0 + 0x2] = a1\n 68055: a1 = a2 >> 0x8\n 68058: u8 [a0 + 0x1] = a1\n 68061: u8 [a0] = a2\n 68063: a1 = 0x40\n 68066: a0 = 0\n 68068: ra = 884, jump @0\n      : @982 [@dyn 442] (gas: 28)\n 68075: i32 a0 = a0 + 0\n 68077: i32 a2 = sp + 0x200\n 68081: a1 = 0x40\n 68084: ecalli 8 // 'hash_keccak_256'\n 68086: a0 = u64 [sp + 0x218]\n 68090: a1 = u64 [sp + 0x210]\n 68094: a2 = u64 [sp + 0x208]\n 68098: a3 = u64 [sp + 0x200]\n 68102: a0 = reverse a0\n 68104: a1 = reverse a1\n 68106: a2 = reverse a2\n 68108: a3 = reverse a3\n 68110: u64 [sp + 0x1f8] = a3\n 68114: u64 [sp + 0x1f0] = a2\n 68118: u64 [sp + 0x1e8] = a1\n 68122: u64 [sp + 0x1e0] = a0\n 68126: u64 [sp + 536] = 0\n 68130: u64 [sp + 528] = 0\n 68134: u64 [sp + 520] = 0\n 68138: u64 [sp + 512] = 0\n 68142: u32 [sp + 544] = 0x20\n 68147: i32 a1 = sp + 0x1e0\n 68151: i32 a3 = sp + 0x200\n 68155: i32 a4 = sp + 0x220\n 68159: a2 = 0xffffffffffffffff\n 68162: a0 = 0\n 68164: ecalli 7 // 'get_storage'\n 68166: fallthrough\n      : @983 (gas: 2)\n 68167: a0 = u8 [sp + 0x200]\n 68171: jump @970 if a0 != 0\n      : @984 (gas: 2)\n 68175: s1 = u64 [sp + 0xa8]\n 68179: jump @971\n      : @985 (gas: 2)\n 68182: a0 = 0\n 68184: jump @987\n      : @986 (gas: 3)\n 68186: a0 = 0\n 68188: a1 = 0x1\n 68191: fallthrough\n      : @987 (gas: 11)\n 68192: a2 = u64 [sp + 0x8]\n 68195: u64 [a2] = a1\n 68197: u64 [a2 + 8] = 0\n 68200: u64 [a2 + 16] = 0\n 68203: u64 [a2 + 24] = 0\n 68206: sp = s0 + 0xfffffffffffffdc0\n 68210: ra = u64 [sp + 0x238]\n 68214: s0 = u64 [sp + 0x230]\n 68218: s1 = u64 [sp + 0x228]\n 68222: sp = sp + 0x240\n 68226: ret\n      : @988 (gas: 8)\n 68228: u64 [sp + 272] = 0\n 68232: u64 [sp + 264] = 0\n 68236: u64 [sp + 256] = 0\n 68240: a0 = 0x4e487b7100000000\n 68250: a1 = sp + 0x100\n 68254: u64 [sp + 0x118] = a0\n 68258: a0 = 0\n 68260: ra = 886, jump @23\n      : @989 [@dyn 443] (gas: 7)\n 68267: u64 [sp + 248] = 0\n 68271: u64 [sp + 240] = 0\n 68275: u64 [sp + 224] = 0x11\n 68280: a0 = 0x4\n 68283: a1 = sp + 0xe0\n 68287: u64 [sp + 232] = 0\n 68291: ra = 888, jump @23\n      : @990 [@dyn 444] (gas: 3)\n 68298: a1 = 0x24\n 68301: a0 = 0\n 68303: ra = 890, jump @0\n      : @991 [@dyn 445] (gas: 6)\n 68310: i32 a1 = a0 + 0\n 68312: a0 = 0x1\n 68315: a2 = 0x24\n 68318: ra = 0x37c\n 68322: ecalli 10 // 'seal_return'\n 68324: fallthrough\n      : @992 [@dyn 446] (gas: 50)\n 68325: sp = sp + 0xfffffffffffffda0\n 68329: u64 [sp + 0x258] = ra\n 68333: u64 [sp + 0x250] = s0\n 68337: u64 [sp + 0x248] = s1\n 68341: s0 = sp + 0x260\n 68345: sp = sp & 0xffffffffffffffe0\n 68348: u64 [sp + 0x8] = a0\n 68351: u64 [sp + 160] = 0\n 68355: u64 [sp + 152] = 0\n 68359: u64 [sp + 136] = 0\n 68363: u64 [sp + 144] = 0\n 68367: u64 [sp + 248] = 0\n 68371: s1 = 0\n 68373: u64 [sp + 240] = 0\n 68377: u64 [sp + 232] = 0\n 68381: a0 = u64 [a1]\n 68383: a2 = u64 [a1 + 0x8]\n 68386: a3 = u64 [a1 + 0x10]\n 68389: a1 = u64 [a1 + 0x18]\n 68392: a0 = reverse a0\n 68394: u64 [sp + 0x68] = a0\n 68397: a0 = reverse a2\n 68399: u64 [sp + 0x60] = a0\n 68402: a0 = reverse a3\n 68404: a1 = reverse a1\n 68406: i32 a4 = sp + 0x200\n 68410: u64 [sp + 0x80] = a4\n 68414: i32 a4 = sp + 0x220\n 68418: u64 [sp + 0x78] = a4\n 68421: i32 a4 = sp + 0x240\n 68425: u64 [sp + 0x70] = a4\n 68428: a4 = a0 >> 0x38\n 68431: u64 [sp + 0x48] = a4\n 68434: a4 = a0 >> 0x30\n 68437: u64 [sp + 0x40] = a4\n 68440: a4 = a0 >> 0x28\n 68443: u64 [sp + 0x38] = a4\n 68446: a4 = a0 >> 0x20\n 68449: u64 [sp + 0x30] = a4\n 68452: a4 = a0 >> 0x18\n 68455: u64 [sp + 0x28] = a4\n 68458: a4 = a0 >> 0x10\n 68461: u64 [sp + 0x20] = a4\n 68464: u64 [sp + 0x58] = a0\n 68467: a0 = a0 >> 0x8\n 68470: u64 [sp + 0x18] = a0\n 68473: u64 [sp + 0x50] = a1\n 68476: a1 = a1 >> 0x38\n 68479: u64 [sp + 0x10] = a1\n 68482: jump @994\n      : @993 (gas: 16)\n 68484: a1 = u64 [sp + 0xf8]\n 68488: a1 = a1 + 0x1\n 68491: a0 = a1 <u 0x1\n 68494: s1 = u64 [sp + 0xe0]\n 68498: s1 = s1 + a0\n 68501: u64 [sp + 0xf8] = a1\n 68505: a0 = a1 | s1\n 68508: a0 = a0 <u 0x1\n 68511: a1 = u64 [sp + 0xf0]\n 68515: a0 = a0 + a1\n 68518: a1 = a0 <u a1\n 68521: a2 = u64 [sp + 0xe8]\n 68525: a2 = a2 + a1\n 68528: u64 [sp + 0xe8] = a2\n 68532: u64 [sp + 0xf0] = a0\n 68536: fallthrough\n      : @994 (gas: 16)\n 68537: u64 [sp + 536] = 0\n 68541: u64 [sp + 528] = 0\n 68545: u64 [sp + 520] = 0\n 68549: u64 [sp + 512] = 0x3\n 68554: u64 [sp + 568] = 0\n 68558: u64 [sp + 560] = 0\n 68562: u64 [sp + 552] = 0\n 68566: u64 [sp + 544] = 0\n 68570: u32 [sp + 576] = 0x20\n 68575: a2 = 0xffffffffffffffff\n 68578: a0 = 0\n 68580: a1 = u64 [sp + 0x80]\n 68584: a3 = u64 [sp + 0x78]\n 68587: a4 = u64 [sp + 0x70]\n 68590: ecalli 7 // 'get_storage'\n 68592: fallthrough\n      : @995 (gas: 19)\n 68593: a0 = u64 [sp + 0x238]\n 68597: t0 = u64 [sp + 0x220]\n 68601: t1 = u64 [sp + 0x230]\n 68605: a1 = u64 [sp + 0x228]\n 68609: a2 = u64 [sp + 0xe8]\n 68613: a4 = a2 ^ a0\n 68616: a0 = a2 <u a0\n 68619: a3 = u64 [sp + 0xf0]\n 68623: a5 = a3 <u t1\n 68626: a5 = a0 if a4 != 0\n 68629: t2 = s1 ^ a1\n 68632: a0 = s1 <u a1\n 68635: a1 = u64 [sp + 0xf8]\n 68639: a1 = a1 <u t0\n 68642: a1 = a0 if t2 != 0\n 68645: a0 = a3 ^ t1\n 68648: a0 = a0 | a4\n 68651: a1 = a5 if a0 != 0\n 68654: jump @1010 if a1 == 0\n      : @996 (gas: 5)\n 68658: a1 = 0x20\n 68661: a0 = 0\n 68663: u64 [sp + 0xe0] = s1\n 68667: s1 = a2\n 68669: ra = 894, jump @0\n      : @997 [@dyn 447] (gas: 67)\n 68676: a4 = u64 [sp + 0x50]\n 68679: a1 = a4 >> 0x30\n 68682: u8 [a0 + 0x6] = a1\n 68685: a1 = a4 >> 0x28\n 68688: u8 [a0 + 0x5] = a1\n 68691: a1 = a4 >> 0x20\n 68694: u8 [a0 + 0x4] = a1\n 68697: a1 = a4 >> 0x18\n 68700: u8 [a0 + 0x3] = a1\n 68703: a1 = a4 >> 0x10\n 68706: u8 [a0 + 0x2] = a1\n 68709: a1 = a4 >> 0x8\n 68712: u8 [a0 + 0x1] = a1\n 68715: a3 = u64 [sp + 0x60]\n 68718: a1 = a3 >> 0x38\n 68721: u8 [a0 + 0x17] = a1\n 68724: a1 = a3 >> 0x30\n 68727: u8 [a0 + 0x16] = a1\n 68730: a1 = a3 >> 0x28\n 68733: u8 [a0 + 0x15] = a1\n 68736: a1 = a3 >> 0x20\n 68739: u8 [a0 + 0x14] = a1\n 68742: a1 = a3 >> 0x18\n 68745: u8 [a0 + 0x13] = a1\n 68748: a1 = a3 >> 0x10\n 68751: u8 [a0 + 0x12] = a1\n 68754: a1 = a3 >> 0x8\n 68757: u8 [a0 + 0x11] = a1\n 68760: a2 = u64 [sp + 0x68]\n 68763: a1 = a2 >> 0x38\n 68766: u8 [a0 + 0x1f] = a1\n 68769: a1 = a2 >> 0x30\n 68772: u8 [a0 + 0x1e] = a1\n 68775: a1 = a2 >> 0x28\n 68778: u8 [a0 + 0x1d] = a1\n 68781: a1 = a2 >> 0x20\n 68784: u8 [a0 + 0x1c] = a1\n 68787: a1 = a2 >> 0x18\n 68790: u8 [a0 + 0x1b] = a1\n 68793: a1 = a2 >> 0x10\n 68796: u8 [a0 + 0x1a] = a1\n 68799: a1 = a2 >> 0x8\n 68802: u8 [a0 + 0x19] = a1\n 68805: u8 [a0 + 0x10] = a3\n 68808: a1 = u64 [sp + 0x48]\n 68811: u8 [a0 + 0xf] = a1\n 68814: a1 = u64 [sp + 0x40]\n 68817: u8 [a0 + 0xe] = a1\n 68820: a1 = u64 [sp + 0x38]\n 68823: u8 [a0 + 0xd] = a1\n 68826: a1 = u64 [sp + 0x30]\n 68829: u8 [a0 + 0xc] = a1\n 68832: a1 = u64 [sp + 0x28]\n 68835: u8 [a0 + 0xb] = a1\n 68838: a1 = u64 [sp + 0x20]\n 68841: u8 [a0 + 0xa] = a1\n 68844: a1 = u64 [sp + 0x18]\n 68847: u8 [a0 + 0x9] = a1\n 68850: a1 = u64 [sp + 0x58]\n 68853: u8 [a0 + 0x8] = a1\n 68856: a1 = u64 [sp + 0x10]\n 68859: u8 [a0 + 0x7] = a1\n 68862: u8 [a0] = a4\n 68864: u8 [a0 + 0x18] = a2\n 68867: a0 = 0x20\n 68870: a1 = 0x20\n 68873: ra = 896, jump @0\n      : @998 [@dyn 448] (gas: 35)\n 68880: u8 [a0 + 31] = 0x1\n 68884: u8 [a0 + 30] = 0\n 68887: u8 [a0 + 29] = 0\n 68890: u8 [a0 + 28] = 0\n 68893: u8 [a0 + 27] = 0\n 68896: u8 [a0 + 26] = 0\n 68899: u8 [a0 + 25] = 0\n 68902: u8 [a0 + 24] = 0\n 68905: u8 [a0 + 23] = 0\n 68908: u8 [a0 + 22] = 0\n 68911: u8 [a0 + 21] = 0\n 68914: u8 [a0 + 20] = 0\n 68917: u8 [a0 + 19] = 0\n 68920: u8 [a0 + 18] = 0\n 68923: u8 [a0 + 17] = 0\n 68926: u8 [a0 + 16] = 0\n 68929: u8 [a0 + 15] = 0\n 68932: u8 [a0 + 14] = 0\n 68935: u8 [a0 + 13] = 0\n 68938: u8 [a0 + 12] = 0\n 68941: u8 [a0 + 11] = 0\n 68944: u8 [a0 + 10] = 0\n 68947: u8 [a0 + 9] = 0\n 68950: u8 [a0 + 8] = 0\n 68953: u8 [a0 + 7] = 0\n 68956: u8 [a0 + 6] = 0\n 68959: u8 [a0 + 5] = 0\n 68962: u8 [a0 + 4] = 0\n 68965: u8 [a0 + 3] = 0\n 68968: u8 [a0 + 2] = 0\n 68971: u8 [a0 + 1] = 0\n 68974: u8 [a0 + 0] = 0\n 68976: a1 = 0x40\n 68979: a0 = 0\n 68981: ra = 898, jump @0\n      : @999 [@dyn 449] (gas: 27)\n 68988: i32 a0 = a0 + 0\n 68990: i32 a2 = sp + 0x220\n 68994: a1 = 0x40\n 68997: ecalli 8 // 'hash_keccak_256'\n 68999: a0 = u64 [sp + 0x220]\n 69003: u64 [sp + 0xd8] = a0\n 69007: a0 = u64 [sp + 0x228]\n 69011: u64 [sp + 0xd0] = a0\n 69015: a0 = u64 [sp + 0x230]\n 69019: u64 [sp + 0xc8] = a0\n 69023: a0 = u64 [sp + 0x238]\n 69027: u64 [sp + 0xc0] = a0\n 69031: u64 [sp + 0x198] = s1\n 69035: a0 = u64 [sp + 0xf0]\n 69039: u64 [sp + 0x190] = a0\n 69043: a0 = u64 [sp + 0xe0]\n 69047: u64 [sp + 0x188] = a0\n 69051: a0 = u64 [sp + 0xf8]\n 69055: u64 [sp + 0x180] = a0\n 69059: u64 [sp + 440] = 0\n 69063: u64 [sp + 432] = 0\n 69067: u64 [sp + 424] = 0\n 69071: a0 = sp + 0x1c0\n 69075: a1 = sp + 0x1a0\n 69079: a2 = sp + 0x180\n 69083: u64 [sp + 416] = 0x3\n 69088: ra = 900, jump @270\n      : @1000 [@dyn 450] (gas: 209)\n 69095: a0 = u64 [sp + 0x1f8]\n 69099: u64 [sp + 0xb8] = a0\n 69103: a0 = u64 [sp + 0x1f0]\n 69107: u64 [sp + 0xb0] = a0\n 69111: s1 = u64 [sp + 0x1e8]\n 69115: a0 = u64 [sp + 0x1e0]\n 69119: u64 [sp + 0xa8] = a0\n 69123: a0 = u64 [sp + 0x1d8]\n 69127: a1 = u64 [sp + 0x1d0]\n 69131: a2 = u64 [sp + 0x1c8]\n 69135: a3 = u64 [sp + 0x1c0]\n 69139: u64 [sp + 0x218] = a0\n 69143: u64 [sp + 0x210] = a1\n 69147: u64 [sp + 0x208] = a2\n 69151: u64 [sp + 0x200] = a3\n 69155: u64 [sp + 568] = 0\n 69159: u64 [sp + 560] = 0\n 69163: u64 [sp + 552] = 0\n 69167: u64 [sp + 544] = 0\n 69171: u32 [sp + 576] = 0x20\n 69176: i32 a1 = sp + 0x200\n 69180: i32 a3 = sp + 0x220\n 69184: i32 a4 = sp + 0x240\n 69188: a2 = 0xffffffffffffffff\n 69191: a0 = 0\n 69193: ecalli 7 // 'get_storage'\n 69195: a1 = u64 [sp + 0x220]\n 69199: a2 = u64 [sp + 0x228]\n 69203: t0 = u64 [sp + 0xa8]\n 69207: a0 = t0 >> 0x3d\n 69210: a3 = s1 << 0x3\n 69213: a3 = a3 | a0\n 69216: s1 = s1 >> 0x3d\n 69219: a4 = u64 [sp + 0xb0]\n 69223: a0 = a4 << 0x3\n 69226: s1 = s1 | a0\n 69229: a0 = a4 >> 0x3d\n 69232: a4 = u64 [sp + 0xb8]\n 69236: a4 = a4 << 0x3\n 69239: a4 = a4 | a0\n 69242: a0 = t0 << 0x3\n 69245: a5 = a3 >u 0\n 69247: a0 = a0 <u 0x100\n 69251: t1 = a0 ^ 0x1\n 69254: t1 = a5 if a3 != 0\n 69257: a3 = a4 >u 0\n 69259: a5 = s1 >u 0\n 69261: a5 = a3 if a4 != 0\n 69264: a3 = u64 [sp + 0x230]\n 69268: s1 = s1 | a4\n 69271: a4 = u64 [sp + 0x238]\n 69275: t1 = a5 if s1 != 0\n 69278: u8 [sp + 383] = 0\n 69282: u8 [sp + 382] = 0\n 69286: u8 [sp + 381] = 0\n 69290: u8 [sp + 380] = 0\n 69294: u8 [sp + 379] = 0\n 69298: u8 [sp + 378] = 0\n 69302: u8 [sp + 377] = 0\n 69306: u8 [sp + 376] = 0\n 69310: u8 [sp + 375] = 0\n 69314: u8 [sp + 374] = 0\n 69318: u8 [sp + 373] = 0\n 69322: u8 [sp + 372] = 0\n 69326: u8 [sp + 371] = 0\n 69330: u8 [sp + 370] = 0\n 69334: u8 [sp + 369] = 0\n 69338: u8 [sp + 368] = 0\n 69342: u8 [sp + 367] = 0\n 69346: u8 [sp + 366] = 0\n 69350: u8 [sp + 365] = 0\n 69354: u8 [sp + 364] = 0\n 69358: u8 [sp + 363] = 0\n 69362: u8 [sp + 362] = 0\n 69366: u8 [sp + 361] = 0\n 69370: u8 [sp + 360] = 0\n 69374: u8 [sp + 359] = 0\n 69378: u8 [sp + 358] = 0\n 69382: u8 [sp + 357] = 0\n 69386: u8 [sp + 356] = 0\n 69390: u8 [sp + 355] = 0\n 69394: u8 [sp + 354] = 0\n 69398: u8 [sp + 353] = 0\n 69402: u8 [sp + 352] = 0\n 69406: u8 [sp + 0x158] = a4\n 69410: u8 [sp + 0x150] = a3\n 69414: u8 [sp + 0x148] = a2\n 69418: u8 [sp + 0x140] = a1\n 69422: a5 = a4 >> 0x38\n 69425: u8 [sp + 0x15f] = a5\n 69429: a5 = a4 >> 0x30\n 69432: u8 [sp + 0x15e] = a5\n 69436: a5 = a4 >> 0x28\n 69439: u8 [sp + 0x15d] = a5\n 69443: a5 = a4 >> 0x20\n 69446: u8 [sp + 0x15c] = a5\n 69450: a5 = a4 >> 0x18\n 69453: u8 [sp + 0x15b] = a5\n 69457: a5 = a4 >> 0x10\n 69460: u8 [sp + 0x15a] = a5\n 69464: a4 = a4 >> 0x8\n 69467: u8 [sp + 0x159] = a4\n 69471: a4 = a3 >> 0x38\n 69474: u8 [sp + 0x157] = a4\n 69478: a4 = a3 >> 0x30\n 69481: u8 [sp + 0x156] = a4\n 69485: a4 = a3 >> 0x28\n 69488: u8 [sp + 0x155] = a4\n 69492: a4 = a3 >> 0x20\n 69495: u8 [sp + 0x154] = a4\n 69499: a4 = a3 >> 0x18\n 69502: u8 [sp + 0x153] = a4\n 69506: a4 = a3 >> 0x10\n 69509: u8 [sp + 0x152] = a4\n 69513: a3 = a3 >> 0x8\n 69516: u8 [sp + 0x151] = a3\n 69520: a3 = a2 >> 0x38\n 69523: u8 [sp + 0x14f] = a3\n 69527: a3 = a2 >> 0x30\n 69530: u8 [sp + 0x14e] = a3\n 69534: a3 = a2 >> 0x28\n 69537: u8 [sp + 0x14d] = a3\n 69541: a3 = a2 >> 0x20\n 69544: u8 [sp + 0x14c] = a3\n 69548: a3 = a2 >> 0x18\n 69551: u8 [sp + 0x14b] = a3\n 69555: a3 = a2 >> 0x10\n 69558: u8 [sp + 0x14a] = a3\n 69562: a2 = a2 >> 0x8\n 69565: u8 [sp + 0x149] = a2\n 69569: a2 = a1 >> 0x38\n 69572: u8 [sp + 0x147] = a2\n 69576: a2 = a1 >> 0x30\n 69579: u8 [sp + 0x146] = a2\n 69583: a2 = a1 >> 0x28\n 69586: u8 [sp + 0x145] = a2\n 69590: a2 = a1 >> 0x20\n 69593: u8 [sp + 0x144] = a2\n 69597: a2 = a1 >> 0x18\n 69600: u8 [sp + 0x143] = a2\n 69604: a2 = a1 >> 0x10\n 69607: u8 [sp + 0x142] = a2\n 69611: a1 = a1 >> 0x8\n 69614: u8 [sp + 0x141] = a1\n 69618: a1 = t0 & 0x1f\n 69621: a2 = sp + 0x140\n 69625: a1 = a1 + a2\n 69628: a2 = u8 [a1 + 0x9]\n 69631: a3 = u8 [a1 + 0x8]\n 69634: a4 = u8 [a1 + 0xa]\n 69637: a5 = u8 [a1 + 0xb]\n 69640: a2 = a2 << 0x8\n 69643: a2 = a2 | a3\n 69646: a4 = a4 << 0x10\n 69649: a5 = a5 << 0x18\n 69652: a4 = a4 | a5\n 69655: a2 = a2 | a4\n 69658: a3 = u8 [a1 + 0xd]\n 69661: a4 = u8 [a1 + 0xc]\n 69664: a5 = u8 [a1 + 0xe]\n 69667: s1 = u8 [a1 + 0xf]\n 69670: a3 = a3 << 0x8\n 69673: a3 = a3 | a4\n 69676: a5 = a5 << 0x10\n 69679: s1 = s1 << 0x18\n 69682: a5 = a5 | s1\n 69685: a3 = a3 | a5\n 69688: a3 = a3 << 0x20\n 69691: a0 = a3 | a2\n 69694: a2 = u8 [a1 + 0x1]\n 69697: a3 = u8 [a1]\n 69699: a4 = u8 [a1 + 0x2]\n 69702: a5 = u8 [a1 + 0x3]\n 69705: a2 = a2 << 0x8\n 69708: a2 = a2 | a3\n 69711: a4 = a4 << 0x10\n 69714: a5 = a5 << 0x18\n 69717: a4 = a4 | a5\n 69720: a2 = a2 | a4\n 69723: a3 = u8 [a1 + 0x5]\n 69726: a4 = u8 [a1 + 0x4]\n 69729: a5 = u8 [a1 + 0x6]\n 69732: s1 = u8 [a1 + 0x7]\n 69735: a3 = a3 << 0x8\n 69738: a3 = a3 | a4\n 69741: a5 = a5 << 0x10\n 69744: s1 = s1 << 0x18\n 69747: a5 = a5 | s1\n 69750: a3 = a3 | a5\n 69753: a3 = a3 << 0x20\n 69756: a5 = a3 | a2\n 69759: a2 = u8 [a1 + 0x11]\n 69762: a3 = u8 [a1 + 0x10]\n 69765: a4 = u8 [a1 + 0x12]\n 69768: a1 = u8 [a1 + 0x13]\n 69771: a2 = a2 << 0x8\n 69774: a2 = a2 | a3\n 69777: a4 = a4 << 0x10\n 69780: a1 = a1 << 0x18\n 69783: a1 = a1 | a4\n 69786: s1 = a1 | a2\n 69789: s1 = 0 if t1 != 0\n 69791: a5 = 0 if t1 != 0\n 69793: u64 [sp + 0xb8] = a5\n 69797: a0 = 0 if t1 != 0\n 69799: u64 [sp + 0xb0] = a0\n 69803: a1 = 0x20\n 69806: a0 = 0\n 69808: ra = 902, jump @0\n      : @1001 [@dyn 451] (gas: 61)\n 69815: a1 = u64 [sp + 0xb0]\n 69819: a1 = reverse a1\n 69821: a2 = u64 [sp + 0xb8]\n 69825: a2 = reverse a2\n 69827: a3 = reverse s1\n 69829: u8 [a0 + 7] = 0\n 69832: u8 [a0 + 6] = 0\n 69835: u8 [a0 + 5] = 0\n 69838: u8 [a0 + 4] = 0\n 69841: u8 [a0 + 3] = 0\n 69844: u8 [a0 + 2] = 0\n 69847: u8 [a0 + 1] = 0\n 69850: u8 [a0 + 0] = 0\n 69852: u8 [a0 + 0x8] = a3\n 69855: a4 = a3 >> 0x38\n 69858: u8 [a0 + 0xf] = a4\n 69861: a4 = a3 >> 0x30\n 69864: u8 [a0 + 0xe] = a4\n 69867: a4 = a3 >> 0x28\n 69870: u8 [a0 + 0xd] = a4\n 69873: a4 = a3 >> 0x20\n 69876: u8 [a0 + 0xc] = a4\n 69879: a4 = a3 >> 0x18\n 69882: u8 [a0 + 0xb] = a4\n 69885: a4 = a3 >> 0x10\n 69888: u8 [a0 + 0xa] = a4\n 69891: a3 = a3 >> 0x8\n 69894: u8 [a0 + 0x9] = a3\n 69897: u8 [a0 + 0x18] = a2\n 69900: u8 [a0 + 0x10] = a1\n 69903: a3 = a2 >> 0x38\n 69906: u8 [a0 + 0x1f] = a3\n 69909: a3 = a2 >> 0x30\n 69912: u8 [a0 + 0x1e] = a3\n 69915: a3 = a2 >> 0x28\n 69918: u8 [a0 + 0x1d] = a3\n 69921: a3 = a2 >> 0x20\n 69924: u8 [a0 + 0x1c] = a3\n 69927: a3 = a2 >> 0x18\n 69930: u8 [a0 + 0x1b] = a3\n 69933: a3 = a2 >> 0x10\n 69936: u8 [a0 + 0x1a] = a3\n 69939: a2 = a2 >> 0x8\n 69942: u8 [a0 + 0x19] = a2\n 69945: a2 = a1 >> 0x38\n 69948: u8 [a0 + 0x17] = a2\n 69951: a2 = a1 >> 0x30\n 69954: u8 [a0 + 0x16] = a2\n 69957: a2 = a1 >> 0x28\n 69960: u8 [a0 + 0x15] = a2\n 69963: a2 = a1 >> 0x20\n 69966: u8 [a0 + 0x14] = a2\n 69969: a2 = a1 >> 0x18\n 69972: u8 [a0 + 0x13] = a2\n 69975: a2 = a1 >> 0x10\n 69978: u8 [a0 + 0x12] = a2\n 69981: a1 = a1 >> 0x8\n 69984: u8 [a0 + 0x11] = a1\n 69987: a0 = 0x20\n 69990: a1 = 0x20\n 69993: ra = 904, jump @0\n      : @1002 [@dyn 452] (gas: 67)\n 70000: a2 = u64 [sp + 0xc0]\n 70004: a1 = a2 >> 0x38\n 70007: u8 [a0 + 0x1f] = a1\n 70010: a1 = a2 >> 0x30\n 70013: u8 [a0 + 0x1e] = a1\n 70016: a1 = a2 >> 0x28\n 70019: u8 [a0 + 0x1d] = a1\n 70022: a1 = a2 >> 0x20\n 70025: u8 [a0 + 0x1c] = a1\n 70028: a1 = a2 >> 0x18\n 70031: u8 [a0 + 0x1b] = a1\n 70034: a1 = a2 >> 0x10\n 70037: u8 [a0 + 0x1a] = a1\n 70040: a1 = a2 >> 0x8\n 70043: u8 [a0 + 0x19] = a1\n 70046: u8 [a0 + 0x18] = a2\n 70049: a2 = u64 [sp + 0xc8]\n 70053: a1 = a2 >> 0x38\n 70056: u8 [a0 + 0x17] = a1\n 70059: a1 = a2 >> 0x30\n 70062: u8 [a0 + 0x16] = a1\n 70065: a1 = a2 >> 0x28\n 70068: u8 [a0 + 0x15] = a1\n 70071: a1 = a2 >> 0x20\n 70074: u8 [a0 + 0x14] = a1\n 70077: a1 = a2 >> 0x18\n 70080: u8 [a0 + 0x13] = a1\n 70083: a1 = a2 >> 0x10\n 70086: u8 [a0 + 0x12] = a1\n 70089: a1 = a2 >> 0x8\n 70092: u8 [a0 + 0x11] = a1\n 70095: u8 [a0 + 0x10] = a2\n 70098: a2 = u64 [sp + 0xd0]\n 70102: a1 = a2 >> 0x38\n 70105: u8 [a0 + 0xf] = a1\n 70108: a1 = a2 >> 0x30\n 70111: u8 [a0 + 0xe] = a1\n 70114: a1 = a2 >> 0x28\n 70117: u8 [a0 + 0xd] = a1\n 70120: a1 = a2 >> 0x20\n 70123: u8 [a0 + 0xc] = a1\n 70126: a1 = a2 >> 0x18\n 70129: u8 [a0 + 0xb] = a1\n 70132: a1 = a2 >> 0x10\n 70135: u8 [a0 + 0xa] = a1\n 70138: a1 = a2 >> 0x8\n 70141: u8 [a0 + 0x9] = a1\n 70144: u8 [a0 + 0x8] = a2\n 70147: a2 = u64 [sp + 0xd8]\n 70151: a1 = a2 >> 0x38\n 70154: u8 [a0 + 0x7] = a1\n 70157: a1 = a2 >> 0x30\n 70160: u8 [a0 + 0x6] = a1\n 70163: a1 = a2 >> 0x28\n 70166: u8 [a0 + 0x5] = a1\n 70169: a1 = a2 >> 0x20\n 70172: u8 [a0 + 0x4] = a1\n 70175: a1 = a2 >> 0x18\n 70178: u8 [a0 + 0x3] = a1\n 70181: a1 = a2 >> 0x10\n 70184: u8 [a0 + 0x2] = a1\n 70187: a1 = a2 >> 0x8\n 70190: u8 [a0 + 0x1] = a1\n 70193: u8 [a0] = a2\n 70195: a1 = 0x40\n 70198: a0 = 0\n 70200: ra = 906, jump @0\n      : @1003 [@dyn 453] (gas: 28)\n 70207: i32 a0 = a0 + 0\n 70209: i32 a2 = sp + 0x220\n 70213: a1 = 0x40\n 70216: ecalli 8 // 'hash_keccak_256'\n 70218: a0 = u64 [sp + 0x238]\n 70222: a1 = u64 [sp + 0x230]\n 70226: a2 = u64 [sp + 0x228]\n 70230: a3 = u64 [sp + 0x220]\n 70234: a0 = reverse a0\n 70236: a1 = reverse a1\n 70238: a2 = reverse a2\n 70240: a3 = reverse a3\n 70242: u64 [sp + 0x218] = a3\n 70246: u64 [sp + 0x210] = a2\n 70250: u64 [sp + 0x208] = a1\n 70254: u64 [sp + 0x200] = a0\n 70258: u64 [sp + 568] = 0\n 70262: u64 [sp + 560] = 0\n 70266: u64 [sp + 552] = 0\n 70270: u64 [sp + 544] = 0\n 70274: u32 [sp + 576] = 0x20\n 70279: i32 a1 = sp + 0x200\n 70283: i32 a3 = sp + 0x220\n 70287: i32 a4 = sp + 0x240\n 70291: a2 = 0xffffffffffffffff\n 70294: a0 = 0\n 70296: ecalli 7 // 'get_storage'\n 70298: fallthrough\n      : @1004 (gas: 2)\n 70299: a0 = u8 [sp + 0x220]\n 70303: jump @993 if a0 == 0\n      : @1005 (gas: 20)\n 70307: a2 = u64 [sp + 0xa0]\n 70311: a2 = a2 + 0x1\n 70314: a0 = a2 <u 0x1\n 70317: a3 = u64 [sp + 0x98]\n 70321: a3 = a3 + a0\n 70324: a0 = a2 | a3\n 70327: a0 = a0 <u 0x1\n 70330: a1 = u64 [sp + 0x88]\n 70334: a0 = a0 + a1\n 70337: a1 = a0 <u a1\n 70340: a4 = u64 [sp + 0x90]\n 70344: a4 = a4 + a1\n 70347: u64 [sp + 0x98] = a3\n 70351: u64 [sp + 0x90] = a4\n 70355: a1 = a3 | a4\n 70358: u64 [sp + 0xa0] = a2\n 70362: a2 = a2 | a0\n 70365: a1 = a1 | a2\n 70368: u64 [sp + 0x88] = a0\n 70372: jump @993 if a1 != 0\n      : @1006 (gas: 8)\n 70376: u64 [sp + 304] = 0\n 70380: u64 [sp + 296] = 0\n 70384: u64 [sp + 288] = 0\n 70388: a0 = 0x4e487b7100000000\n 70398: a1 = sp + 0x120\n 70402: u64 [sp + 0x138] = a0\n 70406: a0 = 0\n 70408: ra = 908, jump @23\n      : @1007 [@dyn 454] (gas: 7)\n 70415: u64 [sp + 280] = 0\n 70419: u64 [sp + 272] = 0\n 70423: u64 [sp + 256] = 0x11\n 70428: a0 = 0x4\n 70431: a1 = sp + 0x100\n 70435: u64 [sp + 264] = 0\n 70439: ra = 910, jump @23\n      : @1008 [@dyn 455] (gas: 3)\n 70446: a1 = 0x24\n 70449: a0 = 0\n 70451: ra = 912, jump @0\n      : @1009 [@dyn 456] (gas: 5)\n 70458: i32 a1 = a0 + 0\n 70460: a0 = 0x1\n 70463: a2 = 0x24\n 70466: ecalli 10 // 'seal_return'\n 70468: fallthrough\n      : @1010 (gas: 15)\n 70469: a0 = u64 [sp + 0x8]\n 70472: a1 = u64 [sp + 0xa0]\n 70476: u64 [a0] = a1\n 70478: a1 = u64 [sp + 0x98]\n 70482: u64 [a0 + 0x8] = a1\n 70485: a1 = u64 [sp + 0x88]\n 70489: u64 [a0 + 0x10] = a1\n 70492: a1 = u64 [sp + 0x90]\n 70496: u64 [a0 + 0x18] = a1\n 70499: sp = s0 + 0xfffffffffffffda0\n 70503: ra = u64 [sp + 0x258]\n 70507: s0 = u64 [sp + 0x250]\n 70511: s1 = u64 [sp + 0x248]\n 70515: sp = sp + 0x260\n 70519: ret\n      : @1011 (gas: 20)\n 70521: sp = sp + 0xffffffffffffffb0\n 70524: u64 [sp + 0x48] = ra\n 70527: u64 [sp + 0x40] = s0\n 70530: u64 [sp + 0x38] = s1\n 70533: a4 = u64 [a1 + 0x10]\n 70536: a3 = u64 [a1 + 0x18]\n 70539: a5 = u64 [a1 + 0x8]\n 70542: s0 = u64 [a1]\n 70544: u64 [sp + 0x28] = a3\n 70547: u64 [sp + 0x20] = a5\n 70550: a1 = a5 | a3\n 70553: a3 = s0 | a4\n 70556: a3 = a3 | a1\n 70559: a3 = a3 >> 0x20\n 70562: u64 [sp + 0x30] = a4\n 70565: a1 = a1 | a4\n 70568: a1 = a1 << 0x20\n 70571: a1 = a1 | a3\n 70574: u64 [sp + 0x18] = a0\n 70577: jump @1014 if a1 != 0\n      : @1012 (gas: 10)\n 70581: a0 = u64 [a2 + 0x18]\n 70584: u64 [sp] = a0\n 70586: s1 = u64 [a2 + 0x10]\n 70589: a0 = u64 [a2 + 0x8]\n 70592: u64 [sp + 0x8] = a0\n 70595: a0 = u64 [a2]\n 70597: u64 [sp + 0x10] = a0\n 70600: i32 a0 = s0 + 0\n 70602: a1 = 0x20\n 70605: ra = 914, jump @0\n      : @1013 [@dyn 457] (gas: 88)\n 70612: a1 = u64 [sp]\n 70614: a1 = reverse a1\n 70616: a2 = reverse s1\n 70618: a3 = u64 [sp + 0x8]\n 70621: a3 = reverse a3\n 70623: a4 = u64 [sp + 0x10]\n 70626: a4 = reverse a4\n 70628: a5 = a4 >> 0x38\n 70631: u8 [a0 + 0x1f] = a5\n 70634: a5 = a4 >> 0x30\n 70637: u8 [a0 + 0x1e] = a5\n 70640: a5 = a4 >> 0x28\n 70643: u8 [a0 + 0x1d] = a5\n 70646: a5 = a4 >> 0x20\n 70649: u8 [a0 + 0x1c] = a5\n 70652: a5 = a4 >> 0x18\n 70655: u8 [a0 + 0x1b] = a5\n 70658: a5 = a4 >> 0x10\n 70661: u8 [a0 + 0x1a] = a5\n 70664: a5 = a4 >> 0x8\n 70667: u8 [a0 + 0x19] = a5\n 70670: u8 [a0 + 0x18] = a4\n 70673: u8 [a0 + 0x10] = a3\n 70676: a4 = a3 >> 0x38\n 70679: u8 [a0 + 0x17] = a4\n 70682: a4 = a3 >> 0x30\n 70685: u8 [a0 + 0x16] = a4\n 70688: a4 = a3 >> 0x28\n 70691: u8 [a0 + 0x15] = a4\n 70694: a4 = a3 >> 0x20\n 70697: u8 [a0 + 0x14] = a4\n 70700: a4 = a3 >> 0x18\n 70703: u8 [a0 + 0x13] = a4\n 70706: a4 = a3 >> 0x10\n 70709: u8 [a0 + 0x12] = a4\n 70712: a3 = a3 >> 0x8\n 70715: u8 [a0 + 0x11] = a3\n 70718: u8 [a0 + 0x8] = a2\n 70721: a3 = a2 >> 0x38\n 70724: u8 [a0 + 0xf] = a3\n 70727: a3 = a2 >> 0x30\n 70730: u8 [a0 + 0xe] = a3\n 70733: a3 = a2 >> 0x28\n 70736: u8 [a0 + 0xd] = a3\n 70739: a3 = a2 >> 0x20\n 70742: u8 [a0 + 0xc] = a3\n 70745: a3 = a2 >> 0x18\n 70748: u8 [a0 + 0xb] = a3\n 70751: a3 = a2 >> 0x10\n 70754: u8 [a0 + 0xa] = a3\n 70757: a2 = a2 >> 0x8\n 70760: u8 [a0 + 0x9] = a2\n 70763: u8 [a0] = a1\n 70765: a2 = a1 >> 0x38\n 70768: u8 [a0 + 0x7] = a2\n 70771: a2 = a1 >> 0x30\n 70774: u8 [a0 + 0x6] = a2\n 70777: a2 = a1 >> 0x28\n 70780: u8 [a0 + 0x5] = a2\n 70783: a2 = a1 >> 0x20\n 70786: u8 [a0 + 0x4] = a2\n 70789: a2 = a1 >> 0x18\n 70792: u8 [a0 + 0x3] = a2\n 70795: a2 = a1 >> 0x10\n 70798: u8 [a0 + 0x2] = a2\n 70801: a1 = a1 >> 0x8\n 70804: u8 [a0 + 0x1] = a1\n 70807: a0 = s0 + 0x20\n 70810: a1 = a0 <u s0\n 70813: a3 = u64 [sp + 0x20]\n 70816: a2 = a3 + a1\n 70819: a3 = a2 <u a3\n 70822: a3 = a1 if a1 == 0\n 70825: a1 = u64 [sp + 0x30]\n 70828: a3 = a3 + a1\n 70831: a1 = a3 <u a1\n 70834: a4 = u64 [sp + 0x28]\n 70837: a1 = a1 + a4\n 70840: a4 = u64 [sp + 0x18]\n 70843: u64 [a4] = a0\n 70845: u64 [a4 + 0x8] = a2\n 70848: u64 [a4 + 0x10] = a3\n 70851: u64 [a4 + 0x18] = a1\n 70854: ra = u64 [sp + 0x48]\n 70857: s0 = u64 [sp + 0x40]\n 70860: s1 = u64 [sp + 0x38]\n 70863: sp = sp + 0x50\n 70866: ret\n      : @1014 (gas: 1)\n 70868: trap\n      : @1015 (gas: 12)\n 70869: a0 = u64 [sp + 0x70]\n 70872: a1 = u64 [sp + 0x78]\n 70875: a0 = a0 | a1\n 70878: a1 = u64 [sp + 0x98]\n 70882: a1 = a1 | s1\n 70885: a1 = a1 | a0\n 70888: a1 = a1 >> 0x20\n 70891: u64 [sp + 0x68] = s1\n 70894: a0 = a0 | s1\n 70897: a0 = a0 << 0x20\n 70900: a0 = a0 | a1\n 70903: jump @1029 if a0 != 0\n      : @1016 (gas: 11)\n 70907: s1 = u64 [sp + 0xd8]\n 70911: u64 [sp + 0x80] = s1\n 70915: a0 = u64 [sp + 0xd0]\n 70919: u64 [sp + 0x90] = a0\n 70923: a0 = u64 [sp + 0xc8]\n 70927: u64 [sp + 0x60] = a0\n 70930: a0 = u64 [sp + 0xc0]\n 70934: u64 [sp + 0x88] = a0\n 70938: a0 = i32 [sp + 0x98]\n 70942: a1 = 0x20\n 70945: ra = 916, jump @0\n      : @1017 [@dyn 458] (gas: 70)\n 70952: a1 = reverse s1\n 70954: a2 = u64 [sp + 0x90]\n 70958: a2 = reverse a2\n 70960: s1 = u64 [sp + 0x60]\n 70963: a3 = reverse s1\n 70965: a4 = u64 [sp + 0x88]\n 70969: a4 = reverse a4\n 70971: a5 = a4 >> 0x38\n 70974: u8 [a0 + 0x1f] = a5\n 70977: a5 = a4 >> 0x30\n 70980: u8 [a0 + 0x1e] = a5\n 70983: a5 = a4 >> 0x28\n 70986: u8 [a0 + 0x1d] = a5\n 70989: a5 = a4 >> 0x20\n 70992: u8 [a0 + 0x1c] = a5\n 70995: a5 = a4 >> 0x18\n 70998: u8 [a0 + 0x1b] = a5\n 71001: a5 = a4 >> 0x10\n 71004: u8 [a0 + 0x1a] = a5\n 71007: a5 = a4 >> 0x8\n 71010: u8 [a0 + 0x19] = a5\n 71013: u8 [a0 + 0x18] = a4\n 71016: u8 [a0 + 0x10] = a3\n 71019: a4 = a3 >> 0x38\n 71022: u8 [a0 + 0x17] = a4\n 71025: a4 = a3 >> 0x30\n 71028: u8 [a0 + 0x16] = a4\n 71031: a4 = a3 >> 0x28\n 71034: u8 [a0 + 0x15] = a4\n 71037: a4 = a3 >> 0x20\n 71040: u8 [a0 + 0x14] = a4\n 71043: a4 = a3 >> 0x18\n 71046: u8 [a0 + 0x13] = a4\n 71049: a4 = a3 >> 0x10\n 71052: u8 [a0 + 0x12] = a4\n 71055: a3 = a3 >> 0x8\n 71058: u8 [a0 + 0x11] = a3\n 71061: u8 [a0 + 0x8] = a2\n 71064: a3 = a2 >> 0x38\n 71067: u8 [a0 + 0xf] = a3\n 71070: a3 = a2 >> 0x30\n 71073: u8 [a0 + 0xe] = a3\n 71076: a3 = a2 >> 0x28\n 71079: u8 [a0 + 0xd] = a3\n 71082: a3 = a2 >> 0x20\n 71085: u8 [a0 + 0xc] = a3\n 71088: a3 = a2 >> 0x18\n 71091: u8 [a0 + 0xb] = a3\n 71094: a3 = a2 >> 0x10\n 71097: u8 [a0 + 0xa] = a3\n 71100: a2 = a2 >> 0x8\n 71103: u8 [a0 + 0x9] = a2\n 71106: u8 [a0] = a1\n 71108: a2 = a1 >> 0x38\n 71111: u8 [a0 + 0x7] = a2\n 71114: a2 = a1 >> 0x30\n 71117: u8 [a0 + 0x6] = a2\n 71120: a2 = a1 >> 0x28\n 71123: u8 [a0 + 0x5] = a2\n 71126: a2 = a1 >> 0x20\n 71129: u8 [a0 + 0x4] = a2\n 71132: a2 = a1 >> 0x18\n 71135: u8 [a0 + 0x3] = a2\n 71138: a2 = a1 >> 0x10\n 71141: u8 [a0 + 0x2] = a2\n 71144: a1 = a1 >> 0x8\n 71147: u8 [a0 + 0x1] = a1\n 71150: a1 = 0x20\n 71153: a0 = 0\n 71155: ra = 918, jump @0\n      : @1018 [@dyn 459] (gas: 71)\n 71162: a1 = u64 [sp + 0x40]\n 71165: a1 = reverse a1\n 71167: a2 = u64 [sp + 0x48]\n 71170: a2 = reverse a2\n 71172: a3 = u64 [sp + 0x50]\n 71175: a3 = reverse a3\n 71177: a4 = u64 [sp + 0x58]\n 71180: a4 = reverse a4\n 71182: a5 = a4 >> 0x38\n 71185: u8 [a0 + 0x1f] = a5\n 71188: a5 = a4 >> 0x30\n 71191: u8 [a0 + 0x1e] = a5\n 71194: a5 = a4 >> 0x28\n 71197: u8 [a0 + 0x1d] = a5\n 71200: a5 = a4 >> 0x20\n 71203: u8 [a0 + 0x1c] = a5\n 71206: a5 = a4 >> 0x18\n 71209: u8 [a0 + 0x1b] = a5\n 71212: a5 = a4 >> 0x10\n 71215: u8 [a0 + 0x1a] = a5\n 71218: a5 = a4 >> 0x8\n 71221: u8 [a0 + 0x19] = a5\n 71224: u8 [a0 + 0x18] = a4\n 71227: a4 = a3 >> 0x38\n 71230: u8 [a0 + 0x17] = a4\n 71233: a4 = a3 >> 0x30\n 71236: u8 [a0 + 0x16] = a4\n 71239: a4 = a3 >> 0x28\n 71242: u8 [a0 + 0x15] = a4\n 71245: a4 = a3 >> 0x20\n 71248: u8 [a0 + 0x14] = a4\n 71251: a4 = a3 >> 0x18\n 71254: u8 [a0 + 0x13] = a4\n 71257: a4 = a3 >> 0x10\n 71260: u8 [a0 + 0x12] = a4\n 71263: a4 = a3 >> 0x8\n 71266: u8 [a0 + 0x11] = a4\n 71269: u8 [a0 + 0x10] = a3\n 71272: a3 = a2 >> 0x38\n 71275: u8 [a0 + 0xf] = a3\n 71278: a3 = a2 >> 0x30\n 71281: u8 [a0 + 0xe] = a3\n 71284: a3 = a2 >> 0x28\n 71287: u8 [a0 + 0xd] = a3\n 71290: a3 = a2 >> 0x20\n 71293: u8 [a0 + 0xc] = a3\n 71296: a3 = a2 >> 0x18\n 71299: u8 [a0 + 0xb] = a3\n 71302: a3 = a2 >> 0x10\n 71305: u8 [a0 + 0xa] = a3\n 71308: a3 = a2 >> 0x8\n 71311: u8 [a0 + 0x9] = a3\n 71314: u8 [a0 + 0x8] = a2\n 71317: a2 = a1 >> 0x38\n 71320: u8 [a0 + 0x7] = a2\n 71323: a2 = a1 >> 0x30\n 71326: u8 [a0 + 0x6] = a2\n 71329: a2 = a1 >> 0x28\n 71332: u8 [a0 + 0x5] = a2\n 71335: a2 = a1 >> 0x20\n 71338: u8 [a0 + 0x4] = a2\n 71341: a2 = a1 >> 0x18\n 71344: u8 [a0 + 0x3] = a2\n 71347: a2 = a1 >> 0x10\n 71350: u8 [a0 + 0x2] = a2\n 71353: a2 = a1 >> 0x8\n 71356: u8 [a0 + 0x1] = a2\n 71359: u8 [a0] = a1\n 71361: a1 = 0x20\n 71364: a0 = 0\n 71366: ra = 920, jump @0\n      : @1019 [@dyn 460] (gas: 5)\n 71373: i32 a0 = a0 + 0\n 71375: i32 a2 = sp + 0xc0\n 71379: a1 = 0x20\n 71382: ecalli 8 // 'hash_keccak_256'\n 71384: fallthrough\n      : @1020 (gas: 20)\n 71385: a1 = u64 [sp + 0x98]\n 71389: a0 = a1 + 0x20\n 71392: u64 [sp + 0x50] = a0\n 71395: a2 = a0 <u a1\n 71398: a1 = u64 [sp + 0x78]\n 71401: t2 = a1 + a2\n 71404: a3 = t2 <u a1\n 71407: a3 = a2 if a2 == 0\n 71410: a2 = u64 [sp + 0x68]\n 71413: ra = a2 + a3\n 71416: a0 = u64 [sp + 0x90]\n 71420: a3 = u64 [sp + 0x88]\n 71424: a3 = a3 | a0\n 71427: a0 = u64 [sp + 0x80]\n 71431: a4 = s1 | a0\n 71434: a4 = a4 | a3\n 71437: a3 = ra <u a2\n 71440: t1 = u64 [sp + 0x70]\n 71443: a3 = a3 + t1\n 71446: jump @1027 if a4 == 0\n      : @1021 (gas: 161)\n 71450: a0 = 0xffffffe0\n 71460: a4 = u64 [sp + 0x98]\n 71464: s1 = a0 <u a4\n 71467: u64 [sp + 0x40] = s1\n 71470: a5 = a1 >u 0\n 71472: a5 = s1 if a1 == 0\n 71475: s1 = -a2\n 71477: a1 = s1 - a5\n 71480: u64 [sp + 0x58] = a1\n 71483: t0 = a1 >u 0\n 71485: a5 = s1 <u a5\n 71488: s1 = a2 >u 0\n 71490: s1 = s1 + t1\n 71493: s1 = -s1\n 71495: s1 = s1 - a5\n 71498: t1 = s1 >u 0\n 71500: t1 = t0 if s1 == 0\n 71503: a2 = s1\n 71505: u64 [sp + 0x48] = s1\n 71508: t0 = a0 - a4\n 71511: a1 = u64 [sp + 0x78]\n 71514: a5 = -a1\n 71516: a1 = u64 [sp + 0x40]\n 71519: a4 = a5 - a1\n 71522: u64 [sp + 0x40] = a0\n 71525: s1 = a0 <u t0\n 71528: a5 = a4 >u 0\n 71530: a5 = s1 if a4 == 0\n 71533: a1 = u64 [sp + 0x58]\n 71536: s1 = a1 | a2\n 71539: a5 = t1 if s1 != 0\n 71542: t0 = 0 if a5 != 0\n 71544: a0 = t0 + 0x1f\n 71547: s1 = a0 <u t0\n 71550: a4 = 0 if a5 != 0\n 71552: t0 = a4 + s1\n 71555: a4 = t0 <u a4\n 71558: a4 = s1 if s1 == 0\n 71561: a1 = 0 if a5 != 0\n 71563: u64 [sp + 0x58] = a1\n 71566: a1 = a1 + a4\n 71569: u64 [sp + 0x8] = a1\n 71572: a4 = a1 << 0x3b\n 71575: s1 = t0 >> 0x5\n 71578: t1 = s1 | a4\n 71581: t0 = t0 << 0x3b\n 71584: a4 = a0 >> 0x5\n 71587: s1 = a4 | t0\n 71590: u64 [sp + 0x38] = s1\n 71593: a1 = u64 [sp + 0x88]\n 71597: a4 = a1 <u 0x1\n 71600: t0 = u64 [sp + 0x60]\n 71603: a0 = t0 - a4\n 71606: u64 [sp + 0x20] = a0\n 71609: a2 = a1 + 0xffffffffffffffff\n 71612: u64 [sp + 0x30] = a2\n 71615: u64 [sp + 0x28] = t1\n 71618: a4 = a0 ^ t1\n 71621: t1 = a0 <u t1\n 71624: a0 = a2 <u s1\n 71627: a0 = t1 if a4 != 0\n 71630: u64 [sp + 0x10] = a0\n 71633: a4 = a1 | t0\n 71636: a4 = a4 <u 0x1\n 71639: a0 = u64 [sp + 0x90]\n 71643: t1 = a0 <u a4\n 71646: a1 = u64 [sp + 0x80]\n 71650: a1 = a1 - t1\n 71653: a0 = a0 - a4\n 71656: a2 = u64 [sp + 0x48]\n 71659: a2 = 0 if a5 != 0\n 71661: a4 = u64 [sp + 0x8]\n 71664: a5 = u64 [sp + 0x58]\n 71667: a5 = a4 <u a5\n 71670: a2 = a2 + a5\n 71673: t1 = a4 >> 0x5\n 71676: a5 = a2 << 0x3b\n 71679: t1 = t1 | a5\n 71682: a5 = a2 >> 0x5\n 71685: a2 = a0 <u t1\n 71688: t0 = a1 ^ a5\n 71691: a4 = a1 <u a5\n 71694: a4 = a2 if t0 == 0\n 71697: s1 = a0 ^ t1\n 71700: s1 = s1 | t0\n 71703: a2 = u64 [sp + 0x10]\n 71706: a4 = a2 if s1 == 0\n 71709: a1 = a5 if a4 == 0\n 71712: u64 [sp + 0x90] = a1\n 71716: a0 = t1 if a4 == 0\n 71719: a1 = u64 [sp + 0x20]\n 71722: a2 = u64 [sp + 0x28]\n 71725: a1 = a2 if a4 == 0\n 71728: a2 = u64 [sp + 0x30]\n 71731: a5 = u64 [sp + 0x38]\n 71734: a2 = a5 if a4 == 0\n 71737: a4 = a2 >> 0x3b\n 71740: a5 = a1 << 0x5\n 71743: t1 = a1\n 71745: a4 = a4 | a5\n 71748: a5 = a2 << 0x5\n 71751: s1 = u64 [sp + 0x78]\n 71754: s1 = s1 + a4\n 71757: a1 = u64 [sp + 0x98]\n 71761: a5 = a5 + a1\n 71764: u64 [sp + 0x60] = a5\n 71767: a4 = a5 <u a1\n 71770: s1 = s1 + a4\n 71773: a1 = u64 [sp + 0x78]\n 71776: t0 = s1 ^ a1\n 71779: a1 = u64 [sp + 0x78]\n 71782: a5 = s1 <u a1\n 71785: a5 = a4 if t0 == 0\n 71788: a1 = u64 [sp + 0xd0]\n 71792: u64 [sp + 0x88] = a1\n 71796: t1 = t1 >> 0x3b\n 71799: a4 = a0 << 0x5\n 71802: t1 = a4 | t1\n 71805: a1 = u64 [sp + 0xc8]\n 71809: u64 [sp + 0x80] = a1\n 71813: a0 = a0 >> 0x3b\n 71816: t0 = u64 [sp + 0x90]\n 71820: t0 = t0 << 0x5\n 71823: a4 = t0 | a0\n 71826: a2 = u64 [sp + 0x68]\n 71829: t0 = u64 [sp + 0x70]\n 71832: t0 = t0 + a4\n 71835: t1 = t1 + a2\n 71838: a4 = t1 <u a2\n 71841: t0 = t0 + a4\n 71844: a5 = a5 + t1\n 71847: a4 = a5 <u t1\n 71850: a1 = u64 [sp + 0x70]\n 71853: t0 = t0 + a4\n 71856: a4 = u64 [sp + 0x60]\n 71859: a0 = a4 + 0x20\n 71862: u64 [sp + 0x38] = a0\n 71865: a4 = a0 <u a4\n 71868: a0 = s1 + a4\n 71871: u64 [sp + 0x30] = a0\n 71874: s1 = a0 <u s1\n 71877: s1 = a4 if a4 == 0\n 71880: a0 = u64 [sp + 0xc0]\n 71884: s1 = s1 + a5\n 71887: u64 [sp + 0x28] = s1\n 71890: a5 = s1 <u a5\n 71893: a5 = a5 + t0\n 71896: u64 [sp + 0x20] = a5\n 71899: a4 = u64 [sp + 0x78]\n 71902: a5 = u64 [sp + 0xd8]\n 71906: a0 = reverse a0\n 71908: u64 [sp + 0x90] = a0\n 71912: a0 = u64 [sp + 0x80]\n 71916: t0 = reverse a0\n 71918: a0 = u64 [sp + 0x88]\n 71922: a0 = reverse a0\n 71924: u64 [sp + 0x88] = a0\n 71928: a0 = reverse a5\n 71930: u64 [sp + 0x80] = a0\n 71934: t1 = u64 [sp + 0x50]\n 71937: fallthrough\n      : @1022 (gas: 29)\n 71938: u64 [sp + 0x60] = a1\n 71941: u64 [sp + 0x58] = a2\n 71944: s1 = a4\n 71946: a0 = u64 [sp + 0x98]\n 71950: u64 [sp + 0x50] = a0\n 71953: u64 [sp + 0x70] = a3\n 71956: u64 [sp + 0x68] = ra\n 71959: u64 [sp + 0x78] = t2\n 71962: u64 [sp + 0x98] = t1\n 71966: u64 [sp + 0x48] = t0\n 71969: u64 [sp + 0xb0] = t0\n 71973: a0 = u64 [sp + 0x88]\n 71977: u64 [sp + 0xa8] = a0\n 71981: a0 = u64 [sp + 0x80]\n 71985: u64 [sp + 0xa0] = a0\n 71989: a0 = u64 [sp + 0x90]\n 71993: u64 [sp + 0xb8] = a0\n 71997: u64 [sp + 216] = 0\n 72001: u64 [sp + 208] = 0\n 72005: u64 [sp + 200] = 0\n 72009: u64 [sp + 192] = 0\n 72013: u32 [sp + 224] = 0x20\n 72018: i32 a1 = sp + 0xa0\n 72022: i32 a3 = sp + 0xc0\n 72026: i32 a4 = sp + 0xe0\n 72030: a2 = 0xffffffffffffffff\n 72033: a0 = 0\n 72035: ecalli 7 // 'get_storage'\n 72037: fallthrough\n      : @1023 (gas: 9)\n 72038: a0 = u64 [sp + 0x60]\n 72041: a1 = u64 [sp + 0x58]\n 72044: a0 = a0 | a1\n 72047: a1 = u64 [sp + 0x40]\n 72050: a2 = u64 [sp + 0x50]\n 72053: a1 = a2 <u a1\n 72056: a1 = 0 if s1 != 0\n 72058: a1 = 0 if a0 != 0\n 72060: jump @1029 if a1 == 0\n      : @1024 (gas: 10)\n 72064: a0 = u64 [sp + 0xd0]\n 72068: a1 = u64 [sp + 0xc8]\n 72072: u64 [sp + 0x58] = a1\n 72075: a1 = u64 [sp + 0xc0]\n 72079: u64 [sp + 0x60] = a1\n 72082: a0 = a0 << 0x20\n 72085: s1 = a0 >> 0x20\n 72088: a0 = i32 [sp + 0x98]\n 72092: a1 = 0x20\n 72095: ra = 922, jump @0\n      : @1025 [@dyn 461] (gas: 95)\n 72102: a1 = reverse s1\n 72104: a2 = u64 [sp + 0x58]\n 72107: a2 = reverse a2\n 72109: a3 = u64 [sp + 0x60]\n 72112: a3 = reverse a3\n 72114: a4 = a3 >> 0x38\n 72117: u8 [a0 + 0x1f] = a4\n 72120: a4 = a3 >> 0x30\n 72123: u8 [a0 + 0x1e] = a4\n 72126: a4 = a3 >> 0x28\n 72129: u8 [a0 + 0x1d] = a4\n 72132: a4 = a3 >> 0x20\n 72135: u8 [a0 + 0x1c] = a4\n 72138: a4 = a3 >> 0x18\n 72141: u8 [a0 + 0x1b] = a4\n 72144: a4 = a3 >> 0x10\n 72147: u8 [a0 + 0x1a] = a4\n 72150: a4 = a3 >> 0x8\n 72153: u8 [a0 + 0x19] = a4\n 72156: u8 [a0 + 0x18] = a3\n 72159: u8 [a0 + 0x10] = a2\n 72162: u8 [a0 + 11] = 0\n 72165: u8 [a0 + 10] = 0\n 72168: u8 [a0 + 9] = 0\n 72171: u8 [a0 + 7] = 0\n 72174: u8 [a0 + 6] = 0\n 72177: u8 [a0 + 5] = 0\n 72180: u8 [a0 + 4] = 0\n 72183: u8 [a0 + 3] = 0\n 72186: u8 [a0 + 2] = 0\n 72189: u8 [a0 + 1] = 0\n 72192: u8 [a0 + 0] = 0\n 72194: a3 = a2 >> 0x38\n 72197: u8 [a0 + 0x17] = a3\n 72200: a3 = a2 >> 0x30\n 72203: u8 [a0 + 0x16] = a3\n 72206: a3 = a2 >> 0x28\n 72209: u8 [a0 + 0x15] = a3\n 72212: a3 = a2 >> 0x20\n 72215: u8 [a0 + 0x14] = a3\n 72218: a3 = a2 >> 0x18\n 72221: u8 [a0 + 0x13] = a3\n 72224: a3 = a2 >> 0x10\n 72227: u8 [a0 + 0x12] = a3\n 72230: a2 = a2 >> 0x8\n 72233: u8 [a0 + 0x11] = a2\n 72236: u8 [a0 + 0x8] = a1\n 72239: a2 = a1 >> 0x38\n 72242: u8 [a0 + 0xf] = a2\n 72245: a2 = a1 >> 0x30\n 72248: u8 [a0 + 0xe] = a2\n 72251: a2 = a1 >> 0x28\n 72254: u8 [a0 + 0xd] = a2\n 72257: a1 = a1 >> 0x20\n 72260: u8 [a0 + 0xc] = a1\n 72263: a2 = u64 [sp + 0x80]\n 72267: a2 = a2 + 0x1\n 72270: a0 = a2 <u 0x1\n 72273: a1 = u64 [sp + 0x88]\n 72277: a1 = a1 + a0\n 72280: u64 [sp + 0x88] = a1\n 72284: u64 [sp + 0x80] = a2\n 72288: a0 = a2 | a1\n 72291: a4 = a0 <u 0x1\n 72294: a0 = u64 [sp + 0x48]\n 72297: t0 = a0 + a4\n 72300: a0 = t0 <u a0\n 72303: a1 = u64 [sp + 0x90]\n 72307: a1 = a1 + a0\n 72310: u64 [sp + 0x90] = a1\n 72314: a0 = u64 [sp + 0x98]\n 72318: t1 = a0 + 0x20\n 72321: a2 = t1 <u a0\n 72324: s1 = a0\n 72326: a4 = u64 [sp + 0x78]\n 72329: t2 = a4 + a2\n 72332: a3 = t2 <u a4\n 72335: a3 = a2 if a2 == 0\n 72338: a0 = u64 [sp + 0x38]\n 72341: s1 = s1 ^ a0\n 72344: a2 = u64 [sp + 0x68]\n 72347: a5 = u64 [sp + 0x28]\n 72350: a5 = a5 ^ a2\n 72353: a5 = a5 | s1\n 72356: a0 = u64 [sp + 0x30]\n 72359: a0 = a0 ^ a4\n 72362: a1 = u64 [sp + 0x70]\n 72365: s1 = u64 [sp + 0x20]\n 72368: s1 = s1 ^ a1\n 72371: s1 = s1 | a0\n 72374: ra = a2 + a3\n 72377: a5 = a5 | s1\n 72380: a3 = ra <u a2\n 72383: a3 = a3 + a1\n 72386: jump @1022 if a5 != 0\n      : @1026 (gas: 1)\n 72390: jump @1028\n      : @1027 (gas: 2)\n 72392: t1 = u64 [sp + 0x50]\n 72395: fallthrough\n      : @1028 (gas: 11)\n 72396: a4 = u64 [sp + 0x18]\n 72399: u64 [a4] = t1\n 72401: u64 [a4 + 0x8] = t2\n 72404: u64 [a4 + 0x10] = ra\n 72407: u64 [a4 + 0x18] = a3\n 72410: sp = s0 + 0xffffffffffffff00\n 72414: ra = u64 [sp + 0xf8]\n 72418: s0 = u64 [sp + 0xf0]\n 72422: s1 = u64 [sp + 0xe8]\n 72426: sp = sp + 0x100\n 72430: ret\n      : @1029 (gas: 1)\n 72432: trap\n      : @1030 (gas: 18)\n 72433: sp = sp + 0xffffffffffffff00\n 72437: u64 [sp + 0xf8] = ra\n 72441: u64 [sp + 0xf0] = s0\n 72445: u64 [sp + 0xe8] = s1\n 72449: s0 = sp + 0x100\n 72453: sp = sp & 0xfffffffffffffff0\n 72456: a2 = u64 [a1]\n 72458: u64 [sp + 0x20] = a2\n 72461: a2 = u64 [a1 + 0x8]\n 72464: u64 [sp + 0x10] = a2\n 72467: a2 = u64 [a1 + 0x10]\n 72470: u64 [sp + 0x8] = a2\n 72473: a1 = u64 [a1 + 0x18]\n 72476: u64 [sp] = a1\n 72478: u64 [sp + 0x18] = a0\n 72481: a0 = 0x40\n 72484: a1 = 0x20\n 72487: ra = 924, jump @0\n      : @1031 [@dyn 462] (gas: 149)\n 72494: a1 = u8 [a0 + 0x1]\n 72497: a2 = u8 [a0]\n 72499: a3 = u8 [a0 + 0x2]\n 72502: a4 = u8 [a0 + 0x3]\n 72505: a1 = a1 << 0x8\n 72508: a1 = a1 | a2\n 72511: a3 = a3 << 0x10\n 72514: a4 = a4 << 0x18\n 72517: a3 = a3 | a4\n 72520: a1 = a1 | a3\n 72523: a2 = u8 [a0 + 0x5]\n 72526: a3 = u8 [a0 + 0x4]\n 72529: a4 = u8 [a0 + 0x6]\n 72532: a5 = u8 [a0 + 0x7]\n 72535: a2 = a2 << 0x8\n 72538: a2 = a2 | a3\n 72541: a4 = a4 << 0x10\n 72544: a5 = a5 << 0x18\n 72547: a4 = a4 | a5\n 72550: a2 = a2 | a4\n 72553: a2 = a2 << 0x20\n 72556: t0 = a2 | a1\n 72559: a2 = u8 [a0 + 0x9]\n 72562: a3 = u8 [a0 + 0x8]\n 72565: a4 = u8 [a0 + 0xa]\n 72568: a5 = u8 [a0 + 0xb]\n 72571: a2 = a2 << 0x8\n 72574: a2 = a2 | a3\n 72577: a4 = a4 << 0x10\n 72580: a5 = a5 << 0x18\n 72583: a4 = a4 | a5\n 72586: a2 = a2 | a4\n 72589: a3 = u8 [a0 + 0xd]\n 72592: a4 = u8 [a0 + 0xc]\n 72595: a5 = u8 [a0 + 0xe]\n 72598: s1 = u8 [a0 + 0xf]\n 72601: a3 = a3 << 0x8\n 72604: a3 = a3 | a4\n 72607: a5 = a5 << 0x10\n 72610: s1 = s1 << 0x18\n 72613: a5 = a5 | s1\n 72616: a3 = a3 | a5\n 72619: a3 = a3 << 0x20\n 72622: a2 = a2 | a3\n 72625: a3 = u8 [a0 + 0x11]\n 72628: a4 = u8 [a0 + 0x10]\n 72631: a5 = u8 [a0 + 0x12]\n 72634: s1 = u8 [a0 + 0x13]\n 72637: a3 = a3 << 0x8\n 72640: a3 = a3 | a4\n 72643: a5 = a5 << 0x10\n 72646: s1 = s1 << 0x18\n 72649: a5 = a5 | s1\n 72652: a3 = a3 | a5\n 72655: a4 = u8 [a0 + 0x15]\n 72658: a5 = u8 [a0 + 0x14]\n 72661: s1 = u8 [a0 + 0x16]\n 72664: a1 = u8 [a0 + 0x17]\n 72667: a4 = a4 << 0x8\n 72670: a4 = a4 | a5\n 72673: s1 = s1 << 0x10\n 72676: a1 = a1 << 0x18\n 72679: a1 = a1 | s1\n 72682: a1 = a1 | a4\n 72685: a1 = a1 << 0x20\n 72688: a3 = a3 | a1\n 72691: a1 = u8 [a0 + 0x19]\n 72694: a4 = u8 [a0 + 0x18]\n 72697: a5 = u8 [a0 + 0x1a]\n 72700: s1 = u8 [a0 + 0x1b]\n 72703: a1 = a1 << 0x8\n 72706: a1 = a1 | a4\n 72709: a5 = a5 << 0x10\n 72712: s1 = s1 << 0x18\n 72715: a5 = a5 | s1\n 72718: a1 = a1 | a5\n 72721: a4 = u8 [a0 + 0x1d]\n 72724: a5 = u8 [a0 + 0x1c]\n 72727: s1 = u8 [a0 + 0x1e]\n 72730: a0 = u8 [a0 + 0x1f]\n 72733: a4 = a4 << 0x8\n 72736: a4 = a4 | a5\n 72739: s1 = s1 << 0x10\n 72742: a0 = a0 << 0x18\n 72745: a0 = a0 | s1\n 72748: a0 = a0 | a4\n 72751: a0 = a0 << 0x20\n 72754: a0 = a0 | a1\n 72757: a4 = reverse a0\n 72759: u64 [sp + 0x38] = a4\n 72762: s1 = reverse a3\n 72764: a2 = reverse a2\n 72766: u64 [sp + 0x30] = a2\n 72769: a1 = reverse t0\n 72771: u64 [sp + 0x28] = a1\n 72774: a0 = u64 [sp]\n 72776: u64 [sp + 0xb8] = a0\n 72780: a0 = u64 [sp + 0x8]\n 72783: u64 [sp + 0xb0] = a0\n 72787: a0 = u64 [sp + 0x10]\n 72790: u64 [sp + 0xa8] = a0\n 72794: a0 = u64 [sp + 0x20]\n 72797: u64 [sp + 0xa0] = a0\n 72801: u64 [sp + 0x98] = a1\n 72805: u64 [sp + 0x90] = a2\n 72809: u64 [sp + 0x88] = s1\n 72813: a0 = sp + 0xc0\n 72817: a1 = sp + 0xa0\n 72821: a2 = sp + 0x80\n 72825: u64 [sp + 0x80] = a4\n 72829: ra = 0x39e\n 72833: sp = sp + 0xffffffffffffff00\n 72837: u64 [sp + 0xf8] = ra\n 72841: u64 [sp + 0xf0] = s0\n 72845: u64 [sp + 0xe8] = s1\n 72849: s0 = sp + 0x100\n 72853: sp = sp & 0xffffffffffffffe0\n 72856: u64 [sp + 0x18] = a0\n 72859: s1 = u64 [a2 + 0x10]\n 72862: a0 = u64 [a2]\n 72864: u64 [sp + 0x98] = a0\n 72868: a0 = u64 [a2 + 0x18]\n 72871: u64 [sp + 0x70] = a0\n 72874: a0 = u64 [a2 + 0x8]\n 72877: u64 [sp + 0x78] = a0\n 72880: a4 = u64 [a1 + 0x18]\n 72883: a3 = u64 [a1 + 0x10]\n 72886: a2 = u64 [a1 + 0x8]\n 72889: a0 = u64 [a1]\n 72891: u64 [sp + 0x40] = a4\n 72894: u64 [sp + 0xb8] = a4\n 72898: u64 [sp + 0x48] = a3\n 72901: u64 [sp + 0xb0] = a3\n 72905: u64 [sp + 0x50] = a2\n 72908: u64 [sp + 0xa8] = a2\n 72912: u64 [sp + 0x58] = a0\n 72915: u64 [sp + 0xa0] = a0\n 72919: u64 [sp + 216] = 0\n 72923: u64 [sp + 208] = 0\n 72927: u64 [sp + 200] = 0\n 72931: u64 [sp + 192] = 0\n 72935: u32 [sp + 224] = 0x20\n 72940: i32 a1 = sp + 0xa0\n 72944: i32 a3 = sp + 0xc0\n 72948: i32 a4 = sp + 0xe0\n 72952: a2 = 0xffffffffffffffff\n 72955: a0 = 0\n 72957: ecalli 7 // 'get_storage'\n 72959: jump @1015\n      : @1032 [@dyn 463] (gas: 58)\n 72962: t2 = s1\n 72964: a3 = u64 [sp + 0xc8]\n 72968: a0 = u64 [sp + 0xd8]\n 72972: u64 [sp + 0x10] = a0\n 72975: a4 = u64 [sp + 0xc0]\n 72979: t1 = u64 [sp + 0xd0]\n 72983: a5 = a3 ^ s1\n 72986: a1 = a3 <u s1\n 72989: a2 = u64 [sp + 0x38]\n 72992: s1 = a4 <u a2\n 72995: a1 = s1 if a5 == 0\n 72998: a3 = a3 - t2\n 73001: a3 = a3 - s1\n 73004: u64 [sp + 0x8] = a3\n 73007: a4 = a4 - a2\n 73010: a5 = a4 + 0x1f\n 73013: a4 = a5 <u a4\n 73016: a3 = a3 + a4\n 73019: a5 = a5 & 0xffffffffffffffe0\n 73022: a0 = a3 + t2\n 73025: a2 = a2 + a5\n 73028: u64 [sp + 0x20] = a2\n 73031: a5 = a2 <u a5\n 73034: t0 = a0 + a5\n 73037: a0 = t0 ^ a3\n 73040: a2 = t0 <u a3\n 73043: a2 = a5 if a0 == 0\n 73046: s1 = u64 [sp + 0x30]\n 73049: a0 = t1 - s1\n 73052: a5 = t1 <u s1\n 73055: t1 = s1\n 73057: ra = u64 [sp + 0x28]\n 73060: s1 = u64 [sp + 0x10]\n 73063: s1 = s1 - ra\n 73066: s1 = s1 - a5\n 73069: a5 = a0 <u a1\n 73072: s1 = s1 - a5\n 73075: a0 = a0 - a1\n 73078: a1 = u64 [sp + 0x8]\n 73081: a1 = a3 <u a1\n 73084: a1 = a4 if a4 == 0\n 73087: a1 = a1 + a0\n 73090: a0 = a1 <u a0\n 73093: a3 = a1 + t1\n 73096: a5 = a3 + a2\n 73099: a1 = a3 <u a1\n 73102: a2 = a5 <u a3\n 73105: s1 = s1 + ra\n 73108: a0 = a0 + s1\n 73111: a0 = a0 + a1\n 73114: s1 = a0 + a2\n 73117: a0 = s1 >u 0\n 73119: a1 = a5 >u 0\n 73121: a1 = a0 if s1 != 0\n 73124: a0 = a5 | s1\n 73127: a2 = t0 >u 0\n 73129: a2 = a1 if a0 != 0\n 73132: jump @1036 if a2 != 0\n      : @1033 (gas: 15)\n 73136: a4 = t1\n 73138: a0 = u64 [sp + 0x38]\n 73141: a1 = u64 [sp + 0x20]\n 73144: a0 = a1 <u a0\n 73147: a1 = t0 ^ t2\n 73150: a2 = t0 <u t2\n 73153: a2 = a0 if a1 == 0\n 73156: a0 = a5 <u t1\n 73159: a1 = s1 ^ ra\n 73162: a3 = s1 <u ra\n 73165: a3 = a0 if a1 == 0\n 73168: a0 = a5 ^ t1\n 73171: a0 = a0 | a1\n 73174: a3 = a2 if a0 == 0\n 73177: jump @1036 if a3 != 0\n      : @1034 (gas: 6)\n 73181: a0 = 0x40\n 73184: a1 = 0x20\n 73187: u64 [sp + 0x10] = t2\n 73190: u64 [sp + 0x8] = t0\n 73193: u64 [sp] = a5\n 73195: ra = 928, jump @0\n      : @1035 [@dyn 464] (gas: 82)\n 73202: a1 = reverse s1\n 73204: a2 = u64 [sp]\n 73206: a2 = reverse a2\n 73208: a3 = u64 [sp + 0x8]\n 73211: a3 = reverse a3\n 73213: a4 = u64 [sp + 0x20]\n 73216: a4 = reverse a4\n 73218: u8 [a0 + 0x18] = a4\n 73221: a5 = a4 >> 0x38\n 73224: u8 [a0 + 0x1f] = a5\n 73227: a5 = a4 >> 0x30\n 73230: u8 [a0 + 0x1e] = a5\n 73233: a5 = a4 >> 0x28\n 73236: u8 [a0 + 0x1d] = a5\n 73239: a5 = a4 >> 0x20\n 73242: u8 [a0 + 0x1c] = a5\n 73245: a5 = a4 >> 0x18\n 73248: u8 [a0 + 0x1b] = a5\n 73251: a5 = a4 >> 0x10\n 73254: u8 [a0 + 0x1a] = a5\n 73257: a4 = a4 >> 0x8\n 73260: u8 [a0 + 0x19] = a4\n 73263: u8 [a0 + 0x10] = a3\n 73266: a4 = a3 >> 0x38\n 73269: u8 [a0 + 0x17] = a4\n 73272: a4 = a3 >> 0x30\n 73275: u8 [a0 + 0x16] = a4\n 73278: a4 = a3 >> 0x28\n 73281: u8 [a0 + 0x15] = a4\n 73284: a4 = a3 >> 0x20\n 73287: u8 [a0 + 0x14] = a4\n 73290: a4 = a3 >> 0x18\n 73293: u8 [a0 + 0x13] = a4\n 73296: a4 = a3 >> 0x10\n 73299: u8 [a0 + 0x12] = a4\n 73302: a3 = a3 >> 0x8\n 73305: u8 [a0 + 0x11] = a3\n 73308: u8 [a0 + 0x8] = a2\n 73311: a3 = a2 >> 0x38\n 73314: u8 [a0 + 0xf] = a3\n 73317: a3 = a2 >> 0x30\n 73320: u8 [a0 + 0xe] = a3\n 73323: a3 = a2 >> 0x28\n 73326: u8 [a0 + 0xd] = a3\n 73329: a3 = a2 >> 0x20\n 73332: u8 [a0 + 0xc] = a3\n 73335: a3 = a2 >> 0x18\n 73338: u8 [a0 + 0xb] = a3\n 73341: a3 = a2 >> 0x10\n 73344: u8 [a0 + 0xa] = a3\n 73347: a2 = a2 >> 0x8\n 73350: u8 [a0 + 0x9] = a2\n 73353: u8 [a0] = a1\n 73355: a2 = a1 >> 0x38\n 73358: u8 [a0 + 0x7] = a2\n 73361: a2 = a1 >> 0x30\n 73364: u8 [a0 + 0x6] = a2\n 73367: a2 = a1 >> 0x28\n 73370: u8 [a0 + 0x5] = a2\n 73373: a2 = a1 >> 0x20\n 73376: u8 [a0 + 0x4] = a2\n 73379: a2 = a1 >> 0x18\n 73382: u8 [a0 + 0x3] = a2\n 73385: a2 = a1 >> 0x10\n 73388: u8 [a0 + 0x2] = a2\n 73391: a1 = a1 >> 0x8\n 73394: u8 [a0 + 0x1] = a1\n 73397: a0 = u64 [sp + 0x18]\n 73400: a1 = u64 [sp + 0x38]\n 73403: u64 [a0] = a1\n 73405: a1 = u64 [sp + 0x28]\n 73408: u64 [a0 + 0x18] = a1\n 73411: a1 = u64 [sp + 0x10]\n 73414: u64 [a0 + 0x8] = a1\n 73417: a1 = u64 [sp + 0x30]\n 73420: u64 [a0 + 0x10] = a1\n 73423: sp = s0 + 0xffffffffffffff00\n 73427: ra = u64 [sp + 0xf8]\n 73431: s0 = u64 [sp + 0xf0]\n 73435: s1 = u64 [sp + 0xe8]\n 73439: sp = sp + 0x100\n 73443: ret\n      : @1036 (gas: 8)\n 73445: u64 [sp + 112] = 0\n 73448: u64 [sp + 104] = 0\n 73451: u64 [sp + 96] = 0\n 73454: a0 = 0x4e487b7100000000\n 73464: a1 = sp + 0x60\n 73467: u64 [sp + 0x78] = a0\n 73470: a0 = 0\n 73472: ra = 930, jump @23\n      : @1037 [@dyn 465] (gas: 7)\n 73479: u64 [sp + 88] = 0\n 73482: u64 [sp + 80] = 0\n 73485: u64 [sp + 64] = 0x41\n 73489: a0 = 0x4\n 73492: a1 = sp + 0x40\n 73495: u64 [sp + 72] = 0\n 73498: ra = 932, jump @23\n      : @1038 [@dyn 466] (gas: 3)\n 73505: a1 = 0x24\n 73508: a0 = 0\n 73510: ra = 934, jump @0\n      : @1039 [@dyn 467] (gas: 6)\n 73517: i32 a1 = a0 + 0\n 73519: a0 = 0x1\n 73522: a2 = 0x24\n 73525: ra = 0x3a8\n 73529: ecalli 10 // 'seal_return'\n 73531: fallthrough\n      : @1040 [@dyn 468] (gas: 18)\n 73532: sp = sp + 0xffffffffffffffa0\n 73535: u64 [sp + 0x58] = ra\n 73538: u64 [sp + 0x50] = s0\n 73541: u64 [sp + 0x48] = s1\n 73544: s0 = sp + 0x60\n 73547: sp = sp & 0xfffffffffffffff0\n 73550: a2 = u64 [a1]\n 73552: a3 = u64 [a1 + 0x8]\n 73555: a4 = u64 [a1 + 0x10]\n 73558: a1 = u64 [a1 + 0x18]\n 73561: s1 = a0\n 73563: u64 [sp + 0x18] = a1\n 73566: u64 [sp + 0x10] = a4\n 73569: u64 [sp + 0x8] = a3\n 73572: a0 = sp + 0x20\n 73575: a1 = sp\n 73577: u64 [sp] = a2\n 73579: ra = 938, jump @1030\n      : @1041 [@dyn 469] (gas: 14)\n 73585: a0 = u64 [sp + 0x30]\n 73588: a1 = u64 [sp + 0x38]\n 73591: a2 = u64 [sp + 0x20]\n 73594: a3 = u64 [sp + 0x28]\n 73597: u64 [s1 + 0x10] = a0\n 73600: u64 [s1 + 0x18] = a1\n 73603: u64 [s1] = a2\n 73605: u64 [s1 + 0x8] = a3\n 73608: sp = s0 + 0xffffffffffffffa0\n 73611: ra = u64 [sp + 0x58]\n 73614: s0 = u64 [sp + 0x50]\n 73617: s1 = u64 [sp + 0x48]\n 73620: sp = sp + 0x60\n 73623: ret\n      : @1042 [@dyn 470] (gas: 47)\n 73625: a3 = u64 [s1 + 0x360]\n 73629: a2 = u64 [s1 + 0x368]\n 73633: u64 [s1 + 480] = 0\n 73637: u64 [s1 + 472] = 0\n 73641: u64 [s1 + 456] = 0\n 73645: u64 [s1 + 464] = 0\n 73649: u64 [s1 + 416] = 0\n 73653: u64 [s1 + 504] = 0\n 73657: u64 [s1 + 488] = 0\n 73661: u64 [s1 + 496] = 0\n 73665: a0 = a3 + 0x20\n 73668: u64 [s1 + 0x190] = a0\n 73672: a0 = a0 <u a3\n 73675: a1 = a2 + a0\n 73678: u64 [s1 + 0x198] = a1\n 73682: u64 [s1 + 0x150] = a2\n 73686: a1 = a1 <u a2\n 73689: a1 = a0 if a0 == 0\n 73692: a0 = u64 [s1 + 0x178]\n 73696: a2 = u64 [s1 + 0x170]\n 73700: a0 = a0 | a2\n 73703: a2 = u64 [s1 + 0x188]\n 73707: a4 = u64 [s1 + 0x180]\n 73711: a2 = a2 | a4\n 73714: a0 = a0 | a2\n 73717: u64 [s1 + 0x170] = a0\n 73721: a0 = u64 [s1 + 0x1b0]\n 73725: a2 = u64 [s1 + 0x1a8]\n 73729: a0 = a0 | a2\n 73732: a4 = u64 [s1 + 0x370]\n 73736: a2 = u64 [s1 + 0x1c0]\n 73740: a5 = u64 [s1 + 0x1b8]\n 73744: a2 = a2 | a5\n 73747: a5 = u64 [s1 + 0x378]\n 73751: a0 = a0 | a2\n 73754: u64 [s1 + 0x160] = a0\n 73758: a1 = a1 + a4\n 73761: u64 [s1 + 0x188] = a1\n 73765: u64 [s1 + 0x148] = a4\n 73769: a0 = a1 <u a4\n 73772: u64 [s1 + 0x140] = a5\n 73776: a0 = a0 + a5\n 73779: u64 [s1 + 0x180] = a0\n 73783: u64 [s1 + 0x158] = a3\n 73787: i32 a0 = a3 + 0\n 73789: u64 [s1 + 0x178] = a0\n 73793: jump @1046\n      : @1043 (gas: 5)\n 73795: u64 [a2 + 24] = 0\n 73798: u64 [a2 + 16] = 0\n 73801: u64 [a2 + 8] = 0\n 73804: u64 [a2 + 0] = 0\n 73806: fallthrough\n      : @1044 (gas: 4)\n 73807: a0 = u64 [s1 + 0x1f8]\n 73811: a1 = u64 [s1 + 0x1f0]\n 73815: a2 = u64 [s1 + 0x1e8]\n 73819: fallthrough\n      : @1045 (gas: 20)\n 73820: u64 [s1 + 0x1e8] = a2\n 73824: u64 [s1 + 0x1f0] = a1\n 73828: u64 [s1 + 0x1f8] = a0\n 73832: a1 = u64 [s1 + 0x1e0]\n 73836: a1 = a1 + 0x1\n 73839: a0 = a1 <u 0x1\n 73842: a2 = u64 [s1 + 0x1d8]\n 73846: a2 = a2 + a0\n 73849: u64 [s1 + 0x1e0] = a1\n 73853: u64 [s1 + 0x1d8] = a2\n 73857: a0 = a1 | a2\n 73860: a0 = a0 <u 0x1\n 73863: a1 = u64 [s1 + 0x1c8]\n 73867: a0 = a0 + a1\n 73870: a1 = a0 <u a1\n 73873: a2 = u64 [s1 + 0x1d0]\n 73877: a2 = a2 + a1\n 73880: u64 [s1 + 0x1d0] = a2\n 73884: u64 [s1 + 0x1c8] = a0\n 73888: fallthrough\n      : @1046 (gas: 16)\n 73889: u64 [s1 + 920] = 0\n 73893: u64 [s1 + 912] = 0\n 73897: u64 [s1 + 904] = 0\n 73901: u64 [s1 + 896] = 0x5\n 73906: u64 [s1 + 952] = 0\n 73910: u64 [s1 + 944] = 0\n 73914: u64 [s1 + 936] = 0\n 73918: u64 [s1 + 928] = 0\n 73922: u32 [s1 + 960] = 0x20\n 73927: i32 a1 = s1 + 0x380\n 73931: i32 a3 = s1 + 0x3a0\n 73935: i32 a4 = s1 + 0x3c0\n 73939: a2 = 0xffffffffffffffff\n 73942: a0 = 0\n 73944: ecalli 7 // 'get_storage'\n 73946: fallthrough\n      : @1047 (gas: 20)\n 73947: a0 = u64 [s1 + 0x3b8]\n 73951: a1 = u64 [s1 + 0x3a0]\n 73955: t1 = u64 [s1 + 0x3b0]\n 73959: ra = u64 [s1 + 0x3a8]\n 73963: a3 = u64 [s1 + 0x1d0]\n 73967: t2 = a3 ^ a0\n 73970: a0 = a3 <u a0\n 73973: a4 = u64 [s1 + 0x1c8]\n 73977: a5 = a4 <u t1\n 73980: a5 = a0 if t2 != 0\n 73983: a2 = u64 [s1 + 0x1d8]\n 73987: t0 = a2 ^ ra\n 73990: a0 = a2 <u ra\n 73993: ra = u64 [s1 + 0x1e0]\n 73997: a1 = ra <u a1\n 74000: a1 = a0 if t0 != 0\n 74003: a0 = a4 ^ t1\n 74006: a0 = a0 | t2\n 74009: a1 = a5 if a0 != 0\n 74012: jump @1068 if a1 == 0\n      : @1048 (gas: 10)\n 74016: a1 = reverse a3\n 74018: a3 = reverse a4\n 74020: a2 = reverse a2\n 74022: a4 = reverse ra\n 74024: a0 = u64 [s1 + 0x170]\n 74028: u64 [s1 + 0x1c0] = a1\n 74032: u64 [s1 + 0x1b8] = a3\n 74036: u64 [s1 + 0x1b0] = a2\n 74040: u64 [s1 + 0x1a8] = a4\n 74044: jump @1056 if a0 == 0\n      : @1049 (gas: 3)\n 74048: a1 = 0x20\n 74051: a0 = 0\n 74053: ra = 942, jump @0\n      : @1050 [@dyn 471] (gas: 67)\n 74060: a2 = u64 [s1 + 0x1a8]\n 74064: a1 = a2 >> 0x38\n 74067: u8 [a0 + 0x1f] = a1\n 74070: a1 = a2 >> 0x30\n 74073: u8 [a0 + 0x1e] = a1\n 74076: a1 = a2 >> 0x28\n 74079: u8 [a0 + 0x1d] = a1\n 74082: a1 = a2 >> 0x20\n 74085: u8 [a0 + 0x1c] = a1\n 74088: a1 = a2 >> 0x18\n 74091: u8 [a0 + 0x1b] = a1\n 74094: a1 = a2 >> 0x10\n 74097: u8 [a0 + 0x1a] = a1\n 74100: a1 = a2 >> 0x8\n 74103: u8 [a0 + 0x19] = a1\n 74106: u8 [a0 + 0x18] = a2\n 74109: a2 = u64 [s1 + 0x1b0]\n 74113: u8 [a0 + 0x10] = a2\n 74116: a1 = a2 >> 0x38\n 74119: u8 [a0 + 0x17] = a1\n 74122: a1 = a2 >> 0x30\n 74125: u8 [a0 + 0x16] = a1\n 74128: a1 = a2 >> 0x28\n 74131: u8 [a0 + 0x15] = a1\n 74134: a1 = a2 >> 0x20\n 74137: u8 [a0 + 0x14] = a1\n 74140: a1 = a2 >> 0x18\n 74143: u8 [a0 + 0x13] = a1\n 74146: a1 = a2 >> 0x10\n 74149: u8 [a0 + 0x12] = a1\n 74152: a1 = a2 >> 0x8\n 74155: u8 [a0 + 0x11] = a1\n 74158: a2 = u64 [s1 + 0x1b8]\n 74162: u8 [a0 + 0x8] = a2\n 74165: a1 = a2 >> 0x38\n 74168: u8 [a0 + 0xf] = a1\n 74171: a1 = a2 >> 0x30\n 74174: u8 [a0 + 0xe] = a1\n 74177: a1 = a2 >> 0x28\n 74180: u8 [a0 + 0xd] = a1\n 74183: a1 = a2 >> 0x20\n 74186: u8 [a0 + 0xc] = a1\n 74189: a1 = a2 >> 0x18\n 74192: u8 [a0 + 0xb] = a1\n 74195: a1 = a2 >> 0x10\n 74198: u8 [a0 + 0xa] = a1\n 74201: a1 = a2 >> 0x8\n 74204: u8 [a0 + 0x9] = a1\n 74207: a2 = u64 [s1 + 0x1c0]\n 74211: u8 [a0] = a2\n 74213: a1 = a2 >> 0x38\n 74216: u8 [a0 + 0x7] = a1\n 74219: a1 = a2 >> 0x30\n 74222: u8 [a0 + 0x6] = a1\n 74225: a1 = a2 >> 0x28\n 74228: u8 [a0 + 0x5] = a1\n 74231: a1 = a2 >> 0x20\n 74234: u8 [a0 + 0x4] = a1\n 74237: a1 = a2 >> 0x18\n 74240: u8 [a0 + 0x3] = a1\n 74243: a1 = a2 >> 0x10\n 74246: u8 [a0 + 0x2] = a1\n 74249: a1 = a2 >> 0x8\n 74252: u8 [a0 + 0x1] = a1\n 74255: a0 = 0x20\n 74258: a1 = 0x20\n 74261: ra = 944, jump @0\n      : @1051 [@dyn 472] (gas: 35)\n 74268: u8 [a0 + 31] = 0\n 74271: u8 [a0 + 30] = 0\n 74274: u8 [a0 + 29] = 0\n 74277: u8 [a0 + 28] = 0\n 74280: u8 [a0 + 27] = 0\n 74283: u8 [a0 + 26] = 0\n 74286: u8 [a0 + 25] = 0\n 74289: u8 [a0 + 24] = 0\n 74292: u8 [a0 + 23] = 0\n 74295: u8 [a0 + 22] = 0\n 74298: u8 [a0 + 21] = 0\n 74301: u8 [a0 + 20] = 0\n 74304: u8 [a0 + 19] = 0\n 74307: u8 [a0 + 18] = 0\n 74310: u8 [a0 + 17] = 0\n 74313: u8 [a0 + 16] = 0\n 74316: u8 [a0 + 15] = 0\n 74319: u8 [a0 + 14] = 0\n 74322: u8 [a0 + 13] = 0\n 74325: u8 [a0 + 12] = 0\n 74328: u8 [a0 + 11] = 0\n 74331: u8 [a0 + 10] = 0\n 74334: u8 [a0 + 9] = 0\n 74337: u8 [a0 + 8] = 0\n 74340: u8 [a0 + 7] = 0\n 74343: u8 [a0 + 6] = 0\n 74346: u8 [a0 + 5] = 0\n 74349: u8 [a0 + 4] = 0\n 74352: u8 [a0 + 3] = 0\n 74355: u8 [a0 + 2] = 0\n 74358: u8 [a0 + 1] = 0\n 74361: u8 [a0 + 0] = 0\n 74363: a1 = 0x40\n 74366: a0 = 0\n 74368: ra = 946, jump @0\n      : @1052 [@dyn 473] (gas: 36)\n 74375: i32 a0 = a0 + 0\n 74377: i32 a2 = s1 + 0x3a0\n 74381: a1 = 0x40\n 74384: ecalli 8 // 'hash_keccak_256'\n 74386: a0 = u64 [s1 + 0x3a0]\n 74390: a1 = u64 [s1 + 0x3a8]\n 74394: a2 = u64 [s1 + 0x3b0]\n 74398: a3 = u64 [s1 + 0x3b8]\n 74402: a0 = reverse a0\n 74404: a1 = reverse a1\n 74406: a2 = reverse a2\n 74408: a3 = reverse a3\n 74410: a4 = a3 + 0x3\n 74413: a3 = a4 <u a3\n 74416: a5 = a2 + a3\n 74419: a2 = a5 <u a2\n 74422: a2 = a3 if a3 == 0\n 74425: a2 = a2 + a1\n 74428: a1 = a2 <u a1\n 74431: a0 = a0 + a1\n 74434: u64 [s1 + 0x388] = a5\n 74438: u64 [s1 + 0x380] = a4\n 74442: u64 [s1 + 0x390] = a2\n 74446: u64 [s1 + 0x398] = a0\n 74450: u64 [s1 + 952] = 0\n 74454: u64 [s1 + 944] = 0\n 74458: u64 [s1 + 936] = 0\n 74462: u64 [s1 + 928] = 0\n 74466: u32 [s1 + 960] = 0x20\n 74471: i32 a1 = s1 + 0x380\n 74475: i32 a3 = s1 + 0x3a0\n 74479: i32 a4 = s1 + 0x3c0\n 74483: a2 = 0xffffffffffffffff\n 74486: a0 = 0\n 74488: ecalli 7 // 'get_storage'\n 74490: fallthrough\n      : @1053 (gas: 10)\n 74491: a0 = u8 [s1 + 0x3a0]\n 74495: a1 = a0 <u 0x1\n 74498: a2 = sp + 0xffffffffffffffe0\n 74501: a2 = a2 & 0xffffffffffffffe0\n 74504: sp = a2\n 74506: u64 [a2 + 24] = 0\n 74509: u64 [a2 + 16] = 0\n 74512: u64 [a2 + 8] = 0\n 74515: u64 [a2] = a1\n 74517: jump @1062 if a0 == 0\n      : @1054 (gas: 2)\n 74521: a0 = u64 [s1 + 0x160]\n 74525: jump @1057 if a0 != 0\n      : @1055 (gas: 1)\n 74528: jump @1043\n      : @1056 (gas: 9)\n 74531: a0 = sp + 0xffffffffffffffe0\n 74534: a2 = a0 & 0xffffffffffffffe0\n 74537: sp = a2\n 74539: u64 [a2 + 24] = 0\n 74542: u64 [a2 + 16] = 0\n 74545: u64 [a2 + 8] = 0\n 74548: u64 [a2 + 0] = 0\n 74550: a0 = u64 [s1 + 0x160]\n 74554: jump @1043 if a0 == 0\n      : @1057 (gas: 4)\n 74558: a1 = 0x20\n 74561: a0 = 0\n 74563: u64 [s1 + 0x168] = a2\n 74567: ra = 948, jump @0\n      : @1058 [@dyn 474] (gas: 67)\n 74574: a2 = u64 [s1 + 0x1a8]\n 74578: a1 = a2 >> 0x38\n 74581: u8 [a0 + 0x1f] = a1\n 74584: a1 = a2 >> 0x30\n 74587: u8 [a0 + 0x1e] = a1\n 74590: a1 = a2 >> 0x28\n 74593: u8 [a0 + 0x1d] = a1\n 74596: a1 = a2 >> 0x20\n 74599: u8 [a0 + 0x1c] = a1\n 74602: a1 = a2 >> 0x18\n 74605: u8 [a0 + 0x1b] = a1\n 74608: a1 = a2 >> 0x10\n 74611: u8 [a0 + 0x1a] = a1\n 74614: a1 = a2 >> 0x8\n 74617: u8 [a0 + 0x19] = a1\n 74620: u8 [a0 + 0x18] = a2\n 74623: a2 = u64 [s1 + 0x1b0]\n 74627: u8 [a0 + 0x10] = a2\n 74630: a1 = a2 >> 0x38\n 74633: u8 [a0 + 0x17] = a1\n 74636: a1 = a2 >> 0x30\n 74639: u8 [a0 + 0x16] = a1\n 74642: a1 = a2 >> 0x28\n 74645: u8 [a0 + 0x15] = a1\n 74648: a1 = a2 >> 0x20\n 74651: u8 [a0 + 0x14] = a1\n 74654: a1 = a2 >> 0x18\n 74657: u8 [a0 + 0x13] = a1\n 74660: a1 = a2 >> 0x10\n 74663: u8 [a0 + 0x12] = a1\n 74666: a1 = a2 >> 0x8\n 74669: u8 [a0 + 0x11] = a1\n 74672: a2 = u64 [s1 + 0x1b8]\n 74676: u8 [a0 + 0x8] = a2\n 74679: a1 = a2 >> 0x38\n 74682: u8 [a0 + 0xf] = a1\n 74685: a1 = a2 >> 0x30\n 74688: u8 [a0 + 0xe] = a1\n 74691: a1 = a2 >> 0x28\n 74694: u8 [a0 + 0xd] = a1\n 74697: a1 = a2 >> 0x20\n 74700: u8 [a0 + 0xc] = a1\n 74703: a1 = a2 >> 0x18\n 74706: u8 [a0 + 0xb] = a1\n 74709: a1 = a2 >> 0x10\n 74712: u8 [a0 + 0xa] = a1\n 74715: a1 = a2 >> 0x8\n 74718: u8 [a0 + 0x9] = a1\n 74721: a2 = u64 [s1 + 0x1c0]\n 74725: u8 [a0] = a2\n 74727: a1 = a2 >> 0x38\n 74730: u8 [a0 + 0x7] = a1\n 74733: a1 = a2 >> 0x30\n 74736: u8 [a0 + 0x6] = a1\n 74739: a1 = a2 >> 0x28\n 74742: u8 [a0 + 0x5] = a1\n 74745: a1 = a2 >> 0x20\n 74748: u8 [a0 + 0x4] = a1\n 74751: a1 = a2 >> 0x18\n 74754: u8 [a0 + 0x3] = a1\n 74757: a1 = a2 >> 0x10\n 74760: u8 [a0 + 0x2] = a1\n 74763: a1 = a2 >> 0x8\n 74766: u8 [a0 + 0x1] = a1\n 74769: a0 = 0x20\n 74772: a1 = 0x20\n 74775: ra = 950, jump @0\n      : @1059 [@dyn 475] (gas: 35)\n 74782: u8 [a0 + 31] = 0\n 74785: u8 [a0 + 30] = 0\n 74788: u8 [a0 + 29] = 0\n 74791: u8 [a0 + 28] = 0\n 74794: u8 [a0 + 27] = 0\n 74797: u8 [a0 + 26] = 0\n 74800: u8 [a0 + 25] = 0\n 74803: u8 [a0 + 24] = 0\n 74806: u8 [a0 + 23] = 0\n 74809: u8 [a0 + 22] = 0\n 74812: u8 [a0 + 21] = 0\n 74815: u8 [a0 + 20] = 0\n 74818: u8 [a0 + 19] = 0\n 74821: u8 [a0 + 18] = 0\n 74824: u8 [a0 + 17] = 0\n 74827: u8 [a0 + 16] = 0\n 74830: u8 [a0 + 15] = 0\n 74833: u8 [a0 + 14] = 0\n 74836: u8 [a0 + 13] = 0\n 74839: u8 [a0 + 12] = 0\n 74842: u8 [a0 + 11] = 0\n 74845: u8 [a0 + 10] = 0\n 74848: u8 [a0 + 9] = 0\n 74851: u8 [a0 + 8] = 0\n 74854: u8 [a0 + 7] = 0\n 74857: u8 [a0 + 6] = 0\n 74860: u8 [a0 + 5] = 0\n 74863: u8 [a0 + 4] = 0\n 74866: u8 [a0 + 3] = 0\n 74869: u8 [a0 + 2] = 0\n 74872: u8 [a0 + 1] = 0\n 74875: u8 [a0 + 0] = 0\n 74877: a1 = 0x40\n 74880: a0 = 0\n 74882: ra = 952, jump @0\n      : @1060 [@dyn 476] (gas: 36)\n 74889: i32 a0 = a0 + 0\n 74891: i32 a2 = s1 + 0x3a0\n 74895: a1 = 0x40\n 74898: ecalli 8 // 'hash_keccak_256'\n 74900: a0 = u64 [s1 + 0x3a0]\n 74904: a1 = u64 [s1 + 0x3a8]\n 74908: a2 = u64 [s1 + 0x3b0]\n 74912: a3 = u64 [s1 + 0x3b8]\n 74916: a0 = reverse a0\n 74918: a1 = reverse a1\n 74920: a2 = reverse a2\n 74922: a3 = reverse a3\n 74924: a4 = a3 + 0x3\n 74927: a3 = a4 <u a3\n 74930: a5 = a2 + a3\n 74933: a2 = a5 <u a2\n 74936: a2 = a3 if a3 == 0\n 74939: a2 = a2 + a1\n 74942: a1 = a2 <u a1\n 74945: a0 = a0 + a1\n 74948: u64 [s1 + 0x388] = a5\n 74952: u64 [s1 + 0x380] = a4\n 74956: u64 [s1 + 0x390] = a2\n 74960: u64 [s1 + 0x398] = a0\n 74964: u64 [s1 + 952] = 0\n 74968: u64 [s1 + 944] = 0\n 74972: u64 [s1 + 936] = 0\n 74976: u64 [s1 + 928] = 0\n 74980: u32 [s1 + 960] = 0x20\n 74985: i32 a1 = s1 + 0x380\n 74989: i32 a3 = s1 + 0x3a0\n 74993: i32 a4 = s1 + 0x3c0\n 74997: a2 = 0xffffffffffffffff\n 75000: a0 = 0\n 75002: ecalli 7 // 'get_storage'\n 75004: fallthrough\n      : @1061 (gas: 7)\n 75005: a0 = u8 [s1 + 0x3a0]\n 75009: a1 = u64 [s1 + 0x168]\n 75013: u64 [a1 + 24] = 0\n 75016: u64 [a1 + 16] = 0\n 75019: u64 [a1 + 8] = 0\n 75022: u64 [a1] = a0\n 75024: jump @1044 if a0 == 0\n      : @1062 (gas: 12)\n 75028: a0 = u64 [s1 + 0x158]\n 75032: a2 = u64 [s1 + 0x148]\n 75036: a0 = a0 | a2\n 75039: a1 = u64 [s1 + 0x150]\n 75043: a3 = u64 [s1 + 0x140]\n 75047: a1 = a1 | a3\n 75050: a0 = a0 | a1\n 75053: a0 = a0 >> 0x20\n 75056: a1 = a1 | a2\n 75059: a1 = a1 << 0x20\n 75062: a0 = a0 | a1\n 75065: jump @1088 if a0 != 0\n      : @1063 (gas: 3)\n 75069: a1 = 0x20\n 75072: a0 = u64 [s1 + 0x178]\n 75076: ra = 954, jump @0\n      : @1064 [@dyn 477] (gas: 108)\n 75083: a1 = u8 [a0 + 0x1]\n 75086: a2 = u8 [a0]\n 75088: a3 = u8 [a0 + 0x2]\n 75091: a4 = u8 [a0 + 0x3]\n 75094: a1 = a1 << 0x8\n 75097: a1 = a1 | a2\n 75100: a3 = a3 << 0x10\n 75103: a4 = a4 << 0x18\n 75106: a3 = a3 | a4\n 75109: a1 = a1 | a3\n 75112: a2 = u8 [a0 + 0x5]\n 75115: a3 = u8 [a0 + 0x4]\n 75118: a4 = u8 [a0 + 0x6]\n 75121: a5 = u8 [a0 + 0x7]\n 75124: a2 = a2 << 0x8\n 75127: a2 = a2 | a3\n 75130: a4 = a4 << 0x10\n 75133: a5 = a5 << 0x18\n 75136: a4 = a4 | a5\n 75139: a2 = a2 | a4\n 75142: a2 = a2 << 0x20\n 75145: t0 = a2 | a1\n 75148: a2 = u8 [a0 + 0x9]\n 75151: a3 = u8 [a0 + 0x8]\n 75154: a4 = u8 [a0 + 0xa]\n 75157: a5 = u8 [a0 + 0xb]\n 75160: a2 = a2 << 0x8\n 75163: a2 = a2 | a3\n 75166: a4 = a4 << 0x10\n 75169: a5 = a5 << 0x18\n 75172: a4 = a4 | a5\n 75175: a2 = a2 | a4\n 75178: a3 = u8 [a0 + 0xd]\n 75181: a4 = u8 [a0 + 0xc]\n 75184: a5 = u8 [a0 + 0xe]\n 75187: a1 = u8 [a0 + 0xf]\n 75190: a3 = a3 << 0x8\n 75193: a3 = a3 | a4\n 75196: a5 = a5 << 0x10\n 75199: a1 = a1 << 0x18\n 75202: a1 = a1 | a5\n 75205: a1 = a1 | a3\n 75208: a1 = a1 << 0x20\n 75211: t1 = a1 | a2\n 75214: a1 = u8 [a0 + 0x11]\n 75217: a3 = u8 [a0 + 0x10]\n 75220: a4 = u8 [a0 + 0x12]\n 75223: a5 = u8 [a0 + 0x13]\n 75226: a1 = a1 << 0x8\n 75229: a1 = a1 | a3\n 75232: a4 = a4 << 0x10\n 75235: a5 = a5 << 0x18\n 75238: a4 = a4 | a5\n 75241: a1 = a1 | a4\n 75244: a3 = u8 [a0 + 0x15]\n 75247: a4 = u8 [a0 + 0x14]\n 75250: a5 = u8 [a0 + 0x16]\n 75253: a2 = u8 [a0 + 0x17]\n 75256: a3 = a3 << 0x8\n 75259: a3 = a3 | a4\n 75262: a5 = a5 << 0x10\n 75265: a2 = a2 << 0x18\n 75268: a2 = a2 | a5\n 75271: a2 = a2 | a3\n 75274: a2 = a2 << 0x20\n 75277: a3 = a2 | a1\n 75280: a1 = u8 [a0 + 0x19]\n 75283: a2 = u8 [a0 + 0x18]\n 75286: a4 = u8 [a0 + 0x1a]\n 75289: a5 = u8 [a0 + 0x1b]\n 75292: a1 = a1 << 0x8\n 75295: a1 = a1 | a2\n 75298: a4 = a4 << 0x10\n 75301: a5 = a5 << 0x18\n 75304: a4 = a4 | a5\n 75307: a1 = a1 | a4\n 75310: a2 = u8 [a0 + 0x1d]\n 75313: a4 = u8 [a0 + 0x1c]\n 75316: a5 = u8 [a0 + 0x1e]\n 75319: a0 = u8 [a0 + 0x1f]\n 75322: a2 = a2 << 0x8\n 75325: a2 = a2 | a4\n 75328: a5 = a5 << 0x10\n 75331: a0 = a0 << 0x18\n 75334: a0 = a0 | a5\n 75337: a0 = a0 | a2\n 75340: a0 = a0 << 0x20\n 75343: a0 = a0 | a1\n 75346: a0 = reverse a0\n 75348: a1 = reverse a3\n 75350: t2 = reverse t1\n 75352: a4 = reverse t0\n 75354: t1 = u64 [s1 + 0x1f8]\n 75358: a3 = a1 ^ t1\n 75361: a1 = t1 <u a1\n 75364: a5 = u64 [s1 + 0x1a0]\n 75368: a0 = a5 <u a0\n 75371: a0 = a1 if a3 != 0\n 75374: a3 = u64 [s1 + 0x1f0]\n 75378: a1 = a4 ^ a3\n 75381: a2 = a3 <u a4\n 75384: ra = u64 [s1 + 0x1e8]\n 75388: a4 = ra <u t2\n 75391: a4 = a2 if a1 != 0\n 75394: a2 = t2 ^ ra\n 75397: a1 = a1 | a2\n 75400: a0 = a4 if a1 != 0\n 75403: jump @1089 if a0 == 0\n      : @1065 (gas: 40)\n 75407: a0 = ra >> 0x3b\n 75410: a1 = a3 << 0x5\n 75413: u64 [s1 + 0x1f0] = a3\n 75417: t0 = a1 | a0\n 75420: a0 = a5 >> 0x3b\n 75423: a2 = t1 << 0x5\n 75426: a2 = a2 | a0\n 75429: a0 = a5 << 0x5\n 75432: a3 = u64 [s1 + 0x190]\n 75436: a0 = a0 + a3\n 75439: a3 = a0 <u a3\n 75442: u64 [s1 + 0x1a0] = a5\n 75446: a5 = u64 [s1 + 0x198]\n 75450: a2 = a2 + a5\n 75453: a2 = a2 + a3\n 75456: a4 = a2 ^ a5\n 75459: a5 = a2 <u a5\n 75462: a5 = a3 if a4 == 0\n 75465: a3 = t1 >> 0x3b\n 75468: a4 = ra << 0x5\n 75471: a3 = a3 | a4\n 75474: a4 = u64 [s1 + 0x188]\n 75478: a3 = a3 + a4\n 75481: a4 = a3 <u a4\n 75484: a1 = u64 [s1 + 0x180]\n 75488: a1 = a1 + t0\n 75491: a1 = a1 + a4\n 75494: a5 = a5 + a3\n 75497: a3 = a5 <u a3\n 75500: a1 = a1 + a3\n 75503: a1 = a1 | a2\n 75506: a2 = a0 | a5\n 75509: a2 = a2 | a1\n 75512: a1 = a1 | a5\n 75515: a2 = a2 >> 0x20\n 75518: a1 = a1 << 0x20\n 75521: a1 = a1 | a2\n 75524: u64 [s1 + 0x1f8] = t1\n 75528: u64 [s1 + 0x1e8] = ra\n 75532: jump @1088 if a1 != 0\n      : @1066 (gas: 3)\n 75536: i32 a0 = a0 + 0\n 75538: a1 = 0x20\n 75541: ra = 956, jump @0\n      : @1067 [@dyn 478] (gas: 80)\n 75548: a2 = u64 [s1 + 0x1a8]\n 75552: a1 = a2 >> 0x38\n 75555: u8 [a0 + 0x1f] = a1\n 75558: a1 = a2 >> 0x30\n 75561: u8 [a0 + 0x1e] = a1\n 75564: a1 = a2 >> 0x28\n 75567: u8 [a0 + 0x1d] = a1\n 75570: a1 = a2 >> 0x20\n 75573: u8 [a0 + 0x1c] = a1\n 75576: a1 = a2 >> 0x18\n 75579: u8 [a0 + 0x1b] = a1\n 75582: a1 = a2 >> 0x10\n 75585: u8 [a0 + 0x1a] = a1\n 75588: a1 = a2 >> 0x8\n 75591: u8 [a0 + 0x19] = a1\n 75594: u8 [a0 + 0x18] = a2\n 75597: a2 = u64 [s1 + 0x1b0]\n 75601: u8 [a0 + 0x10] = a2\n 75604: a1 = a2 >> 0x38\n 75607: u8 [a0 + 0x17] = a1\n 75610: a1 = a2 >> 0x30\n 75613: u8 [a0 + 0x16] = a1\n 75616: a1 = a2 >> 0x28\n 75619: u8 [a0 + 0x15] = a1\n 75622: a1 = a2 >> 0x20\n 75625: u8 [a0 + 0x14] = a1\n 75628: a1 = a2 >> 0x18\n 75631: u8 [a0 + 0x13] = a1\n 75634: a1 = a2 >> 0x10\n 75637: u8 [a0 + 0x12] = a1\n 75640: a1 = a2 >> 0x8\n 75643: u8 [a0 + 0x11] = a1\n 75646: a2 = u64 [s1 + 0x1b8]\n 75650: u8 [a0 + 0x8] = a2\n 75653: a1 = a2 >> 0x38\n 75656: u8 [a0 + 0xf] = a1\n 75659: a1 = a2 >> 0x30\n 75662: u8 [a0 + 0xe] = a1\n 75665: a1 = a2 >> 0x28\n 75668: u8 [a0 + 0xd] = a1\n 75671: a1 = a2 >> 0x20\n 75674: u8 [a0 + 0xc] = a1\n 75677: a1 = a2 >> 0x18\n 75680: u8 [a0 + 0xb] = a1\n 75683: a1 = a2 >> 0x10\n 75686: u8 [a0 + 0xa] = a1\n 75689: a1 = a2 >> 0x8\n 75692: u8 [a0 + 0x9] = a1\n 75695: a2 = u64 [s1 + 0x1c0]\n 75699: u8 [a0] = a2\n 75701: a1 = a2 >> 0x38\n 75704: u8 [a0 + 0x7] = a1\n 75707: a1 = a2 >> 0x30\n 75710: u8 [a0 + 0x6] = a1\n 75713: a1 = a2 >> 0x28\n 75716: u8 [a0 + 0x5] = a1\n 75719: a1 = a2 >> 0x20\n 75722: u8 [a0 + 0x4] = a1\n 75725: a1 = a2 >> 0x18\n 75728: u8 [a0 + 0x3] = a1\n 75731: a1 = a2 >> 0x10\n 75734: u8 [a0 + 0x2] = a1\n 75737: a1 = a2 >> 0x8\n 75740: u8 [a0 + 0x1] = a1\n 75743: a1 = u64 [s1 + 0x1a0]\n 75747: a1 = a1 + 0x1\n 75750: a0 = a1 <u 0x1\n 75753: a4 = u64 [s1 + 0x1f8]\n 75757: a4 = a4 + a0\n 75760: u64 [s1 + 0x1a0] = a1\n 75764: a0 = a1 | a4\n 75767: a0 = a0 <u 0x1\n 75770: a1 = u64 [s1 + 0x1e8]\n 75774: a0 = a0 + a1\n 75777: a1 = a0 <u a1\n 75780: a3 = u64 [s1 + 0x1f0]\n 75784: a1 = a1 + a3\n 75787: a2 = a0\n 75789: a0 = a4\n 75791: jump @1045\n      : @1068 (gas: 24)\n 75794: t0 = u64 [s1 + 0x78]\n 75797: a0 = u64 [s1 + 0x80]\n 75801: a2 = a0 <u t0\n 75804: t1 = u64 [s1 + 0x70]\n 75807: a1 = u64 [s1 + 0x88]\n 75811: a0 = a1 ^ t1\n 75814: a1 = a1 <u t1\n 75817: u64 [s1 + 0x1f8] = a0\n 75821: u64 [s1 + 0x1e0] = a2\n 75825: a1 = a2 if a0 == 0\n 75828: t2 = u64 [s1 + 0x68]\n 75831: a4 = u64 [s1 + 0x90]\n 75835: a2 = a4 <u t2\n 75838: a5 = u64 [s1 + 0x60]\n 75841: ra = u64 [s1 + 0x58]\n 75844: a0 = ra ^ a5\n 75847: a3 = ra <u a5\n 75850: a3 = a2 if a0 == 0\n 75853: a4 = a4 ^ t2\n 75856: u64 [s1 + 0x1f0] = a0\n 75860: a0 = a0 | a4\n 75863: u64 [s1 + 0x1e8] = a0\n 75867: a3 = a1 if a0 == 0\n 75870: jump @1097 if a3 != 0\n      : @1069 (gas: 20)\n 75874: a0 = u64 [s1 + 0x90]\n 75878: a3 = a0 - t2\n 75881: a4 = ra - a5\n 75884: a4 = a4 - a2\n 75887: a2 = a3 <u a1\n 75890: a4 = a4 - a2\n 75893: a3 = a3 - a1\n 75896: a0 = u64 [s1 + 0x88]\n 75900: a1 = a0 - t1\n 75903: a0 = u64 [s1 + 0x1e0]\n 75907: a1 = a1 - a0\n 75910: a0 = u64 [s1 + 0x80]\n 75914: a0 = a0 - t0\n 75917: u64 [s1 + 0x300] = a0\n 75921: u64 [s1 + 0x308] = a1\n 75925: u64 [s1 + 0x310] = a3\n 75929: a0 = s1 + 0x320\n 75933: a1 = s1 + 0x300\n 75937: u64 [s1 + 0x318] = a4\n 75941: ra = 958, jump @1114\n      : @1070 [@dyn 479] (gas: 30)\n 75947: a0 = u64 [s1 + 0x320]\n 75951: u64 [s1 + 0x28] = a0\n 75954: a0 = u64 [s1 + 0x328]\n 75958: u64 [s1 + 0x20] = a0\n 75961: a0 = u64 [s1 + 0x80]\n 75965: a1 = u64 [s1 + 0x78]\n 75968: a0 = a1 <u a0\n 75971: a0 = a0 ^ 0x1\n 75974: a1 = u64 [s1 + 0x88]\n 75978: a2 = u64 [s1 + 0x70]\n 75981: a1 = a2 <u a1\n 75984: a1 = a1 ^ 0x1\n 75987: a2 = u64 [s1 + 0x1f8]\n 75991: a1 = a0 if a2 == 0\n 75994: a0 = u64 [s1 + 0x90]\n 75998: a2 = u64 [s1 + 0x68]\n 76001: a0 = a2 <u a0\n 76004: a2 = u64 [s1 + 0x58]\n 76007: a3 = u64 [s1 + 0x60]\n 76010: a2 = a3 <u a2\n 76013: a3 = u64 [s1 + 0x1f0]\n 76017: a2 = a0 if a3 == 0\n 76020: a0 = u64 [s1 + 0x330]\n 76024: u64 [s1 + 0x18] = a0\n 76027: a0 = u64 [s1 + 0x338]\n 76031: u64 [s1 + 0x10] = a0\n 76034: a0 = a2 ^ 0x1\n 76037: a2 = u64 [s1 + 0x1e8]\n 76041: a0 = a1 if a2 == 0\n 76044: jump @1083 if a0 != 0\n      : @1071 (gas: 12)\n 76048: a0 = u64 [s1 + 0x158]\n 76052: a2 = u64 [s1 + 0x148]\n 76056: a0 = a0 | a2\n 76059: a1 = u64 [s1 + 0x150]\n 76063: a3 = u64 [s1 + 0x140]\n 76067: a1 = a1 | a3\n 76070: a0 = a0 | a1\n 76073: a0 = a0 >> 0x20\n 76076: a1 = a1 | a2\n 76079: a1 = a1 << 0x20\n 76082: a0 = a0 | a1\n 76085: jump @1088 if a0 != 0\n      : @1072 (gas: 16)\n 76089: a5 = u64 [s1 + 0x28]\n 76092: a3 = u64 [s1 + 0x18]\n 76095: a0 = a5 | a3\n 76098: a4 = u64 [s1 + 0x20]\n 76101: a2 = u64 [s1 + 0x10]\n 76104: a1 = a4 | a2\n 76107: a0 = a0 | a1\n 76110: a0 = a0 >> 0x20\n 76113: a1 = a1 | a3\n 76116: a1 = a1 << 0x20\n 76119: a0 = a0 | a1\n 76122: ra = u64 [s1 + 0x78]\n 76125: t2 = u64 [s1 + 0x70]\n 76128: t1 = u64 [s1 + 0x68]\n 76131: t0 = u64 [s1 + 0x60]\n 76134: jump @1084 if a0 != 0\n      : @1073 (gas: 16)\n 76138: i32 a0 = a5 + 0\n 76140: u64 [s1 + 0x50] = a0\n 76143: a0 = a5 + 0x20\n 76146: u64 [s1 + 0x48] = a0\n 76149: a0 = a0 <u a5\n 76152: a1 = a4 + a0\n 76155: u64 [s1 + 0x40] = a1\n 76158: a1 = a1 <u a4\n 76161: a1 = a0 if a0 == 0\n 76164: a1 = a1 + a3\n 76167: u64 [s1 + 0x38] = a1\n 76170: a0 = a1 <u a3\n 76173: a0 = a0 + a2\n 76176: u64 [s1 + 0x30] = a0\n 76179: a5 = t0\n 76181: fallthrough\n      : @1074 (gas: 7)\n 76182: u64 [s1 + 0x1f0] = t2\n 76186: u64 [s1 + 0x1e8] = a5\n 76190: u64 [s1 + 0x1e0] = t1\n 76194: u64 [s1 + 0x1f8] = ra\n 76198: a1 = 0x20\n 76201: a0 = u64 [s1 + 0x178]\n 76205: ra = 960, jump @0\n      : @1075 [@dyn 480] (gas: 108)\n 76212: t2 = u64 [s1 + 0x1f8]\n 76216: a1 = u8 [a0 + 0x1]\n 76219: a2 = u8 [a0]\n 76221: a3 = u8 [a0 + 0x2]\n 76224: a4 = u8 [a0 + 0x3]\n 76227: a1 = a1 << 0x8\n 76230: a1 = a1 | a2\n 76233: a3 = a3 << 0x10\n 76236: a4 = a4 << 0x18\n 76239: a3 = a3 | a4\n 76242: a1 = a1 | a3\n 76245: a2 = u8 [a0 + 0x5]\n 76248: a3 = u8 [a0 + 0x4]\n 76251: a4 = u8 [a0 + 0x6]\n 76254: a5 = u8 [a0 + 0x7]\n 76257: a2 = a2 << 0x8\n 76260: a2 = a2 | a3\n 76263: a4 = a4 << 0x10\n 76266: a5 = a5 << 0x18\n 76269: a4 = a4 | a5\n 76272: a2 = a2 | a4\n 76275: a2 = a2 << 0x20\n 76278: t0 = a2 | a1\n 76281: a2 = u8 [a0 + 0x9]\n 76284: a3 = u8 [a0 + 0x8]\n 76287: a4 = u8 [a0 + 0xa]\n 76290: a5 = u8 [a0 + 0xb]\n 76293: a2 = a2 << 0x8\n 76296: a2 = a2 | a3\n 76299: a4 = a4 << 0x10\n 76302: a5 = a5 << 0x18\n 76305: a4 = a4 | a5\n 76308: a2 = a2 | a4\n 76311: a3 = u8 [a0 + 0xd]\n 76314: a4 = u8 [a0 + 0xc]\n 76317: a5 = u8 [a0 + 0xe]\n 76320: a1 = u8 [a0 + 0xf]\n 76323: a3 = a3 << 0x8\n 76326: a3 = a3 | a4\n 76329: a5 = a5 << 0x10\n 76332: a1 = a1 << 0x18\n 76335: a1 = a1 | a5\n 76338: a1 = a1 | a3\n 76341: a1 = a1 << 0x20\n 76344: t1 = a1 | a2\n 76347: a1 = u8 [a0 + 0x11]\n 76350: a3 = u8 [a0 + 0x10]\n 76353: a4 = u8 [a0 + 0x12]\n 76356: a5 = u8 [a0 + 0x13]\n 76359: a1 = a1 << 0x8\n 76362: a1 = a1 | a3\n 76365: a4 = a4 << 0x10\n 76368: a5 = a5 << 0x18\n 76371: a4 = a4 | a5\n 76374: a1 = a1 | a4\n 76377: a3 = u8 [a0 + 0x15]\n 76380: a4 = u8 [a0 + 0x14]\n 76383: a5 = u8 [a0 + 0x16]\n 76386: a2 = u8 [a0 + 0x17]\n 76389: a3 = a3 << 0x8\n 76392: a3 = a3 | a4\n 76395: a5 = a5 << 0x10\n 76398: a2 = a2 << 0x18\n 76401: a2 = a2 | a5\n 76404: a2 = a2 | a3\n 76407: a2 = a2 << 0x20\n 76410: a3 = a2 | a1\n 76413: a1 = u8 [a0 + 0x19]\n 76416: a2 = u8 [a0 + 0x18]\n 76419: a4 = u8 [a0 + 0x1a]\n 76422: a5 = u8 [a0 + 0x1b]\n 76425: a1 = a1 << 0x8\n 76428: a1 = a1 | a2\n 76431: a4 = a4 << 0x10\n 76434: a5 = a5 << 0x18\n 76437: a4 = a4 | a5\n 76440: a1 = a1 | a4\n 76443: a2 = u8 [a0 + 0x1d]\n 76446: a4 = u8 [a0 + 0x1c]\n 76449: a5 = u8 [a0 + 0x1e]\n 76452: a0 = u8 [a0 + 0x1f]\n 76455: a2 = a2 << 0x8\n 76458: a2 = a2 | a4\n 76461: a5 = a5 << 0x10\n 76464: a0 = a0 << 0x18\n 76467: a0 = a0 | a5\n 76470: a0 = a0 | a2\n 76473: a0 = a0 << 0x20\n 76476: a0 = a0 | a1\n 76479: a0 = reverse a0\n 76481: a1 = reverse a3\n 76483: a2 = reverse t1\n 76485: a3 = reverse t0\n 76487: t1 = u64 [s1 + 0x1f0]\n 76491: a4 = a1 ^ t1\n 76494: a1 = t1 <u a1\n 76497: a0 = t2 <u a0\n 76500: a0 = a1 if a4 != 0\n 76503: a5 = u64 [s1 + 0x1e8]\n 76507: a1 = a3 ^ a5\n 76510: a3 = a5 <u a3\n 76513: ra = u64 [s1 + 0x1e0]\n 76517: a4 = ra <u a2\n 76520: a4 = a3 if a1 != 0\n 76523: a2 = a2 ^ ra\n 76526: a1 = a1 | a2\n 76529: a0 = a4 if a1 != 0\n 76532: jump @1091 if a0 == 0\n      : @1076 (gas: 36)\n 76536: a0 = ra >> 0x3b\n 76539: a1 = a5 << 0x5\n 76542: t0 = a1 | a0\n 76545: a0 = t2 >> 0x3b\n 76548: a2 = t1 << 0x5\n 76551: a2 = a2 | a0\n 76554: a0 = t2 << 0x5\n 76557: a3 = u64 [s1 + 0x190]\n 76561: a0 = a0 + a3\n 76564: a3 = a0 <u a3\n 76567: a5 = u64 [s1 + 0x198]\n 76571: a2 = a2 + a5\n 76574: a2 = a2 + a3\n 76577: a4 = a2 ^ a5\n 76580: a5 = a2 <u a5\n 76583: a5 = a3 if a4 == 0\n 76586: a3 = t1 >> 0x3b\n 76589: a4 = ra << 0x5\n 76592: a3 = a3 | a4\n 76595: a4 = u64 [s1 + 0x188]\n 76599: a3 = a3 + a4\n 76602: a4 = a3 <u a4\n 76605: a1 = u64 [s1 + 0x180]\n 76609: a1 = a1 + t0\n 76612: a1 = a1 + a4\n 76615: a5 = a5 + a3\n 76618: a3 = a5 <u a3\n 76621: a1 = a1 + a3\n 76624: a1 = a1 | a2\n 76627: a2 = a0 | a5\n 76630: a2 = a2 | a1\n 76633: a1 = a1 | a5\n 76636: a2 = a2 >> 0x20\n 76639: a1 = a1 << 0x20\n 76642: a1 = a1 | a2\n 76645: jump @1088 if a1 != 0\n      : @1077 (gas: 3)\n 76649: i32 a0 = a0 + 0\n 76651: a1 = 0x20\n 76654: ra = 962, jump @0\n      : @1078 [@dyn 481] (gas: 94)\n 76661: a1 = u8 [a0 + 0x18]\n 76664: u64 [s1 + 0x1b8] = a1\n 76668: a1 = u8 [a0 + 0x19]\n 76671: u64 [s1 + 0x1a0] = a1\n 76675: a1 = u8 [a0 + 0x1a]\n 76678: u64 [s1 + 0x1b0] = a1\n 76682: a1 = u8 [a0 + 0x1b]\n 76685: u64 [s1 + 0x1a8] = a1\n 76689: t2 = u64 [s1 + 0x78]\n 76692: a1 = u64 [s1 + 0x1f8]\n 76696: t1 = a1 <u t2\n 76699: t0 = u64 [s1 + 0x70]\n 76702: ra = u64 [s1 + 0x1f0]\n 76706: a2 = ra ^ t0\n 76709: a3 = ra <u t0\n 76712: a3 = t1 if a2 == 0\n 76715: a5 = u64 [s1 + 0x68]\n 76718: a4 = u64 [s1 + 0x1e0]\n 76722: a1 = a4 - a5\n 76725: a2 = a1 - a3\n 76728: u64 [s1 + 0x1d8] = a2\n 76732: a2 = a1 <u a3\n 76735: a3 = a4 <u a5\n 76738: a4 = u64 [s1 + 0x60]\n 76741: a1 = u64 [s1 + 0x1e8]\n 76745: a4 = a1 - a4\n 76748: a4 = a4 - a3\n 76751: a3 = u8 [a0 + 0x1c]\n 76754: u64 [s1 + 0xb0] = a3\n 76758: a4 = a4 - a2\n 76761: u64 [s1 + 0x1d0] = a4\n 76765: a2 = u8 [a0 + 0x1d]\n 76768: u64 [s1 + 0x98] = a2\n 76772: a2 = u8 [a0 + 0x1e]\n 76775: u64 [s1 + 0xa8] = a2\n 76779: a2 = u8 [a0 + 0x1f]\n 76782: u64 [s1 + 0xa0] = a2\n 76786: a2 = u8 [a0 + 0x10]\n 76789: u64 [s1 + 0xd8] = a2\n 76793: a2 = u8 [a0 + 0x11]\n 76796: u64 [s1 + 0xb8] = a2\n 76800: a2 = u8 [a0 + 0x12]\n 76803: u64 [s1 + 0xc8] = a2\n 76807: a2 = u8 [a0 + 0x13]\n 76810: u64 [s1 + 0xc0] = a2\n 76814: a2 = u8 [a0 + 0x14]\n 76817: u64 [s1 + 0xf0] = a2\n 76821: a2 = u8 [a0 + 0x15]\n 76824: u64 [s1 + 0xd0] = a2\n 76828: a2 = u8 [a0 + 0x16]\n 76831: u64 [s1 + 0xe8] = a2\n 76835: a2 = u8 [a0 + 0x17]\n 76838: u64 [s1 + 0xe0] = a2\n 76842: a2 = u8 [a0 + 0x8]\n 76845: u64 [s1 + 0x118] = a2\n 76849: a2 = u8 [a0 + 0x9]\n 76852: u64 [s1 + 0xf8] = a2\n 76856: a2 = u8 [a0 + 0xa]\n 76859: u64 [s1 + 0x108] = a2\n 76863: a2 = u8 [a0 + 0xb]\n 76866: u64 [s1 + 0x100] = a2\n 76870: a2 = u8 [a0 + 0xc]\n 76873: u64 [s1 + 0x130] = a2\n 76877: a2 = u8 [a0 + 0xd]\n 76880: u64 [s1 + 0x110] = a2\n 76884: a2 = u8 [a0 + 0xe]\n 76887: u64 [s1 + 0x128] = a2\n 76891: a2 = u8 [a0 + 0xf]\n 76894: u64 [s1 + 0x120] = a2\n 76898: a2 = u8 [a0]\n 76900: u64 [s1 + 0x158] = a2\n 76904: a2 = u8 [a0 + 0x1]\n 76907: u64 [s1 + 0x138] = a2\n 76911: a2 = u8 [a0 + 0x2]\n 76914: u64 [s1 + 0x148] = a2\n 76918: a2 = u8 [a0 + 0x3]\n 76921: u64 [s1 + 0x140] = a2\n 76925: a2 = u8 [a0 + 0x4]\n 76928: u64 [s1 + 0x170] = a2\n 76932: a2 = u8 [a0 + 0x5]\n 76935: u64 [s1 + 0x150] = a2\n 76939: a2 = u8 [a0 + 0x6]\n 76942: u64 [s1 + 0x168] = a2\n 76946: a0 = u8 [a0 + 0x7]\n 76949: u64 [s1 + 0x160] = a0\n 76953: a0 = ra - t0\n 76956: a0 = a0 - t1\n 76959: u64 [s1 + 0x1c8] = a0\n 76963: a0 = u64 [s1 + 0x1f8]\n 76967: a0 = a0 - t2\n 76970: u64 [s1 + 0x1c0] = a0\n 76974: a1 = 0x20\n 76977: a0 = u64 [s1 + 0x50]\n 76980: ra = 964, jump @0\n      : @1079 [@dyn 482] (gas: 108)\n 76987: ra = u64 [s1 + 0x1c0]\n 76991: t2 = u64 [s1 + 0x1c8]\n 76995: a1 = u8 [a0 + 0x1]\n 76998: a2 = u8 [a0]\n 77000: a3 = u8 [a0 + 0x2]\n 77003: a4 = u8 [a0 + 0x3]\n 77006: a1 = a1 << 0x8\n 77009: a1 = a1 | a2\n 77012: a3 = a3 << 0x10\n 77015: a4 = a4 << 0x18\n 77018: a3 = a3 | a4\n 77021: a1 = a1 | a3\n 77024: a2 = u8 [a0 + 0x5]\n 77027: a3 = u8 [a0 + 0x4]\n 77030: a4 = u8 [a0 + 0x6]\n 77033: a5 = u8 [a0 + 0x7]\n 77036: a2 = a2 << 0x8\n 77039: a2 = a2 | a3\n 77042: a4 = a4 << 0x10\n 77045: a5 = a5 << 0x18\n 77048: a4 = a4 | a5\n 77051: a2 = a2 | a4\n 77054: a2 = a2 << 0x20\n 77057: t0 = a2 | a1\n 77060: a2 = u8 [a0 + 0x9]\n 77063: a3 = u8 [a0 + 0x8]\n 77066: a4 = u8 [a0 + 0xa]\n 77069: a5 = u8 [a0 + 0xb]\n 77072: a2 = a2 << 0x8\n 77075: a2 = a2 | a3\n 77078: a4 = a4 << 0x10\n 77081: a5 = a5 << 0x18\n 77084: a4 = a4 | a5\n 77087: a2 = a2 | a4\n 77090: a3 = u8 [a0 + 0xd]\n 77093: a4 = u8 [a0 + 0xc]\n 77096: a5 = u8 [a0 + 0xe]\n 77099: a1 = u8 [a0 + 0xf]\n 77102: a3 = a3 << 0x8\n 77105: a3 = a3 | a4\n 77108: a5 = a5 << 0x10\n 77111: a1 = a1 << 0x18\n 77114: a1 = a1 | a5\n 77117: a1 = a1 | a3\n 77120: a1 = a1 << 0x20\n 77123: t1 = a1 | a2\n 77126: a1 = u8 [a0 + 0x11]\n 77129: a3 = u8 [a0 + 0x10]\n 77132: a4 = u8 [a0 + 0x12]\n 77135: a5 = u8 [a0 + 0x13]\n 77138: a1 = a1 << 0x8\n 77141: a1 = a1 | a3\n 77144: a4 = a4 << 0x10\n 77147: a5 = a5 << 0x18\n 77150: a4 = a4 | a5\n 77153: a1 = a1 | a4\n 77156: a3 = u8 [a0 + 0x15]\n 77159: a4 = u8 [a0 + 0x14]\n 77162: a5 = u8 [a0 + 0x16]\n 77165: a2 = u8 [a0 + 0x17]\n 77168: a3 = a3 << 0x8\n 77171: a3 = a3 | a4\n 77174: a5 = a5 << 0x10\n 77177: a2 = a2 << 0x18\n 77180: a2 = a2 | a5\n 77183: a2 = a2 | a3\n 77186: a2 = a2 << 0x20\n 77189: a3 = a2 | a1\n 77192: a1 = u8 [a0 + 0x19]\n 77195: a2 = u8 [a0 + 0x18]\n 77198: a4 = u8 [a0 + 0x1a]\n 77201: a5 = u8 [a0 + 0x1b]\n 77204: a1 = a1 << 0x8\n 77207: a1 = a1 | a2\n 77210: a4 = a4 << 0x10\n 77213: a5 = a5 << 0x18\n 77216: a4 = a4 | a5\n 77219: a1 = a1 | a4\n 77222: a2 = u8 [a0 + 0x1d]\n 77225: a4 = u8 [a0 + 0x1c]\n 77228: a5 = u8 [a0 + 0x1e]\n 77231: a0 = u8 [a0 + 0x1f]\n 77234: a2 = a2 << 0x8\n 77237: a2 = a2 | a4\n 77240: a5 = a5 << 0x10\n 77243: a0 = a0 << 0x18\n 77246: a0 = a0 | a5\n 77249: a5 = u64 [s1 + 0x1d8]\n 77253: a0 = a0 | a2\n 77256: a0 = a0 << 0x20\n 77259: a0 = a0 | a1\n 77262: a0 = reverse a0\n 77264: a1 = reverse a3\n 77266: t1 = reverse t1\n 77268: a3 = u64 [s1 + 0x1d0]\n 77272: a4 = reverse t0\n 77274: t0 = a1 ^ t2\n 77277: a1 = t2 <u a1\n 77280: a0 = ra <u a0\n 77283: a0 = a1 if t0 != 0\n 77286: a1 = a4 ^ a3\n 77289: a2 = a3 <u a4\n 77292: a4 = a5 <u t1\n 77295: a4 = a2 if a1 != 0\n 77298: a2 = t1 ^ a5\n 77301: a1 = a1 | a2\n 77304: a0 = a4 if a1 != 0\n 77307: jump @1093 if a0 == 0\n      : @1080 (gas: 36)\n 77311: a0 = ra >> 0x3b\n 77314: a1 = t2 << 0x5\n 77317: a1 = a1 | a0\n 77320: a0 = ra << 0x5\n 77323: a2 = u64 [s1 + 0x48]\n 77326: t0 = a2 + a0\n 77329: a2 = t0 <u a2\n 77332: a4 = u64 [s1 + 0x40]\n 77335: a1 = a1 + a4\n 77338: a1 = a1 + a2\n 77341: a0 = a1 ^ a4\n 77344: a4 = a1 <u a4\n 77347: a4 = a2 if a0 == 0\n 77350: a2 = a5 >> 0x3b\n 77353: a3 = a3 << 0x5\n 77356: a0 = a3 | a2\n 77359: a3 = t2 >> 0x3b\n 77362: a5 = a5 << 0x5\n 77365: a3 = a3 | a5\n 77368: a5 = u64 [s1 + 0x38]\n 77371: a3 = a3 + a5\n 77374: a5 = a3 <u a5\n 77377: a2 = u64 [s1 + 0x30]\n 77380: a2 = a2 + a0\n 77383: a2 = a2 + a5\n 77386: a4 = a4 + a3\n 77389: a3 = a4 <u a3\n 77392: a2 = a2 + a3\n 77395: a1 = a1 | a2\n 77398: a2 = t0 | a4\n 77401: a2 = a2 | a1\n 77404: a1 = a1 | a4\n 77407: a2 = a2 >> 0x20\n 77410: a1 = a1 << 0x20\n 77413: a1 = a1 | a2\n 77416: jump @1088 if a1 != 0\n      : @1081 (gas: 95)\n 77420: a1 = u64 [s1 + 0x1a0]\n 77424: a1 = a1 << 0x8\n 77427: a0 = u64 [s1 + 0x1b8]\n 77431: a1 = a1 | a0\n 77434: a2 = u64 [s1 + 0x1b0]\n 77438: a2 = a2 << 0x10\n 77441: a3 = u64 [s1 + 0x1a8]\n 77445: a3 = a3 << 0x18\n 77448: a2 = a2 | a3\n 77451: a1 = a1 | a2\n 77454: a2 = u64 [s1 + 0x98]\n 77458: a2 = a2 << 0x8\n 77461: a0 = u64 [s1 + 0xb0]\n 77465: a2 = a2 | a0\n 77468: a3 = u64 [s1 + 0xa8]\n 77472: a3 = a3 << 0x10\n 77475: a4 = u64 [s1 + 0xa0]\n 77479: a4 = a4 << 0x18\n 77482: a3 = a3 | a4\n 77485: a2 = a2 | a3\n 77488: a2 = a2 << 0x20\n 77491: a1 = a1 | a2\n 77494: u64 [s1 + 0x1d8] = a1\n 77498: a1 = u64 [s1 + 0xb8]\n 77502: a1 = a1 << 0x8\n 77505: a0 = u64 [s1 + 0xd8]\n 77509: a1 = a1 | a0\n 77512: a2 = u64 [s1 + 0xc8]\n 77516: a2 = a2 << 0x10\n 77519: a3 = u64 [s1 + 0xc0]\n 77523: a3 = a3 << 0x18\n 77526: a2 = a2 | a3\n 77529: a1 = a1 | a2\n 77532: a2 = u64 [s1 + 0xd0]\n 77536: a2 = a2 << 0x8\n 77539: a0 = u64 [s1 + 0xf0]\n 77543: a2 = a2 | a0\n 77546: a3 = u64 [s1 + 0xe8]\n 77550: a3 = a3 << 0x10\n 77553: a4 = u64 [s1 + 0xe0]\n 77557: a4 = a4 << 0x18\n 77560: a3 = a3 | a4\n 77563: a2 = a2 | a3\n 77566: a2 = a2 << 0x20\n 77569: a1 = a1 | a2\n 77572: u64 [s1 + 0x1d0] = a1\n 77576: a1 = u64 [s1 + 0xf8]\n 77580: a1 = a1 << 0x8\n 77583: a0 = u64 [s1 + 0x118]\n 77587: a1 = a1 | a0\n 77590: a2 = u64 [s1 + 0x108]\n 77594: a2 = a2 << 0x10\n 77597: a3 = u64 [s1 + 0x100]\n 77601: a3 = a3 << 0x18\n 77604: a2 = a2 | a3\n 77607: a1 = a1 | a2\n 77610: a2 = u64 [s1 + 0x110]\n 77614: a2 = a2 << 0x8\n 77617: a0 = u64 [s1 + 0x130]\n 77621: a2 = a2 | a0\n 77624: a3 = u64 [s1 + 0x128]\n 77628: a3 = a3 << 0x10\n 77631: a4 = u64 [s1 + 0x120]\n 77635: a4 = a4 << 0x18\n 77638: a3 = a3 | a4\n 77641: a2 = a2 | a3\n 77644: a2 = a2 << 0x20\n 77647: a1 = a1 | a2\n 77650: u64 [s1 + 0x1c0] = a1\n 77654: a1 = u64 [s1 + 0x138]\n 77658: a1 = a1 << 0x8\n 77661: a0 = u64 [s1 + 0x158]\n 77665: a1 = a1 | a0\n 77668: a2 = u64 [s1 + 0x148]\n 77672: a2 = a2 << 0x10\n 77675: a3 = u64 [s1 + 0x140]\n 77679: a3 = a3 << 0x18\n 77682: a2 = a2 | a3\n 77685: a1 = a1 | a2\n 77688: a2 = u64 [s1 + 0x150]\n 77692: a2 = a2 << 0x8\n 77695: a0 = u64 [s1 + 0x170]\n 77699: a2 = a2 | a0\n 77702: a3 = u64 [s1 + 0x168]\n 77706: a3 = a3 << 0x10\n 77709: a4 = u64 [s1 + 0x160]\n 77713: a4 = a4 << 0x18\n 77716: a3 = a3 | a4\n 77719: a2 = a2 | a3\n 77722: a2 = a2 << 0x20\n 77725: a1 = a1 | a2\n 77728: u64 [s1 + 0x1c8] = a1\n 77732: i32 a0 = t0 + 0\n 77734: a1 = 0x20\n 77737: ra = 966, jump @0\n      : @1082 [@dyn 483] (gas: 93)\n 77744: ra = u64 [s1 + 0x1f8]\n 77748: ra = ra + 0x1\n 77751: a1 = ra <u 0x1\n 77754: t2 = u64 [s1 + 0x1f0]\n 77758: t2 = t2 + a1\n 77761: a1 = ra | t2\n 77764: a1 = a1 <u 0x1\n 77767: a2 = u64 [s1 + 0x1e0]\n 77771: t0 = a2 + a1\n 77774: a2 = t0 <u a2\n 77777: a5 = u64 [s1 + 0x1e8]\n 77781: a5 = a5 + a2\n 77784: a1 = u64 [s1 + 0x80]\n 77788: a2 = ra <u a1\n 77791: a1 = u64 [s1 + 0x88]\n 77795: a3 = t2 ^ a1\n 77798: a4 = t2 <u a1\n 77801: a4 = a2 if a3 == 0\n 77804: a3 = u64 [s1 + 0x90]\n 77808: t1 = t0 <u a3\n 77811: a2 = u64 [s1 + 0x58]\n 77814: a1 = a5 ^ a2\n 77817: a2 = a5 <u a2\n 77820: a2 = t1 if a1 == 0\n 77823: a3 = t0 ^ a3\n 77826: a3 = a3 | a1\n 77829: a2 = a4 if a3 == 0\n 77832: a1 = u64 [s1 + 0x1c0]\n 77836: a3 = a1 >> 0x38\n 77839: u8 [a0 + 0xf] = a3\n 77842: a3 = a1 >> 0x30\n 77845: u8 [a0 + 0xe] = a3\n 77848: a3 = a1 >> 0x28\n 77851: u8 [a0 + 0xd] = a3\n 77854: a3 = a1 >> 0x20\n 77857: u8 [a0 + 0xc] = a3\n 77860: a3 = a1 >> 0x18\n 77863: u8 [a0 + 0xb] = a3\n 77866: a3 = a1 >> 0x10\n 77869: u8 [a0 + 0xa] = a3\n 77872: a3 = a1 >> 0x8\n 77875: u8 [a0 + 0x9] = a3\n 77878: u8 [a0 + 0x8] = a1\n 77881: a1 = u64 [s1 + 0x1c8]\n 77885: a3 = a1 >> 0x38\n 77888: u8 [a0 + 0x7] = a3\n 77891: a3 = a1 >> 0x30\n 77894: u8 [a0 + 0x6] = a3\n 77897: a3 = a1 >> 0x28\n 77900: u8 [a0 + 0x5] = a3\n 77903: a3 = a1 >> 0x20\n 77906: u8 [a0 + 0x4] = a3\n 77909: a3 = a1 >> 0x18\n 77912: u8 [a0 + 0x3] = a3\n 77915: a3 = a1 >> 0x10\n 77918: u8 [a0 + 0x2] = a3\n 77921: a3 = a1 >> 0x8\n 77924: u8 [a0 + 0x1] = a3\n 77927: u8 [a0] = a1\n 77929: a1 = u64 [s1 + 0x1d0]\n 77933: a3 = a1 >> 0x38\n 77936: u8 [a0 + 0x17] = a3\n 77939: a3 = a1 >> 0x30\n 77942: u8 [a0 + 0x16] = a3\n 77945: a3 = a1 >> 0x28\n 77948: u8 [a0 + 0x15] = a3\n 77951: a3 = a1 >> 0x20\n 77954: u8 [a0 + 0x14] = a3\n 77957: a3 = a1 >> 0x18\n 77960: u8 [a0 + 0x13] = a3\n 77963: a3 = a1 >> 0x10\n 77966: u8 [a0 + 0x12] = a3\n 77969: u8 [a0 + 0x10] = a1\n 77972: a3 = a1 >> 0x8\n 77975: u8 [a0 + 0x11] = a3\n 77978: a1 = u64 [s1 + 0x1d8]\n 77982: a3 = a1 >> 0x38\n 77985: u8 [a0 + 0x1f] = a3\n 77988: a3 = a1 >> 0x30\n 77991: u8 [a0 + 0x1e] = a3\n 77994: a3 = a1 >> 0x28\n 77997: u8 [a0 + 0x1d] = a3\n 78000: a3 = a1 >> 0x20\n 78003: u8 [a0 + 0x1c] = a3\n 78006: a3 = a1 >> 0x18\n 78009: u8 [a0 + 0x1b] = a3\n 78012: a3 = a1 >> 0x10\n 78015: u8 [a0 + 0x1a] = a3\n 78018: u8 [a0 + 0x18] = a1\n 78021: a3 = a1 >> 0x8\n 78024: u8 [a0 + 0x19] = a3\n 78027: t1 = t0\n 78029: jump @1074 if a2 != 0\n      : @1083 (gas: 15)\n 78033: a0 = u64 [s1 + 0x8]\n 78036: a1 = u64 [s1 + 0x28]\n 78039: u64 [a0] = a1\n 78041: a1 = u64 [s1 + 0x20]\n 78044: u64 [a0 + 0x8] = a1\n 78047: a1 = u64 [s1 + 0x18]\n 78050: u64 [a0 + 0x10] = a1\n 78053: a1 = u64 [s1 + 0x10]\n 78056: u64 [a0 + 0x18] = a1\n 78059: sp = s0 + 0xfffffffffffffc20\n 78063: ra = u64 [sp + 0x3d8]\n 78067: s0 = u64 [sp + 0x3d0]\n 78071: s1 = u64 [sp + 0x3c8]\n 78075: sp = sp + 0x3e0\n 78079: ret\n      : @1084 (gas: 3)\n 78081: a1 = 0x20\n 78084: a0 = u64 [s1 + 0x178]\n 78088: ra = 968, jump @0\n      : @1085 [@dyn 484] (gas: 108)\n 78095: a1 = u8 [a0 + 0x1]\n 78098: a2 = u8 [a0]\n 78100: a3 = u8 [a0 + 0x2]\n 78103: a4 = u8 [a0 + 0x3]\n 78106: a1 = a1 << 0x8\n 78109: a1 = a1 | a2\n 78112: a3 = a3 << 0x10\n 78115: a4 = a4 << 0x18\n 78118: a3 = a3 | a4\n 78121: a1 = a1 | a3\n 78124: a2 = u8 [a0 + 0x5]\n 78127: a3 = u8 [a0 + 0x4]\n 78130: a4 = u8 [a0 + 0x6]\n 78133: a5 = u8 [a0 + 0x7]\n 78136: a2 = a2 << 0x8\n 78139: a2 = a2 | a3\n 78142: a4 = a4 << 0x10\n 78145: a5 = a5 << 0x18\n 78148: a4 = a4 | a5\n 78151: a2 = a2 | a4\n 78154: a2 = a2 << 0x20\n 78157: t0 = a2 | a1\n 78160: a2 = u8 [a0 + 0x9]\n 78163: a3 = u8 [a0 + 0x8]\n 78166: a4 = u8 [a0 + 0xa]\n 78169: a5 = u8 [a0 + 0xb]\n 78172: a2 = a2 << 0x8\n 78175: a2 = a2 | a3\n 78178: a4 = a4 << 0x10\n 78181: a5 = a5 << 0x18\n 78184: a4 = a4 | a5\n 78187: a2 = a2 | a4\n 78190: a3 = u8 [a0 + 0xd]\n 78193: a4 = u8 [a0 + 0xc]\n 78196: a5 = u8 [a0 + 0xe]\n 78199: a1 = u8 [a0 + 0xf]\n 78202: a3 = a3 << 0x8\n 78205: a3 = a3 | a4\n 78208: a5 = a5 << 0x10\n 78211: a1 = a1 << 0x18\n 78214: a1 = a1 | a5\n 78217: a1 = a1 | a3\n 78220: a1 = a1 << 0x20\n 78223: t1 = a1 | a2\n 78226: a1 = u8 [a0 + 0x11]\n 78229: a3 = u8 [a0 + 0x10]\n 78232: a4 = u8 [a0 + 0x12]\n 78235: a5 = u8 [a0 + 0x13]\n 78238: a1 = a1 << 0x8\n 78241: a1 = a1 | a3\n 78244: a4 = a4 << 0x10\n 78247: a5 = a5 << 0x18\n 78250: a4 = a4 | a5\n 78253: a1 = a1 | a4\n 78256: a3 = u8 [a0 + 0x15]\n 78259: a4 = u8 [a0 + 0x14]\n 78262: a5 = u8 [a0 + 0x16]\n 78265: a2 = u8 [a0 + 0x17]\n 78268: a3 = a3 << 0x8\n 78271: a3 = a3 | a4\n 78274: a5 = a5 << 0x10\n 78277: a2 = a2 << 0x18\n 78280: a2 = a2 | a5\n 78283: a2 = a2 | a3\n 78286: a2 = a2 << 0x20\n 78289: a3 = a2 | a1\n 78292: a1 = u8 [a0 + 0x19]\n 78295: a2 = u8 [a0 + 0x18]\n 78298: a4 = u8 [a0 + 0x1a]\n 78301: a5 = u8 [a0 + 0x1b]\n 78304: a1 = a1 << 0x8\n 78307: a1 = a1 | a2\n 78310: a4 = a4 << 0x10\n 78313: a5 = a5 << 0x18\n 78316: a4 = a4 | a5\n 78319: a1 = a1 | a4\n 78322: a2 = u8 [a0 + 0x1d]\n 78325: a4 = u8 [a0 + 0x1c]\n 78328: a5 = u8 [a0 + 0x1e]\n 78331: a0 = u8 [a0 + 0x1f]\n 78334: a2 = a2 << 0x8\n 78337: a2 = a2 | a4\n 78340: a5 = a5 << 0x10\n 78343: a0 = a0 << 0x18\n 78346: a0 = a0 | a5\n 78349: a0 = a0 | a2\n 78352: a0 = a0 << 0x20\n 78355: a0 = a0 | a1\n 78358: a0 = reverse a0\n 78360: a1 = reverse a3\n 78362: a2 = reverse t1\n 78364: a3 = reverse t0\n 78366: a5 = u64 [s1 + 0x70]\n 78369: a4 = a1 ^ a5\n 78372: a1 = a5 <u a1\n 78375: a5 = u64 [s1 + 0x78]\n 78378: a0 = a5 <u a0\n 78381: a0 = a1 if a4 != 0\n 78384: a4 = u64 [s1 + 0x60]\n 78387: a1 = a3 ^ a4\n 78390: a3 = a4 <u a3\n 78393: a5 = u64 [s1 + 0x68]\n 78396: a4 = a5 <u a2\n 78399: a4 = a3 if a1 != 0\n 78402: a2 = a2 ^ a5\n 78405: a1 = a1 | a2\n 78408: a0 = a4 if a1 != 0\n 78411: jump @1091 if a0 == 0\n      : @1086 (gas: 40)\n 78415: a2 = u64 [s1 + 0x68]\n 78418: a0 = a2 >> 0x3b\n 78421: a1 = u64 [s1 + 0x60]\n 78424: a1 = a1 << 0x5\n 78427: t0 = a1 | a0\n 78430: a3 = u64 [s1 + 0x70]\n 78433: a0 = a3 >> 0x3b\n 78436: a2 = a2 << 0x5\n 78439: a2 = a2 | a0\n 78442: a1 = u64 [s1 + 0x78]\n 78445: a0 = a1 >> 0x3b\n 78448: a3 = a3 << 0x5\n 78451: a3 = a3 | a0\n 78454: a0 = a1 << 0x5\n 78457: a1 = u64 [s1 + 0x190]\n 78461: a0 = a0 + a1\n 78464: a4 = a0 <u a1\n 78467: a1 = u64 [s1 + 0x198]\n 78471: a3 = a3 + a1\n 78474: a3 = a3 + a4\n 78477: a5 = a3 ^ a1\n 78480: a1 = a3 <u a1\n 78483: a1 = a4 if a5 == 0\n 78486: a5 = u64 [s1 + 0x188]\n 78490: a2 = a2 + a5\n 78493: a1 = a1 + a2\n 78496: a4 = a1 <u a2\n 78499: a2 = a2 <u a5\n 78502: a5 = u64 [s1 + 0x180]\n 78506: t0 = t0 + a5\n 78509: a2 = a2 + t0\n 78512: a2 = a2 + a4\n 78515: a4 = a0 | a1\n 78518: a2 = a2 | a3\n 78521: a4 = a4 | a2\n 78524: a4 = a4 >> 0x20\n 78527: a1 = a1 | a2\n 78530: a1 = a1 << 0x20\n 78533: a1 = a1 | a4\n 78536: jump @1088 if a1 != 0\n      : @1087 (gas: 3)\n 78539: i32 a0 = a0 + 0\n 78541: a1 = 0x20\n 78544: ra = 970, jump @0\n      : @1088 [@dyn 485] (gas: 1)\n 78551: trap\n      : @1089 (gas: 8)\n 78552: u64 [s1 + 560] = 0\n 78556: u64 [s1 + 552] = 0\n 78560: u64 [s1 + 544] = 0\n 78564: a0 = 0x4e487b7100000000\n 78574: a1 = s1 + 0x220\n 78578: u64 [s1 + 0x238] = a0\n 78582: a0 = 0\n 78584: ra = 972, jump @23\n      : @1090 [@dyn 486] (gas: 8)\n 78591: u64 [s1 + 536] = 0\n 78595: u64 [s1 + 528] = 0\n 78599: u64 [s1 + 512] = 0x32\n 78604: a0 = 0x4\n 78607: a1 = s1 + 0x200\n 78611: u64 [s1 + 520] = 0\n 78615: ra = 0x3d2\n 78619: jump @23\n      : @1091 (gas: 8)\n 78623: u64 [s1 + 752] = 0\n 78627: u64 [s1 + 744] = 0\n 78631: u64 [s1 + 736] = 0\n 78635: a0 = 0x4e487b7100000000\n 78645: a1 = s1 + 0x2e0\n 78649: u64 [s1 + 0x2f8] = a0\n 78653: a0 = 0\n 78655: ra = 974, jump @23\n      : @1092 [@dyn 487] (gas: 8)\n 78662: u64 [s1 + 728] = 0\n 78666: u64 [s1 + 720] = 0\n 78670: u64 [s1 + 704] = 0x32\n 78675: a0 = 0x4\n 78678: a1 = s1 + 0x2c0\n 78682: u64 [s1 + 712] = 0\n 78686: ra = 0x3d2\n 78690: jump @23\n      : @1093 (gas: 8)\n 78694: u64 [s1 + 688] = 0\n 78698: u64 [s1 + 680] = 0\n 78702: u64 [s1 + 672] = 0\n 78706: a0 = 0x4e487b7100000000\n 78716: a1 = s1 + 0x2a0\n 78720: u64 [s1 + 0x2b8] = a0\n 78724: a0 = 0\n 78726: ra = 976, jump @23\n      : @1094 [@dyn 488] (gas: 7)\n 78733: u64 [s1 + 664] = 0\n 78737: u64 [s1 + 656] = 0\n 78741: u64 [s1 + 640] = 0x32\n 78746: a0 = 0x4\n 78749: a1 = s1 + 0x280\n 78753: u64 [s1 + 648] = 0\n 78757: ra = 978, jump @23\n      : @1095 [@dyn 489] (gas: 3)\n 78764: a1 = 0x24\n 78767: a0 = 0\n 78769: ra = 980, jump @0\n      : @1096 [@dyn 490] (gas: 5)\n 78776: i32 a1 = a0 + 0\n 78778: a0 = 0x1\n 78781: a2 = 0x24\n 78784: ecalli 10 // 'seal_return'\n 78786: fallthrough\n      : @1097 (gas: 8)\n 78787: u64 [s1 + 624] = 0\n 78791: u64 [s1 + 616] = 0\n 78795: u64 [s1 + 608] = 0\n 78799: a0 = 0x4e487b7100000000\n 78809: a1 = s1 + 0x260\n 78813: u64 [s1 + 0x278] = a0\n 78817: a0 = 0\n 78819: ra = 982, jump @23\n      : @1098 [@dyn 491] (gas: 8)\n 78826: u64 [s1 + 600] = 0\n 78830: u64 [s1 + 592] = 0\n 78834: u64 [s1 + 576] = 0x11\n 78839: a0 = 0x4\n 78842: a1 = s1 + 0x240\n 78846: u64 [s1 + 584] = 0\n 78850: ra = 0x3d2\n 78854: jump @23\n      : @1099 (gas: 14)\n 78858: sp = sp + 0xffffffffffffff10\n 78862: u64 [sp + 0xe8] = ra\n 78866: u64 [sp + 0xe0] = s0\n 78870: u64 [sp + 0xd8] = s1\n 78874: s0 = sp + 0xf0\n 78878: sp = sp & 0xfffffffffffffff0\n 78881: a2 = u64 [a1 + 0x18]\n 78884: a4 = u64 [a1 + 0x10]\n 78887: a5 = u64 [a1 + 0x8]\n 78890: s1 = a4 | a2\n 78893: a3 = a5 <u 0x1\n 78896: a3 = 0 if s1 != 0\n 78898: u64 [sp + 0x48] = a0\n 78901: jump @1105 if a3 == 0\n      : @1100 (gas: 30)\n 78905: s1 = u64 [a1]\n 78907: a0 = a4 >> 0x3b\n 78910: u64 [sp + 0x20] = a2\n 78913: a1 = a2 << 0x5\n 78916: a0 = a0 | a1\n 78919: a1 = a5 >> 0x3b\n 78922: u64 [sp + 0x28] = a4\n 78925: a2 = a4 << 0x5\n 78928: a1 = a1 | a2\n 78931: a2 = s1 >> 0x3b\n 78934: u64 [sp + 0x10] = a5\n 78937: a3 = a5 << 0x5\n 78940: a2 = a2 | a3\n 78943: u64 [sp + 0x18] = s1\n 78946: a3 = s1 << 0x5\n 78949: a4 = a3 + 0x20\n 78952: a3 = a4 <u a3\n 78955: a5 = a2 + a3\n 78958: a2 = a5 <u a2\n 78961: a2 = a3 if a3 == 0\n 78964: a2 = a2 + a1\n 78967: a1 = a2 <u a1\n 78970: a3 = a0 + a1\n 78973: u64 [sp + 0x90] = a4\n 78977: u64 [sp + 0x98] = a5\n 78981: u64 [sp + 0xa0] = a2\n 78985: a0 = sp + 0xb0\n 78989: a1 = sp + 0x90\n 78993: u64 [sp + 0xa8] = a3\n 78997: ra = 984, jump @114\n      : @1101 [@dyn 492] (gas: 15)\n 79004: a0 = u64 [sp + 0xc8]\n 79008: a2 = u64 [sp + 0xc0]\n 79012: a1 = u64 [sp + 0xb8]\n 79016: a3 = u64 [sp + 0xb0]\n 79020: u64 [sp + 0x38] = a0\n 79023: u64 [sp + 0x30] = a1\n 79026: a0 = a0 | a1\n 79029: a1 = a3 | a2\n 79032: a1 = a1 | a0\n 79035: a1 = a1 >> 0x20\n 79038: u64 [sp + 0x40] = a2\n 79041: a0 = a0 | a2\n 79044: a0 = a0 << 0x20\n 79047: a0 = a0 | a1\n 79050: jump @1104 if a0 != 0\n      : @1102 (gas: 4)\n 79054: i32 a0 = a3 + 0\n 79056: a1 = 0x20\n 79059: u64 [sp + 0x8] = a3\n 79062: ra = 986, jump @0\n      : @1103 [@dyn 493] (gas: 83)\n 79069: a1 = u64 [sp + 0x20]\n 79072: a1 = reverse a1\n 79074: a2 = u64 [sp + 0x28]\n 79077: a2 = reverse a2\n 79079: a3 = u64 [sp + 0x10]\n 79082: a3 = reverse a3\n 79084: a4 = u64 [sp + 0x18]\n 79087: a4 = reverse a4\n 79089: a5 = a4 >> 0x38\n 79092: u8 [a0 + 0x1f] = a5\n 79095: a5 = a4 >> 0x30\n 79098: u8 [a0 + 0x1e] = a5\n 79101: a5 = a4 >> 0x28\n 79104: u8 [a0 + 0x1d] = a5\n 79107: a5 = a4 >> 0x20\n 79110: u8 [a0 + 0x1c] = a5\n 79113: a5 = a4 >> 0x18\n 79116: u8 [a0 + 0x1b] = a5\n 79119: a5 = a4 >> 0x10\n 79122: u8 [a0 + 0x1a] = a5\n 79125: a5 = a4 >> 0x8\n 79128: u8 [a0 + 0x19] = a5\n 79131: u8 [a0 + 0x18] = a4\n 79134: u8 [a0 + 0x10] = a3\n 79137: a4 = a3 >> 0x38\n 79140: u8 [a0 + 0x17] = a4\n 79143: a4 = a3 >> 0x30\n 79146: u8 [a0 + 0x16] = a4\n 79149: a4 = a3 >> 0x28\n 79152: u8 [a0 + 0x15] = a4\n 79155: a4 = a3 >> 0x20\n 79158: u8 [a0 + 0x14] = a4\n 79161: a4 = a3 >> 0x18\n 79164: u8 [a0 + 0x13] = a4\n 79167: a4 = a3 >> 0x10\n 79170: u8 [a0 + 0x12] = a4\n 79173: a3 = a3 >> 0x8\n 79176: u8 [a0 + 0x11] = a3\n 79179: u8 [a0 + 0x8] = a2\n 79182: a3 = a2 >> 0x38\n 79185: u8 [a0 + 0xf] = a3\n 79188: a3 = a2 >> 0x30\n 79191: u8 [a0 + 0xe] = a3\n 79194: a3 = a2 >> 0x28\n 79197: u8 [a0 + 0xd] = a3\n 79200: a3 = a2 >> 0x20\n 79203: u8 [a0 + 0xc] = a3\n 79206: a3 = a2 >> 0x18\n 79209: u8 [a0 + 0xb] = a3\n 79212: a3 = a2 >> 0x10\n 79215: u8 [a0 + 0xa] = a3\n 79218: a2 = a2 >> 0x8\n 79221: u8 [a0 + 0x9] = a2\n 79224: u8 [a0] = a1\n 79226: a2 = a1 >> 0x38\n 79229: u8 [a0 + 0x7] = a2\n 79232: a2 = a1 >> 0x30\n 79235: u8 [a0 + 0x6] = a2\n 79238: a2 = a1 >> 0x28\n 79241: u8 [a0 + 0x5] = a2\n 79244: a2 = a1 >> 0x20\n 79247: u8 [a0 + 0x4] = a2\n 79250: a2 = a1 >> 0x18\n 79253: u8 [a0 + 0x3] = a2\n 79256: a2 = a1 >> 0x10\n 79259: u8 [a0 + 0x2] = a2\n 79262: a1 = a1 >> 0x8\n 79265: u8 [a0 + 0x1] = a1\n 79268: a0 = u64 [sp + 0x48]\n 79271: a1 = u64 [sp + 0x8]\n 79274: u64 [a0] = a1\n 79276: a1 = u64 [sp + 0x38]\n 79279: u64 [a0 + 0x18] = a1\n 79282: a1 = u64 [sp + 0x30]\n 79285: u64 [a0 + 0x8] = a1\n 79288: a1 = u64 [sp + 0x40]\n 79291: u64 [a0 + 0x10] = a1\n 79294: sp = s0 + 0xffffffffffffff10\n 79298: ra = u64 [sp + 0xe8]\n 79302: s0 = u64 [sp + 0xe0]\n 79306: s1 = u64 [sp + 0xd8]\n 79310: sp = sp + 0xf0\n 79314: ret\n      : @1104 (gas: 1)\n 79316: trap\n      : @1105 (gas: 8)\n 79317: u64 [sp + 128] = 0\n 79321: u64 [sp + 120] = 0\n 79324: u64 [sp + 112] = 0\n 79327: a0 = 0x4e487b7100000000\n 79337: a1 = sp + 0x70\n 79340: u64 [sp + 0x88] = a0\n 79344: a0 = 0\n 79346: ra = 988, jump @23\n      : @1106 [@dyn 494] (gas: 7)\n 79353: u64 [sp + 104] = 0\n 79356: u64 [sp + 96] = 0\n 79359: u64 [sp + 80] = 0x41\n 79363: a0 = 0x4\n 79366: a1 = sp + 0x50\n 79369: u64 [sp + 88] = 0\n 79372: ra = 990, jump @23\n      : @1107 [@dyn 495] (gas: 3)\n 79379: a1 = 0x24\n 79382: a0 = 0\n 79384: ra = 992, jump @0\n      : @1108 [@dyn 496] (gas: 6)\n 79391: i32 a1 = a0 + 0\n 79393: a0 = 0x1\n 79396: a2 = 0x24\n 79399: ra = 0x3e2\n 79403: ecalli 10 // 'seal_return'\n 79405: fallthrough\n      : @1109 [@dyn 497] (gas: 16)\n 79406: sp = sp + 0xffffffffffffffe8\n 79409: u64 [sp + 0x10] = ra\n 79412: u64 [sp + 0x8] = s0\n 79415: u64 [sp] = s1\n 79417: a2 = u64 [a1 + 0x10]\n 79420: a3 = u64 [a1 + 0x18]\n 79423: a4 = u64 [a1 + 0x8]\n 79426: s1 = u64 [a1]\n 79428: a3 = a3 | a4\n 79431: a1 = s1 | a2\n 79434: a1 = a1 | a3\n 79437: a1 = a1 >> 0x20\n 79440: a2 = a2 | a3\n 79443: a2 = a2 << 0x20\n 79446: a1 = a1 | a2\n 79449: jump @1113 if a1 != 0\n      : @1110 (gas: 12)\n 79452: a2 = u64 [a0 + 0x18]\n 79455: a3 = u64 [a0 + 0x10]\n 79458: a1 = u64 [a0]\n 79460: a0 = u64 [a0 + 0x8]\n 79463: a4 = a1 | a3\n 79466: a0 = a0 | a2\n 79469: a4 = a4 | a0\n 79472: a4 = a4 >> 0x20\n 79475: a0 = a0 | a3\n 79478: a0 = a0 << 0x20\n 79481: a0 = a0 | a4\n 79484: jump @1113 if a0 != 0\n      : @1111 (gas: 5)\n 79487: s0 = i32 [0x20164]\n 79492: i32 a0 = a1 + 0\n 79494: i32 s1 = s1 + 0\n 79496: a1 = s1\n 79498: ra = 996, jump @0\n      : @1112 [@dyn 498] (gas: 9)\n 79505: i32 a0 = a0 + 0\n 79507: a1 = s1\n 79509: a2 = s0\n 79511: ra = u64 [sp + 0x10]\n 79514: s0 = u64 [sp + 0x8]\n 79517: s1 = u64 [sp]\n 79519: sp = sp + 0x18\n 79522: ecalli 2 // 'call_data_copy'\n 79524: ret\n      : @1113 (gas: 1)\n 79526: trap\n      : @1114 (gas: 21)\n 79527: sp = sp + 0xffffffffffffff20\n 79531: u64 [sp + 0xd8] = ra\n 79535: u64 [sp + 0xd0] = s0\n 79539: u64 [sp + 0xc8] = s1\n 79543: s0 = sp + 0xe0\n 79547: sp = sp & 0xfffffffffffffff0\n 79550: a2 = u64 [a1]\n 79552: a3 = u64 [a1 + 0x8]\n 79555: u64 [sp + 0x28] = a3\n 79558: s1 = u64 [a1 + 0x10]\n 79561: a1 = u64 [a1 + 0x18]\n 79564: u64 [sp + 0x30] = a1\n 79567: u64 [sp + 0x20] = a0\n 79570: u64 [sp + 0x98] = a1\n 79574: u64 [sp + 0x90] = s1\n 79578: u64 [sp + 0x88] = a3\n 79582: a0 = sp + 0xa0\n 79586: a1 = sp + 0x80\n 79590: u64 [sp + 0x38] = a2\n 79593: u64 [sp + 0x80] = a2\n 79597: ra = 998, jump @1099\n      : @1115 [@dyn 499] (gas: 6)\n 79603: a3 = u64 [sp + 0x30]\n 79606: a2 = u64 [sp + 0x28]\n 79609: a0 = s1 | a3\n 79612: a1 = a2 <u 0x1\n 79615: a1 = 0 if a0 != 0\n 79617: jump @1121 if a1 == 0\n      : @1116 (gas: 9)\n 79621: a5 = u64 [sp + 0x38]\n 79624: a0 = a5 | s1\n 79627: a1 = a2 | a3\n 79630: a0 = a0 | a1\n 79633: a0 = a0 >> 0x1b\n 79636: a1 = a1 | s1\n 79639: a1 = a1 << 0x25\n 79642: a0 = a0 | a1\n 79645: jump @1120 if a0 != 0\n      : @1117 (gas: 24)\n 79649: a1 = u64 [sp + 0xa0]\n 79653: a4 = u64 [sp + 0xb8]\n 79657: a3 = u64 [sp + 0xa8]\n 79661: s1 = u64 [sp + 0xb0]\n 79665: a0 = a1 + 0x20\n 79668: u64 [sp + 0x30] = a1\n 79671: a1 = a0 <u a1\n 79674: a2 = a3 + a1\n 79677: u64 [sp + 0x28] = a3\n 79680: a3 = a2 <u a3\n 79683: a3 = a1 if a1 == 0\n 79686: a3 = a3 + s1\n 79689: u64 [sp + 0x10] = s1\n 79692: a1 = a3 <u s1\n 79695: u64 [sp + 0x18] = a4\n 79698: a1 = a1 + a4\n 79701: a4 = a0 | a3\n 79704: a1 = a1 | a2\n 79707: a4 = a4 | a1\n 79710: a4 = a4 >> 0x20\n 79713: a1 = a1 | a3\n 79716: a1 = a1 << 0x20\n 79719: a1 = a1 | a4\n 79722: jump @1120 if a1 != 0\n      : @1118 (gas: 6)\n 79725: a1 = i32 [0x20164]\n 79730: u64 [sp + 0x8] = a1\n 79733: i32 s1 = a5 << 0x5\n 79736: i32 a0 = a0 + 0\n 79738: a1 = s1\n 79740: ra = 1000, jump @0\n      : @1119 [@dyn 500] (gas: 19)\n 79747: i32 a0 = a0 + 0\n 79749: a1 = s1\n 79751: a2 = u64 [sp + 0x8]\n 79754: ecalli 2 // 'call_data_copy'\n 79756: a0 = u64 [sp + 0x20]\n 79759: a1 = u64 [sp + 0x18]\n 79762: u64 [a0 + 0x18] = a1\n 79765: a1 = u64 [sp + 0x10]\n 79768: u64 [a0 + 0x10] = a1\n 79771: a1 = u64 [sp + 0x28]\n 79774: u64 [a0 + 0x8] = a1\n 79777: a1 = u64 [sp + 0x30]\n 79780: u64 [a0] = a1\n 79782: sp = s0 + 0xffffffffffffff20\n 79786: ra = u64 [sp + 0xd8]\n 79790: s0 = u64 [sp + 0xd0]\n 79794: s1 = u64 [sp + 0xc8]\n 79798: sp = sp + 0xe0\n 79802: ret\n      : @1120 (gas: 1)\n 79804: trap\n      : @1121 (gas: 8)\n 79805: u64 [sp + 112] = 0\n 79808: u64 [sp + 104] = 0\n 79811: u64 [sp + 96] = 0\n 79814: a0 = 0x4e487b7100000000\n 79824: a1 = sp + 0x60\n 79827: u64 [sp + 0x78] = a0\n 79830: a0 = 0\n 79832: ra = 1002, jump @23\n      : @1122 [@dyn 501] (gas: 7)\n 79839: u64 [sp + 88] = 0\n 79842: u64 [sp + 80] = 0\n 79845: u64 [sp + 64] = 0x41\n 79849: a0 = 0x4\n 79852: a1 = sp + 0x40\n 79855: u64 [sp + 72] = 0\n 79858: ra = 1004, jump @23\n      : @1123 [@dyn 502] (gas: 3)\n 79865: a1 = 0x24\n 79868: a0 = 0\n 79870: ra = 1006, jump @0\n      : @1124 [@dyn 503] (gas: 6)\n 79877: i32 a1 = a0 + 0\n 79879: a0 = 0x1\n 79882: a2 = 0x24\n 79885: ra = 0x3f0\n 79889: ecalli 10 // 'seal_return'\n 79891: fallthrough\n      : @1125 [@dyn 504] (gas: 12)\n 79892: a2 = u64 [a0 + 0x10]\n 79895: a3 = u64 [a0 + 0x18]\n 79898: a4 = u64 [a0 + 0x8]\n 79901: a0 = u64 [a0]\n 79903: a3 = a3 | a4\n 79906: a4 = a0 | a2\n 79909: a4 = a4 | a3\n 79912: a4 = a4 >> 0x20\n 79915: a2 = a2 | a3\n 79918: a2 = a2 << 0x20\n 79921: a2 = a2 | a4\n 79924: jump @1128 if a2 != 0\n      : @1126 (gas: 13)\n 79928: sp = sp + 0xffffffffffffffe0\n 79931: u64 [sp + 0x18] = ra\n 79934: u64 [sp + 0x10] = s0\n 79937: u64 [sp + 0x8] = s1\n 79940: a2 = u64 [a1 + 0x10]\n 79943: a3 = u64 [a1 + 0x8]\n 79946: u64 [sp] = a3\n 79948: s1 = u64 [a1]\n 79950: a2 = a2 << 0x20\n 79953: s0 = a2 >> 0x20\n 79956: i32 a0 = a0 + 0\n 79958: a1 = 0x20\n 79961: ra = 1010, jump @0\n      : @1127 [@dyn 505] (gas: 59)\n 79968: a1 = reverse s0\n 79970: a2 = u64 [sp]\n 79972: a2 = reverse a2\n 79974: a3 = reverse s1\n 79976: a4 = a3 >> 0x38\n 79979: u8 [a0 + 0x1f] = a4\n 79982: a4 = a3 >> 0x30\n 79985: u8 [a0 + 0x1e] = a4\n 79988: a4 = a3 >> 0x28\n 79991: u8 [a0 + 0x1d] = a4\n 79994: a4 = a3 >> 0x20\n 79997: u8 [a0 + 0x1c] = a4\n 80000: a4 = a3 >> 0x18\n 80003: u8 [a0 + 0x1b] = a4\n 80006: a4 = a3 >> 0x10\n 80009: u8 [a0 + 0x1a] = a4\n 80012: a4 = a3 >> 0x8\n 80015: u8 [a0 + 0x19] = a4\n 80018: u8 [a0 + 0x18] = a3\n 80021: u8 [a0 + 0x10] = a2\n 80024: u8 [a0 + 11] = 0\n 80027: u8 [a0 + 10] = 0\n 80030: u8 [a0 + 9] = 0\n 80033: u8 [a0 + 7] = 0\n 80036: u8 [a0 + 6] = 0\n 80039: u8 [a0 + 5] = 0\n 80042: u8 [a0 + 4] = 0\n 80045: u8 [a0 + 3] = 0\n 80048: u8 [a0 + 2] = 0\n 80051: u8 [a0 + 1] = 0\n 80054: u8 [a0 + 0] = 0\n 80056: a3 = a2 >> 0x38\n 80059: u8 [a0 + 0x17] = a3\n 80062: a3 = a2 >> 0x30\n 80065: u8 [a0 + 0x16] = a3\n 80068: a3 = a2 >> 0x28\n 80071: u8 [a0 + 0x15] = a3\n 80074: a3 = a2 >> 0x20\n 80077: u8 [a0 + 0x14] = a3\n 80080: a3 = a2 >> 0x18\n 80083: u8 [a0 + 0x13] = a3\n 80086: a3 = a2 >> 0x10\n 80089: u8 [a0 + 0x12] = a3\n 80092: a2 = a2 >> 0x8\n 80095: u8 [a0 + 0x11] = a2\n 80098: u8 [a0 + 0x8] = a1\n 80101: a2 = a1 >> 0x38\n 80104: u8 [a0 + 0xf] = a2\n 80107: a2 = a1 >> 0x30\n 80110: u8 [a0 + 0xe] = a2\n 80113: a2 = a1 >> 0x28\n 80116: u8 [a0 + 0xd] = a2\n 80119: a1 = a1 >> 0x20\n 80122: u8 [a0 + 0xc] = a1\n 80125: ra = u64 [sp + 0x18]\n 80128: s0 = u64 [sp + 0x10]\n 80131: s1 = u64 [sp + 0x8]\n 80134: sp = sp + 0x20\n 80137: ret\n      : @1128 (gas: 1)\n 80139: trap\n      : @1129 [@dyn 506] (gas: 43)\n 80140: a3 = u64 [sp + 0x440]\n 80144: a2 = u64 [sp + 0x448]\n 80148: s1 = 0\n 80150: u64 [sp + 408] = 0\n 80154: u64 [sp + 400] = 0\n 80158: u64 [sp + 368] = 0\n 80162: u64 [sp + 352] = 0\n 80166: u64 [sp + 392] = 0\n 80170: u64 [sp + 384] = 0\n 80174: u64 [sp + 376] = 0\n 80178: a0 = a3 + 0x20\n 80181: u64 [sp + 0x118] = a0\n 80185: a0 = a0 <u a3\n 80188: a1 = a2 + a0\n 80191: u64 [sp + 0x110] = a1\n 80195: u64 [sp + 0x30] = a2\n 80198: a1 = a1 <u a2\n 80201: a1 = a0 if a0 == 0\n 80204: a0 = u64 [sp + 0x148]\n 80208: a0 = reverse a0\n 80210: u64 [sp + 0x50] = a0\n 80213: a0 = u64 [sp + 0x150]\n 80217: a0 = reverse a0\n 80219: u64 [sp + 0x48] = a0\n 80222: a0 = u64 [sp + 0x450]\n 80226: a2 = u64 [sp + 0x158]\n 80230: a2 = reverse a2\n 80232: u64 [sp + 0x40] = a2\n 80235: a2 = u64 [sp + 0x458]\n 80239: a4 = u64 [sp + 0x168]\n 80243: a4 = reverse a4\n 80245: u64 [sp + 0x38] = a4\n 80248: a1 = a1 + a0\n 80251: u64 [sp + 0x100] = a1\n 80255: u64 [sp + 0x20] = a0\n 80258: a0 = a1 <u a0\n 80261: u64 [sp + 0x18] = a2\n 80264: a0 = a0 + a2\n 80267: u64 [sp + 0xf8] = a0\n 80271: u64 [sp + 0x28] = a3\n 80274: i32 a0 = a3 + 0\n 80276: u64 [sp + 0x108] = a0\n 80280: jump @1132\n      : @1130 (gas: 4)\n 80282: a0 = u64 [sp + 0x188]\n 80286: a1 = u64 [sp + 0x178]\n 80290: a2 = u64 [sp + 0x180]\n 80294: fallthrough\n      : @1131 (gas: 19)\n 80295: u64 [sp + 0x180] = a2\n 80299: u64 [sp + 0x178] = a1\n 80303: u64 [sp + 0x188] = a0\n 80307: s1 = u64 [sp + 0x168]\n 80311: s1 = s1 + 0x1\n 80314: a0 = s1 <u 0x1\n 80317: a1 = u64 [sp + 0x198]\n 80321: a1 = a1 + a0\n 80324: u64 [sp + 0x198] = a1\n 80328: a0 = s1 | a1\n 80331: a0 = a0 <u 0x1\n 80334: a1 = u64 [sp + 0x190]\n 80338: a0 = a0 + a1\n 80341: a1 = a0 <u a1\n 80344: a2 = u64 [sp + 0x170]\n 80348: a2 = a2 + a1\n 80351: u64 [sp + 0x170] = a2\n 80355: u64 [sp + 0x190] = a0\n 80359: fallthrough\n      : @1132 (gas: 16)\n 80360: u64 [sp + 1144] = 0\n 80364: u64 [sp + 1136] = 0\n 80368: u64 [sp + 1128] = 0\n 80372: u64 [sp + 1120] = 0x3\n 80377: u64 [sp + 1176] = 0\n 80381: u64 [sp + 1168] = 0\n 80385: u64 [sp + 1160] = 0\n 80389: u64 [sp + 1152] = 0\n 80393: u32 [sp + 1184] = 0x20\n 80398: a2 = 0xffffffffffffffff\n 80401: a0 = 0\n 80403: a1 = u64 [sp + 0x68]\n 80406: a3 = u64 [sp + 0x60]\n 80409: a4 = u64 [sp + 0x58]\n 80412: ecalli 7 // 'get_storage'\n 80414: fallthrough\n      : @1133 (gas: 19)\n 80415: a0 = u64 [sp + 0x498]\n 80419: t1 = u64 [sp + 0x480]\n 80423: t2 = u64 [sp + 0x490]\n 80427: a1 = u64 [sp + 0x488]\n 80431: a3 = u64 [sp + 0x170]\n 80435: a4 = a3 ^ a0\n 80438: a0 = a3 <u a0\n 80441: a2 = u64 [sp + 0x190]\n 80445: a5 = a2 <u t2\n 80448: a5 = a0 if a4 != 0\n 80451: a0 = u64 [sp + 0x198]\n 80455: t0 = a0 ^ a1\n 80458: a0 = a0 <u a1\n 80461: a1 = s1 <u t1\n 80464: a1 = a0 if t0 != 0\n 80467: a0 = a2 ^ t2\n 80470: a0 = a0 | a4\n 80473: a1 = a5 if a0 != 0\n 80476: jump @1151 if a1 == 0\n      : @1134 (gas: 5)\n 80480: a1 = 0x20\n 80483: a0 = 0\n 80485: u64 [sp + 0x168] = s1\n 80489: s1 = a3\n 80491: ra = 1014, jump @0\n      : @1135 [@dyn 507] (gas: 67)\n 80498: a3 = u64 [sp + 0x48]\n 80501: u8 [a0 + 0x10] = a3\n 80504: a2 = u64 [sp + 0x40]\n 80507: a1 = a2 >> 0x38\n 80510: u8 [a0 + 0xf] = a1\n 80513: a1 = a2 >> 0x30\n 80516: u8 [a0 + 0xe] = a1\n 80519: a1 = a2 >> 0x28\n 80522: u8 [a0 + 0xd] = a1\n 80525: a1 = a2 >> 0x20\n 80528: u8 [a0 + 0xc] = a1\n 80531: a1 = a2 >> 0x18\n 80534: u8 [a0 + 0xb] = a1\n 80537: a1 = a2 >> 0x10\n 80540: u8 [a0 + 0xa] = a1\n 80543: a1 = a2 >> 0x8\n 80546: u8 [a0 + 0x9] = a1\n 80549: u8 [a0 + 0x8] = a2\n 80552: a2 = u64 [sp + 0x38]\n 80555: a1 = a2 >> 0x38\n 80558: u8 [a0 + 0x7] = a1\n 80561: a1 = a2 >> 0x30\n 80564: u8 [a0 + 0x6] = a1\n 80567: a1 = a2 >> 0x28\n 80570: u8 [a0 + 0x5] = a1\n 80573: a1 = a2 >> 0x20\n 80576: u8 [a0 + 0x4] = a1\n 80579: a1 = a2 >> 0x18\n 80582: u8 [a0 + 0x3] = a1\n 80585: a1 = a2 >> 0x10\n 80588: u8 [a0 + 0x2] = a1\n 80591: a1 = a2 >> 0x8\n 80594: u8 [a0 + 0x1] = a1\n 80597: u8 [a0] = a2\n 80599: a2 = u64 [sp + 0x50]\n 80602: u8 [a0 + 0x18] = a2\n 80605: a1 = a3 >> 0x38\n 80608: u8 [a0 + 0x17] = a1\n 80611: a1 = a3 >> 0x30\n 80614: u8 [a0 + 0x16] = a1\n 80617: a1 = a3 >> 0x28\n 80620: u8 [a0 + 0x15] = a1\n 80623: a1 = a3 >> 0x20\n 80626: u8 [a0 + 0x14] = a1\n 80629: a1 = a3 >> 0x18\n 80632: u8 [a0 + 0x13] = a1\n 80635: a1 = a3 >> 0x10\n 80638: u8 [a0 + 0x12] = a1\n 80641: a1 = a3 >> 0x8\n 80644: u8 [a0 + 0x11] = a1\n 80647: a1 = a2 >> 0x38\n 80650: u8 [a0 + 0x1f] = a1\n 80653: a1 = a2 >> 0x30\n 80656: u8 [a0 + 0x1e] = a1\n 80659: a1 = a2 >> 0x28\n 80662: u8 [a0 + 0x1d] = a1\n 80665: a1 = a2 >> 0x20\n 80668: u8 [a0 + 0x1c] = a1\n 80671: a1 = a2 >> 0x18\n 80674: u8 [a0 + 0x1b] = a1\n 80677: a1 = a2 >> 0x10\n 80680: u8 [a0 + 0x1a] = a1\n 80683: a1 = a2 >> 0x8\n 80686: u8 [a0 + 0x19] = a1\n 80689: a0 = 0x20\n 80692: a1 = 0x20\n 80695: ra = 1016, jump @0\n      : @1136 [@dyn 508] (gas: 35)\n 80702: u8 [a0 + 31] = 0x1\n 80706: u8 [a0 + 30] = 0\n 80709: u8 [a0 + 29] = 0\n 80712: u8 [a0 + 28] = 0\n 80715: u8 [a0 + 27] = 0\n 80718: u8 [a0 + 26] = 0\n 80721: u8 [a0 + 25] = 0\n 80724: u8 [a0 + 24] = 0\n 80727: u8 [a0 + 23] = 0\n 80730: u8 [a0 + 22] = 0\n 80733: u8 [a0 + 21] = 0\n 80736: u8 [a0 + 20] = 0\n 80739: u8 [a0 + 19] = 0\n 80742: u8 [a0 + 18] = 0\n 80745: u8 [a0 + 17] = 0\n 80748: u8 [a0 + 16] = 0\n 80751: u8 [a0 + 15] = 0\n 80754: u8 [a0 + 14] = 0\n 80757: u8 [a0 + 13] = 0\n 80760: u8 [a0 + 12] = 0\n 80763: u8 [a0 + 11] = 0\n 80766: u8 [a0 + 10] = 0\n 80769: u8 [a0 + 9] = 0\n 80772: u8 [a0 + 8] = 0\n 80775: u8 [a0 + 7] = 0\n 80778: u8 [a0 + 6] = 0\n 80781: u8 [a0 + 5] = 0\n 80784: u8 [a0 + 4] = 0\n 80787: u8 [a0 + 3] = 0\n 80790: u8 [a0 + 2] = 0\n 80793: u8 [a0 + 1] = 0\n 80796: u8 [a0 + 0] = 0\n 80798: a1 = 0x40\n 80801: a0 = 0\n 80803: ra = 1018, jump @0\n      : @1137 [@dyn 509] (gas: 27)\n 80810: i32 a0 = a0 + 0\n 80812: i32 a2 = sp + 0x480\n 80816: a1 = 0x40\n 80819: ecalli 8 // 'hash_keccak_256'\n 80821: a0 = u64 [sp + 0x480]\n 80825: u64 [sp + 0x158] = a0\n 80829: a0 = u64 [sp + 0x488]\n 80833: u64 [sp + 0x150] = a0\n 80837: a0 = u64 [sp + 0x490]\n 80841: u64 [sp + 0x148] = a0\n 80845: a0 = u64 [sp + 0x498]\n 80849: u64 [sp + 0x140] = a0\n 80853: u64 [sp + 0x2f8] = s1\n 80857: a0 = u64 [sp + 0x190]\n 80861: u64 [sp + 0x2f0] = a0\n 80865: a0 = u64 [sp + 0x198]\n 80869: u64 [sp + 0x2e8] = a0\n 80873: a0 = u64 [sp + 0x168]\n 80877: u64 [sp + 0x2e0] = a0\n 80881: u64 [sp + 792] = 0\n 80885: u64 [sp + 784] = 0\n 80889: u64 [sp + 776] = 0\n 80893: a0 = sp + 0x320\n 80897: a1 = sp + 0x300\n 80901: a2 = sp + 0x2e0\n 80905: u64 [sp + 768] = 0x3\n 80910: ra = 1020, jump @270\n      : @1138 [@dyn 510] (gas: 213)\n 80917: a0 = u64 [sp + 0x358]\n 80921: u64 [sp + 0x138] = a0\n 80925: a0 = u64 [sp + 0x350]\n 80929: u64 [sp + 0x130] = a0\n 80933: s1 = u64 [sp + 0x348]\n 80937: a0 = u64 [sp + 0x340]\n 80941: u64 [sp + 0x128] = a0\n 80945: a0 = u64 [sp + 0x338]\n 80949: a1 = u64 [sp + 0x330]\n 80953: a2 = u64 [sp + 0x328]\n 80957: a3 = u64 [sp + 0x320]\n 80961: u64 [sp + 0x478] = a0\n 80965: u64 [sp + 0x470] = a1\n 80969: u64 [sp + 0x468] = a2\n 80973: u64 [sp + 0x460] = a3\n 80977: u64 [sp + 1176] = 0\n 80981: u64 [sp + 1168] = 0\n 80985: u64 [sp + 1160] = 0\n 80989: u64 [sp + 1152] = 0\n 80993: u32 [sp + 1184] = 0x20\n 80998: i32 a1 = sp + 0x460\n 81002: i32 a3 = sp + 0x480\n 81006: i32 a4 = sp + 0x4a0\n 81010: a2 = 0xffffffffffffffff\n 81013: a0 = 0\n 81015: ecalli 7 // 'get_storage'\n 81017: a1 = u64 [sp + 0x480]\n 81021: a2 = u64 [sp + 0x488]\n 81025: t0 = u64 [sp + 0x128]\n 81029: a0 = t0 >> 0x3d\n 81032: a3 = s1 << 0x3\n 81035: a3 = a3 | a0\n 81038: s1 = s1 >> 0x3d\n 81041: a4 = u64 [sp + 0x130]\n 81045: a0 = a4 << 0x3\n 81048: s1 = s1 | a0\n 81051: a0 = a4 >> 0x3d\n 81054: a4 = u64 [sp + 0x138]\n 81058: a4 = a4 << 0x3\n 81061: a4 = a4 | a0\n 81064: a0 = t0 << 0x3\n 81067: a5 = a3 >u 0\n 81069: a0 = a0 <u 0x100\n 81073: a0 = a0 ^ 0x1\n 81076: a0 = a5 if a3 != 0\n 81079: a3 = a4 >u 0\n 81081: a5 = s1 >u 0\n 81083: a5 = a3 if a4 != 0\n 81086: a3 = u64 [sp + 0x490]\n 81090: s1 = s1 | a4\n 81093: a4 = u64 [sp + 0x498]\n 81097: a0 = a5 if s1 != 0\n 81100: u8 [sp + 735] = 0\n 81104: u8 [sp + 734] = 0\n 81108: u8 [sp + 733] = 0\n 81112: u8 [sp + 732] = 0\n 81116: u8 [sp + 731] = 0\n 81120: u8 [sp + 730] = 0\n 81124: u8 [sp + 729] = 0\n 81128: u8 [sp + 728] = 0\n 81132: u8 [sp + 727] = 0\n 81136: u8 [sp + 726] = 0\n 81140: u8 [sp + 725] = 0\n 81144: u8 [sp + 724] = 0\n 81148: u8 [sp + 723] = 0\n 81152: u8 [sp + 722] = 0\n 81156: u8 [sp + 721] = 0\n 81160: u8 [sp + 720] = 0\n 81164: u8 [sp + 719] = 0\n 81168: u8 [sp + 718] = 0\n 81172: u8 [sp + 717] = 0\n 81176: u8 [sp + 716] = 0\n 81180: u8 [sp + 715] = 0\n 81184: u8 [sp + 714] = 0\n 81188: u8 [sp + 713] = 0\n 81192: u8 [sp + 712] = 0\n 81196: u8 [sp + 711] = 0\n 81200: u8 [sp + 710] = 0\n 81204: u8 [sp + 709] = 0\n 81208: u8 [sp + 708] = 0\n 81212: u8 [sp + 707] = 0\n 81216: u8 [sp + 706] = 0\n 81220: u8 [sp + 705] = 0\n 81224: u8 [sp + 704] = 0\n 81228: u8 [sp + 0x2b8] = a4\n 81232: u8 [sp + 0x2b0] = a3\n 81236: u8 [sp + 0x2a8] = a2\n 81240: u8 [sp + 0x2a0] = a1\n 81244: a5 = a4 >> 0x38\n 81247: u8 [sp + 0x2bf] = a5\n 81251: a5 = a4 >> 0x30\n 81254: u8 [sp + 0x2be] = a5\n 81258: a5 = a4 >> 0x28\n 81261: u8 [sp + 0x2bd] = a5\n 81265: a5 = a4 >> 0x20\n 81268: u8 [sp + 0x2bc] = a5\n 81272: a5 = a4 >> 0x18\n 81275: u8 [sp + 0x2bb] = a5\n 81279: a5 = a4 >> 0x10\n 81282: u8 [sp + 0x2ba] = a5\n 81286: a4 = a4 >> 0x8\n 81289: u8 [sp + 0x2b9] = a4\n 81293: a4 = a3 >> 0x38\n 81296: u8 [sp + 0x2b7] = a4\n 81300: a4 = a3 >> 0x30\n 81303: u8 [sp + 0x2b6] = a4\n 81307: a4 = a3 >> 0x28\n 81310: u8 [sp + 0x2b5] = a4\n 81314: a4 = a3 >> 0x20\n 81317: u8 [sp + 0x2b4] = a4\n 81321: a4 = a3 >> 0x18\n 81324: u8 [sp + 0x2b3] = a4\n 81328: a4 = a3 >> 0x10\n 81331: u8 [sp + 0x2b2] = a4\n 81335: a3 = a3 >> 0x8\n 81338: u8 [sp + 0x2b1] = a3\n 81342: a3 = a2 >> 0x38\n 81345: u8 [sp + 0x2af] = a3\n 81349: a3 = a2 >> 0x30\n 81352: u8 [sp + 0x2ae] = a3\n 81356: a3 = a2 >> 0x28\n 81359: u8 [sp + 0x2ad] = a3\n 81363: a3 = a2 >> 0x20\n 81366: u8 [sp + 0x2ac] = a3\n 81370: a3 = a2 >> 0x18\n 81373: u8 [sp + 0x2ab] = a3\n 81377: a3 = a2 >> 0x10\n 81380: u8 [sp + 0x2aa] = a3\n 81384: a2 = a2 >> 0x8\n 81387: u8 [sp + 0x2a9] = a2\n 81391: a2 = a1 >> 0x38\n 81394: u8 [sp + 0x2a7] = a2\n 81398: a2 = a1 >> 0x30\n 81401: u8 [sp + 0x2a6] = a2\n 81405: a2 = a1 >> 0x28\n 81408: u8 [sp + 0x2a5] = a2\n 81412: a2 = a1 >> 0x20\n 81415: u8 [sp + 0x2a4] = a2\n 81419: a2 = a1 >> 0x18\n 81422: u8 [sp + 0x2a3] = a2\n 81426: a2 = a1 >> 0x10\n 81429: u8 [sp + 0x2a2] = a2\n 81433: a1 = a1 >> 0x8\n 81436: u8 [sp + 0x2a1] = a1\n 81440: a1 = t0 & 0x1f\n 81443: a2 = sp + 0x2a0\n 81447: a1 = a1 + a2\n 81450: a2 = u8 [a1 + 0x1]\n 81453: a3 = u8 [a1]\n 81455: a4 = u8 [a1 + 0x2]\n 81458: a5 = u8 [a1 + 0x3]\n 81461: a2 = a2 << 0x8\n 81464: a2 = a2 | a3\n 81467: a4 = a4 << 0x10\n 81470: a5 = a5 << 0x18\n 81473: a4 = a4 | a5\n 81476: a2 = a2 | a4\n 81479: a3 = u8 [a1 + 0x5]\n 81482: a4 = u8 [a1 + 0x4]\n 81485: a5 = u8 [a1 + 0x6]\n 81488: s1 = u8 [a1 + 0x7]\n 81491: a3 = a3 << 0x8\n 81494: a3 = a3 | a4\n 81497: a5 = a5 << 0x10\n 81500: s1 = s1 << 0x18\n 81503: a5 = a5 | s1\n 81506: a3 = a3 | a5\n 81509: a3 = a3 << 0x20\n 81512: t0 = a3 | a2\n 81515: a3 = u8 [a1 + 0x9]\n 81518: a4 = u8 [a1 + 0x8]\n 81521: a5 = u8 [a1 + 0xa]\n 81524: s1 = u8 [a1 + 0xb]\n 81527: a3 = a3 << 0x8\n 81530: a3 = a3 | a4\n 81533: a5 = a5 << 0x10\n 81536: s1 = s1 << 0x18\n 81539: a5 = a5 | s1\n 81542: a3 = a3 | a5\n 81545: a4 = u8 [a1 + 0xd]\n 81548: a5 = u8 [a1 + 0xc]\n 81551: s1 = u8 [a1 + 0xe]\n 81554: a2 = u8 [a1 + 0xf]\n 81557: a4 = a4 << 0x8\n 81560: a4 = a4 | a5\n 81563: s1 = s1 << 0x10\n 81566: a2 = a2 << 0x18\n 81569: a2 = a2 | s1\n 81572: a2 = a2 | a4\n 81575: a2 = a2 << 0x20\n 81578: a2 = a2 | a3\n 81581: a3 = u8 [a1 + 0x11]\n 81584: a4 = u8 [a1 + 0x10]\n 81587: a5 = u8 [a1 + 0x12]\n 81590: a1 = u8 [a1 + 0x13]\n 81593: a3 = a3 << 0x8\n 81596: a3 = a3 | a4\n 81599: a5 = a5 << 0x10\n 81602: a1 = a1 << 0x18\n 81605: a1 = a1 | a5\n 81608: a1 = a1 | a3\n 81611: s1 = a2 & 0xffffffffffffffff\n 81614: a3 = t0 & 0xffffffffffffffff\n 81617: a2 = u64 [sp + 0x120]\n 81621: a1 = a1 & a2\n 81624: a1 = 0 if a0 != 0\n 81626: u64 [sp + 0x138] = a1\n 81630: a3 = 0 if a0 != 0\n 81632: u64 [sp + 0x130] = a3\n 81636: s1 = 0 if a0 != 0\n 81638: a1 = 0x20\n 81641: a0 = 0\n 81643: ra = 1022, jump @0\n      : @1139 [@dyn 511] (gas: 58)\n 81650: a1 = reverse s1\n 81652: a2 = u64 [sp + 0x130]\n 81656: a2 = reverse a2\n 81658: a3 = u64 [sp + 0x138]\n 81662: a3 = reverse a3\n 81664: u8 [a0 + 11] = 0\n 81667: u8 [a0 + 10] = 0\n 81670: u8 [a0 + 9] = 0\n 81673: u8 [a0 + 7] = 0\n 81676: u8 [a0 + 6] = 0\n 81679: u8 [a0 + 5] = 0\n 81682: u8 [a0 + 4] = 0\n 81685: u8 [a0 + 3] = 0\n 81688: u8 [a0 + 2] = 0\n 81691: u8 [a0 + 1] = 0\n 81694: u8 [a0 + 0] = 0\n 81696: u8 [a0 + 0x8] = a3\n 81699: a4 = a3 >> 0x38\n 81702: u8 [a0 + 0xf] = a4\n 81705: a4 = a3 >> 0x30\n 81708: u8 [a0 + 0xe] = a4\n 81711: a4 = a3 >> 0x28\n 81714: u8 [a0 + 0xd] = a4\n 81717: a3 = a3 >> 0x20\n 81720: u8 [a0 + 0xc] = a3\n 81723: u8 [a0 + 0x18] = a2\n 81726: u8 [a0 + 0x10] = a1\n 81729: a3 = a2 >> 0x38\n 81732: u8 [a0 + 0x1f] = a3\n 81735: a3 = a2 >> 0x30\n 81738: u8 [a0 + 0x1e] = a3\n 81741: a3 = a2 >> 0x28\n 81744: u8 [a0 + 0x1d] = a3\n 81747: a3 = a2 >> 0x20\n 81750: u8 [a0 + 0x1c] = a3\n 81753: a3 = a2 >> 0x18\n 81756: u8 [a0 + 0x1b] = a3\n 81759: a3 = a2 >> 0x10\n 81762: u8 [a0 + 0x1a] = a3\n 81765: a2 = a2 >> 0x8\n 81768: u8 [a0 + 0x19] = a2\n 81771: a2 = a1 >> 0x38\n 81774: u8 [a0 + 0x17] = a2\n 81777: a2 = a1 >> 0x30\n 81780: u8 [a0 + 0x16] = a2\n 81783: a2 = a1 >> 0x28\n 81786: u8 [a0 + 0x15] = a2\n 81789: a2 = a1 >> 0x20\n 81792: u8 [a0 + 0x14] = a2\n 81795: a2 = a1 >> 0x18\n 81798: u8 [a0 + 0x13] = a2\n 81801: a2 = a1 >> 0x10\n 81804: u8 [a0 + 0x12] = a2\n 81807: a1 = a1 >> 0x8\n 81810: u8 [a0 + 0x11] = a1\n 81813: a0 = 0x20\n 81816: a1 = 0x20\n 81819: ra = 1024, jump @0\n      : @1140 [@dyn 512] (gas: 67)\n 81826: a2 = u64 [sp + 0x140]\n 81830: a1 = a2 >> 0x38\n 81833: u8 [a0 + 0x1f] = a1\n 81836: a1 = a2 >> 0x30\n 81839: u8 [a0 + 0x1e] = a1\n 81842: a1 = a2 >> 0x28\n 81845: u8 [a0 + 0x1d] = a1\n 81848: a1 = a2 >> 0x20\n 81851: u8 [a0 + 0x1c] = a1\n 81854: a1 = a2 >> 0x18\n 81857: u8 [a0 + 0x1b] = a1\n 81860: a1 = a2 >> 0x10\n 81863: u8 [a0 + 0x1a] = a1\n 81866: a1 = a2 >> 0x8\n 81869: u8 [a0 + 0x19] = a1\n 81872: u8 [a0 + 0x18] = a2\n 81875: a2 = u64 [sp + 0x148]\n 81879: a1 = a2 >> 0x38\n 81882: u8 [a0 + 0x17] = a1\n 81885: a1 = a2 >> 0x30\n 81888: u8 [a0 + 0x16] = a1\n 81891: a1 = a2 >> 0x28\n 81894: u8 [a0 + 0x15] = a1\n 81897: a1 = a2 >> 0x20\n 81900: u8 [a0 + 0x14] = a1\n 81903: a1 = a2 >> 0x18\n 81906: u8 [a0 + 0x13] = a1\n 81909: a1 = a2 >> 0x10\n 81912: u8 [a0 + 0x12] = a1\n 81915: a1 = a2 >> 0x8\n 81918: u8 [a0 + 0x11] = a1\n 81921: u8 [a0 + 0x10] = a2\n 81924: a2 = u64 [sp + 0x150]\n 81928: a1 = a2 >> 0x38\n 81931: u8 [a0 + 0xf] = a1\n 81934: a1 = a2 >> 0x30\n 81937: u8 [a0 + 0xe] = a1\n 81940: a1 = a2 >> 0x28\n 81943: u8 [a0 + 0xd] = a1\n 81946: a1 = a2 >> 0x20\n 81949: u8 [a0 + 0xc] = a1\n 81952: a1 = a2 >> 0x18\n 81955: u8 [a0 + 0xb] = a1\n 81958: a1 = a2 >> 0x10\n 81961: u8 [a0 + 0xa] = a1\n 81964: a1 = a2 >> 0x8\n 81967: u8 [a0 + 0x9] = a1\n 81970: u8 [a0 + 0x8] = a2\n 81973: a2 = u64 [sp + 0x158]\n 81977: a1 = a2 >> 0x38\n 81980: u8 [a0 + 0x7] = a1\n 81983: a1 = a2 >> 0x30\n 81986: u8 [a0 + 0x6] = a1\n 81989: a1 = a2 >> 0x28\n 81992: u8 [a0 + 0x5] = a1\n 81995: a1 = a2 >> 0x20\n 81998: u8 [a0 + 0x4] = a1\n 82001: a1 = a2 >> 0x18\n 82004: u8 [a0 + 0x3] = a1\n 82007: a1 = a2 >> 0x10\n 82010: u8 [a0 + 0x2] = a1\n 82013: a1 = a2 >> 0x8\n 82016: u8 [a0 + 0x1] = a1\n 82019: u8 [a0] = a2\n 82021: a1 = 0x40\n 82024: a0 = 0\n 82026: ra = 1026, jump @0\n      : @1141 [@dyn 513] (gas: 28)\n 82033: i32 a0 = a0 + 0\n 82035: i32 a2 = sp + 0x480\n 82039: a1 = 0x40\n 82042: ecalli 8 // 'hash_keccak_256'\n 82044: a0 = u64 [sp + 0x498]\n 82048: a1 = u64 [sp + 0x490]\n 82052: a2 = u64 [sp + 0x488]\n 82056: a3 = u64 [sp + 0x480]\n 82060: a0 = reverse a0\n 82062: a1 = reverse a1\n 82064: a2 = reverse a2\n 82066: a3 = reverse a3\n 82068: u64 [sp + 0x478] = a3\n 82072: u64 [sp + 0x470] = a2\n 82076: u64 [sp + 0x468] = a1\n 82080: u64 [sp + 0x460] = a0\n 82084: u64 [sp + 1176] = 0\n 82088: u64 [sp + 1168] = 0\n 82092: u64 [sp + 1160] = 0\n 82096: u64 [sp + 1152] = 0\n 82100: u32 [sp + 1184] = 0x20\n 82105: i32 a1 = sp + 0x460\n 82109: i32 a3 = sp + 0x480\n 82113: i32 a4 = sp + 0x4a0\n 82117: a2 = 0xffffffffffffffff\n 82120: a0 = 0\n 82122: ecalli 7 // 'get_storage'\n 82124: fallthrough\n      : @1142 (gas: 2)\n 82125: a0 = u8 [sp + 0x480]\n 82129: jump @1130 if a0 == 0\n      : @1143 (gas: 28)\n 82133: a0 = u64 [sp + 0x28]\n 82136: a2 = u64 [sp + 0x20]\n 82139: a0 = a0 | a2\n 82142: a1 = u64 [sp + 0x30]\n 82145: a3 = u64 [sp + 0x18]\n 82148: a1 = a1 | a3\n 82151: a0 = a0 | a1\n 82154: a0 = a0 >> 0x20\n 82157: a1 = a1 | a2\n 82160: a1 = a1 << 0x20\n 82163: a0 = a0 | a1\n 82166: u64 [sp + 0x158] = a0\n 82170: a0 = u64 [sp + 0x168]\n 82174: u64 [sp + 0x220] = a0\n 82178: u64 [sp + 600] = 0\n 82182: u64 [sp + 592] = 0\n 82186: u64 [sp + 584] = 0\n 82190: u64 [sp + 576] = 0x3\n 82195: a0 = u64 [sp + 0x198]\n 82199: u64 [sp + 0x228] = a0\n 82203: a0 = u64 [sp + 0x190]\n 82207: u64 [sp + 0x230] = a0\n 82211: a0 = sp + 0x260\n 82215: a1 = sp + 0x240\n 82219: a2 = sp + 0x220\n 82223: a3 = u64 [sp + 0x170]\n 82227: u64 [sp + 0x238] = a3\n 82231: ra = 1028, jump @270\n      : @1144 [@dyn 514] (gas: 27)\n 82238: a0 = u64 [sp + 0x298]\n 82242: u64 [sp + 0x150] = a0\n 82246: a0 = u64 [sp + 0x290]\n 82250: u64 [sp + 0x148] = a0\n 82254: a0 = u64 [sp + 0x288]\n 82258: u64 [sp + 0x140] = a0\n 82262: s1 = u64 [sp + 0x280]\n 82266: a0 = u64 [sp + 0x278]\n 82270: a1 = u64 [sp + 0x270]\n 82274: a2 = u64 [sp + 0x268]\n 82278: a3 = u64 [sp + 0x260]\n 82282: u64 [sp + 0x478] = a0\n 82286: u64 [sp + 0x470] = a1\n 82290: u64 [sp + 0x468] = a2\n 82294: u64 [sp + 0x460] = a3\n 82298: u64 [sp + 1176] = 0\n 82302: u64 [sp + 1168] = 0\n 82306: u64 [sp + 1160] = 0\n 82310: u64 [sp + 1152] = 0\n 82314: u32 [sp + 1184] = 0x20\n 82319: i32 a1 = sp + 0x460\n 82323: i32 a3 = sp + 0x480\n 82327: i32 a4 = sp + 0x4a0\n 82331: a2 = 0xffffffffffffffff\n 82334: a0 = 0\n 82336: ecalli 7 // 'get_storage'\n 82338: fallthrough\n      : @1145 (gas: 98)\n 82339: a0 = u64 [sp + 0x480]\n 82343: a1 = u64 [sp + 0x488]\n 82347: a2 = u64 [sp + 0x490]\n 82351: a3 = u64 [sp + 0x498]\n 82355: u8 [sp + 543] = 0\n 82359: u8 [sp + 542] = 0\n 82363: u8 [sp + 541] = 0\n 82367: u8 [sp + 540] = 0\n 82371: u8 [sp + 539] = 0\n 82375: u8 [sp + 538] = 0\n 82379: u8 [sp + 537] = 0\n 82383: u8 [sp + 536] = 0\n 82387: u8 [sp + 535] = 0\n 82391: u8 [sp + 534] = 0\n 82395: u8 [sp + 533] = 0\n 82399: u8 [sp + 532] = 0\n 82403: u8 [sp + 531] = 0\n 82407: u8 [sp + 530] = 0\n 82411: u8 [sp + 529] = 0\n 82415: u8 [sp + 528] = 0\n 82419: u8 [sp + 527] = 0\n 82423: u8 [sp + 526] = 0\n 82427: u8 [sp + 525] = 0\n 82431: u8 [sp + 524] = 0\n 82435: u8 [sp + 523] = 0\n 82439: u8 [sp + 522] = 0\n 82443: u8 [sp + 521] = 0\n 82447: u8 [sp + 520] = 0\n 82451: u8 [sp + 519] = 0\n 82455: u8 [sp + 518] = 0\n 82459: u8 [sp + 517] = 0\n 82463: u8 [sp + 516] = 0\n 82467: u8 [sp + 515] = 0\n 82471: u8 [sp + 514] = 0\n 82475: u8 [sp + 513] = 0\n 82479: u8 [sp + 512] = 0\n 82483: u8 [sp + 0x1f8] = a3\n 82487: u8 [sp + 0x1f0] = a2\n 82491: u8 [sp + 0x1e8] = a1\n 82495: u8 [sp + 0x1e0] = a0\n 82499: a4 = a3 >> 0x38\n 82502: u8 [sp + 0x1ff] = a4\n 82506: a4 = a3 >> 0x30\n 82509: u8 [sp + 0x1fe] = a4\n 82513: a4 = a3 >> 0x28\n 82516: u8 [sp + 0x1fd] = a4\n 82520: a4 = a3 >> 0x20\n 82523: u8 [sp + 0x1fc] = a4\n 82527: a4 = a3 >> 0x18\n 82530: u8 [sp + 0x1fb] = a4\n 82534: a4 = a3 >> 0x10\n 82537: u8 [sp + 0x1fa] = a4\n 82541: a3 = a3 >> 0x8\n 82544: u8 [sp + 0x1f9] = a3\n 82548: a3 = a2 >> 0x38\n 82551: u8 [sp + 0x1f7] = a3\n 82555: a3 = a2 >> 0x30\n 82558: u8 [sp + 0x1f6] = a3\n 82562: a3 = a2 >> 0x28\n 82565: u8 [sp + 0x1f5] = a3\n 82569: a3 = a2 >> 0x20\n 82572: u8 [sp + 0x1f4] = a3\n 82576: a3 = a2 >> 0x18\n 82579: u8 [sp + 0x1f3] = a3\n 82583: a3 = a2 >> 0x10\n 82586: u8 [sp + 0x1f2] = a3\n 82590: a2 = a2 >> 0x8\n 82593: u8 [sp + 0x1f1] = a2\n 82597: a2 = a1 >> 0x38\n 82600: u8 [sp + 0x1ef] = a2\n 82604: a2 = a1 >> 0x30\n 82607: u8 [sp + 0x1ee] = a2\n 82611: a2 = a1 >> 0x28\n 82614: u8 [sp + 0x1ed] = a2\n 82618: a2 = a1 >> 0x20\n 82621: u8 [sp + 0x1ec] = a2\n 82625: a2 = a1 >> 0x18\n 82628: u8 [sp + 0x1eb] = a2\n 82632: a2 = a1 >> 0x10\n 82635: u8 [sp + 0x1ea] = a2\n 82639: a1 = a1 >> 0x8\n 82642: u8 [sp + 0x1e9] = a1\n 82646: a1 = a0 >> 0x38\n 82649: u8 [sp + 0x1e7] = a1\n 82653: a1 = a0 >> 0x30\n 82656: u8 [sp + 0x1e6] = a1\n 82660: a1 = a0 >> 0x28\n 82663: u8 [sp + 0x1e5] = a1\n 82667: a1 = a0 >> 0x20\n 82670: u8 [sp + 0x1e4] = a1\n 82674: a1 = a0 >> 0x18\n 82677: u8 [sp + 0x1e3] = a1\n 82681: a1 = a0 >> 0x10\n 82684: u8 [sp + 0x1e2] = a1\n 82688: a0 = a0 >> 0x8\n 82691: u8 [sp + 0x1e1] = a0\n 82695: a0 = u64 [sp + 0x158]\n 82699: jump @1170 if a0 != 0\n      : @1146 (gas: 47)\n 82703: u64 [sp + 0x158] = s1\n 82707: a0 = s1 & 0x1f\n 82710: a1 = sp + 0x1e0\n 82714: a0 = a0 + a1\n 82717: a1 = u8 [a0 + 0x8]\n 82720: u64 [sp + 0x90] = a1\n 82724: a1 = u8 [a0 + 0x9]\n 82727: u64 [sp + 0x70] = a1\n 82730: a1 = u8 [a0 + 0xa]\n 82733: u64 [sp + 0x80] = a1\n 82737: a1 = u8 [a0 + 0xb]\n 82740: u64 [sp + 0x78] = a1\n 82743: a1 = u8 [a0 + 0xc]\n 82746: u64 [sp + 0xa8] = a1\n 82750: a1 = u8 [a0 + 0xd]\n 82753: u64 [sp + 0x88] = a1\n 82757: a1 = u8 [a0 + 0xe]\n 82760: u64 [sp + 0xa0] = a1\n 82764: a1 = u8 [a0 + 0xf]\n 82767: u64 [sp + 0x98] = a1\n 82771: a1 = u8 [a0]\n 82773: u64 [sp + 0xd0] = a1\n 82777: a1 = u8 [a0 + 0x1]\n 82780: u64 [sp + 0xb0] = a1\n 82784: a1 = u8 [a0 + 0x2]\n 82787: u64 [sp + 0xc0] = a1\n 82791: a1 = u8 [a0 + 0x3]\n 82794: u64 [sp + 0xb8] = a1\n 82798: a1 = u8 [a0 + 0x4]\n 82801: u64 [sp + 0xe8] = a1\n 82805: a1 = u8 [a0 + 0x5]\n 82808: u64 [sp + 0xc8] = a1\n 82812: a1 = u8 [a0 + 0x6]\n 82815: u64 [sp + 0xe0] = a1\n 82819: a1 = u8 [a0 + 0x7]\n 82822: u64 [sp + 0xd8] = a1\n 82826: a1 = u8 [a0 + 0x10]\n 82829: u64 [sp + 0x138] = a1\n 82833: a1 = u8 [a0 + 0x11]\n 82836: u64 [sp + 0xf0] = a1\n 82840: a1 = u8 [a0 + 0x12]\n 82843: u64 [sp + 0x130] = a1\n 82847: a0 = u8 [a0 + 0x13]\n 82850: u64 [sp + 0x128] = a0\n 82854: a1 = 0x20\n 82857: a0 = u64 [sp + 0x108]\n 82861: ra = 1030, jump @0\n      : @1147 [@dyn 515] (gas: 108)\n 82868: a1 = u8 [a0 + 0x1]\n 82871: a2 = u8 [a0]\n 82873: a3 = u8 [a0 + 0x2]\n 82876: a4 = u8 [a0 + 0x3]\n 82879: a1 = a1 << 0x8\n 82882: a1 = a1 | a2\n 82885: a3 = a3 << 0x10\n 82888: a4 = a4 << 0x18\n 82891: a3 = a3 | a4\n 82894: a1 = a1 | a3\n 82897: a2 = u8 [a0 + 0x5]\n 82900: a3 = u8 [a0 + 0x4]\n 82903: a4 = u8 [a0 + 0x6]\n 82906: a5 = u8 [a0 + 0x7]\n 82909: a2 = a2 << 0x8\n 82912: a2 = a2 | a3\n 82915: a4 = a4 << 0x10\n 82918: a5 = a5 << 0x18\n 82921: a4 = a4 | a5\n 82924: a2 = a2 | a4\n 82927: a2 = a2 << 0x20\n 82930: t0 = a2 | a1\n 82933: a2 = u8 [a0 + 0x9]\n 82936: a3 = u8 [a0 + 0x8]\n 82939: a4 = u8 [a0 + 0xa]\n 82942: a5 = u8 [a0 + 0xb]\n 82945: a2 = a2 << 0x8\n 82948: a2 = a2 | a3\n 82951: a4 = a4 << 0x10\n 82954: a5 = a5 << 0x18\n 82957: a4 = a4 | a5\n 82960: a2 = a2 | a4\n 82963: a3 = u8 [a0 + 0xd]\n 82966: a4 = u8 [a0 + 0xc]\n 82969: a5 = u8 [a0 + 0xe]\n 82972: s1 = u8 [a0 + 0xf]\n 82975: a3 = a3 << 0x8\n 82978: a3 = a3 | a4\n 82981: a5 = a5 << 0x10\n 82984: s1 = s1 << 0x18\n 82987: a5 = a5 | s1\n 82990: a3 = a3 | a5\n 82993: a3 = a3 << 0x20\n 82996: a2 = a2 | a3\n 82999: a3 = u8 [a0 + 0x11]\n 83002: a4 = u8 [a0 + 0x10]\n 83005: a5 = u8 [a0 + 0x12]\n 83008: s1 = u8 [a0 + 0x13]\n 83011: a3 = a3 << 0x8\n 83014: a3 = a3 | a4\n 83017: a5 = a5 << 0x10\n 83020: s1 = s1 << 0x18\n 83023: a5 = a5 | s1\n 83026: a3 = a3 | a5\n 83029: a4 = u8 [a0 + 0x15]\n 83032: a5 = u8 [a0 + 0x14]\n 83035: s1 = u8 [a0 + 0x16]\n 83038: a1 = u8 [a0 + 0x17]\n 83041: a4 = a4 << 0x8\n 83044: a4 = a4 | a5\n 83047: s1 = s1 << 0x10\n 83050: a1 = a1 << 0x18\n 83053: a1 = a1 | s1\n 83056: a1 = a1 | a4\n 83059: a1 = a1 << 0x20\n 83062: a3 = a3 | a1\n 83065: a1 = u8 [a0 + 0x19]\n 83068: a4 = u8 [a0 + 0x18]\n 83071: a5 = u8 [a0 + 0x1a]\n 83074: s1 = u8 [a0 + 0x1b]\n 83077: a1 = a1 << 0x8\n 83080: a1 = a1 | a4\n 83083: a5 = a5 << 0x10\n 83086: s1 = s1 << 0x18\n 83089: a5 = a5 | s1\n 83092: a1 = a1 | a5\n 83095: a4 = u8 [a0 + 0x1d]\n 83098: a5 = u8 [a0 + 0x1c]\n 83101: s1 = u8 [a0 + 0x1e]\n 83104: a0 = u8 [a0 + 0x1f]\n 83107: a4 = a4 << 0x8\n 83110: a4 = a4 | a5\n 83113: s1 = s1 << 0x10\n 83116: a0 = a0 << 0x18\n 83119: a0 = a0 | s1\n 83122: a0 = a0 | a4\n 83125: a0 = a0 << 0x20\n 83128: a0 = a0 | a1\n 83131: a0 = reverse a0\n 83133: a1 = reverse a3\n 83135: a2 = reverse a2\n 83137: a3 = reverse t0\n 83139: t1 = u64 [sp + 0x178]\n 83143: a4 = a3 ^ t1\n 83146: a3 = t1 <u a3\n 83149: t2 = u64 [sp + 0x180]\n 83153: a5 = t2 <u a2\n 83156: a5 = a3 if a4 != 0\n 83159: s1 = u64 [sp + 0x188]\n 83163: a3 = a1 ^ s1\n 83166: a1 = s1 <u a1\n 83169: t0 = u64 [sp + 0x160]\n 83173: a0 = t0 <u a0\n 83176: a0 = a1 if a3 != 0\n 83179: a1 = a2 ^ t2\n 83182: a1 = a1 | a4\n 83185: a0 = a5 if a1 != 0\n 83188: jump @1171 if a0 == 0\n      : @1148 (gas: 40)\n 83192: a0 = t2 >> 0x3b\n 83195: a1 = t1 << 0x5\n 83198: ra = a1 | a0\n 83201: a0 = t0 >> 0x3b\n 83204: a2 = s1 << 0x5\n 83207: a2 = a2 | a0\n 83210: a0 = t0 << 0x5\n 83213: a3 = u64 [sp + 0x118]\n 83217: a0 = a0 + a3\n 83220: a3 = a0 <u a3\n 83223: a5 = u64 [sp + 0x110]\n 83227: a2 = a2 + a5\n 83230: a2 = a2 + a3\n 83233: a4 = a2 ^ a5\n 83236: a5 = a2 <u a5\n 83239: a5 = a3 if a4 == 0\n 83242: a3 = s1 >> 0x3b\n 83245: a4 = t2 << 0x5\n 83248: a3 = a3 | a4\n 83251: a4 = u64 [sp + 0x100]\n 83255: a3 = a3 + a4\n 83258: a4 = a3 <u a4\n 83261: a1 = u64 [sp + 0xf8]\n 83265: a1 = a1 + ra\n 83268: a1 = a1 + a4\n 83271: a5 = a5 + a3\n 83274: a3 = a5 <u a3\n 83277: a1 = a1 + a3\n 83280: a1 = a1 | a2\n 83283: a2 = a0 | a5\n 83286: a2 = a2 | a1\n 83289: a1 = a1 | a5\n 83292: a2 = a2 >> 0x20\n 83295: a1 = a1 << 0x20\n 83298: a1 = a1 | a2\n 83301: u64 [sp + 0x160] = t0\n 83305: u64 [sp + 0x188] = s1\n 83309: u64 [sp + 0x178] = t1\n 83313: u64 [sp + 0x180] = t2\n 83317: jump @1170 if a1 != 0\n      : @1149 (gas: 90)\n 83321: a3 = u64 [sp + 0x158]\n 83325: a1 = a3 >> 0x3d\n 83328: a4 = u64 [sp + 0x140]\n 83332: a2 = a4 << 0x3\n 83335: a2 = a2 | a1\n 83338: a1 = a3 << 0x3\n 83341: a1 = a1 <u 0x100\n 83345: a1 = a1 ^ 0x1\n 83348: a3 = a2 >u 0\n 83350: a1 = a3 if a2 != 0\n 83353: a2 = a4 >> 0x3d\n 83356: a4 = u64 [sp + 0x148]\n 83360: a3 = a4 << 0x3\n 83363: a2 = a2 | a3\n 83366: a3 = a4 >> 0x3d\n 83369: a4 = u64 [sp + 0x150]\n 83373: a4 = a4 << 0x3\n 83376: a3 = a3 | a4\n 83379: a4 = a3 >u 0\n 83381: a5 = a2 >u 0\n 83383: a5 = a4 if a3 != 0\n 83386: a2 = a2 | a3\n 83389: a1 = a5 if a2 != 0\n 83392: a2 = u64 [sp + 0x70]\n 83395: a2 = a2 << 0x8\n 83398: a3 = u64 [sp + 0x90]\n 83402: a2 = a2 | a3\n 83405: a3 = u64 [sp + 0x80]\n 83409: a3 = a3 << 0x10\n 83412: a4 = u64 [sp + 0x78]\n 83415: a4 = a4 << 0x18\n 83418: a3 = a3 | a4\n 83421: a2 = a2 | a3\n 83424: a3 = u64 [sp + 0x88]\n 83428: a3 = a3 << 0x8\n 83431: a4 = u64 [sp + 0xa8]\n 83435: a3 = a3 | a4\n 83438: a4 = u64 [sp + 0xa0]\n 83442: a4 = a4 << 0x10\n 83445: a5 = u64 [sp + 0x98]\n 83449: a5 = a5 << 0x18\n 83452: a4 = a4 | a5\n 83455: a3 = a3 | a4\n 83458: a3 = a3 << 0x20\n 83461: a2 = a2 | a3\n 83464: a3 = u64 [sp + 0xb0]\n 83468: a3 = a3 << 0x8\n 83471: a4 = u64 [sp + 0xd0]\n 83475: a3 = a3 | a4\n 83478: a4 = u64 [sp + 0xc0]\n 83482: a4 = a4 << 0x10\n 83485: a5 = u64 [sp + 0xb8]\n 83489: a5 = a5 << 0x18\n 83492: a4 = a4 | a5\n 83495: a3 = a3 | a4\n 83498: a4 = u64 [sp + 0xc8]\n 83502: a4 = a4 << 0x8\n 83505: a5 = u64 [sp + 0xe8]\n 83509: a4 = a4 | a5\n 83512: a5 = u64 [sp + 0xe0]\n 83516: a5 = a5 << 0x10\n 83519: s1 = u64 [sp + 0xd8]\n 83523: s1 = s1 << 0x18\n 83526: a5 = a5 | s1\n 83529: a4 = a4 | a5\n 83532: a4 = a4 << 0x20\n 83535: a3 = a3 | a4\n 83538: a4 = u64 [sp + 0xf0]\n 83542: a4 = a4 << 0x8\n 83545: a5 = u64 [sp + 0x138]\n 83549: a4 = a4 | a5\n 83552: a5 = u64 [sp + 0x130]\n 83556: a5 = a5 << 0x10\n 83559: s1 = u64 [sp + 0x128]\n 83563: s1 = s1 << 0x18\n 83566: a5 = a5 | s1\n 83569: a4 = a4 | a5\n 83572: a5 = 0xffffffffffffffff\n 83575: a3 = a3 & a5\n 83578: a2 = a2 & a5\n 83581: s1 = u64 [sp + 0x120]\n 83585: s1 = s1 & a4\n 83588: s1 = 0 if a1 != 0\n 83590: a2 = 0 if a1 != 0\n 83592: u64 [sp + 0x158] = a2\n 83596: a3 = 0 if a1 != 0\n 83598: u64 [sp + 0x150] = a3\n 83602: i32 a0 = a0 + 0\n 83604: a1 = 0x20\n 83607: ra = 1032, jump @0\n      : @1150 [@dyn 516] (gas: 71)\n 83614: a1 = reverse s1\n 83616: a2 = u64 [sp + 0x158]\n 83620: a2 = reverse a2\n 83622: a3 = u64 [sp + 0x150]\n 83626: a3 = reverse a3\n 83628: a4 = a3 >> 0x38\n 83631: u8 [a0 + 0x1f] = a4\n 83634: a4 = a3 >> 0x30\n 83637: u8 [a0 + 0x1e] = a4\n 83640: a4 = a3 >> 0x28\n 83643: u8 [a0 + 0x1d] = a4\n 83646: a4 = a3 >> 0x20\n 83649: u8 [a0 + 0x1c] = a4\n 83652: a4 = a3 >> 0x18\n 83655: u8 [a0 + 0x1b] = a4\n 83658: a4 = a3 >> 0x10\n 83661: u8 [a0 + 0x1a] = a4\n 83664: a4 = a3 >> 0x8\n 83667: u8 [a0 + 0x19] = a4\n 83670: u8 [a0 + 0x18] = a3\n 83673: u8 [a0 + 0x10] = a2\n 83676: u8 [a0 + 11] = 0\n 83679: u8 [a0 + 10] = 0\n 83682: u8 [a0 + 9] = 0\n 83685: u8 [a0 + 7] = 0\n 83688: u8 [a0 + 6] = 0\n 83691: u8 [a0 + 5] = 0\n 83694: u8 [a0 + 4] = 0\n 83697: u8 [a0 + 3] = 0\n 83700: u8 [a0 + 2] = 0\n 83703: u8 [a0 + 1] = 0\n 83706: u8 [a0 + 0] = 0\n 83708: a3 = a2 >> 0x38\n 83711: u8 [a0 + 0x17] = a3\n 83714: a3 = a2 >> 0x30\n 83717: u8 [a0 + 0x16] = a3\n 83720: a3 = a2 >> 0x28\n 83723: u8 [a0 + 0x15] = a3\n 83726: a3 = a2 >> 0x20\n 83729: u8 [a0 + 0x14] = a3\n 83732: a3 = a2 >> 0x18\n 83735: u8 [a0 + 0x13] = a3\n 83738: a3 = a2 >> 0x10\n 83741: u8 [a0 + 0x12] = a3\n 83744: a2 = a2 >> 0x8\n 83747: u8 [a0 + 0x11] = a2\n 83750: u8 [a0 + 0x8] = a1\n 83753: a2 = a1 >> 0x38\n 83756: u8 [a0 + 0xf] = a2\n 83759: a2 = a1 >> 0x30\n 83762: u8 [a0 + 0xe] = a2\n 83765: a2 = a1 >> 0x28\n 83768: u8 [a0 + 0xd] = a2\n 83771: a1 = a1 >> 0x20\n 83774: u8 [a0 + 0xc] = a1\n 83777: a1 = u64 [sp + 0x160]\n 83781: a1 = a1 + 0x1\n 83784: a0 = a1 <u 0x1\n 83787: a3 = u64 [sp + 0x188]\n 83791: a3 = a3 + a0\n 83794: u64 [sp + 0x160] = a1\n 83798: a0 = a1 | a3\n 83801: a0 = a0 <u 0x1\n 83804: a1 = u64 [sp + 0x180]\n 83808: a0 = a0 + a1\n 83811: a1 = a0 <u a1\n 83814: a4 = u64 [sp + 0x178]\n 83818: a1 = a1 + a4\n 83821: a2 = a0\n 83823: a0 = a3\n 83825: jump @1131\n      : @1151 (gas: 11)\n 83828: a0 = u64 [sp + 0x160]\n 83832: u64 [sp + 0x3e0] = a0\n 83836: a0 = u64 [sp + 0x188]\n 83840: u64 [sp + 0x3e8] = a0\n 83844: a0 = u64 [sp + 0x180]\n 83848: u64 [sp + 0x3f0] = a0\n 83852: a0 = sp + 0x400\n 83856: a1 = sp + 0x3e0\n 83860: s1 = u64 [sp + 0x178]\n 83864: u64 [sp + 0x3f8] = s1\n 83868: ra = 1034, jump @1114\n      : @1152 [@dyn 517] (gas: 15)\n 83874: a2 = u64 [sp + 0x400]\n 83878: u64 [sp + 0x48] = a2\n 83881: a2 = u64 [sp + 0x408]\n 83885: u64 [sp + 0x40] = a2\n 83888: a2 = u64 [sp + 0x410]\n 83892: u64 [sp + 0x38] = a2\n 83895: a2 = u64 [sp + 0x418]\n 83899: u64 [sp + 0x10] = a2\n 83902: a2 = u64 [sp + 0x160]\n 83906: a0 = u64 [sp + 0x180]\n 83910: a0 = a0 | a2\n 83913: a2 = u64 [sp + 0x188]\n 83917: a1 = a2 | s1\n 83920: a0 = a0 | a1\n 83923: jump @1165 if a0 == 0\n      : @1153 (gas: 12)\n 83927: a0 = u64 [sp + 0x28]\n 83930: a2 = u64 [sp + 0x20]\n 83933: a0 = a0 | a2\n 83936: a1 = u64 [sp + 0x30]\n 83939: a3 = u64 [sp + 0x18]\n 83942: a1 = a1 | a3\n 83945: a0 = a0 | a1\n 83948: a0 = a0 >> 0x20\n 83951: a1 = a1 | a2\n 83954: a1 = a1 << 0x20\n 83957: a0 = a0 | a1\n 83960: jump @1170 if a0 != 0\n      : @1154 (gas: 12)\n 83964: a2 = u64 [sp + 0x48]\n 83967: a4 = u64 [sp + 0x38]\n 83970: a0 = a2 | a4\n 83973: t1 = u64 [sp + 0x40]\n 83976: t0 = u64 [sp + 0x10]\n 83979: a1 = t1 | t0\n 83982: a0 = a0 | a1\n 83985: a0 = a0 >> 0x20\n 83988: a1 = a1 | a4\n 83991: a1 = a1 << 0x20\n 83994: a0 = a0 | a1\n 83997: jump @1166 if a0 != 0\n      : @1155 (gas: 19)\n 84001: t2 = 0\n 84003: a5 = 0\n 84005: a3 = 0\n 84007: s1 = 0\n 84009: i32 a0 = a2 + 0\n 84011: u64 [sp + 0x70] = a0\n 84014: a0 = a2 + 0x20\n 84017: u64 [sp + 0x68] = a0\n 84020: a0 = a0 <u a2\n 84023: a1 = t1 + a0\n 84026: u64 [sp + 0x60] = a1\n 84029: a1 = a1 <u t1\n 84032: a1 = a0 if a0 == 0\n 84035: a1 = a1 + a4\n 84038: u64 [sp + 0x58] = a1\n 84041: a0 = a1 <u a4\n 84044: a0 = a0 + t0\n 84047: u64 [sp + 0x50] = a0\n 84050: fallthrough\n      : @1156 (gas: 7)\n 84051: u64 [sp + 0x168] = a3\n 84055: u64 [sp + 0x170] = s1\n 84059: u64 [sp + 0x190] = a5\n 84063: u64 [sp + 0x198] = t2\n 84067: a1 = 0x20\n 84070: a0 = u64 [sp + 0x108]\n 84074: ra = 1036, jump @0\n      : @1157 [@dyn 518] (gas: 108)\n 84081: ra = u64 [sp + 0x170]\n 84085: t2 = u64 [sp + 0x190]\n 84089: t1 = u64 [sp + 0x198]\n 84093: a1 = u8 [a0 + 0x1]\n 84096: a2 = u8 [a0]\n 84098: a3 = u8 [a0 + 0x2]\n 84101: a4 = u8 [a0 + 0x3]\n 84104: a1 = a1 << 0x8\n 84107: a1 = a1 | a2\n 84110: a3 = a3 << 0x10\n 84113: a4 = a4 << 0x18\n 84116: a3 = a3 | a4\n 84119: a1 = a1 | a3\n 84122: a2 = u8 [a0 + 0x5]\n 84125: a3 = u8 [a0 + 0x4]\n 84128: a4 = u8 [a0 + 0x6]\n 84131: a5 = u8 [a0 + 0x7]\n 84134: a2 = a2 << 0x8\n 84137: a2 = a2 | a3\n 84140: a4 = a4 << 0x10\n 84143: a5 = a5 << 0x18\n 84146: a4 = a4 | a5\n 84149: a2 = a2 | a4\n 84152: a2 = a2 << 0x20\n 84155: t0 = a2 | a1\n 84158: a2 = u8 [a0 + 0x9]\n 84161: a3 = u8 [a0 + 0x8]\n 84164: a4 = u8 [a0 + 0xa]\n 84167: a5 = u8 [a0 + 0xb]\n 84170: a2 = a2 << 0x8\n 84173: a2 = a2 | a3\n 84176: a4 = a4 << 0x10\n 84179: a5 = a5 << 0x18\n 84182: a4 = a4 | a5\n 84185: a2 = a2 | a4\n 84188: a3 = u8 [a0 + 0xd]\n 84191: a4 = u8 [a0 + 0xc]\n 84194: a5 = u8 [a0 + 0xe]\n 84197: s1 = u8 [a0 + 0xf]\n 84200: a3 = a3 << 0x8\n 84203: a3 = a3 | a4\n 84206: a5 = a5 << 0x10\n 84209: s1 = s1 << 0x18\n 84212: a5 = a5 | s1\n 84215: a3 = a3 | a5\n 84218: a3 = a3 << 0x20\n 84221: a2 = a2 | a3\n 84224: a3 = u8 [a0 + 0x11]\n 84227: a4 = u8 [a0 + 0x10]\n 84230: a5 = u8 [a0 + 0x12]\n 84233: s1 = u8 [a0 + 0x13]\n 84236: a3 = a3 << 0x8\n 84239: a3 = a3 | a4\n 84242: a5 = a5 << 0x10\n 84245: s1 = s1 << 0x18\n 84248: a5 = a5 | s1\n 84251: a3 = a3 | a5\n 84254: a4 = u8 [a0 + 0x15]\n 84257: a5 = u8 [a0 + 0x14]\n 84260: s1 = u8 [a0 + 0x16]\n 84263: a1 = u8 [a0 + 0x17]\n 84266: a4 = a4 << 0x8\n 84269: a4 = a4 | a5\n 84272: s1 = s1 << 0x10\n 84275: a1 = a1 << 0x18\n 84278: a1 = a1 | s1\n 84281: a1 = a1 | a4\n 84284: a1 = a1 << 0x20\n 84287: a3 = a3 | a1\n 84290: a1 = u8 [a0 + 0x19]\n 84293: a4 = u8 [a0 + 0x18]\n 84296: a5 = u8 [a0 + 0x1a]\n 84299: s1 = u8 [a0 + 0x1b]\n 84302: a1 = a1 << 0x8\n 84305: a1 = a1 | a4\n 84308: a5 = a5 << 0x10\n 84311: s1 = s1 << 0x18\n 84314: a5 = a5 | s1\n 84317: a1 = a1 | a5\n 84320: a4 = u8 [a0 + 0x1d]\n 84323: a5 = u8 [a0 + 0x1c]\n 84326: s1 = u8 [a0 + 0x1e]\n 84329: a0 = u8 [a0 + 0x1f]\n 84332: a4 = a4 << 0x8\n 84335: a4 = a4 | a5\n 84338: s1 = s1 << 0x10\n 84341: a0 = a0 << 0x18\n 84344: a0 = a0 | s1\n 84347: a0 = a0 | a4\n 84350: a0 = a0 << 0x20\n 84353: a0 = a0 | a1\n 84356: a0 = reverse a0\n 84358: a1 = reverse a3\n 84360: a2 = reverse a2\n 84362: a3 = reverse t0\n 84364: a4 = a3 ^ ra\n 84367: a3 = ra <u a3\n 84370: s1 = u64 [sp + 0x168]\n 84374: a5 = s1 <u a2\n 84377: a5 = a3 if a4 != 0\n 84380: a3 = a1 ^ t2\n 84383: a1 = t2 <u a1\n 84386: a0 = t1 <u a0\n 84389: a0 = a1 if a3 != 0\n 84392: a1 = a2 ^ s1\n 84395: a1 = a1 | a4\n 84398: a0 = a5 if a1 != 0\n 84401: jump @1173 if a0 == 0\n      : @1158 (gas: 40)\n 84405: a0 = s1 >> 0x3b\n 84408: a1 = ra << 0x5\n 84411: t0 = a1 | a0\n 84414: a0 = t2 >> 0x3b\n 84417: a1 = s1 << 0x5\n 84420: a5 = a1 | a0\n 84423: a0 = t1 >> 0x3b\n 84426: a1 = t2 << 0x5\n 84429: a2 = a1 | a0\n 84432: a0 = t1 << 0x5\n 84435: a1 = u64 [sp + 0x118]\n 84439: u64 [sp + 0x140] = a0\n 84443: a0 = a0 + a1\n 84446: a1 = a0 <u a1\n 84449: a4 = u64 [sp + 0x110]\n 84453: u64 [sp + 0x148] = a2\n 84457: a2 = a2 + a4\n 84460: a2 = a2 + a1\n 84463: a3 = a2 ^ a4\n 84466: a4 = a2 <u a4\n 84469: a4 = a1 if a3 == 0\n 84472: a3 = u64 [sp + 0x100]\n 84476: u64 [sp + 0x150] = a5\n 84480: a1 = a3 + a5\n 84483: a3 = a1 <u a3\n 84486: a5 = u64 [sp + 0xf8]\n 84490: u64 [sp + 0x158] = t0\n 84494: a5 = a5 + t0\n 84497: a3 = a3 + a5\n 84500: a4 = a4 + a1\n 84503: a1 = a4 <u a1\n 84506: a1 = a1 + a3\n 84509: a1 = a1 | a2\n 84512: a2 = a0 | a4\n 84515: a2 = a2 | a1\n 84518: a1 = a1 | a4\n 84521: a2 = a2 >> 0x20\n 84524: a1 = a1 << 0x20\n 84527: a1 = a1 | a2\n 84530: jump @1170 if a1 != 0\n      : @1159 (gas: 3)\n 84534: i32 a0 = a0 + 0\n 84536: a1 = 0x20\n 84539: ra = 1038, jump @0\n      : @1160 [@dyn 519] (gas: 43)\n 84546: a1 = u8 [a0 + 0x18]\n 84549: u64 [sp + 0x98] = a1\n 84553: a1 = u8 [a0 + 0x19]\n 84556: u64 [sp + 0x78] = a1\n 84559: a1 = u8 [a0 + 0x1a]\n 84562: u64 [sp + 0x88] = a1\n 84566: a1 = u8 [a0 + 0x1b]\n 84569: u64 [sp + 0x80] = a1\n 84573: a1 = u8 [a0 + 0x1c]\n 84576: u64 [sp + 0xb0] = a1\n 84580: a1 = u8 [a0 + 0x1d]\n 84583: u64 [sp + 0x90] = a1\n 84587: a1 = u8 [a0 + 0x1e]\n 84590: u64 [sp + 0xa8] = a1\n 84594: a1 = u8 [a0 + 0x1f]\n 84597: u64 [sp + 0xa0] = a1\n 84601: a1 = u8 [a0 + 0x10]\n 84604: u64 [sp + 0xd8] = a1\n 84608: a1 = u8 [a0 + 0x11]\n 84611: u64 [sp + 0xb8] = a1\n 84615: a1 = u8 [a0 + 0x12]\n 84618: u64 [sp + 0xc8] = a1\n 84622: a1 = u8 [a0 + 0x13]\n 84625: u64 [sp + 0xc0] = a1\n 84629: a1 = u8 [a0 + 0x14]\n 84632: u64 [sp + 0xf0] = a1\n 84636: a1 = u8 [a0 + 0x15]\n 84639: u64 [sp + 0xd0] = a1\n 84643: a1 = u8 [a0 + 0x16]\n 84646: u64 [sp + 0xe8] = a1\n 84650: a1 = u8 [a0 + 0x17]\n 84653: u64 [sp + 0xe0] = a1\n 84657: a1 = u8 [a0 + 0xc]\n 84660: u64 [sp + 0x138] = a1\n 84664: a1 = u8 [a0 + 0xd]\n 84667: u64 [sp + 0x120] = a1\n 84671: a1 = u8 [a0 + 0xe]\n 84674: u64 [sp + 0x130] = a1\n 84678: a0 = u8 [a0 + 0xf]\n 84681: u64 [sp + 0x128] = a0\n 84685: a1 = 0x20\n 84688: a0 = u64 [sp + 0x70]\n 84691: ra = 1040, jump @0\n      : @1161 [@dyn 520] (gas: 108)\n 84698: a1 = u8 [a0 + 0x1]\n 84701: a2 = u8 [a0]\n 84703: a3 = u8 [a0 + 0x2]\n 84706: a4 = u8 [a0 + 0x3]\n 84709: a1 = a1 << 0x8\n 84712: a1 = a1 | a2\n 84715: a3 = a3 << 0x10\n 84718: a4 = a4 << 0x18\n 84721: a3 = a3 | a4\n 84724: a1 = a1 | a3\n 84727: a2 = u8 [a0 + 0x5]\n 84730: a3 = u8 [a0 + 0x4]\n 84733: a4 = u8 [a0 + 0x6]\n 84736: a5 = u8 [a0 + 0x7]\n 84739: a2 = a2 << 0x8\n 84742: a2 = a2 | a3\n 84745: a4 = a4 << 0x10\n 84748: a5 = a5 << 0x18\n 84751: a4 = a4 | a5\n 84754: a2 = a2 | a4\n 84757: a2 = a2 << 0x20\n 84760: t0 = a2 | a1\n 84763: a2 = u8 [a0 + 0x9]\n 84766: a3 = u8 [a0 + 0x8]\n 84769: a4 = u8 [a0 + 0xa]\n 84772: a5 = u8 [a0 + 0xb]\n 84775: a2 = a2 << 0x8\n 84778: a2 = a2 | a3\n 84781: a4 = a4 << 0x10\n 84784: a5 = a5 << 0x18\n 84787: a4 = a4 | a5\n 84790: a2 = a2 | a4\n 84793: a3 = u8 [a0 + 0xd]\n 84796: a4 = u8 [a0 + 0xc]\n 84799: a5 = u8 [a0 + 0xe]\n 84802: s1 = u8 [a0 + 0xf]\n 84805: a3 = a3 << 0x8\n 84808: a3 = a3 | a4\n 84811: a5 = a5 << 0x10\n 84814: s1 = s1 << 0x18\n 84817: a5 = a5 | s1\n 84820: a3 = a3 | a5\n 84823: a3 = a3 << 0x20\n 84826: a2 = a2 | a3\n 84829: a3 = u8 [a0 + 0x11]\n 84832: a4 = u8 [a0 + 0x10]\n 84835: a5 = u8 [a0 + 0x12]\n 84838: s1 = u8 [a0 + 0x13]\n 84841: a3 = a3 << 0x8\n 84844: a3 = a3 | a4\n 84847: a5 = a5 << 0x10\n 84850: s1 = s1 << 0x18\n 84853: a5 = a5 | s1\n 84856: a3 = a3 | a5\n 84859: a4 = u8 [a0 + 0x15]\n 84862: a5 = u8 [a0 + 0x14]\n 84865: s1 = u8 [a0 + 0x16]\n 84868: a1 = u8 [a0 + 0x17]\n 84871: a4 = a4 << 0x8\n 84874: a4 = a4 | a5\n 84877: s1 = s1 << 0x10\n 84880: a1 = a1 << 0x18\n 84883: a1 = a1 | s1\n 84886: a1 = a1 | a4\n 84889: a1 = a1 << 0x20\n 84892: a3 = a3 | a1\n 84895: a1 = u8 [a0 + 0x19]\n 84898: a4 = u8 [a0 + 0x18]\n 84901: a5 = u8 [a0 + 0x1a]\n 84904: s1 = u8 [a0 + 0x1b]\n 84907: a1 = a1 << 0x8\n 84910: a1 = a1 | a4\n 84913: a5 = a5 << 0x10\n 84916: s1 = s1 << 0x18\n 84919: a5 = a5 | s1\n 84922: a1 = a1 | a5\n 84925: a4 = u8 [a0 + 0x1d]\n 84928: a5 = u8 [a0 + 0x1c]\n 84931: s1 = u8 [a0 + 0x1e]\n 84934: a0 = u8 [a0 + 0x1f]\n 84937: a4 = a4 << 0x8\n 84940: a4 = a4 | a5\n 84943: s1 = s1 << 0x10\n 84946: a0 = a0 << 0x18\n 84949: a0 = a0 | s1\n 84952: a0 = a0 | a4\n 84955: a0 = a0 << 0x20\n 84958: a0 = a0 | a1\n 84961: t1 = reverse a0\n 84963: a1 = reverse a3\n 84965: a2 = reverse a2\n 84967: a3 = reverse t0\n 84969: a0 = u64 [sp + 0x170]\n 84973: a4 = a3 ^ a0\n 84976: a3 = a0 <u a3\n 84979: s1 = u64 [sp + 0x168]\n 84983: a5 = s1 <u a2\n 84986: a5 = a3 if a4 != 0\n 84989: a0 = u64 [sp + 0x190]\n 84993: a3 = a1 ^ a0\n 84996: a1 = a0 <u a1\n 84999: a0 = u64 [sp + 0x198]\n 85003: a0 = a0 <u t1\n 85006: a0 = a1 if a3 != 0\n 85009: a1 = a2 ^ s1\n 85012: a1 = a1 | a4\n 85015: a0 = a5 if a1 != 0\n 85018: jump @1175 if a0 == 0\n      : @1162 (gas: 30)\n 85022: a1 = u64 [sp + 0x68]\n 85025: a0 = u64 [sp + 0x140]\n 85029: a0 = a0 + a1\n 85032: a1 = a0 <u a1\n 85035: a4 = u64 [sp + 0x60]\n 85038: a2 = u64 [sp + 0x148]\n 85042: a2 = a2 + a4\n 85045: a2 = a2 + a1\n 85048: a3 = a2 ^ a4\n 85051: a4 = a2 <u a4\n 85054: a4 = a1 if a3 == 0\n 85057: a5 = u64 [sp + 0x58]\n 85060: a1 = u64 [sp + 0x150]\n 85064: a1 = a1 + a5\n 85067: a4 = a4 + a1\n 85070: a3 = a4 <u a1\n 85073: a1 = a1 <u a5\n 85076: a5 = u64 [sp + 0x50]\n 85079: s1 = u64 [sp + 0x158]\n 85083: a5 = a5 + s1\n 85086: a1 = a1 + a5\n 85089: a1 = a1 + a3\n 85092: a3 = a0 | a4\n 85095: a1 = a1 | a2\n 85098: a3 = a3 | a1\n 85101: a3 = a3 >> 0x20\n 85104: a1 = a1 | a4\n 85107: a1 = a1 << 0x20\n 85110: a1 = a1 | a3\n 85113: jump @1170 if a1 != 0\n      : @1163 (gas: 61)\n 85117: a1 = u64 [sp + 0x78]\n 85120: a1 = a1 << 0x8\n 85123: a2 = u64 [sp + 0x98]\n 85127: a1 = a1 | a2\n 85130: a2 = u64 [sp + 0x88]\n 85134: a2 = a2 << 0x10\n 85137: a3 = u64 [sp + 0x80]\n 85141: a3 = a3 << 0x18\n 85144: a2 = a2 | a3\n 85147: a1 = a1 | a2\n 85150: a2 = u64 [sp + 0x90]\n 85154: a2 = a2 << 0x8\n 85157: a3 = u64 [sp + 0xb0]\n 85161: a2 = a2 | a3\n 85164: a3 = u64 [sp + 0xa8]\n 85168: a3 = a3 << 0x10\n 85171: a4 = u64 [sp + 0xa0]\n 85175: a4 = a4 << 0x18\n 85178: a3 = a3 | a4\n 85181: a2 = a2 | a3\n 85184: a2 = a2 << 0x20\n 85187: a1 = a1 | a2\n 85190: u64 [sp + 0x158] = a1\n 85194: a1 = u64 [sp + 0xb8]\n 85198: a1 = a1 << 0x8\n 85201: a2 = u64 [sp + 0xd8]\n 85205: a1 = a1 | a2\n 85208: a2 = u64 [sp + 0xc8]\n 85212: a2 = a2 << 0x10\n 85215: a3 = u64 [sp + 0xc0]\n 85219: a3 = a3 << 0x18\n 85222: a2 = a2 | a3\n 85225: a1 = a1 | a2\n 85228: a2 = u64 [sp + 0xd0]\n 85232: a2 = a2 << 0x8\n 85235: a3 = u64 [sp + 0xf0]\n 85239: a2 = a2 | a3\n 85242: a3 = u64 [sp + 0xe8]\n 85246: a3 = a3 << 0x10\n 85249: a4 = u64 [sp + 0xe0]\n 85253: a4 = a4 << 0x18\n 85256: a3 = a3 | a4\n 85259: a2 = a2 | a3\n 85262: a2 = a2 << 0x20\n 85265: a1 = a1 | a2\n 85268: u64 [sp + 0x150] = a1\n 85272: a1 = u64 [sp + 0x120]\n 85276: a1 = a1 << 0x8\n 85279: a2 = u64 [sp + 0x138]\n 85283: a1 = a1 | a2\n 85286: a2 = u64 [sp + 0x130]\n 85290: a2 = a2 << 0x10\n 85293: a3 = u64 [sp + 0x128]\n 85297: a3 = a3 << 0x18\n 85300: a2 = a2 | a3\n 85303: a1 = a1 | a2\n 85306: a1 = a1 << 0x20\n 85309: u64 [sp + 0x148] = a1\n 85313: i32 a0 = a0 + 0\n 85315: a1 = 0x20\n 85318: ra = 1042, jump @0\n      : @1164 [@dyn 521] (gas: 85)\n 85325: t2 = u64 [sp + 0x198]\n 85329: t2 = t2 + 0x1\n 85332: a1 = t2 <u 0x1\n 85335: a5 = u64 [sp + 0x190]\n 85339: a5 = a5 + a1\n 85342: a1 = t2 | a5\n 85345: a1 = a1 <u 0x1\n 85348: a2 = u64 [sp + 0x168]\n 85352: t0 = a2 + a1\n 85355: a2 = t0 <u a2\n 85358: s1 = u64 [sp + 0x170]\n 85362: s1 = s1 + a2\n 85365: a2 = u64 [sp + 0x160]\n 85369: a2 = t2 <u a2\n 85372: a4 = u64 [sp + 0x188]\n 85376: a3 = a5 ^ a4\n 85379: a4 = a5 <u a4\n 85382: a4 = a2 if a3 == 0\n 85385: a3 = u64 [sp + 0x180]\n 85389: t1 = t0 <u a3\n 85392: a2 = u64 [sp + 0x178]\n 85396: a1 = s1 ^ a2\n 85399: a2 = s1 <u a2\n 85402: a2 = t1 if a1 == 0\n 85405: a3 = t0 ^ a3\n 85408: a3 = a3 | a1\n 85411: a2 = a4 if a3 == 0\n 85414: a1 = u64 [sp + 0x148]\n 85418: a3 = a1 >> 0x38\n 85421: u8 [a0 + 0xf] = a3\n 85424: a3 = a1 >> 0x30\n 85427: u8 [a0 + 0xe] = a3\n 85430: a3 = a1 >> 0x28\n 85433: u8 [a0 + 0xd] = a3\n 85436: a3 = a1 >> 0x20\n 85439: u8 [a0 + 0xc] = a3\n 85442: a3 = a1 >> 0x18\n 85445: u8 [a0 + 0xb] = a3\n 85448: a3 = a1 >> 0x10\n 85451: u8 [a0 + 0xa] = a3\n 85454: a3 = a1 >> 0x8\n 85457: u8 [a0 + 0x9] = a3\n 85460: u8 [a0 + 0x8] = a1\n 85463: a1 = u64 [sp + 0x150]\n 85467: a3 = a1 >> 0x38\n 85470: u8 [a0 + 0x17] = a3\n 85473: a3 = a1 >> 0x30\n 85476: u8 [a0 + 0x16] = a3\n 85479: a3 = a1 >> 0x28\n 85482: u8 [a0 + 0x15] = a3\n 85485: a3 = a1 >> 0x20\n 85488: u8 [a0 + 0x14] = a3\n 85491: a3 = a1 >> 0x18\n 85494: u8 [a0 + 0x13] = a3\n 85497: a3 = a1 >> 0x10\n 85500: u8 [a0 + 0x12] = a3\n 85503: u8 [a0 + 0x10] = a1\n 85506: a3 = a1 >> 0x8\n 85509: u8 [a0 + 0x11] = a3\n 85512: a1 = u64 [sp + 0x158]\n 85516: a3 = a1 >> 0x38\n 85519: u8 [a0 + 0x1f] = a3\n 85522: a3 = a1 >> 0x30\n 85525: u8 [a0 + 0x1e] = a3\n 85528: a3 = a1 >> 0x28\n 85531: u8 [a0 + 0x1d] = a3\n 85534: a3 = a1 >> 0x20\n 85537: u8 [a0 + 0x1c] = a3\n 85540: a3 = a1 >> 0x18\n 85543: u8 [a0 + 0x1b] = a3\n 85546: a3 = a1 >> 0x10\n 85549: u8 [a0 + 0x1a] = a3\n 85552: u8 [a0 + 0x18] = a1\n 85555: a3 = a1 >> 0x8\n 85558: u8 [a0 + 0x19] = a3\n 85561: u8 [a0 + 7] = 0\n 85564: u8 [a0 + 6] = 0\n 85567: u8 [a0 + 5] = 0\n 85570: u8 [a0 + 4] = 0\n 85573: u8 [a0 + 3] = 0\n 85576: u8 [a0 + 2] = 0\n 85579: u8 [a0 + 1] = 0\n 85582: u8 [a0 + 0] = 0\n 85584: a3 = t0\n 85586: jump @1156 if a2 != 0\n      : @1165 (gas: 15)\n 85590: a0 = u64 [sp + 0x8]\n 85593: a1 = u64 [sp + 0x48]\n 85596: u64 [a0] = a1\n 85598: a1 = u64 [sp + 0x40]\n 85601: u64 [a0 + 0x8] = a1\n 85604: a1 = u64 [sp + 0x38]\n 85607: u64 [a0 + 0x10] = a1\n 85610: a1 = u64 [sp + 0x10]\n 85613: u64 [a0 + 0x18] = a1\n 85616: sp = s0 + 0xfffffffffffffb40\n 85620: ra = u64 [sp + 0x4b8]\n 85624: s0 = u64 [sp + 0x4b0]\n 85628: s1 = u64 [sp + 0x4a8]\n 85632: sp = sp + 0x4c0\n 85636: ret\n      : @1166 (gas: 3)\n 85638: a1 = 0x20\n 85641: a0 = u64 [sp + 0x108]\n 85645: ra = 1044, jump @0\n      : @1167 [@dyn 522] (gas: 90)\n 85652: a1 = u8 [a0 + 0x11]\n 85655: a2 = u8 [a0 + 0x10]\n 85658: a3 = u8 [a0 + 0x12]\n 85661: a4 = u8 [a0 + 0x13]\n 85664: a1 = a1 << 0x8\n 85667: a1 = a1 | a2\n 85670: a3 = a3 << 0x10\n 85673: a4 = a4 << 0x18\n 85676: a3 = a3 | a4\n 85679: t0 = a3 | a1\n 85682: a2 = u8 [a0 + 0x1]\n 85685: a3 = u8 [a0]\n 85687: a4 = u8 [a0 + 0x2]\n 85690: a5 = u8 [a0 + 0x3]\n 85693: a2 = a2 << 0x8\n 85696: a2 = a2 | a3\n 85699: a4 = a4 << 0x10\n 85702: a5 = a5 << 0x18\n 85705: a4 = a4 | a5\n 85708: t1 = a4 | a2\n 85711: a3 = u8 [a0 + 0x15]\n 85714: a4 = u8 [a0 + 0x14]\n 85717: a5 = u8 [a0 + 0x16]\n 85720: s1 = u8 [a0 + 0x17]\n 85723: a3 = a3 << 0x8\n 85726: a3 = a3 | a4\n 85729: a5 = a5 << 0x10\n 85732: s1 = s1 << 0x18\n 85735: a5 = a5 | s1\n 85738: t2 = a5 | a3\n 85741: a4 = u8 [a0 + 0x5]\n 85744: a5 = u8 [a0 + 0x4]\n 85747: s1 = u8 [a0 + 0x6]\n 85750: a1 = u8 [a0 + 0x7]\n 85753: a4 = a4 << 0x8\n 85756: a4 = a4 | a5\n 85759: s1 = s1 << 0x10\n 85762: a1 = a1 << 0x18\n 85765: a1 = a1 | s1\n 85768: ra = a1 | a4\n 85771: a1 = u8 [a0 + 0x19]\n 85774: a5 = u8 [a0 + 0x18]\n 85777: s1 = u8 [a0 + 0x1a]\n 85780: a2 = u8 [a0 + 0x1b]\n 85783: a1 = a1 << 0x8\n 85786: a1 = a1 | a5\n 85789: s1 = s1 << 0x10\n 85792: a2 = a2 << 0x18\n 85795: a2 = a2 | s1\n 85798: a5 = a2 | a1\n 85801: a1 = u8 [a0 + 0x9]\n 85804: a2 = u8 [a0 + 0x8]\n 85807: s1 = u8 [a0 + 0xa]\n 85810: a3 = u8 [a0 + 0xb]\n 85813: a1 = a1 << 0x8\n 85816: a1 = a1 | a2\n 85819: s1 = s1 << 0x10\n 85822: a3 = a3 << 0x18\n 85825: a3 = a3 | s1\n 85828: s1 = a3 | a1\n 85831: a1 = u8 [a0 + 0x1d]\n 85834: a2 = u8 [a0 + 0x1c]\n 85837: a3 = u8 [a0 + 0x1e]\n 85840: a4 = u8 [a0 + 0x1f]\n 85843: a1 = a1 << 0x8\n 85846: a1 = a1 | a2\n 85849: a3 = a3 << 0x10\n 85852: a4 = a4 << 0x18\n 85855: a3 = a3 | a4\n 85858: a1 = a1 | a3\n 85861: a2 = u8 [a0 + 0xd]\n 85864: a3 = u8 [a0 + 0xc]\n 85867: a4 = u8 [a0 + 0xe]\n 85870: a0 = u8 [a0 + 0xf]\n 85873: a2 = a2 << 0x8\n 85876: a2 = a2 | a3\n 85879: a4 = a4 << 0x10\n 85882: a0 = a0 << 0x18\n 85885: a0 = a0 | a4\n 85888: a0 = a0 | a2\n 85891: a0 = a0 | a1\n 85894: a0 = a0 << 0x20\n 85897: a5 = a5 | s1\n 85900: a0 = a0 | a5\n 85903: a1 = ra | t2\n 85906: a1 = a1 << 0x20\n 85909: a2 = t1 | t0\n 85912: a1 = a1 | a2\n 85915: a0 = a0 | a1\n 85918: jump @1173 if a0 == 0\n      : @1168 (gas: 10)\n 85921: a0 = u64 [sp + 0x20]\n 85924: a1 = u64 [sp + 0x18]\n 85927: a0 = a0 | a1\n 85930: a1 = 0xffffffe0\n 85940: a2 = u64 [sp + 0x28]\n 85943: a1 = a2 <u a1\n 85946: a2 = u64 [sp + 0x30]\n 85949: a1 = 0 if a2 != 0\n 85951: a1 = 0 if a0 != 0\n 85953: jump @1170 if a1 == 0\n      : @1169 (gas: 3)\n 85956: a0 = i32 [sp + 0x118]\n 85960: a1 = 0x20\n 85963: ra = 1046, jump @0\n      : @1170 [@dyn 523] (gas: 1)\n 85970: trap\n      : @1171 (gas: 8)\n 85971: u64 [sp + 464] = 0\n 85975: u64 [sp + 456] = 0\n 85979: u64 [sp + 448] = 0\n 85983: a0 = 0x4e487b7100000000\n 85993: a1 = sp + 0x1c0\n 85997: u64 [sp + 0x1d8] = a0\n 86001: a0 = 0\n 86003: ra = 1048, jump @23\n      : @1172 [@dyn 524] (gas: 8)\n 86010: u64 [sp + 440] = 0\n 86014: u64 [sp + 432] = 0\n 86018: u64 [sp + 416] = 0x32\n 86023: a0 = 0x4\n 86026: a1 = sp + 0x1a0\n 86030: u64 [sp + 424] = 0\n 86034: ra = 0x41e\n 86038: jump @23\n      : @1173 (gas: 8)\n 86042: u64 [sp + 976] = 0\n 86046: u64 [sp + 968] = 0\n 86050: u64 [sp + 960] = 0\n 86054: a0 = 0x4e487b7100000000\n 86064: a1 = sp + 0x3c0\n 86068: u64 [sp + 0x3d8] = a0\n 86072: a0 = 0\n 86074: ra = 1050, jump @23\n      : @1174 [@dyn 525] (gas: 8)\n 86081: u64 [sp + 952] = 0\n 86085: u64 [sp + 944] = 0\n 86089: u64 [sp + 928] = 0x32\n 86094: a0 = 0x4\n 86097: a1 = sp + 0x3a0\n 86101: u64 [sp + 936] = 0\n 86105: ra = 0x41e\n 86109: jump @23\n      : @1175 (gas: 8)\n 86113: u64 [sp + 912] = 0\n 86117: u64 [sp + 904] = 0\n 86121: u64 [sp + 896] = 0\n 86125: a0 = 0x4e487b7100000000\n 86135: a1 = sp + 0x380\n 86139: u64 [sp + 0x398] = a0\n 86143: a0 = 0\n 86145: ra = 1052, jump @23\n      : @1176 [@dyn 526] (gas: 7)\n 86152: u64 [sp + 888] = 0\n 86156: u64 [sp + 880] = 0\n 86160: u64 [sp + 864] = 0x32\n 86165: a0 = 0x4\n 86168: a1 = sp + 0x360\n 86172: u64 [sp + 872] = 0\n 86176: ra = 1054, jump @23\n      : @1177 [@dyn 527] (gas: 3)\n 86183: a1 = 0x24\n 86186: a0 = 0\n 86188: ra = 1056, jump @0\n      : @1178 [@dyn 528] (gas: 6)\n 86195: i32 a1 = a0 + 0\n 86197: a0 = 0x1\n 86200: a2 = 0x24\n 86203: ra = 0x422\n 86207: ecalli 10 // 'seal_return'\n 86209: fallthrough\n      : @1179 [@dyn 529] (gas: 24)\n 86210: sp = sp + 0xffffffffffffff00\n 86214: u64 [sp + 0xf8] = ra\n 86218: u64 [sp + 0xf0] = s0\n 86222: u64 [sp + 0xe8] = s1\n 86226: s0 = sp + 0x100\n 86230: sp = sp & 0xffffffffffffffe0\n 86233: a1 = u64 [a0 + 0x18]\n 86236: u64 [sp + 0x38] = a1\n 86239: a1 = u64 [a0 + 0x10]\n 86242: u64 [sp + 0x30] = a1\n 86245: a1 = u64 [a0 + 0x8]\n 86248: u64 [sp + 0x28] = a1\n 86251: a0 = u64 [a0]\n 86253: u64 [sp + 0x20] = a0\n 86256: i32 a0 = sp + 0x60\n 86259: ecalli 5 // 'caller'\n 86261: a0 = u64 [sp + 0x68]\n 86264: u64 [sp + 0x18] = a0\n 86267: a0 = u64 [sp + 0x60]\n 86270: u64 [sp + 0x10] = a0\n 86273: s1 = u32 [sp + 0x70]\n 86276: i32 a0 = sp + 0x80\n 86280: ecalli 0 // 'address'\n 86281: fallthrough\n      : @1180 (gas: 11)\n 86282: a0 = u32 [sp + 0x90]\n 86286: a1 = u64 [sp + 0x80]\n 86290: a2 = u64 [sp + 0x88]\n 86294: a0 = a0 ^ s1\n 86297: a3 = u64 [sp + 0x10]\n 86300: a1 = a1 ^ a3\n 86303: a0 = a0 | a1\n 86306: a1 = u64 [sp + 0x18]\n 86309: a1 = a1 ^ a2\n 86312: a0 = a0 | a1\n 86315: jump @1188 if a0 != 0\n      : @1181 (gas: 16)\n 86319: u64 [sp + 184] = 0\n 86323: u64 [sp + 176] = 0\n 86327: u64 [sp + 168] = 0\n 86331: u64 [sp + 160] = 0x3\n 86336: u64 [sp + 216] = 0\n 86340: u64 [sp + 208] = 0\n 86344: u64 [sp + 200] = 0\n 86348: u64 [sp + 192] = 0\n 86352: u32 [sp + 224] = 0x20\n 86357: i32 a1 = sp + 0xa0\n 86361: i32 a3 = sp + 0xc0\n 86365: i32 a4 = sp + 0xe0\n 86369: a2 = 0xffffffffffffffff\n 86372: a0 = 0\n 86374: ecalli 7 // 'get_storage'\n 86376: fallthrough\n      : @1182 (gas: 12)\n 86377: a0 = u64 [sp + 0xd0]\n 86381: a1 = u64 [sp + 0xd8]\n 86385: a2 = u64 [sp + 0xc8]\n 86389: a3 = u64 [sp + 0xc0]\n 86393: a4 = a2 | a1\n 86396: a5 = a3 | a0\n 86399: a4 = a4 | a5\n 86402: t0 = u64 [sp + 0x38]\n 86405: t1 = u64 [sp + 0x30]\n 86408: t2 = u64 [sp + 0x28]\n 86411: ra = u64 [sp + 0x20]\n 86414: jump @1188 if a4 == 0\n      : @1183 (gas: 10)\n 86417: a4 = a2 >u 0\n 86419: a5 = a3 <u 0x33\n 86422: a5 = a5 ^ 0x1\n 86425: a5 = a4 if a2 != 0\n 86428: a4 = a0 >u 0\n 86430: s1 = a1 >u 0\n 86432: s1 = a4 if a1 == 0\n 86435: a4 = a0 | a1\n 86438: s1 = a5 if a4 == 0\n 86441: jump @1188 if s1 != 0\n      : @1184 (gas: 12)\n 86444: a3 = a3 <u ra\n 86447: a4 = a2 ^ t2\n 86450: a2 = a2 <u t2\n 86453: a2 = a3 if a4 == 0\n 86456: a3 = a0 <u t1\n 86459: a4 = a1 ^ t0\n 86462: a1 = a1 <u t0\n 86465: a1 = a3 if a4 == 0\n 86468: a0 = a0 ^ t1\n 86471: a0 = a0 | a4\n 86474: a1 = a2 if a0 == 0\n 86477: jump @1188 if a1 != 0\n      : @1185 (gas: 4)\n 86480: a0 = ra | t1\n 86483: a1 = t2 | t0\n 86486: a0 = a0 | a1\n 86489: jump @1188 if a0 == 0\n      : @1186 (gas: 6)\n 86492: u64 [sp + 0x40] = ra\n 86495: u64 [sp + 0x48] = t2\n 86498: u64 [sp + 0x50] = t1\n 86501: a0 = sp + 0x40\n 86504: u64 [sp + 0x58] = t0\n 86507: ra = 1060, jump @1200\n      : @1187 [@dyn 530] (gas: 6)\n 86513: sp = s0 + 0xffffffffffffff00\n 86517: ra = u64 [sp + 0xf8]\n 86521: s0 = u64 [sp + 0xf0]\n 86525: s1 = u64 [sp + 0xe8]\n 86529: sp = sp + 0x100\n 86533: ret\n      : @1188 (gas: 3)\n 86535: a0 = 0\n 86537: a1 = 0\n 86539: ra = 1062, jump @0\n      : @1189 [@dyn 531] (gas: 6)\n 86546: i32 a1 = a0 + 0\n 86548: a0 = 0x1\n 86551: a2 = 0\n 86553: ra = 0x428\n 86557: ecalli 10 // 'seal_return'\n 86559: fallthrough\n      : @1190 [@dyn 532] (gas: 29)\n 86560: sp = sp + 0xffffffffffffff60\n 86564: u64 [sp + 0x98] = ra\n 86568: u64 [sp + 0x90] = s0\n 86572: u64 [sp + 0x88] = s1\n 86576: s0 = sp + 0xa0\n 86580: sp = sp & 0xffffffffffffffe0\n 86583: a1 = u64 [a0 + 0x18]\n 86586: u64 [sp + 0x18] = a1\n 86589: a1 = u64 [a0 + 0x10]\n 86592: u64 [sp + 0x10] = a1\n 86595: a1 = u64 [a0 + 0x8]\n 86598: u64 [sp + 0x8] = a1\n 86601: s1 = u64 [a0]\n 86603: u64 [sp + 88] = 0\n 86606: u64 [sp + 80] = 0\n 86609: u64 [sp + 72] = 0\n 86612: u64 [sp + 64] = 0x3\n 86616: u64 [sp + 120] = 0\n 86619: u64 [sp + 112] = 0\n 86622: u64 [sp + 104] = 0\n 86625: u64 [sp + 96] = 0\n 86628: u32 [sp + 128] = 0x20\n 86633: i32 a1 = sp + 0x40\n 86636: i32 a3 = sp + 0x60\n 86639: i32 a4 = sp + 0x80\n 86643: a2 = 0xffffffffffffffff\n 86646: a0 = 0\n 86648: ecalli 7 // 'get_storage'\n 86650: fallthrough\n      : @1191 (gas: 11)\n 86651: t2 = u64 [sp + 0x8]\n 86654: t1 = u64 [sp + 0x10]\n 86657: t0 = u64 [sp + 0x18]\n 86660: a0 = u64 [sp + 0x70]\n 86663: a1 = u64 [sp + 0x78]\n 86666: a2 = u64 [sp + 0x68]\n 86669: a3 = u64 [sp + 0x60]\n 86672: a4 = a2 | a1\n 86675: a5 = a3 | a0\n 86678: a4 = a4 | a5\n 86681: jump @1197 if a4 == 0\n      : @1192 (gas: 11)\n 86684: ra = s1\n 86686: a4 = a2 >u 0\n 86688: a5 = a3 <u 0x33\n 86691: a5 = a5 ^ 0x1\n 86694: a5 = a4 if a2 != 0\n 86697: a4 = a0 >u 0\n 86699: s1 = a1 >u 0\n 86701: s1 = a4 if a1 == 0\n 86704: a4 = a0 | a1\n 86707: s1 = a5 if a4 == 0\n 86710: jump @1197 if s1 != 0\n      : @1193 (gas: 12)\n 86713: a3 = a3 <u ra\n 86716: a4 = a2 ^ t2\n 86719: a2 = a2 <u t2\n 86722: a2 = a3 if a4 == 0\n 86725: a3 = a0 <u t1\n 86728: a4 = a1 ^ t0\n 86731: a1 = a1 <u t0\n 86734: a1 = a3 if a4 == 0\n 86737: a0 = a0 ^ t1\n 86740: a0 = a0 | a4\n 86743: a1 = a2 if a0 == 0\n 86746: jump @1197 if a1 != 0\n      : @1194 (gas: 4)\n 86749: a0 = ra | t1\n 86752: a1 = t2 | t0\n 86755: a0 = a0 | a1\n 86758: jump @1197 if a0 == 0\n      : @1195 (gas: 6)\n 86761: u64 [sp + 0x20] = ra\n 86764: u64 [sp + 0x28] = t2\n 86767: u64 [sp + 0x30] = t1\n 86770: a0 = sp + 0x20\n 86773: u64 [sp + 0x38] = t0\n 86776: ra = 1066, jump @1200\n      : @1196 [@dyn 533] (gas: 6)\n 86781: sp = s0 + 0xffffffffffffff60\n 86785: ra = u64 [sp + 0x98]\n 86789: s0 = u64 [sp + 0x90]\n 86793: s1 = u64 [sp + 0x88]\n 86797: sp = sp + 0xa0\n 86801: ret\n      : @1197 (gas: 3)\n 86803: a0 = 0\n 86805: a1 = 0\n 86807: ra = 1068, jump @0\n      : @1198 [@dyn 534] (gas: 6)\n 86814: i32 a1 = a0 + 0\n 86816: a0 = 0x1\n 86819: a2 = 0\n 86821: ra = 0x42e\n 86825: ecalli 10 // 'seal_return'\n 86827: fallthrough\n      : @1199 [@dyn 535] (gas: 9)\n 86828: a1 = u64 [a2 + 0x18]\n 86831: a3 = u64 [a2 + 0x10]\n 86834: a4 = u64 [a2 + 0x8]\n 86837: a2 = u64 [a2]\n 86839: u64 [a0 + 0x18] = a1\n 86842: u64 [a0 + 0x10] = a3\n 86845: u64 [a0 + 0x8] = a4\n 86848: u64 [a0] = a2\n 86850: ret\n      : @1200 (gas: 49)\n 86852: sp = sp + 0xffffffffffffff60\n 86856: u64 [sp + 0x98] = ra\n 86860: u64 [sp + 0x90] = s0\n 86864: u64 [sp + 0x88] = s1\n 86868: s0 = sp + 0xa0\n 86872: sp = sp & 0xffffffffffffffe0\n 86875: a1 = u64 [a0]\n 86877: u64 [sp + 0x18] = a1\n 86880: a1 = u64 [a0 + 0x8]\n 86883: u64 [sp + 0x10] = a1\n 86886: a1 = u64 [a0 + 0x10]\n 86889: u64 [sp + 0x8] = a1\n 86892: s1 = u64 [a0 + 0x18]\n 86895: u64 [sp + 88] = 0\n 86898: u64 [sp + 80] = 0\n 86901: u64 [sp + 72] = 0\n 86904: u64 [sp + 64] = 0x4\n 86908: u64 [sp + 120] = 0\n 86911: u64 [sp + 112] = 0\n 86914: u64 [sp + 104] = 0\n 86917: u64 [sp + 96] = 0\n 86920: u32 [sp + 32] = 0x20\n 86924: i32 a1 = sp + 0x40\n 86927: i32 a3 = sp + 0x60\n 86930: i32 a4 = sp + 0x20\n 86933: a2 = 0xffffffffffffffff\n 86936: a0 = 0\n 86938: ecalli 7 // 'get_storage'\n 86940: u64 [sp + 88] = 0\n 86943: u64 [sp + 80] = 0\n 86946: u64 [sp + 72] = 0\n 86949: u64 [sp + 64] = 0x4\n 86953: u64 [sp] = s1\n 86955: u64 [sp + 0x78] = s1\n 86958: a0 = u64 [sp + 0x8]\n 86961: u64 [sp + 0x70] = a0\n 86964: a0 = u64 [sp + 0x10]\n 86967: u64 [sp + 0x68] = a0\n 86970: a0 = u64 [sp + 0x18]\n 86973: u64 [sp + 0x60] = a0\n 86976: i32 a1 = sp + 0x40\n 86979: i32 a3 = sp + 0x60\n 86982: a2 = 0xffffffffffffffff\n 86985: a4 = 0x20\n 86988: a0 = 0\n 86990: ecalli 12 // 'set_storage'\n 86992: a0 = 0x40\n 86995: a1 = 0x20\n 86998: ra = 1072, jump @0\n      : @1201 [@dyn 536] (gas: 100)\n 87005: a1 = u8 [a0 + 0x11]\n 87008: a2 = u8 [a0 + 0x10]\n 87011: a3 = u8 [a0 + 0x12]\n 87014: a4 = u8 [a0 + 0x13]\n 87017: a1 = a1 << 0x8\n 87020: a1 = a1 | a2\n 87023: a3 = a3 << 0x10\n 87026: a4 = a4 << 0x18\n 87029: a3 = a3 | a4\n 87032: a1 = a1 | a3\n 87035: a2 = u8 [a0 + 0x15]\n 87038: a3 = u8 [a0 + 0x14]\n 87041: a4 = u8 [a0 + 0x16]\n 87044: a5 = u8 [a0 + 0x17]\n 87047: a2 = a2 << 0x8\n 87050: a2 = a2 | a3\n 87053: a4 = a4 << 0x10\n 87056: a5 = a5 << 0x18\n 87059: a4 = a4 | a5\n 87062: a2 = a2 | a4\n 87065: a2 = a2 << 0x20\n 87068: t0 = a2 | a1\n 87071: a2 = u8 [a0 + 0x1]\n 87074: a3 = u8 [a0]\n 87076: a4 = u8 [a0 + 0x2]\n 87079: a5 = u8 [a0 + 0x3]\n 87082: a2 = a2 << 0x8\n 87085: a2 = a2 | a3\n 87088: a4 = a4 << 0x10\n 87091: a5 = a5 << 0x18\n 87094: a4 = a4 | a5\n 87097: a2 = a2 | a4\n 87100: a3 = u8 [a0 + 0x5]\n 87103: a4 = u8 [a0 + 0x4]\n 87106: a5 = u8 [a0 + 0x6]\n 87109: s1 = u8 [a0 + 0x7]\n 87112: a3 = a3 << 0x8\n 87115: a3 = a3 | a4\n 87118: a5 = a5 << 0x10\n 87121: s1 = s1 << 0x18\n 87124: a5 = a5 | s1\n 87127: a3 = a3 | a5\n 87130: a3 = a3 << 0x20\n 87133: a2 = a2 | a3\n 87136: a3 = u8 [a0 + 0x19]\n 87139: a4 = u8 [a0 + 0x18]\n 87142: a5 = u8 [a0 + 0x1a]\n 87145: s1 = u8 [a0 + 0x1b]\n 87148: a3 = a3 << 0x8\n 87151: a3 = a3 | a4\n 87154: a5 = a5 << 0x10\n 87157: s1 = s1 << 0x18\n 87160: a5 = a5 | s1\n 87163: a3 = a3 | a5\n 87166: a4 = u8 [a0 + 0x1d]\n 87169: a5 = u8 [a0 + 0x1c]\n 87172: s1 = u8 [a0 + 0x1e]\n 87175: a1 = u8 [a0 + 0x1f]\n 87178: a4 = a4 << 0x8\n 87181: a4 = a4 | a5\n 87184: s1 = s1 << 0x10\n 87187: a1 = a1 << 0x18\n 87190: a1 = a1 | s1\n 87193: a1 = a1 | a4\n 87196: a1 = a1 << 0x20\n 87199: a3 = a3 | a1\n 87202: a1 = u8 [a0 + 0x9]\n 87205: a4 = u8 [a0 + 0x8]\n 87208: a5 = u8 [a0 + 0xa]\n 87211: s1 = u8 [a0 + 0xb]\n 87214: a1 = a1 << 0x8\n 87217: a1 = a1 | a4\n 87220: a5 = a5 << 0x10\n 87223: s1 = s1 << 0x18\n 87226: a5 = a5 | s1\n 87229: a1 = a1 | a5\n 87232: a4 = u8 [a0 + 0xd]\n 87235: a5 = u8 [a0 + 0xc]\n 87238: s1 = u8 [a0 + 0xe]\n 87241: a0 = u8 [a0 + 0xf]\n 87244: a4 = a4 << 0x8\n 87247: a4 = a4 | a5\n 87250: s1 = s1 << 0x10\n 87253: a0 = a0 << 0x18\n 87256: a0 = a0 | s1\n 87259: a0 = a0 | a4\n 87262: a0 = a0 << 0x20\n 87265: a0 = a0 | a1\n 87268: a0 = reverse a0\n 87270: s1 = reverse a3\n 87272: a1 = reverse a2\n 87274: a2 = reverse t0\n 87276: a1 = a1 | a2\n 87279: a2 = s1 | a0\n 87282: a2 = a2 | a1\n 87285: a2 = a2 >> 0x20\n 87288: a0 = a0 | a1\n 87291: a0 = a0 << 0x20\n 87294: a0 = a0 | a2\n 87297: jump @1205 if a0 != 0\n      : @1202 (gas: 4)\n 87301: i32 s1 = s1 + 0\n 87303: a1 = 0x20\n 87306: a0 = s1\n 87308: ra = 1074, jump @0\n      : @1203 [@dyn 537] (gas: 71)\n 87315: a1 = u64 [sp]\n 87317: a1 = reverse a1\n 87319: a2 = u64 [sp + 0x8]\n 87322: a2 = reverse a2\n 87324: a3 = u64 [sp + 0x10]\n 87327: a3 = reverse a3\n 87329: a4 = u64 [sp + 0x18]\n 87332: a4 = reverse a4\n 87334: a5 = a4 >> 0x38\n 87337: u8 [a0 + 0x1f] = a5\n 87340: a5 = a4 >> 0x30\n 87343: u8 [a0 + 0x1e] = a5\n 87346: a5 = a4 >> 0x28\n 87349: u8 [a0 + 0x1d] = a5\n 87352: a5 = a4 >> 0x20\n 87355: u8 [a0 + 0x1c] = a5\n 87358: a5 = a4 >> 0x18\n 87361: u8 [a0 + 0x1b] = a5\n 87364: a5 = a4 >> 0x10\n 87367: u8 [a0 + 0x1a] = a5\n 87370: a5 = a4 >> 0x8\n 87373: u8 [a0 + 0x19] = a5\n 87376: u8 [a0 + 0x18] = a4\n 87379: u8 [a0 + 0x10] = a3\n 87382: a4 = a3 >> 0x38\n 87385: u8 [a0 + 0x17] = a4\n 87388: a4 = a3 >> 0x30\n 87391: u8 [a0 + 0x16] = a4\n 87394: a4 = a3 >> 0x28\n 87397: u8 [a0 + 0x15] = a4\n 87400: a4 = a3 >> 0x20\n 87403: u8 [a0 + 0x14] = a4\n 87406: a4 = a3 >> 0x18\n 87409: u8 [a0 + 0x13] = a4\n 87412: a4 = a3 >> 0x10\n 87415: u8 [a0 + 0x12] = a4\n 87418: a3 = a3 >> 0x8\n 87421: u8 [a0 + 0x11] = a3\n 87424: u8 [a0 + 0x8] = a2\n 87427: a3 = a2 >> 0x38\n 87430: u8 [a0 + 0xf] = a3\n 87433: a3 = a2 >> 0x30\n 87436: u8 [a0 + 0xe] = a3\n 87439: a3 = a2 >> 0x28\n 87442: u8 [a0 + 0xd] = a3\n 87445: a3 = a2 >> 0x20\n 87448: u8 [a0 + 0xc] = a3\n 87451: a3 = a2 >> 0x18\n 87454: u8 [a0 + 0xb] = a3\n 87457: a3 = a2 >> 0x10\n 87460: u8 [a0 + 0xa] = a3\n 87463: a2 = a2 >> 0x8\n 87466: u8 [a0 + 0x9] = a2\n 87469: u8 [a0] = a1\n 87471: a2 = a1 >> 0x38\n 87474: u8 [a0 + 0x7] = a2\n 87477: a2 = a1 >> 0x30\n 87480: u8 [a0 + 0x6] = a2\n 87483: a2 = a1 >> 0x28\n 87486: u8 [a0 + 0x5] = a2\n 87489: a2 = a1 >> 0x20\n 87492: u8 [a0 + 0x4] = a2\n 87495: a2 = a1 >> 0x18\n 87498: u8 [a0 + 0x3] = a2\n 87501: a2 = a1 >> 0x10\n 87504: u8 [a0 + 0x2] = a2\n 87507: a1 = a1 >> 0x8\n 87510: u8 [a0 + 0x1] = a1\n 87513: a1 = 0x20\n 87516: a0 = s1\n 87518: ra = 1076, jump @0\n      : @1204 [@dyn 538] (gas: 19)\n 87525: a1 = u64 [0x20060]\n 87530: a2 = u64 [0x20068]\n 87535: a3 = u64 [0x20070]\n 87540: a4 = u64 [0x20078]\n 87545: u64 [sp + 0x78] = a1\n 87548: u64 [sp + 0x70] = a2\n 87551: u64 [sp + 0x68] = a3\n 87554: u64 [sp + 0x60] = a4\n 87557: i32 a2 = a0 + 0\n 87559: i32 a0 = sp + 0x60\n 87562: a1 = 0x1\n 87565: a3 = 0x20\n 87568: ecalli 6 // 'deposit_event'\n 87570: sp = s0 + 0xffffffffffffff60\n 87574: ra = u64 [sp + 0x98]\n 87578: s0 = u64 [sp + 0x90]\n 87582: s1 = u64 [sp + 0x88]\n 87586: sp = sp + 0xa0\n 87590: ret\n      : @1205 (gas: 1)\n 87592: trap\n      : @1206 (gas: 33)\n 87593: sp = sp + 0xffffffffffffff20\n 87597: u64 [sp + 0xd8] = ra\n 87601: u64 [sp + 0xd0] = s0\n 87605: u64 [sp + 0xc8] = s1\n 87609: s0 = sp + 0xe0\n 87613: sp = sp & 0xffffffffffffffe0\n 87616: a1 = u64 [a0 + 0x18]\n 87619: u64 [sp + 0x38] = a1\n 87622: a1 = u64 [a0 + 0x10]\n 87625: u64 [sp + 0x30] = a1\n 87628: a1 = u64 [a0 + 0x8]\n 87631: u64 [sp + 0x28] = a1\n 87634: a0 = u64 [a0]\n 87636: u64 [sp + 0x20] = a0\n 87639: i32 a0 = sp + 0x60\n 87642: ecalli 5 // 'caller'\n 87644: a0 = u64 [sp + 0x68]\n 87647: a1 = i32 [sp + 0x70]\n 87650: s1 = u64 [sp + 0x60]\n 87653: a0 = reverse a0\n 87655: a2 = a0 << 0x20\n 87658: a1 = reverse a1\n 87660: a1 = a1 >> 0x20\n 87663: a1 = a1 | a2\n 87666: u64 [sp + 0x18] = a1\n 87669: a0 = a0 >> 0x20\n 87672: a1 = reverse s1\n 87674: a1 = a1 << 0x20\n 87677: a0 = a0 | a1\n 87680: u64 [sp + 0x10] = a0\n 87683: a1 = 0x20\n 87686: a0 = 0\n 87688: ra = 1078, jump @0\n      : @1207 [@dyn 539] (gas: 56)\n 87695: a1 = u64 [sp + 0x10]\n 87698: a1 = reverse a1\n 87700: a2 = u64 [sp + 0x18]\n 87703: a2 = reverse a2\n 87705: a3 = s1 >> 0x18\n 87708: u8 [a0 + 0xf] = a3\n 87711: a3 = s1 >> 0x10\n 87714: u8 [a0 + 0xe] = a3\n 87717: a3 = s1 >> 0x8\n 87720: u8 [a0 + 0xd] = a3\n 87723: u8 [a0 + 0xc] = s1\n 87726: u8 [a0 + 11] = 0\n 87729: u8 [a0 + 10] = 0\n 87732: u8 [a0 + 9] = 0\n 87735: u8 [a0 + 8] = 0\n 87738: u8 [a0 + 7] = 0\n 87741: u8 [a0 + 6] = 0\n 87744: u8 [a0 + 5] = 0\n 87747: u8 [a0 + 4] = 0\n 87750: u8 [a0 + 3] = 0\n 87753: u8 [a0 + 2] = 0\n 87756: u8 [a0 + 1] = 0\n 87759: u8 [a0 + 0] = 0\n 87761: u8 [a0 + 0x18] = a2\n 87764: u8 [a0 + 0x10] = a1\n 87767: a3 = a2 >> 0x38\n 87770: u8 [a0 + 0x1f] = a3\n 87773: a3 = a2 >> 0x30\n 87776: u8 [a0 + 0x1e] = a3\n 87779: a3 = a2 >> 0x28\n 87782: u8 [a0 + 0x1d] = a3\n 87785: a3 = a2 >> 0x20\n 87788: u8 [a0 + 0x1c] = a3\n 87791: a3 = a2 >> 0x18\n 87794: u8 [a0 + 0x1b] = a3\n 87797: a3 = a2 >> 0x10\n 87800: u8 [a0 + 0x1a] = a3\n 87803: a2 = a2 >> 0x8\n 87806: u8 [a0 + 0x19] = a2\n 87809: a2 = a1 >> 0x38\n 87812: u8 [a0 + 0x17] = a2\n 87815: a2 = a1 >> 0x30\n 87818: u8 [a0 + 0x16] = a2\n 87821: a2 = a1 >> 0x28\n 87824: u8 [a0 + 0x15] = a2\n 87827: a2 = a1 >> 0x20\n 87830: u8 [a0 + 0x14] = a2\n 87833: a2 = a1 >> 0x18\n 87836: u8 [a0 + 0x13] = a2\n 87839: a2 = a1 >> 0x10\n 87842: u8 [a0 + 0x12] = a2\n 87845: a1 = a1 >> 0x8\n 87848: u8 [a0 + 0x11] = a1\n 87851: a0 = 0x20\n 87854: a1 = 0x20\n 87857: ra = 1080, jump @0\n      : @1208 [@dyn 540] (gas: 35)\n 87864: u8 [a0 + 31] = 0x2\n 87868: u8 [a0 + 30] = 0\n 87871: u8 [a0 + 29] = 0\n 87874: u8 [a0 + 28] = 0\n 87877: u8 [a0 + 27] = 0\n 87880: u8 [a0 + 26] = 0\n 87883: u8 [a0 + 25] = 0\n 87886: u8 [a0 + 24] = 0\n 87889: u8 [a0 + 23] = 0\n 87892: u8 [a0 + 22] = 0\n 87895: u8 [a0 + 21] = 0\n 87898: u8 [a0 + 20] = 0\n 87901: u8 [a0 + 19] = 0\n 87904: u8 [a0 + 18] = 0\n 87907: u8 [a0 + 17] = 0\n 87910: u8 [a0 + 16] = 0\n 87913: u8 [a0 + 15] = 0\n 87916: u8 [a0 + 14] = 0\n 87919: u8 [a0 + 13] = 0\n 87922: u8 [a0 + 12] = 0\n 87925: u8 [a0 + 11] = 0\n 87928: u8 [a0 + 10] = 0\n 87931: u8 [a0 + 9] = 0\n 87934: u8 [a0 + 8] = 0\n 87937: u8 [a0 + 7] = 0\n 87940: u8 [a0 + 6] = 0\n 87943: u8 [a0 + 5] = 0\n 87946: u8 [a0 + 4] = 0\n 87949: u8 [a0 + 3] = 0\n 87952: u8 [a0 + 2] = 0\n 87955: u8 [a0 + 1] = 0\n 87958: u8 [a0 + 0] = 0\n 87960: a1 = 0x40\n 87963: a0 = 0\n 87965: ra = 1082, jump @0\n      : @1209 [@dyn 541] (gas: 28)\n 87972: i32 a0 = a0 + 0\n 87974: i32 a2 = sp + 0xa0\n 87978: a1 = 0x40\n 87981: ecalli 8 // 'hash_keccak_256'\n 87983: a0 = u64 [sp + 0xb8]\n 87987: a1 = u64 [sp + 0xb0]\n 87991: a2 = u64 [sp + 0xa8]\n 87995: a3 = u64 [sp + 0xa0]\n 87999: a0 = reverse a0\n 88001: a1 = reverse a1\n 88003: a2 = reverse a2\n 88005: a3 = reverse a3\n 88007: u64 [sp + 0x98] = a3\n 88011: u64 [sp + 0x90] = a2\n 88015: u64 [sp + 0x88] = a1\n 88019: u64 [sp + 0x80] = a0\n 88023: u64 [sp + 184] = 0\n 88027: u64 [sp + 176] = 0\n 88031: u64 [sp + 168] = 0\n 88035: u64 [sp + 160] = 0\n 88039: u32 [sp + 192] = 0x20\n 88044: i32 a1 = sp + 0x80\n 88048: i32 a3 = sp + 0xa0\n 88052: i32 a4 = sp + 0xc0\n 88056: a2 = 0xffffffffffffffff\n 88059: a0 = 0\n 88061: ecalli 7 // 'get_storage'\n 88063: fallthrough\n      : @1210 (gas: 2)\n 88064: a0 = u8 [sp + 0xa0]\n 88068: jump @1213 if a0 == 0\n      : @1211 (gas: 10)\n 88071: a0 = u64 [sp + 0x20]\n 88074: u64 [sp + 0x40] = a0\n 88077: a0 = u64 [sp + 0x28]\n 88080: u64 [sp + 0x48] = a0\n 88083: a0 = u64 [sp + 0x30]\n 88086: u64 [sp + 0x50] = a0\n 88089: a0 = sp + 0x40\n 88092: a1 = u64 [sp + 0x38]\n 88095: u64 [sp + 0x58] = a1\n 88098: ra = 1084, jump @1215\n      : @1212 [@dyn 542] (gas: 6)\n 88103: sp = s0 + 0xffffffffffffff20\n 88107: ra = u64 [sp + 0xd8]\n 88111: s0 = u64 [sp + 0xd0]\n 88115: s1 = u64 [sp + 0xc8]\n 88119: sp = sp + 0xe0\n 88123: ret\n      : @1213 (gas: 2)\n 88125: a1 = 0\n 88127: ra = 1086, jump @0\n      : @1214 [@dyn 543] (gas: 6)\n 88134: i32 a1 = a0 + 0\n 88136: a0 = 0x1\n 88139: a2 = 0\n 88141: ra = 0x440\n 88145: ecalli 10 // 'seal_return'\n 88147: fallthrough\n      : @1215 [@dyn 544] (gas: 16)\n 88148: sp = sp + 0xffffffffffffff60\n 88152: u64 [sp + 0x98] = ra\n 88156: u64 [sp + 0x90] = s0\n 88160: u64 [sp + 0x88] = s1\n 88164: s0 = sp + 0xa0\n 88168: sp = sp & 0xffffffffffffffe0\n 88171: a1 = u64 [a0]\n 88173: u64 [sp] = a1\n 88175: a1 = u64 [a0 + 0x8]\n 88178: u64 [sp + 0x18] = a1\n 88181: a1 = u64 [a0 + 0x10]\n 88184: u64 [sp + 0x10] = a1\n 88187: s1 = u64 [a0 + 0x18]\n 88190: a1 = 0x20\n 88193: a0 = 0\n 88195: ra = 1090, jump @0\n      : @1216 [@dyn 545] (gas: 71)\n 88202: u64 [sp + 0x8] = s1\n 88205: a1 = reverse s1\n 88207: s1 = u64 [sp]\n 88209: a2 = u64 [sp + 0x10]\n 88212: a2 = reverse a2\n 88214: a3 = u64 [sp + 0x18]\n 88217: a3 = reverse a3\n 88219: a4 = reverse s1\n 88221: u8 [a0 + 0x18] = a4\n 88224: u8 [a0 + 0x10] = a3\n 88227: u8 [a0 + 0x8] = a2\n 88230: u8 [a0] = a1\n 88232: a5 = a4 >> 0x38\n 88235: u8 [a0 + 0x1f] = a5\n 88238: a5 = a4 >> 0x30\n 88241: u8 [a0 + 0x1e] = a5\n 88244: a5 = a4 >> 0x28\n 88247: u8 [a0 + 0x1d] = a5\n 88250: a5 = a4 >> 0x20\n 88253: u8 [a0 + 0x1c] = a5\n 88256: a5 = a4 >> 0x18\n 88259: u8 [a0 + 0x1b] = a5\n 88262: a5 = a4 >> 0x10\n 88265: u8 [a0 + 0x1a] = a5\n 88268: a4 = a4 >> 0x8\n 88271: u8 [a0 + 0x19] = a4\n 88274: a4 = a3 >> 0x38\n 88277: u8 [a0 + 0x17] = a4\n 88280: a4 = a3 >> 0x30\n 88283: u8 [a0 + 0x16] = a4\n 88286: a4 = a3 >> 0x28\n 88289: u8 [a0 + 0x15] = a4\n 88292: a4 = a3 >> 0x20\n 88295: u8 [a0 + 0x14] = a4\n 88298: a4 = a3 >> 0x18\n 88301: u8 [a0 + 0x13] = a4\n 88304: a4 = a3 >> 0x10\n 88307: u8 [a0 + 0x12] = a4\n 88310: a3 = a3 >> 0x8\n 88313: u8 [a0 + 0x11] = a3\n 88316: a3 = a2 >> 0x38\n 88319: u8 [a0 + 0xf] = a3\n 88322: a3 = a2 >> 0x30\n 88325: u8 [a0 + 0xe] = a3\n 88328: a3 = a2 >> 0x28\n 88331: u8 [a0 + 0xd] = a3\n 88334: a3 = a2 >> 0x20\n 88337: u8 [a0 + 0xc] = a3\n 88340: a3 = a2 >> 0x18\n 88343: u8 [a0 + 0xb] = a3\n 88346: a3 = a2 >> 0x10\n 88349: u8 [a0 + 0xa] = a3\n 88352: a2 = a2 >> 0x8\n 88355: u8 [a0 + 0x9] = a2\n 88358: a2 = a1 >> 0x38\n 88361: u8 [a0 + 0x7] = a2\n 88364: a2 = a1 >> 0x30\n 88367: u8 [a0 + 0x6] = a2\n 88370: a2 = a1 >> 0x28\n 88373: u8 [a0 + 0x5] = a2\n 88376: a2 = a1 >> 0x20\n 88379: u8 [a0 + 0x4] = a2\n 88382: a2 = a1 >> 0x18\n 88385: u8 [a0 + 0x3] = a2\n 88388: a2 = a1 >> 0x10\n 88391: u8 [a0 + 0x2] = a2\n 88394: a1 = a1 >> 0x8\n 88397: u8 [a0 + 0x1] = a1\n 88400: a0 = 0x20\n 88403: a1 = 0x20\n 88406: ra = 1092, jump @0\n      : @1217 [@dyn 546] (gas: 35)\n 88413: u8 [a0 + 31] = 0\n 88416: u8 [a0 + 30] = 0\n 88419: u8 [a0 + 29] = 0\n 88422: u8 [a0 + 28] = 0\n 88425: u8 [a0 + 27] = 0\n 88428: u8 [a0 + 26] = 0\n 88431: u8 [a0 + 25] = 0\n 88434: u8 [a0 + 24] = 0\n 88437: u8 [a0 + 23] = 0\n 88440: u8 [a0 + 22] = 0\n 88443: u8 [a0 + 21] = 0\n 88446: u8 [a0 + 20] = 0\n 88449: u8 [a0 + 19] = 0\n 88452: u8 [a0 + 18] = 0\n 88455: u8 [a0 + 17] = 0\n 88458: u8 [a0 + 16] = 0\n 88461: u8 [a0 + 15] = 0\n 88464: u8 [a0 + 14] = 0\n 88467: u8 [a0 + 13] = 0\n 88470: u8 [a0 + 12] = 0\n 88473: u8 [a0 + 11] = 0\n 88476: u8 [a0 + 10] = 0\n 88479: u8 [a0 + 9] = 0\n 88482: u8 [a0 + 8] = 0\n 88485: u8 [a0 + 7] = 0\n 88488: u8 [a0 + 6] = 0\n 88491: u8 [a0 + 5] = 0\n 88494: u8 [a0 + 4] = 0\n 88497: u8 [a0 + 3] = 0\n 88500: u8 [a0 + 2] = 0\n 88503: u8 [a0 + 1] = 0\n 88506: u8 [a0 + 0] = 0\n 88508: a1 = 0x40\n 88511: a0 = 0\n 88513: ra = 1094, jump @0\n      : @1218 [@dyn 547] (gas: 28)\n 88520: i32 a0 = a0 + 0\n 88522: i32 a2 = sp + 0x60\n 88525: a1 = 0x40\n 88528: ecalli 8 // 'hash_keccak_256'\n 88530: a0 = u64 [sp + 0x78]\n 88533: a1 = u64 [sp + 0x70]\n 88536: a2 = u64 [sp + 0x68]\n 88539: a3 = u64 [sp + 0x60]\n 88542: a0 = reverse a0\n 88544: a1 = reverse a1\n 88546: a2 = reverse a2\n 88548: a3 = reverse a3\n 88550: u64 [sp + 0x58] = a3\n 88553: u64 [sp + 0x50] = a2\n 88556: u64 [sp + 0x48] = a1\n 88559: u64 [sp + 0x40] = a0\n 88562: u64 [sp + 120] = 0\n 88565: u64 [sp + 112] = 0\n 88568: u64 [sp + 104] = 0\n 88571: u64 [sp + 96] = 0\n 88574: u32 [sp + 128] = 0x20\n 88579: i32 a1 = sp + 0x40\n 88582: i32 a3 = sp + 0x60\n 88585: i32 a4 = sp + 0x80\n 88589: a2 = 0xffffffffffffffff\n 88592: a0 = 0\n 88594: ecalli 7 // 'get_storage'\n 88596: fallthrough\n      : @1219 (gas: 6)\n 88597: a0 = u64 [sp + 0x60]\n 88600: a1 = u32 [sp + 0x70]\n 88603: a2 = u64 [sp + 0x68]\n 88606: a0 = a0 | a1\n 88609: a0 = a0 | a2\n 88612: jump @1222 if a0 == 0\n      : @1220 (gas: 9)\n 88615: u64 [sp + 0x20] = s1\n 88618: a0 = u64 [sp + 0x18]\n 88621: u64 [sp + 0x28] = a0\n 88624: a0 = u64 [sp + 0x10]\n 88627: u64 [sp + 0x30] = a0\n 88630: a0 = sp + 0x20\n 88633: a1 = u64 [sp + 0x8]\n 88636: u64 [sp + 0x38] = a1\n 88639: ra = 1096, jump @1224\n      : @1221 [@dyn 548] (gas: 6)\n 88644: sp = s0 + 0xffffffffffffff60\n 88648: ra = u64 [sp + 0x98]\n 88652: s0 = u64 [sp + 0x90]\n 88656: s1 = u64 [sp + 0x88]\n 88660: sp = sp + 0xa0\n 88664: ret\n      : @1222 (gas: 2)\n 88666: a1 = 0\n 88668: ra = 1098, jump @0\n      : @1223 [@dyn 549] (gas: 6)\n 88675: i32 a1 = a0 + 0\n 88677: a0 = 0x1\n 88680: a2 = 0\n 88682: ra = 0x44c\n 88686: ecalli 10 // 'seal_return'\n 88688: fallthrough\n      : @1224 [@dyn 550] (gas: 33)\n 88689: sp = sp + 0xffffffffffffff00\n 88693: u64 [sp + 0xf8] = ra\n 88697: u64 [sp + 0xf0] = s0\n 88701: u64 [sp + 0xe8] = s1\n 88705: s0 = sp + 0x100\n 88709: sp = sp & 0xffffffffffffffe0\n 88712: a1 = u64 [a0]\n 88714: u64 [sp + 0x58] = a1\n 88717: a1 = u64 [a0 + 0x8]\n 88720: u64 [sp + 0x50] = a1\n 88723: a1 = u64 [a0 + 0x10]\n 88726: u64 [sp + 0x48] = a1\n 88729: s1 = u64 [a0 + 0x18]\n 88732: i32 a0 = sp + 0x80\n 88736: ecalli 5 // 'caller'\n 88738: a0 = u64 [sp + 0x88]\n 88742: a1 = i32 [sp + 0x90]\n 88746: a3 = u64 [sp + 0x80]\n 88750: u64 [sp + 0x38] = a3\n 88753: a0 = reverse a0\n 88755: a2 = a0 << 0x20\n 88758: a1 = reverse a1\n 88760: a1 = a1 >> 0x20\n 88763: a1 = a1 | a2\n 88766: u64 [sp + 0x30] = a1\n 88769: a0 = a0 >> 0x20\n 88772: a1 = reverse a3\n 88774: a1 = a1 << 0x20\n 88777: a0 = a0 | a1\n 88780: u64 [sp + 0x28] = a0\n 88783: a1 = 0x20\n 88786: a0 = 0\n 88788: ra = 1102, jump @0\n      : @1225 [@dyn 551] (gas: 71)\n 88795: u64 [sp + 0x40] = s1\n 88798: a1 = reverse s1\n 88800: a2 = u64 [sp + 0x48]\n 88803: a2 = reverse a2\n 88805: a3 = u64 [sp + 0x50]\n 88808: a3 = reverse a3\n 88810: a4 = u64 [sp + 0x58]\n 88813: a4 = reverse a4\n 88815: a5 = a4 >> 0x38\n 88818: u8 [a0 + 0x1f] = a5\n 88821: a5 = a4 >> 0x30\n 88824: u8 [a0 + 0x1e] = a5\n 88827: a5 = a4 >> 0x28\n 88830: u8 [a0 + 0x1d] = a5\n 88833: a5 = a4 >> 0x20\n 88836: u8 [a0 + 0x1c] = a5\n 88839: a5 = a4 >> 0x18\n 88842: u8 [a0 + 0x1b] = a5\n 88845: a5 = a4 >> 0x10\n 88848: u8 [a0 + 0x1a] = a5\n 88851: a5 = a4 >> 0x8\n 88854: u8 [a0 + 0x19] = a5\n 88857: u8 [a0 + 0x18] = a4\n 88860: a4 = a3 >> 0x38\n 88863: u8 [a0 + 0x17] = a4\n 88866: a4 = a3 >> 0x30\n 88869: u8 [a0 + 0x16] = a4\n 88872: a4 = a3 >> 0x28\n 88875: u8 [a0 + 0x15] = a4\n 88878: a4 = a3 >> 0x20\n 88881: u8 [a0 + 0x14] = a4\n 88884: a4 = a3 >> 0x18\n 88887: u8 [a0 + 0x13] = a4\n 88890: a4 = a3 >> 0x10\n 88893: u8 [a0 + 0x12] = a4\n 88896: a4 = a3 >> 0x8\n 88899: u8 [a0 + 0x11] = a4\n 88902: u8 [a0 + 0x10] = a3\n 88905: a3 = a2 >> 0x38\n 88908: u8 [a0 + 0xf] = a3\n 88911: a3 = a2 >> 0x30\n 88914: u8 [a0 + 0xe] = a3\n 88917: a3 = a2 >> 0x28\n 88920: u8 [a0 + 0xd] = a3\n 88923: a3 = a2 >> 0x20\n 88926: u8 [a0 + 0xc] = a3\n 88929: a3 = a2 >> 0x18\n 88932: u8 [a0 + 0xb] = a3\n 88935: a3 = a2 >> 0x10\n 88938: u8 [a0 + 0xa] = a3\n 88941: a3 = a2 >> 0x8\n 88944: u8 [a0 + 0x9] = a3\n 88947: u8 [a0 + 0x8] = a2\n 88950: a2 = a1 >> 0x38\n 88953: u8 [a0 + 0x7] = a2\n 88956: a2 = a1 >> 0x30\n 88959: u8 [a0 + 0x6] = a2\n 88962: a2 = a1 >> 0x28\n 88965: u8 [a0 + 0x5] = a2\n 88968: a2 = a1 >> 0x20\n 88971: u8 [a0 + 0x4] = a2\n 88974: a2 = a1 >> 0x18\n 88977: u8 [a0 + 0x3] = a2\n 88980: a2 = a1 >> 0x10\n 88983: u8 [a0 + 0x2] = a2\n 88986: a2 = a1 >> 0x8\n 88989: u8 [a0 + 0x1] = a2\n 88992: u8 [a0] = a1\n 88994: a0 = 0x20\n 88997: a1 = 0x20\n 89000: ra = 1104, jump @0\n      : @1226 [@dyn 552] (gas: 35)\n 89007: u8 [a0 + 31] = 0x1\n 89011: u8 [a0 + 30] = 0\n 89014: u8 [a0 + 29] = 0\n 89017: u8 [a0 + 28] = 0\n 89020: u8 [a0 + 27] = 0\n 89023: u8 [a0 + 26] = 0\n 89026: u8 [a0 + 25] = 0\n 89029: u8 [a0 + 24] = 0\n 89032: u8 [a0 + 23] = 0\n 89035: u8 [a0 + 22] = 0\n 89038: u8 [a0 + 21] = 0\n 89041: u8 [a0 + 20] = 0\n 89044: u8 [a0 + 19] = 0\n 89047: u8 [a0 + 18] = 0\n 89050: u8 [a0 + 17] = 0\n 89053: u8 [a0 + 16] = 0\n 89056: u8 [a0 + 15] = 0\n 89059: u8 [a0 + 14] = 0\n 89062: u8 [a0 + 13] = 0\n 89065: u8 [a0 + 12] = 0\n 89068: u8 [a0 + 11] = 0\n 89071: u8 [a0 + 10] = 0\n 89074: u8 [a0 + 9] = 0\n 89077: u8 [a0 + 8] = 0\n 89080: u8 [a0 + 7] = 0\n 89083: u8 [a0 + 6] = 0\n 89086: u8 [a0 + 5] = 0\n 89089: u8 [a0 + 4] = 0\n 89092: u8 [a0 + 3] = 0\n 89095: u8 [a0 + 2] = 0\n 89098: u8 [a0 + 1] = 0\n 89101: u8 [a0 + 0] = 0\n 89103: a1 = 0x40\n 89106: a0 = 0\n 89108: ra = 1106, jump @0\n      : @1227 [@dyn 553] (gas: 14)\n 89115: i32 a0 = a0 + 0\n 89117: i32 a2 = sp + 0xc0\n 89121: a1 = 0x40\n 89124: ecalli 8 // 'hash_keccak_256'\n 89126: a0 = u64 [sp + 0xc0]\n 89130: u64 [sp + 0x20] = a0\n 89133: a0 = u64 [sp + 0xc8]\n 89137: u64 [sp + 0x18] = a0\n 89140: a0 = u64 [sp + 0xd0]\n 89144: u64 [sp + 0x10] = a0\n 89147: s1 = u64 [sp + 0xd8]\n 89151: a1 = 0x20\n 89154: a0 = 0\n 89156: ra = 1108, jump @0\n      : @1228 [@dyn 554] (gas: 57)\n 89163: a1 = u64 [sp + 0x28]\n 89166: a1 = reverse a1\n 89168: a2 = u64 [sp + 0x30]\n 89171: a2 = reverse a2\n 89173: a3 = a2 >> 0x38\n 89176: u8 [a0 + 0x1f] = a3\n 89179: a3 = a2 >> 0x30\n 89182: u8 [a0 + 0x1e] = a3\n 89185: a3 = a2 >> 0x28\n 89188: u8 [a0 + 0x1d] = a3\n 89191: a3 = a2 >> 0x20\n 89194: u8 [a0 + 0x1c] = a3\n 89197: a3 = a2 >> 0x18\n 89200: u8 [a0 + 0x1b] = a3\n 89203: a3 = a2 >> 0x10\n 89206: u8 [a0 + 0x1a] = a3\n 89209: a3 = a2 >> 0x8\n 89212: u8 [a0 + 0x19] = a3\n 89215: u8 [a0 + 0x18] = a2\n 89218: a2 = a1 >> 0x38\n 89221: u8 [a0 + 0x17] = a2\n 89224: a2 = a1 >> 0x30\n 89227: u8 [a0 + 0x16] = a2\n 89230: a2 = a1 >> 0x28\n 89233: u8 [a0 + 0x15] = a2\n 89236: a2 = a1 >> 0x20\n 89239: u8 [a0 + 0x14] = a2\n 89242: a2 = a1 >> 0x18\n 89245: u8 [a0 + 0x13] = a2\n 89248: a2 = a1 >> 0x10\n 89251: u8 [a0 + 0x12] = a2\n 89254: a2 = a1 >> 0x8\n 89257: u8 [a0 + 0x11] = a2\n 89260: u8 [a0 + 0x10] = a1\n 89263: a2 = u64 [sp + 0x38]\n 89266: a1 = a2 >> 0x18\n 89269: u8 [a0 + 0xf] = a1\n 89272: a1 = a2 >> 0x10\n 89275: u8 [a0 + 0xe] = a1\n 89278: a1 = a2 >> 0x8\n 89281: u8 [a0 + 0xd] = a1\n 89284: u8 [a0 + 0xc] = a2\n 89287: u8 [a0 + 11] = 0\n 89290: u8 [a0 + 10] = 0\n 89293: u8 [a0 + 9] = 0\n 89296: u8 [a0 + 8] = 0\n 89299: u8 [a0 + 7] = 0\n 89302: u8 [a0 + 6] = 0\n 89305: u8 [a0 + 5] = 0\n 89308: u8 [a0 + 4] = 0\n 89311: u8 [a0 + 3] = 0\n 89314: u8 [a0 + 2] = 0\n 89317: u8 [a0 + 1] = 0\n 89320: u8 [a0 + 0] = 0\n 89322: a0 = 0x20\n 89325: a1 = 0x20\n 89328: ra = 1110, jump @0\n      : @1229 [@dyn 555] (gas: 66)\n 89335: a1 = s1 >> 0x38\n 89338: u8 [a0 + 0x1f] = a1\n 89341: a1 = s1 >> 0x30\n 89344: u8 [a0 + 0x1e] = a1\n 89347: a1 = s1 >> 0x28\n 89350: u8 [a0 + 0x1d] = a1\n 89353: a1 = s1 >> 0x20\n 89356: u8 [a0 + 0x1c] = a1\n 89359: a1 = s1 >> 0x18\n 89362: u8 [a0 + 0x1b] = a1\n 89365: a1 = s1 >> 0x10\n 89368: u8 [a0 + 0x1a] = a1\n 89371: a1 = s1 >> 0x8\n 89374: u8 [a0 + 0x19] = a1\n 89377: u8 [a0 + 0x18] = s1\n 89380: a2 = u64 [sp + 0x10]\n 89383: a1 = a2 >> 0x38\n 89386: u8 [a0 + 0x17] = a1\n 89389: a1 = a2 >> 0x30\n 89392: u8 [a0 + 0x16] = a1\n 89395: a1 = a2 >> 0x28\n 89398: u8 [a0 + 0x15] = a1\n 89401: a1 = a2 >> 0x20\n 89404: u8 [a0 + 0x14] = a1\n 89407: a1 = a2 >> 0x18\n 89410: u8 [a0 + 0x13] = a1\n 89413: a1 = a2 >> 0x10\n 89416: u8 [a0 + 0x12] = a1\n 89419: a1 = a2 >> 0x8\n 89422: u8 [a0 + 0x11] = a1\n 89425: u8 [a0 + 0x10] = a2\n 89428: a2 = u64 [sp + 0x18]\n 89431: a1 = a2 >> 0x38\n 89434: u8 [a0 + 0xf] = a1\n 89437: a1 = a2 >> 0x30\n 89440: u8 [a0 + 0xe] = a1\n 89443: a1 = a2 >> 0x28\n 89446: u8 [a0 + 0xd] = a1\n 89449: a1 = a2 >> 0x20\n 89452: u8 [a0 + 0xc] = a1\n 89455: a1 = a2 >> 0x18\n 89458: u8 [a0 + 0xb] = a1\n 89461: a1 = a2 >> 0x10\n 89464: u8 [a0 + 0xa] = a1\n 89467: a1 = a2 >> 0x8\n 89470: u8 [a0 + 0x9] = a1\n 89473: u8 [a0 + 0x8] = a2\n 89476: a2 = u64 [sp + 0x20]\n 89479: a1 = a2 >> 0x38\n 89482: u8 [a0 + 0x7] = a1\n 89485: a1 = a2 >> 0x30\n 89488: u8 [a0 + 0x6] = a1\n 89491: a1 = a2 >> 0x28\n 89494: u8 [a0 + 0x5] = a1\n 89497: a1 = a2 >> 0x20\n 89500: u8 [a0 + 0x4] = a1\n 89503: a1 = a2 >> 0x18\n 89506: u8 [a0 + 0x3] = a1\n 89509: a1 = a2 >> 0x10\n 89512: u8 [a0 + 0x2] = a1\n 89515: a1 = a2 >> 0x8\n 89518: u8 [a0 + 0x1] = a1\n 89521: u8 [a0] = a2\n 89523: a1 = 0x40\n 89526: a0 = 0\n 89528: ra = 1112, jump @0\n      : @1230 [@dyn 556] (gas: 28)\n 89535: i32 a0 = a0 + 0\n 89537: i32 a2 = sp + 0xc0\n 89541: a1 = 0x40\n 89544: ecalli 8 // 'hash_keccak_256'\n 89546: a0 = u64 [sp + 0xd8]\n 89550: a1 = u64 [sp + 0xd0]\n 89554: a2 = u64 [sp + 0xc8]\n 89558: a3 = u64 [sp + 0xc0]\n 89562: a0 = reverse a0\n 89564: a1 = reverse a1\n 89566: a2 = reverse a2\n 89568: a3 = reverse a3\n 89570: u64 [sp + 0xb8] = a3\n 89574: u64 [sp + 0xb0] = a2\n 89578: u64 [sp + 0xa8] = a1\n 89582: u64 [sp + 0xa0] = a0\n 89586: u64 [sp + 216] = 0\n 89590: u64 [sp + 208] = 0\n 89594: u64 [sp + 200] = 0\n 89598: u64 [sp + 192] = 0\n 89602: u32 [sp + 224] = 0x20\n 89607: i32 a1 = sp + 0xa0\n 89611: i32 a3 = sp + 0xc0\n 89615: i32 a4 = sp + 0xe0\n 89619: a2 = 0xffffffffffffffff\n 89622: a0 = 0\n 89624: ecalli 7 // 'get_storage'\n 89626: fallthrough\n      : @1231 (gas: 2)\n 89627: a0 = u8 [sp + 0xc0]\n 89631: jump @1234 if a0 != 0\n      : @1232 (gas: 10)\n 89634: a0 = u64 [sp + 0x58]\n 89637: u64 [sp + 0x60] = a0\n 89640: a0 = u64 [sp + 0x50]\n 89643: u64 [sp + 0x68] = a0\n 89646: a0 = u64 [sp + 0x48]\n 89649: u64 [sp + 0x70] = a0\n 89652: a0 = sp + 0x60\n 89655: a1 = u64 [sp + 0x40]\n 89658: u64 [sp + 0x78] = a1\n 89661: ra = 1114, jump @1236\n      : @1233 [@dyn 557] (gas: 6)\n 89666: sp = s0 + 0xffffffffffffff00\n 89670: ra = u64 [sp + 0xf8]\n 89674: s0 = u64 [sp + 0xf0]\n 89678: s1 = u64 [sp + 0xe8]\n 89682: sp = sp + 0x100\n 89686: ret\n      : @1234 (gas: 3)\n 89688: a0 = 0\n 89690: a1 = 0\n 89692: ra = 1116, jump @0\n      : @1235 [@dyn 558] (gas: 6)\n 89699: i32 a1 = a0 + 0\n 89701: a0 = 0x1\n 89704: a2 = 0\n 89706: ra = 0x45e\n 89710: ecalli 10 // 'seal_return'\n 89712: fallthrough\n      : @1236 [@dyn 559] (gas: 16)\n 89713: sp = sp + 0xfffffffffffffe60\n 89717: u64 [sp + 0x198] = ra\n 89721: u64 [sp + 0x190] = s0\n 89725: u64 [sp + 0x188] = s1\n 89729: s0 = sp + 0x1a0\n 89733: sp = sp & 0xffffffffffffffe0\n 89736: a1 = u64 [a0]\n 89738: u64 [sp + 0x78] = a1\n 89741: a1 = u64 [a0 + 0x8]\n 89744: u64 [sp + 0x70] = a1\n 89747: a1 = u64 [a0 + 0x10]\n 89750: u64 [sp + 0x68] = a1\n 89753: s1 = u64 [a0 + 0x18]\n 89756: a1 = 0x20\n 89759: a0 = 0\n 89761: ra = 1120, jump @0\n      : @1237 [@dyn 560] (gas: 75)\n 89768: u64 [sp + 0x30] = s1\n 89771: a2 = reverse s1\n 89773: a1 = u64 [sp + 0x68]\n 89776: a3 = reverse a1\n 89778: a1 = u64 [sp + 0x70]\n 89781: a5 = reverse a1\n 89783: a1 = u64 [sp + 0x78]\n 89786: a4 = reverse a1\n 89788: u8 [a0 + 0x18] = a4\n 89791: u8 [a0 + 0x10] = a5\n 89794: u8 [a0 + 0x8] = a3\n 89797: u8 [a0] = a2\n 89799: a1 = a4 >> 0x38\n 89802: u8 [a0 + 0x1f] = a1\n 89805: a1 = a4 >> 0x30\n 89808: u8 [a0 + 0x1e] = a1\n 89811: a1 = a4 >> 0x28\n 89814: u8 [a0 + 0x1d] = a1\n 89817: a1 = a4 >> 0x20\n 89820: u8 [a0 + 0x1c] = a1\n 89823: a1 = a4 >> 0x18\n 89826: u8 [a0 + 0x1b] = a1\n 89829: a1 = a4 >> 0x10\n 89832: u8 [a0 + 0x1a] = a1\n 89835: u64 [sp + 0x18] = a4\n 89838: a1 = a4 >> 0x8\n 89841: u8 [a0 + 0x19] = a1\n 89844: a1 = a5 >> 0x38\n 89847: u8 [a0 + 0x17] = a1\n 89850: a1 = a5 >> 0x30\n 89853: u8 [a0 + 0x16] = a1\n 89856: a1 = a5 >> 0x28\n 89859: u8 [a0 + 0x15] = a1\n 89862: a1 = a5 >> 0x20\n 89865: u8 [a0 + 0x14] = a1\n 89868: a1 = a5 >> 0x18\n 89871: u8 [a0 + 0x13] = a1\n 89874: a1 = a5 >> 0x10\n 89877: u8 [a0 + 0x12] = a1\n 89880: u64 [sp + 0x10] = a5\n 89883: a1 = a5 >> 0x8\n 89886: u8 [a0 + 0x11] = a1\n 89889: a1 = a3 >> 0x38\n 89892: u8 [a0 + 0xf] = a1\n 89895: a1 = a3 >> 0x30\n 89898: u8 [a0 + 0xe] = a1\n 89901: a1 = a3 >> 0x28\n 89904: u8 [a0 + 0xd] = a1\n 89907: a1 = a3 >> 0x20\n 89910: u8 [a0 + 0xc] = a1\n 89913: a1 = a3 >> 0x18\n 89916: u8 [a0 + 0xb] = a1\n 89919: a1 = a3 >> 0x10\n 89922: u8 [a0 + 0xa] = a1\n 89925: u64 [sp + 0x20] = a3\n 89928: a1 = a3 >> 0x8\n 89931: u8 [a0 + 0x9] = a1\n 89934: a1 = a2 >> 0x38\n 89937: u8 [a0 + 0x7] = a1\n 89940: a1 = a2 >> 0x30\n 89943: u8 [a0 + 0x6] = a1\n 89946: a1 = a2 >> 0x28\n 89949: u8 [a0 + 0x5] = a1\n 89952: a1 = a2 >> 0x20\n 89955: u8 [a0 + 0x4] = a1\n 89958: a1 = a2 >> 0x18\n 89961: u8 [a0 + 0x3] = a1\n 89964: a1 = a2 >> 0x10\n 89967: u8 [a0 + 0x2] = a1\n 89970: u64 [sp + 0x28] = a2\n 89973: a1 = a2 >> 0x8\n 89976: u8 [a0 + 0x1] = a1\n 89979: a0 = 0x20\n 89982: a1 = 0x20\n 89985: ra = 1122, jump @0\n      : @1238 [@dyn 561] (gas: 35)\n 89992: u8 [a0 + 31] = 0x1\n 89996: u8 [a0 + 30] = 0\n 89999: u8 [a0 + 29] = 0\n 90002: u8 [a0 + 28] = 0\n 90005: u8 [a0 + 27] = 0\n 90008: u8 [a0 + 26] = 0\n 90011: u8 [a0 + 25] = 0\n 90014: u8 [a0 + 24] = 0\n 90017: u8 [a0 + 23] = 0\n 90020: u8 [a0 + 22] = 0\n 90023: u8 [a0 + 21] = 0\n 90026: u8 [a0 + 20] = 0\n 90029: u8 [a0 + 19] = 0\n 90032: u8 [a0 + 18] = 0\n 90035: u8 [a0 + 17] = 0\n 90038: u8 [a0 + 16] = 0\n 90041: u8 [a0 + 15] = 0\n 90044: u8 [a0 + 14] = 0\n 90047: u8 [a0 + 13] = 0\n 90050: u8 [a0 + 12] = 0\n 90053: u8 [a0 + 11] = 0\n 90056: u8 [a0 + 10] = 0\n 90059: u8 [a0 + 9] = 0\n 90062: u8 [a0 + 8] = 0\n 90065: u8 [a0 + 7] = 0\n 90068: u8 [a0 + 6] = 0\n 90071: u8 [a0 + 5] = 0\n 90074: u8 [a0 + 4] = 0\n 90077: u8 [a0 + 3] = 0\n 90080: u8 [a0 + 2] = 0\n 90083: u8 [a0 + 1] = 0\n 90086: u8 [a0 + 0] = 0\n 90088: a1 = 0x40\n 90091: a0 = 0\n 90093: ra = 1124, jump @0\n      : @1239 [@dyn 562] (gas: 31)\n 90100: i32 a0 = a0 + 0\n 90102: i32 a2 = sp + 0x120\n 90106: a1 = 0x40\n 90109: ecalli 8 // 'hash_keccak_256'\n 90111: a0 = u64 [sp + 0x120]\n 90115: u64 [sp + 0x60] = a0\n 90118: a0 = u64 [sp + 0x128]\n 90122: u64 [sp + 0x58] = a0\n 90125: a0 = u64 [sp + 0x130]\n 90129: u64 [sp + 0x50] = a0\n 90132: a0 = u64 [sp + 0x138]\n 90136: u64 [sp + 0x48] = a0\n 90139: i32 a0 = sp + 0xa0\n 90143: ecalli 5 // 'caller'\n 90145: a0 = u64 [sp + 0xa8]\n 90149: a1 = i32 [sp + 0xb0]\n 90153: s1 = u64 [sp + 0xa0]\n 90157: a0 = reverse a0\n 90159: a2 = a0 << 0x20\n 90162: a1 = reverse a1\n 90164: a1 = a1 >> 0x20\n 90167: a1 = a1 | a2\n 90170: u64 [sp + 0x40] = a1\n 90173: a0 = a0 >> 0x20\n 90176: a1 = reverse s1\n 90178: a1 = a1 << 0x20\n 90181: a0 = a0 | a1\n 90184: u64 [sp + 0x38] = a0\n 90187: a1 = 0x20\n 90190: a0 = 0\n 90192: ra = 1126, jump @0\n      : @1240 [@dyn 563] (gas: 56)\n 90199: a1 = u64 [sp + 0x38]\n 90202: a1 = reverse a1\n 90204: a2 = u64 [sp + 0x40]\n 90207: a2 = reverse a2\n 90209: a3 = s1 >> 0x18\n 90212: u8 [a0 + 0xf] = a3\n 90215: a3 = s1 >> 0x10\n 90218: u8 [a0 + 0xe] = a3\n 90221: a3 = s1 >> 0x8\n 90224: u8 [a0 + 0xd] = a3\n 90227: u8 [a0 + 0xc] = s1\n 90230: u8 [a0 + 11] = 0\n 90233: u8 [a0 + 10] = 0\n 90236: u8 [a0 + 9] = 0\n 90239: u8 [a0 + 8] = 0\n 90242: u8 [a0 + 7] = 0\n 90245: u8 [a0 + 6] = 0\n 90248: u8 [a0 + 5] = 0\n 90251: u8 [a0 + 4] = 0\n 90254: u8 [a0 + 3] = 0\n 90257: u8 [a0 + 2] = 0\n 90260: u8 [a0 + 1] = 0\n 90263: u8 [a0 + 0] = 0\n 90265: u8 [a0 + 0x18] = a2\n 90268: u8 [a0 + 0x10] = a1\n 90271: a3 = a2 >> 0x38\n 90274: u8 [a0 + 0x1f] = a3\n 90277: a3 = a2 >> 0x30\n 90280: u8 [a0 + 0x1e] = a3\n 90283: a3 = a2 >> 0x28\n 90286: u8 [a0 + 0x1d] = a3\n 90289: a3 = a2 >> 0x20\n 90292: u8 [a0 + 0x1c] = a3\n 90295: a3 = a2 >> 0x18\n 90298: u8 [a0 + 0x1b] = a3\n 90301: a3 = a2 >> 0x10\n 90304: u8 [a0 + 0x1a] = a3\n 90307: a2 = a2 >> 0x8\n 90310: u8 [a0 + 0x19] = a2\n 90313: a2 = a1 >> 0x38\n 90316: u8 [a0 + 0x17] = a2\n 90319: a2 = a1 >> 0x30\n 90322: u8 [a0 + 0x16] = a2\n 90325: a2 = a1 >> 0x28\n 90328: u8 [a0 + 0x15] = a2\n 90331: a2 = a1 >> 0x20\n 90334: u8 [a0 + 0x14] = a2\n 90337: a2 = a1 >> 0x18\n 90340: u8 [a0 + 0x13] = a2\n 90343: a2 = a1 >> 0x10\n 90346: u8 [a0 + 0x12] = a2\n 90349: a1 = a1 >> 0x8\n 90352: u8 [a0 + 0x11] = a1\n 90355: a0 = 0x20\n 90358: a1 = 0x20\n 90361: ra = 1128, jump @0\n      : @1241 [@dyn 564] (gas: 67)\n 90368: a2 = u64 [sp + 0x48]\n 90371: a1 = a2 >> 0x38\n 90374: u8 [a0 + 0x1f] = a1\n 90377: a1 = a2 >> 0x30\n 90380: u8 [a0 + 0x1e] = a1\n 90383: a1 = a2 >> 0x28\n 90386: u8 [a0 + 0x1d] = a1\n 90389: a1 = a2 >> 0x20\n 90392: u8 [a0 + 0x1c] = a1\n 90395: a1 = a2 >> 0x18\n 90398: u8 [a0 + 0x1b] = a1\n 90401: a1 = a2 >> 0x10\n 90404: u8 [a0 + 0x1a] = a1\n 90407: a1 = a2 >> 0x8\n 90410: u8 [a0 + 0x19] = a1\n 90413: u8 [a0 + 0x18] = a2\n 90416: a2 = u64 [sp + 0x50]\n 90419: a1 = a2 >> 0x38\n 90422: u8 [a0 + 0x17] = a1\n 90425: a1 = a2 >> 0x30\n 90428: u8 [a0 + 0x16] = a1\n 90431: a1 = a2 >> 0x28\n 90434: u8 [a0 + 0x15] = a1\n 90437: a1 = a2 >> 0x20\n 90440: u8 [a0 + 0x14] = a1\n 90443: a1 = a2 >> 0x18\n 90446: u8 [a0 + 0x13] = a1\n 90449: a1 = a2 >> 0x10\n 90452: u8 [a0 + 0x12] = a1\n 90455: a1 = a2 >> 0x8\n 90458: u8 [a0 + 0x11] = a1\n 90461: u8 [a0 + 0x10] = a2\n 90464: a2 = u64 [sp + 0x58]\n 90467: a1 = a2 >> 0x38\n 90470: u8 [a0 + 0xf] = a1\n 90473: a1 = a2 >> 0x30\n 90476: u8 [a0 + 0xe] = a1\n 90479: a1 = a2 >> 0x28\n 90482: u8 [a0 + 0xd] = a1\n 90485: a1 = a2 >> 0x20\n 90488: u8 [a0 + 0xc] = a1\n 90491: a1 = a2 >> 0x18\n 90494: u8 [a0 + 0xb] = a1\n 90497: a1 = a2 >> 0x10\n 90500: u8 [a0 + 0xa] = a1\n 90503: a1 = a2 >> 0x8\n 90506: u8 [a0 + 0x9] = a1\n 90509: u8 [a0 + 0x8] = a2\n 90512: a2 = u64 [sp + 0x60]\n 90515: a1 = a2 >> 0x38\n 90518: u8 [a0 + 0x7] = a1\n 90521: a1 = a2 >> 0x30\n 90524: u8 [a0 + 0x6] = a1\n 90527: a1 = a2 >> 0x28\n 90530: u8 [a0 + 0x5] = a1\n 90533: a1 = a2 >> 0x20\n 90536: u8 [a0 + 0x4] = a1\n 90539: a1 = a2 >> 0x18\n 90542: u8 [a0 + 0x3] = a1\n 90545: a1 = a2 >> 0x10\n 90548: u8 [a0 + 0x2] = a1\n 90551: a1 = a2 >> 0x8\n 90554: u8 [a0 + 0x1] = a1\n 90557: u8 [a0] = a2\n 90559: a1 = 0x40\n 90562: a0 = 0\n 90564: ra = 1130, jump @0\n      : @1242 [@dyn 565] (gas: 64)\n 90571: i32 a0 = a0 + 0\n 90573: i32 a2 = sp + 0x120\n 90577: a1 = 0x40\n 90580: ecalli 8 // 'hash_keccak_256'\n 90582: a0 = u64 [sp + 0x138]\n 90586: a1 = u64 [sp + 0x130]\n 90590: a2 = u64 [sp + 0x128]\n 90594: a3 = u64 [sp + 0x120]\n 90598: a0 = reverse a0\n 90600: u64 [sp + 0x60] = a0\n 90603: a1 = reverse a1\n 90605: u64 [sp + 0x58] = a1\n 90608: a2 = reverse a2\n 90610: u64 [sp + 0x50] = a2\n 90613: s1 = reverse a3\n 90615: u64 [sp + 0x118] = s1\n 90619: u64 [sp + 0x110] = a2\n 90623: u64 [sp + 0x108] = a1\n 90627: u64 [sp + 0x100] = a0\n 90631: u64 [sp + 312] = 0\n 90635: u64 [sp + 304] = 0\n 90639: u64 [sp + 296] = 0\n 90643: u64 [sp + 288] = 0\n 90647: u32 [sp + 224] = 0x20\n 90652: i32 a1 = sp + 0x100\n 90656: i32 a3 = sp + 0x120\n 90660: i32 a4 = sp + 0xe0\n 90664: a2 = 0xffffffffffffffff\n 90667: a0 = 0\n 90669: ecalli 7 // 'get_storage'\n 90671: a0 = u64 [sp + 0x120]\n 90675: a1 = u64 [sp + 0x128]\n 90679: a2 = u64 [sp + 0x130]\n 90683: a3 = u64 [sp + 0x138]\n 90687: a0 = a0 & 0xffffffffffffff00\n 90691: a0 = a0 | 0x1\n 90694: u64 [sp + 0x118] = s1\n 90698: a4 = u64 [sp + 0x50]\n 90701: u64 [sp + 0x110] = a4\n 90705: a4 = u64 [sp + 0x58]\n 90708: u64 [sp + 0x108] = a4\n 90712: a4 = u64 [sp + 0x60]\n 90715: u64 [sp + 0x100] = a4\n 90719: u64 [sp + 0x138] = a3\n 90723: u64 [sp + 0x130] = a2\n 90727: u64 [sp + 0x128] = a1\n 90731: u64 [sp + 0x120] = a0\n 90735: i32 a1 = sp + 0x100\n 90739: i32 a3 = sp + 0x120\n 90743: a2 = 0xffffffffffffffff\n 90746: a4 = 0x20\n 90749: a0 = 0\n 90751: ecalli 12 // 'set_storage'\n 90753: i32 a0 = sp + 0xc0\n 90757: ecalli 5 // 'caller'\n 90759: a0 = u32 [sp + 0xd0]\n 90763: u64 [sp + 0x58] = a0\n 90766: a0 = u64 [sp + 0xc8]\n 90770: u64 [sp + 0x50] = a0\n 90773: a0 = u64 [sp + 0xc0]\n 90777: u64 [sp + 0x60] = a0\n 90780: a0 = 0x40\n 90783: a1 = 0x20\n 90786: ra = 1132, jump @0\n      : @1243 [@dyn 566] (gas: 100)\n 90793: a1 = u8 [a0 + 0x11]\n 90796: a2 = u8 [a0 + 0x10]\n 90799: a3 = u8 [a0 + 0x12]\n 90802: a4 = u8 [a0 + 0x13]\n 90805: a1 = a1 << 0x8\n 90808: a1 = a1 | a2\n 90811: a3 = a3 << 0x10\n 90814: a4 = a4 << 0x18\n 90817: a3 = a3 | a4\n 90820: a1 = a1 | a3\n 90823: a2 = u8 [a0 + 0x15]\n 90826: a3 = u8 [a0 + 0x14]\n 90829: a4 = u8 [a0 + 0x16]\n 90832: a5 = u8 [a0 + 0x17]\n 90835: a2 = a2 << 0x8\n 90838: a2 = a2 | a3\n 90841: a4 = a4 << 0x10\n 90844: a5 = a5 << 0x18\n 90847: a4 = a4 | a5\n 90850: a2 = a2 | a4\n 90853: a2 = a2 << 0x20\n 90856: t0 = a2 | a1\n 90859: a2 = u8 [a0 + 0x1]\n 90862: a3 = u8 [a0]\n 90864: a4 = u8 [a0 + 0x2]\n 90867: a5 = u8 [a0 + 0x3]\n 90870: a2 = a2 << 0x8\n 90873: a2 = a2 | a3\n 90876: a4 = a4 << 0x10\n 90879: a5 = a5 << 0x18\n 90882: a4 = a4 | a5\n 90885: a2 = a2 | a4\n 90888: a3 = u8 [a0 + 0x5]\n 90891: a4 = u8 [a0 + 0x4]\n 90894: a5 = u8 [a0 + 0x6]\n 90897: s1 = u8 [a0 + 0x7]\n 90900: a3 = a3 << 0x8\n 90903: a3 = a3 | a4\n 90906: a5 = a5 << 0x10\n 90909: s1 = s1 << 0x18\n 90912: a5 = a5 | s1\n 90915: a3 = a3 | a5\n 90918: a3 = a3 << 0x20\n 90921: a2 = a2 | a3\n 90924: a3 = u8 [a0 + 0x19]\n 90927: a4 = u8 [a0 + 0x18]\n 90930: a5 = u8 [a0 + 0x1a]\n 90933: s1 = u8 [a0 + 0x1b]\n 90936: a3 = a3 << 0x8\n 90939: a3 = a3 | a4\n 90942: a5 = a5 << 0x10\n 90945: s1 = s1 << 0x18\n 90948: a5 = a5 | s1\n 90951: a3 = a3 | a5\n 90954: a4 = u8 [a0 + 0x1d]\n 90957: a5 = u8 [a0 + 0x1c]\n 90960: s1 = u8 [a0 + 0x1e]\n 90963: a1 = u8 [a0 + 0x1f]\n 90966: a4 = a4 << 0x8\n 90969: a4 = a4 | a5\n 90972: s1 = s1 << 0x10\n 90975: a1 = a1 << 0x18\n 90978: a1 = a1 | s1\n 90981: a1 = a1 | a4\n 90984: a1 = a1 << 0x20\n 90987: a3 = a3 | a1\n 90990: a1 = u8 [a0 + 0x9]\n 90993: a4 = u8 [a0 + 0x8]\n 90996: a5 = u8 [a0 + 0xa]\n 90999: s1 = u8 [a0 + 0xb]\n 91002: a1 = a1 << 0x8\n 91005: a1 = a1 | a4\n 91008: a5 = a5 << 0x10\n 91011: s1 = s1 << 0x18\n 91014: a5 = a5 | s1\n 91017: a1 = a1 | a5\n 91020: a4 = u8 [a0 + 0xd]\n 91023: a5 = u8 [a0 + 0xc]\n 91026: s1 = u8 [a0 + 0xe]\n 91029: a0 = u8 [a0 + 0xf]\n 91032: a4 = a4 << 0x8\n 91035: a4 = a4 | a5\n 91038: s1 = s1 << 0x10\n 91041: a0 = a0 << 0x18\n 91044: a0 = a0 | s1\n 91047: a0 = a0 | a4\n 91050: a0 = a0 << 0x20\n 91053: a0 = a0 | a1\n 91056: a1 = reverse a0\n 91058: a0 = reverse a3\n 91060: a2 = reverse a2\n 91062: a3 = reverse t0\n 91064: a2 = a2 | a3\n 91067: a3 = a0 | a1\n 91070: a3 = a3 | a2\n 91073: a3 = a3 >> 0x20\n 91076: a1 = a1 | a2\n 91079: a1 = a1 << 0x20\n 91082: a1 = a1 | a3\n 91085: jump @1247 if a1 != 0\n      : @1244 (gas: 17)\n 91089: s1 = u64 [sp + 0x60]\n 91092: a1 = reverse s1\n 91094: a1 = a1 << 0x20\n 91097: a2 = u64 [sp + 0x50]\n 91100: a2 = reverse a2\n 91102: a3 = a2 >> 0x20\n 91105: a1 = a1 | a3\n 91108: u64 [sp + 0x50] = a1\n 91111: a2 = a2 << 0x20\n 91114: a1 = u64 [sp + 0x58]\n 91117: a1 = reverse a1\n 91119: a1 = a1 >> 0x20\n 91122: a1 = a1 | a2\n 91125: u64 [sp + 0x58] = a1\n 91128: i32 a0 = a0 + 0\n 91130: a1 = 0\n 91132: ra = 1134, jump @0\n      : @1245 [@dyn 567] (gas: 40)\n 91139: a1 = u64 [0x20080]\n 91144: a2 = u64 [0x20088]\n 91149: a3 = u64 [0x20090]\n 91154: a4 = u64 [0x20098]\n 91159: u64 [sp + 0x138] = a1\n 91163: u64 [sp + 0x130] = a2\n 91167: u64 [sp + 0x128] = a3\n 91171: u64 [sp + 0x120] = a4\n 91175: a1 = u64 [sp + 0x58]\n 91178: a1 = reverse a1\n 91180: a2 = u64 [sp + 0x50]\n 91183: a2 = reverse a2\n 91185: a3 = s1 << 0x20\n 91188: u64 [sp + 0x148] = a3\n 91192: u64 [sp + 320] = 0\n 91196: u64 [sp + 0x150] = a2\n 91200: u64 [sp + 0x158] = a1\n 91204: a1 = u64 [sp + 0x10]\n 91207: u64 [sp + 0x170] = a1\n 91211: a1 = u64 [sp + 0x20]\n 91214: u64 [sp + 0x168] = a1\n 91218: a1 = u64 [sp + 0x28]\n 91221: u64 [sp + 0x160] = a1\n 91225: a1 = u64 [sp + 0x18]\n 91228: u64 [sp + 0x178] = a1\n 91232: i32 a2 = a0 + 0\n 91234: i32 a0 = sp + 0x120\n 91238: a1 = 0x3\n 91241: a3 = 0\n 91243: ecalli 6 // 'deposit_event'\n 91245: a0 = u64 [sp + 0x30]\n 91248: u64 [sp + 0x98] = a0\n 91252: a0 = u64 [sp + 0x68]\n 91255: u64 [sp + 0x90] = a0\n 91259: a0 = u64 [sp + 0x70]\n 91262: u64 [sp + 0x88] = a0\n 91266: a0 = sp + 0x80\n 91270: a1 = u64 [sp + 0x78]\n 91273: u64 [sp + 0x80] = a1\n 91277: ra = 1136, jump @1289\n      : @1246 [@dyn 568] (gas: 6)\n 91283: sp = s0 + 0xfffffffffffffe60\n 91287: ra = u64 [sp + 0x198]\n 91291: s0 = u64 [sp + 0x190]\n 91295: s1 = u64 [sp + 0x188]\n 91299: sp = sp + 0x1a0\n 91303: ret\n      : @1247 (gas: 1)\n 91305: trap\n      : @1248 [@dyn 569] (gas: 59)\n 91306: a1 = u64 [sp]\n 91308: a1 = reverse a1\n 91310: a2 = u64 [sp + 0x38]\n 91313: a2 = reverse a2\n 91315: u64 [sp] = s1\n 91317: a3 = reverse s1\n 91319: u8 [a0 + 0x18] = a3\n 91322: u8 [a0 + 0x10] = a2\n 91325: u8 [a0 + 11] = 0\n 91328: u8 [a0 + 10] = 0\n 91331: u8 [a0 + 9] = 0\n 91334: u8 [a0 + 7] = 0\n 91337: u8 [a0 + 6] = 0\n 91340: u8 [a0 + 5] = 0\n 91343: u8 [a0 + 4] = 0\n 91346: u8 [a0 + 3] = 0\n 91349: u8 [a0 + 2] = 0\n 91352: u8 [a0 + 1] = 0\n 91355: u8 [a0 + 0] = 0\n 91357: a4 = a3 >> 0x38\n 91360: u8 [a0 + 0x1f] = a4\n 91363: a4 = a3 >> 0x30\n 91366: u8 [a0 + 0x1e] = a4\n 91369: a4 = a3 >> 0x28\n 91372: u8 [a0 + 0x1d] = a4\n 91375: a4 = a3 >> 0x20\n 91378: u8 [a0 + 0x1c] = a4\n 91381: a4 = a3 >> 0x18\n 91384: u8 [a0 + 0x1b] = a4\n 91387: a4 = a3 >> 0x10\n 91390: u8 [a0 + 0x1a] = a4\n 91393: a3 = a3 >> 0x8\n 91396: u8 [a0 + 0x19] = a3\n 91399: a3 = a2 >> 0x38\n 91402: u8 [a0 + 0x17] = a3\n 91405: a3 = a2 >> 0x30\n 91408: u8 [a0 + 0x16] = a3\n 91411: a3 = a2 >> 0x28\n 91414: u8 [a0 + 0x15] = a3\n 91417: a3 = a2 >> 0x20\n 91420: u8 [a0 + 0x14] = a3\n 91423: a3 = a2 >> 0x18\n 91426: u8 [a0 + 0x13] = a3\n 91429: a3 = a2 >> 0x10\n 91432: u8 [a0 + 0x12] = a3\n 91435: a2 = a2 >> 0x8\n 91438: u8 [a0 + 0x11] = a2\n 91441: u8 [a0 + 0x8] = a1\n 91444: a2 = a1 >> 0x38\n 91447: u8 [a0 + 0xf] = a2\n 91450: a2 = a1 >> 0x30\n 91453: u8 [a0 + 0xe] = a2\n 91456: a2 = a1 >> 0x28\n 91459: u8 [a0 + 0xd] = a2\n 91462: a1 = a1 >> 0x20\n 91465: u8 [a0 + 0xc] = a1\n 91468: a0 = 0x20\n 91471: a1 = 0x20\n 91474: ra = 1140, jump @0\n      : @1249 [@dyn 570] (gas: 35)\n 91481: u8 [a0 + 31] = 0x2\n 91485: u8 [a0 + 30] = 0\n 91488: u8 [a0 + 29] = 0\n 91491: u8 [a0 + 28] = 0\n 91494: u8 [a0 + 27] = 0\n 91497: u8 [a0 + 26] = 0\n 91500: u8 [a0 + 25] = 0\n 91503: u8 [a0 + 24] = 0\n 91506: u8 [a0 + 23] = 0\n 91509: u8 [a0 + 22] = 0\n 91512: u8 [a0 + 21] = 0\n 91515: u8 [a0 + 20] = 0\n 91518: u8 [a0 + 19] = 0\n 91521: u8 [a0 + 18] = 0\n 91524: u8 [a0 + 17] = 0\n 91527: u8 [a0 + 16] = 0\n 91530: u8 [a0 + 15] = 0\n 91533: u8 [a0 + 14] = 0\n 91536: u8 [a0 + 13] = 0\n 91539: u8 [a0 + 12] = 0\n 91542: u8 [a0 + 11] = 0\n 91545: u8 [a0 + 10] = 0\n 91548: u8 [a0 + 9] = 0\n 91551: u8 [a0 + 8] = 0\n 91554: u8 [a0 + 7] = 0\n 91557: u8 [a0 + 6] = 0\n 91560: u8 [a0 + 5] = 0\n 91563: u8 [a0 + 4] = 0\n 91566: u8 [a0 + 3] = 0\n 91569: u8 [a0 + 2] = 0\n 91572: u8 [a0 + 1] = 0\n 91575: u8 [a0 + 0] = 0\n 91577: a1 = 0x40\n 91580: a0 = 0\n 91582: ra = 1142, jump @0\n      : @1250 [@dyn 571] (gas: 28)\n 91589: i32 a0 = a0 + 0\n 91591: i32 a2 = sp + 0xa0\n 91595: a1 = 0x40\n 91598: ecalli 8 // 'hash_keccak_256'\n 91600: a0 = u64 [sp + 0xb8]\n 91604: a1 = u64 [sp + 0xb0]\n 91608: a2 = u64 [sp + 0xa8]\n 91612: a3 = u64 [sp + 0xa0]\n 91616: a0 = reverse a0\n 91618: a1 = reverse a1\n 91620: a2 = reverse a2\n 91622: a3 = reverse a3\n 91624: u64 [sp + 0x98] = a3\n 91628: u64 [sp + 0x90] = a2\n 91632: u64 [sp + 0x88] = a1\n 91636: u64 [sp + 0x80] = a0\n 91640: u64 [sp + 184] = 0\n 91644: u64 [sp + 176] = 0\n 91648: u64 [sp + 168] = 0\n 91652: u64 [sp + 160] = 0\n 91656: u32 [sp + 192] = 0x20\n 91661: i32 a1 = sp + 0x80\n 91665: i32 a3 = sp + 0xa0\n 91669: i32 a4 = sp + 0xc0\n 91673: a2 = 0xffffffffffffffff\n 91676: a0 = 0\n 91678: ecalli 7 // 'get_storage'\n 91680: fallthrough\n      : @1251 (gas: 2)\n 91681: a0 = u8 [sp + 0xa0]\n 91685: jump @1254 if a0 == 0\n      : @1252 (gas: 19)\n 91688: a0 = u64 [sp + 0x8]\n 91691: u64 [sp + 0x40] = a0\n 91694: a0 = u64 [sp]\n 91696: u64 [sp + 0x60] = a0\n 91699: a0 = u64 [sp + 0x18]\n 91702: u64 [sp + 0x48] = a0\n 91705: a0 = u64 [sp + 0x38]\n 91708: u64 [sp + 0x68] = a0\n 91711: a0 = u64 [sp + 0x20]\n 91714: u64 [sp + 0x50] = a0\n 91717: a0 = u64 [sp + 0x10]\n 91720: u64 [sp + 0x70] = a0\n 91723: a0 = u64 [sp + 0x28]\n 91726: u64 [sp + 0x58] = a0\n 91729: a0 = sp + 0x60\n 91732: a1 = sp + 0x40\n 91735: a2 = u64 [sp + 0x30]\n 91738: u64 [sp + 0x78] = a2\n 91741: ra = 1144, jump @1256\n      : @1253 [@dyn 572] (gas: 6)\n 91746: sp = s0 + 0xffffffffffffff20\n 91750: ra = u64 [sp + 0xd8]\n 91754: s0 = u64 [sp + 0xd0]\n 91758: s1 = u64 [sp + 0xc8]\n 91762: sp = sp + 0xe0\n 91766: ret\n      : @1254 (gas: 2)\n 91768: a1 = 0\n 91770: ra = 1146, jump @0\n      : @1255 [@dyn 573] (gas: 6)\n 91777: i32 a1 = a0 + 0\n 91779: a0 = 0x1\n 91782: a2 = 0\n 91784: ra = 0x47c\n 91788: ecalli 10 // 'seal_return'\n 91790: fallthrough\n      : @1256 [@dyn 574] (gas: 27)\n 91791: sp = sp + 0xffffffffffffff20\n 91795: u64 [sp + 0xd8] = ra\n 91799: u64 [sp + 0xd0] = s0\n 91803: u64 [sp + 0xc8] = s1\n 91807: s0 = sp + 0xe0\n 91811: sp = sp & 0xffffffffffffffe0\n 91814: a2 = u64 [a1 + 0x18]\n 91817: u64 [sp + 0x28] = a2\n 91820: a2 = u64 [a0 + 0x18]\n 91823: u64 [sp + 0x30] = a2\n 91826: a2 = u64 [a0 + 0x10]\n 91829: u64 [sp + 0x20] = a2\n 91832: a2 = u64 [a0 + 0x8]\n 91835: u64 [sp + 0x18] = a2\n 91838: a0 = u64 [a0]\n 91840: u64 [sp + 0x10] = a0\n 91843: a0 = u64 [a1 + 0x10]\n 91846: s1 = u64 [a1]\n 91848: a1 = u64 [a1 + 0x8]\n 91851: u64 [sp + 0x38] = a1\n 91854: u64 [sp + 0x8] = a0\n 91857: a0 = a0 << 0x20\n 91860: a0 = a0 >> 0x20\n 91863: u64 [sp] = a0\n 91865: a1 = 0x20\n 91868: a0 = 0\n 91870: ra = 1150, jump @0\n      : @1257 [@dyn 575] (gas: 59)\n 91877: a1 = u64 [sp]\n 91879: a1 = reverse a1\n 91881: a2 = u64 [sp + 0x38]\n 91884: a2 = reverse a2\n 91886: u64 [sp] = s1\n 91888: a3 = reverse s1\n 91890: u8 [a0 + 0x18] = a3\n 91893: u8 [a0 + 0x10] = a2\n 91896: u8 [a0 + 11] = 0\n 91899: u8 [a0 + 10] = 0\n 91902: u8 [a0 + 9] = 0\n 91905: u8 [a0 + 7] = 0\n 91908: u8 [a0 + 6] = 0\n 91911: u8 [a0 + 5] = 0\n 91914: u8 [a0 + 4] = 0\n 91917: u8 [a0 + 3] = 0\n 91920: u8 [a0 + 2] = 0\n 91923: u8 [a0 + 1] = 0\n 91926: u8 [a0 + 0] = 0\n 91928: a4 = a3 >> 0x38\n 91931: u8 [a0 + 0x1f] = a4\n 91934: a4 = a3 >> 0x30\n 91937: u8 [a0 + 0x1e] = a4\n 91940: a4 = a3 >> 0x28\n 91943: u8 [a0 + 0x1d] = a4\n 91946: a4 = a3 >> 0x20\n 91949: u8 [a0 + 0x1c] = a4\n 91952: a4 = a3 >> 0x18\n 91955: u8 [a0 + 0x1b] = a4\n 91958: a4 = a3 >> 0x10\n 91961: u8 [a0 + 0x1a] = a4\n 91964: a3 = a3 >> 0x8\n 91967: u8 [a0 + 0x19] = a3\n 91970: a3 = a2 >> 0x38\n 91973: u8 [a0 + 0x17] = a3\n 91976: a3 = a2 >> 0x30\n 91979: u8 [a0 + 0x16] = a3\n 91982: a3 = a2 >> 0x28\n 91985: u8 [a0 + 0x15] = a3\n 91988: a3 = a2 >> 0x20\n 91991: u8 [a0 + 0x14] = a3\n 91994: a3 = a2 >> 0x18\n 91997: u8 [a0 + 0x13] = a3\n 92000: a3 = a2 >> 0x10\n 92003: u8 [a0 + 0x12] = a3\n 92006: a2 = a2 >> 0x8\n 92009: u8 [a0 + 0x11] = a2\n 92012: u8 [a0 + 0x8] = a1\n 92015: a2 = a1 >> 0x38\n 92018: u8 [a0 + 0xf] = a2\n 92021: a2 = a1 >> 0x30\n 92024: u8 [a0 + 0xe] = a2\n 92027: a2 = a1 >> 0x28\n 92030: u8 [a0 + 0xd] = a2\n 92033: a1 = a1 >> 0x20\n 92036: u8 [a0 + 0xc] = a1\n 92039: a0 = 0x20\n 92042: a1 = 0x20\n 92045: ra = 1152, jump @0\n      : @1258 [@dyn 576] (gas: 35)\n 92052: u8 [a0 + 31] = 0x2\n 92056: u8 [a0 + 30] = 0\n 92059: u8 [a0 + 29] = 0\n 92062: u8 [a0 + 28] = 0\n 92065: u8 [a0 + 27] = 0\n 92068: u8 [a0 + 26] = 0\n 92071: u8 [a0 + 25] = 0\n 92074: u8 [a0 + 24] = 0\n 92077: u8 [a0 + 23] = 0\n 92080: u8 [a0 + 22] = 0\n 92083: u8 [a0 + 21] = 0\n 92086: u8 [a0 + 20] = 0\n 92089: u8 [a0 + 19] = 0\n 92092: u8 [a0 + 18] = 0\n 92095: u8 [a0 + 17] = 0\n 92098: u8 [a0 + 16] = 0\n 92101: u8 [a0 + 15] = 0\n 92104: u8 [a0 + 14] = 0\n 92107: u8 [a0 + 13] = 0\n 92110: u8 [a0 + 12] = 0\n 92113: u8 [a0 + 11] = 0\n 92116: u8 [a0 + 10] = 0\n 92119: u8 [a0 + 9] = 0\n 92122: u8 [a0 + 8] = 0\n 92125: u8 [a0 + 7] = 0\n 92128: u8 [a0 + 6] = 0\n 92131: u8 [a0 + 5] = 0\n 92134: u8 [a0 + 4] = 0\n 92137: u8 [a0 + 3] = 0\n 92140: u8 [a0 + 2] = 0\n 92143: u8 [a0 + 1] = 0\n 92146: u8 [a0 + 0] = 0\n 92148: a1 = 0x40\n 92151: a0 = 0\n 92153: ra = 1154, jump @0\n      : @1259 [@dyn 577] (gas: 28)\n 92160: i32 a0 = a0 + 0\n 92162: i32 a2 = sp + 0xa0\n 92166: a1 = 0x40\n 92169: ecalli 8 // 'hash_keccak_256'\n 92171: a0 = u64 [sp + 0xb8]\n 92175: a1 = u64 [sp + 0xb0]\n 92179: a2 = u64 [sp + 0xa8]\n 92183: a3 = u64 [sp + 0xa0]\n 92187: a0 = reverse a0\n 92189: a1 = reverse a1\n 92191: a2 = reverse a2\n 92193: a3 = reverse a3\n 92195: u64 [sp + 0x98] = a3\n 92199: u64 [sp + 0x90] = a2\n 92203: u64 [sp + 0x88] = a1\n 92207: u64 [sp + 0x80] = a0\n 92211: u64 [sp + 184] = 0\n 92215: u64 [sp + 176] = 0\n 92219: u64 [sp + 168] = 0\n 92223: u64 [sp + 160] = 0\n 92227: u32 [sp + 192] = 0x20\n 92232: i32 a1 = sp + 0x80\n 92236: i32 a3 = sp + 0xa0\n 92240: i32 a4 = sp + 0xc0\n 92244: a2 = 0xffffffffffffffff\n 92247: a0 = 0\n 92249: ecalli 7 // 'get_storage'\n 92251: fallthrough\n      : @1260 (gas: 2)\n 92252: a0 = u8 [sp + 0xa0]\n 92256: jump @1263 if a0 != 0\n      : @1261 (gas: 19)\n 92259: a0 = u64 [sp]\n 92261: u64 [sp + 0x40] = a0\n 92264: a0 = u64 [sp + 0x10]\n 92267: u64 [sp + 0x60] = a0\n 92270: a0 = u64 [sp + 0x38]\n 92273: u64 [sp + 0x48] = a0\n 92276: a0 = u64 [sp + 0x18]\n 92279: u64 [sp + 0x68] = a0\n 92282: a0 = u64 [sp + 0x8]\n 92285: u64 [sp + 0x50] = a0\n 92288: a0 = u64 [sp + 0x20]\n 92291: u64 [sp + 0x70] = a0\n 92294: a0 = u64 [sp + 0x28]\n 92297: u64 [sp + 0x58] = a0\n 92300: a0 = sp + 0x60\n 92303: a1 = sp + 0x40\n 92306: a2 = u64 [sp + 0x30]\n 92309: u64 [sp + 0x78] = a2\n 92312: ra = 1156, jump @1265\n      : @1262 [@dyn 578] (gas: 6)\n 92317: sp = s0 + 0xffffffffffffff20\n 92321: ra = u64 [sp + 0xd8]\n 92325: s0 = u64 [sp + 0xd0]\n 92329: s1 = u64 [sp + 0xc8]\n 92333: sp = sp + 0xe0\n 92337: ret\n      : @1263 (gas: 3)\n 92339: a0 = 0\n 92341: a1 = 0\n 92343: ra = 1158, jump @0\n      : @1264 [@dyn 579] (gas: 6)\n 92350: i32 a1 = a0 + 0\n 92352: a0 = 0x1\n 92355: a2 = 0\n 92357: ra = 0x488\n 92361: ecalli 10 // 'seal_return'\n 92363: fallthrough\n      : @1265 [@dyn 580] (gas: 31)\n 92364: sp = sp + 0xfffffffffffffd00\n 92368: u64 [sp + 0x2f8] = ra\n 92372: u64 [sp + 0x2f0] = s0\n 92376: u64 [sp + 0x2e8] = s1\n 92380: s0 = sp + 0x300\n 92384: sp = sp & 0xffffffffffffffe0\n 92387: u64 [sp + 136] = 0\n 92391: u64 [sp + 152] = 0\n 92395: u64 [sp + 144] = 0\n 92399: s1 = 0\n 92401: a2 = u64 [a1 + 0x10]\n 92404: u64 [sp + 0x28] = a2\n 92407: a2 = u64 [a1 + 0x8]\n 92410: u64 [sp + 0x20] = a2\n 92413: a1 = u64 [a1]\n 92415: u64 [sp + 0x18] = a1\n 92418: a1 = u32 [a0 + 0x10]\n 92421: u64 [sp + 0x30] = a1\n 92424: a1 = u64 [a0 + 0x8]\n 92427: u64 [sp + 0x38] = a1\n 92430: a0 = u64 [a0]\n 92432: u64 [sp + 0x40] = a0\n 92435: a0 = 0xffffffff\n 92445: u64 [sp + 0x48] = a0\n 92448: i32 a1 = sp + 0x2c0\n 92452: i32 a3 = sp + 0x260\n 92456: i32 a4 = sp + 0x2a0\n 92460: u64 [sp + 0x80] = a1\n 92464: u64 [sp + 0x78] = a3\n 92467: u64 [sp + 0x70] = a4\n 92470: fallthrough\n      : @1266 (gas: 13)\n 92471: u64 [sp + 728] = 0\n 92475: u64 [sp + 720] = 0\n 92479: u64 [sp + 712] = 0\n 92483: u64 [sp + 704] = 0x3\n 92488: u64 [sp + 632] = 0\n 92492: u64 [sp + 624] = 0\n 92496: u64 [sp + 616] = 0\n 92500: u64 [sp + 608] = 0\n 92504: u32 [sp + 672] = 0x20\n 92509: a2 = 0xffffffffffffffff\n 92512: a0 = 0\n 92514: ecalli 7 // 'get_storage'\n 92516: fallthrough\n      : @1267 (gas: 20)\n 92517: a0 = u64 [sp + 0x278]\n 92521: a1 = u64 [sp + 0x260]\n 92525: a2 = u64 [sp + 0x270]\n 92529: a3 = u64 [sp + 0x268]\n 92533: a4 = s1 ^ a0\n 92536: t1 = s1\n 92538: a0 = s1 <u a0\n 92541: s1 = u64 [sp + 0x90]\n 92545: a5 = s1 <u a2\n 92548: a5 = a0 if a4 != 0\n 92551: a0 = u64 [sp + 0x98]\n 92555: t0 = a0 ^ a3\n 92558: a3 = a0 <u a3\n 92561: a0 = u64 [sp + 0x88]\n 92565: a1 = a0 <u a1\n 92568: a1 = a3 if t0 != 0\n 92571: a0 = s1 ^ a2\n 92574: a0 = a0 | a4\n 92577: a1 = a5 if a0 != 0\n 92580: jump @1272 if a1 == 0\n      : @1268 (gas: 16)\n 92584: a0 = u64 [sp + 0x88]\n 92588: u64 [sp + 0x1e0] = a0\n 92592: u64 [sp + 536] = 0\n 92596: u64 [sp + 528] = 0\n 92600: u64 [sp + 520] = 0\n 92604: u64 [sp + 512] = 0x3\n 92609: a0 = u64 [sp + 0x98]\n 92613: u64 [sp + 0x1e8] = a0\n 92617: a0 = u64 [sp + 0x90]\n 92621: u64 [sp + 0x1f0] = a0\n 92625: a0 = sp + 0x220\n 92629: a1 = sp + 0x200\n 92633: a2 = sp + 0x1e0\n 92637: u64 [sp + 0x50] = t1\n 92640: u64 [sp + 0x1f8] = t1\n 92644: ra = 1162, jump @270\n      : @1269 [@dyn 581] (gas: 27)\n 92651: a0 = u64 [sp + 0x258]\n 92655: u64 [sp + 0x68] = a0\n 92658: a0 = u64 [sp + 0x250]\n 92662: u64 [sp + 0x60] = a0\n 92665: s1 = u64 [sp + 0x248]\n 92669: a0 = u64 [sp + 0x240]\n 92673: u64 [sp + 0x58] = a0\n 92676: a0 = u64 [sp + 0x238]\n 92680: a1 = u64 [sp + 0x230]\n 92684: a2 = u64 [sp + 0x228]\n 92688: a3 = u64 [sp + 0x220]\n 92692: u64 [sp + 0x2d8] = a0\n 92696: u64 [sp + 0x2d0] = a1\n 92700: u64 [sp + 0x2c8] = a2\n 92704: u64 [sp + 0x2c0] = a3\n 92708: u64 [sp + 632] = 0\n 92712: u64 [sp + 624] = 0\n 92716: u64 [sp + 616] = 0\n 92720: u64 [sp + 608] = 0\n 92724: u32 [sp + 672] = 0x20\n 92729: a2 = 0xffffffffffffffff\n 92732: a0 = 0\n 92734: a1 = u64 [sp + 0x80]\n 92738: a3 = u64 [sp + 0x78]\n 92741: a4 = u64 [sp + 0x70]\n 92744: ecalli 7 // 'get_storage'\n 92746: fallthrough\n      : @1270 (gas: 191)\n 92747: a1 = u64 [sp + 0x260]\n 92751: a2 = u64 [sp + 0x268]\n 92755: t0 = u64 [sp + 0x58]\n 92758: a0 = t0 >> 0x3d\n 92761: a3 = s1 << 0x3\n 92764: a3 = a3 | a0\n 92767: s1 = s1 >> 0x3d\n 92770: a4 = u64 [sp + 0x60]\n 92773: a0 = a4 << 0x3\n 92776: s1 = s1 | a0\n 92779: a0 = a4 >> 0x3d\n 92782: a4 = u64 [sp + 0x68]\n 92785: a4 = a4 << 0x3\n 92788: a4 = a4 | a0\n 92791: a0 = t0 << 0x3\n 92794: a5 = a3 >u 0\n 92796: a0 = a0 <u 0x100\n 92800: a0 = a0 ^ 0x1\n 92803: a0 = a5 if a3 != 0\n 92806: a3 = a4 >u 0\n 92808: a5 = s1 >u 0\n 92810: a5 = a3 if a4 != 0\n 92813: a3 = u64 [sp + 0x270]\n 92817: s1 = s1 | a4\n 92820: a4 = u64 [sp + 0x278]\n 92824: a0 = a5 if s1 != 0\n 92827: u8 [sp + 479] = 0\n 92831: u8 [sp + 478] = 0\n 92835: u8 [sp + 477] = 0\n 92839: u8 [sp + 476] = 0\n 92843: u8 [sp + 475] = 0\n 92847: u8 [sp + 474] = 0\n 92851: u8 [sp + 473] = 0\n 92855: u8 [sp + 472] = 0\n 92859: u8 [sp + 471] = 0\n 92863: u8 [sp + 470] = 0\n 92867: u8 [sp + 469] = 0\n 92871: u8 [sp + 468] = 0\n 92875: u8 [sp + 467] = 0\n 92879: u8 [sp + 466] = 0\n 92883: u8 [sp + 465] = 0\n 92887: u8 [sp + 464] = 0\n 92891: u8 [sp + 463] = 0\n 92895: u8 [sp + 462] = 0\n 92899: u8 [sp + 461] = 0\n 92903: u8 [sp + 460] = 0\n 92907: u8 [sp + 459] = 0\n 92911: u8 [sp + 458] = 0\n 92915: u8 [sp + 457] = 0\n 92919: u8 [sp + 456] = 0\n 92923: u8 [sp + 455] = 0\n 92927: u8 [sp + 454] = 0\n 92931: u8 [sp + 453] = 0\n 92935: u8 [sp + 452] = 0\n 92939: u8 [sp + 451] = 0\n 92943: u8 [sp + 450] = 0\n 92947: u8 [sp + 449] = 0\n 92951: u8 [sp + 448] = 0\n 92955: u8 [sp + 0x1b8] = a4\n 92959: u8 [sp + 0x1b0] = a3\n 92963: u8 [sp + 0x1a8] = a2\n 92967: u8 [sp + 0x1a0] = a1\n 92971: a5 = a4 >> 0x38\n 92974: u8 [sp + 0x1bf] = a5\n 92978: a5 = a4 >> 0x30\n 92981: u8 [sp + 0x1be] = a5\n 92985: a5 = a4 >> 0x28\n 92988: u8 [sp + 0x1bd] = a5\n 92992: a5 = a4 >> 0x20\n 92995: u8 [sp + 0x1bc] = a5\n 92999: a5 = a4 >> 0x18\n 93002: u8 [sp + 0x1bb] = a5\n 93006: a5 = a4 >> 0x10\n 93009: u8 [sp + 0x1ba] = a5\n 93013: a4 = a4 >> 0x8\n 93016: u8 [sp + 0x1b9] = a4\n 93020: a4 = a3 >> 0x38\n 93023: u8 [sp + 0x1b7] = a4\n 93027: a4 = a3 >> 0x30\n 93030: u8 [sp + 0x1b6] = a4\n 93034: a4 = a3 >> 0x28\n 93037: u8 [sp + 0x1b5] = a4\n 93041: a4 = a3 >> 0x20\n 93044: u8 [sp + 0x1b4] = a4\n 93048: a4 = a3 >> 0x18\n 93051: u8 [sp + 0x1b3] = a4\n 93055: a4 = a3 >> 0x10\n 93058: u8 [sp + 0x1b2] = a4\n 93062: a3 = a3 >> 0x8\n 93065: u8 [sp + 0x1b1] = a3\n 93069: a3 = a2 >> 0x38\n 93072: u8 [sp + 0x1af] = a3\n 93076: a3 = a2 >> 0x30\n 93079: u8 [sp + 0x1ae] = a3\n 93083: a3 = a2 >> 0x28\n 93086: u8 [sp + 0x1ad] = a3\n 93090: a3 = a2 >> 0x20\n 93093: u8 [sp + 0x1ac] = a3\n 93097: a3 = a2 >> 0x18\n 93100: u8 [sp + 0x1ab] = a3\n 93104: a3 = a2 >> 0x10\n 93107: u8 [sp + 0x1aa] = a3\n 93111: a2 = a2 >> 0x8\n 93114: u8 [sp + 0x1a9] = a2\n 93118: a2 = a1 >> 0x38\n 93121: u8 [sp + 0x1a7] = a2\n 93125: a2 = a1 >> 0x30\n 93128: u8 [sp + 0x1a6] = a2\n 93132: a2 = a1 >> 0x28\n 93135: u8 [sp + 0x1a5] = a2\n 93139: a2 = a1 >> 0x20\n 93142: u8 [sp + 0x1a4] = a2\n 93146: a2 = a1 >> 0x18\n 93149: u8 [sp + 0x1a3] = a2\n 93153: a2 = a1 >> 0x10\n 93156: u8 [sp + 0x1a2] = a2\n 93160: a1 = a1 >> 0x8\n 93163: u8 [sp + 0x1a1] = a1\n 93167: a1 = t0 & 0x1f\n 93170: a2 = sp + 0x1a0\n 93174: a1 = a1 + a2\n 93177: a2 = u8 [a1 + 0x9]\n 93180: a3 = u8 [a1 + 0x8]\n 93183: a4 = u8 [a1 + 0xa]\n 93186: a5 = u8 [a1 + 0xb]\n 93189: a2 = a2 << 0x8\n 93192: a2 = a2 | a3\n 93195: a4 = a4 << 0x10\n 93198: a5 = a5 << 0x18\n 93201: a4 = a4 | a5\n 93204: a2 = a2 | a4\n 93207: a3 = u8 [a1 + 0xd]\n 93210: a4 = u8 [a1 + 0xc]\n 93213: a5 = u8 [a1 + 0xe]\n 93216: s1 = u8 [a1 + 0xf]\n 93219: a3 = a3 << 0x8\n 93222: a3 = a3 | a4\n 93225: a5 = a5 << 0x10\n 93228: s1 = s1 << 0x18\n 93231: a5 = a5 | s1\n 93234: a3 = a3 | a5\n 93237: a3 = a3 << 0x20\n 93240: t0 = a3 | a2\n 93243: a3 = u8 [a1 + 0x1]\n 93246: a4 = u8 [a1]\n 93248: a5 = u8 [a1 + 0x2]\n 93251: s1 = u8 [a1 + 0x3]\n 93254: a3 = a3 << 0x8\n 93257: a3 = a3 | a4\n 93260: a5 = a5 << 0x10\n 93263: s1 = s1 << 0x18\n 93266: a5 = a5 | s1\n 93269: a3 = a3 | a5\n 93272: a4 = u8 [a1 + 0x5]\n 93275: a5 = u8 [a1 + 0x4]\n 93278: s1 = u8 [a1 + 0x6]\n 93281: a2 = u8 [a1 + 0x7]\n 93284: a4 = a4 << 0x8\n 93287: a4 = a4 | a5\n 93290: s1 = s1 << 0x10\n 93293: a2 = a2 << 0x18\n 93296: a2 = a2 | s1\n 93299: a2 = a2 | a4\n 93302: a2 = a2 << 0x20\n 93305: a2 = a2 | a3\n 93308: a3 = u8 [a1 + 0x11]\n 93311: a4 = u8 [a1 + 0x10]\n 93314: a5 = u8 [a1 + 0x12]\n 93317: a1 = u8 [a1 + 0x13]\n 93320: a3 = a3 << 0x8\n 93323: a3 = a3 | a4\n 93326: a5 = a5 << 0x10\n 93329: a1 = a1 << 0x18\n 93332: a1 = a1 | a5\n 93335: a1 = a1 | a3\n 93338: a2 = a2 & 0xffffffffffffffff\n 93341: a3 = t0 & 0xffffffffffffffff\n 93344: a4 = u64 [sp + 0x48]\n 93347: a1 = a1 & a4\n 93350: a3 = 0 if a0 != 0\n 93352: a2 = 0 if a0 != 0\n 93354: a1 = 0 if a0 != 0\n 93356: a0 = u64 [sp + 0x30]\n 93359: a0 = a0 ^ a1\n 93362: a1 = u64 [sp + 0x40]\n 93365: a1 = a1 ^ a2\n 93368: a0 = a0 | a1\n 93371: a1 = u64 [sp + 0x38]\n 93374: a1 = a1 ^ a3\n 93377: a0 = a0 | a1\n 93380: jump @1273 if a0 == 0\n      : @1271 (gas: 19)\n 93383: a2 = u64 [sp + 0x88]\n 93387: a2 = a2 + 0x1\n 93390: a0 = a2 <u 0x1\n 93393: a1 = u64 [sp + 0x98]\n 93397: a1 = a1 + a0\n 93400: u64 [sp + 0x98] = a1\n 93404: u64 [sp + 0x88] = a2\n 93408: a0 = a2 | a1\n 93411: a0 = a0 <u 0x1\n 93414: a1 = u64 [sp + 0x90]\n 93418: a0 = a0 + a1\n 93421: a1 = a0 <u a1\n 93424: s1 = u64 [sp + 0x50]\n 93427: s1 = s1 + a1\n 93430: u64 [sp + 0x90] = a0\n 93434: a1 = u64 [sp + 0x80]\n 93438: a3 = u64 [sp + 0x78]\n 93441: a4 = u64 [sp + 0x70]\n 93444: jump @1266\n      : @1272 (gas: 12)\n 93447: u64 [sp + 128] = 0\n 93451: a0 = u64 [sp + 0x18]\n 93454: a0 = a0 & 0xffffffffffffffff\n 93457: u64 [sp + 0x98] = a0\n 93461: a0 = u64 [sp + 0x20]\n 93464: a0 = a0 & 0xffffffffffffffff\n 93467: u64 [sp + 0x90] = a0\n 93471: a0 = u64 [sp + 0x48]\n 93474: a1 = u64 [sp + 0x28]\n 93477: a0 = a0 & a1\n 93480: u64 [sp + 0x88] = a0\n 93484: jump @1275\n      : @1273 (gas: 16)\n 93487: a0 = u64 [sp + 0x88]\n 93491: u64 [sp + 0x120] = a0\n 93495: u64 [sp + 344] = 0\n 93499: u64 [sp + 336] = 0\n 93503: u64 [sp + 328] = 0\n 93507: u64 [sp + 320] = 0x3\n 93512: a0 = u64 [sp + 0x98]\n 93516: u64 [sp + 0x128] = a0\n 93520: a0 = u64 [sp + 0x90]\n 93524: u64 [sp + 0x130] = a0\n 93528: a0 = sp + 0x160\n 93532: a1 = sp + 0x140\n 93536: a2 = sp + 0x120\n 93540: a3 = u64 [sp + 0x50]\n 93543: u64 [sp + 0x138] = a3\n 93547: ra = 1164, jump @270\n      : @1274 [@dyn 582] (gas: 455)\n 93554: a0 = u64 [sp + 0x198]\n 93558: u64 [sp + 0x60] = a0\n 93561: a0 = u64 [sp + 0x190]\n 93565: u64 [sp + 0x58] = a0\n 93568: s1 = u64 [sp + 0x188]\n 93572: a0 = u64 [sp + 0x180]\n 93576: u64 [sp + 0x10] = a0\n 93579: a1 = u64 [sp + 0x160]\n 93583: u64 [sp + 0x80] = a1\n 93587: a2 = u64 [sp + 0x168]\n 93591: u64 [sp + 0x78] = a2\n 93594: a3 = u64 [sp + 0x170]\n 93598: u64 [sp + 0x70] = a3\n 93601: a4 = u64 [sp + 0x178]\n 93605: u64 [sp + 0x68] = a4\n 93608: u32 [sp + 672] = 0x20\n 93613: a0 = u64 [sp + 0x28]\n 93616: a5 = u64 [sp + 0x48]\n 93619: a0 = a0 & a5\n 93622: u64 [sp + 0x88] = a0\n 93626: a0 = u64 [sp + 0x20]\n 93629: a0 = a0 & 0xffffffffffffffff\n 93632: u64 [sp + 0x90] = a0\n 93636: a0 = u64 [sp + 0x18]\n 93639: a0 = a0 & 0xffffffffffffffff\n 93642: u64 [sp + 0x98] = a0\n 93646: u64 [sp + 0x2d8] = a4\n 93650: u64 [sp + 0x2d0] = a3\n 93654: u64 [sp + 0x2c8] = a2\n 93658: u64 [sp + 0x2c0] = a1\n 93662: u64 [sp + 632] = 0\n 93666: u64 [sp + 624] = 0\n 93670: u64 [sp + 616] = 0\n 93674: u64 [sp + 608] = 0\n 93678: i32 a1 = sp + 0x2c0\n 93682: i32 a3 = sp + 0x260\n 93686: i32 a4 = sp + 0x2a0\n 93690: a2 = 0xffffffffffffffff\n 93693: a0 = 0\n 93695: ecalli 7 // 'get_storage'\n 93697: a4 = u64 [sp + 0x10]\n 93700: a0 = a4 >> 0x3d\n 93703: a1 = s1 << 0x3\n 93706: a0 = a0 | a1\n 93709: a1 = a4 << 0x3\n 93712: a1 = a1 <u 0x100\n 93716: t1 = a1 ^ 0x1\n 93719: a1 = a0 >u 0\n 93721: t1 = a1 if a0 != 0\n 93724: s1 = s1 >> 0x3d\n 93727: a1 = u64 [sp + 0x58]\n 93730: a0 = a1 << 0x3\n 93733: a0 = a0 | s1\n 93736: a1 = a1 >> 0x3d\n 93739: a2 = u64 [sp + 0x60]\n 93742: a2 = a2 << 0x3\n 93745: a1 = a1 | a2\n 93748: a2 = a1 >u 0\n 93750: a3 = a0 >u 0\n 93752: a3 = a2 if a1 != 0\n 93755: a0 = a0 | a1\n 93758: a1 = u64 [sp + 0x260]\n 93762: u64 [sp + 0x60] = a1\n 93765: t1 = a3 if a0 != 0\n 93768: a0 = u64 [sp + 0x268]\n 93772: u64 [sp + 0x58] = a0\n 93775: a0 = u64 [sp + 0x270]\n 93779: u64 [sp + 0x50] = a0\n 93782: a0 = u64 [sp + 0x278]\n 93786: u64 [sp + 0x28] = a0\n 93789: u8 [sp + 199] = 0xff\n 93795: u8 [sp + 207] = 0xff\n 93801: u8 [sp + 198] = 0xffff\n 93808: u8 [sp + 206] = 0xffff\n 93815: u8 [sp + 197] = 0xffffff\n 93823: u8 [sp + 205] = 0xffffff\n 93831: a0 = 0xffffffffff\n 93841: u8 [sp + 0xc3] = a0\n 93845: u8 [sp + 0xcb] = a0\n 93849: a0 = 0xffffffffffff\n 93859: u8 [sp + 0xc2] = a0\n 93863: u8 [sp + 0xca] = a0\n 93867: u8 [sp + 192] = 0xffffffffffffffff\n 93872: u8 [sp + 200] = 0xffffffffffffffff\n 93877: a0 = 0xffffffffffffff\n 93887: u8 [sp + 0xc1] = a0\n 93891: u8 [sp + 0xc9] = a0\n 93895: a1 = u64 [sp + 0x48]\n 93898: a0 = a1 >> 0x18\n 93901: u8 [sp + 0xd3] = a0\n 93905: a0 = a1 >> 0x10\n 93908: u8 [sp + 0xd2] = a0\n 93912: u8 [sp + 223] = 0\n 93916: u8 [sp + 222] = 0\n 93920: u8 [sp + 221] = 0\n 93924: u8 [sp + 220] = 0\n 93928: u8 [sp + 219] = 0\n 93932: u8 [sp + 218] = 0\n 93936: u8 [sp + 217] = 0\n 93940: u8 [sp + 216] = 0\n 93944: u8 [sp + 215] = 0\n 93948: u8 [sp + 214] = 0\n 93952: u8 [sp + 213] = 0\n 93956: u8 [sp + 212] = 0\n 93960: u8 [sp + 191] = 0\n 93964: u8 [sp + 190] = 0\n 93968: u8 [sp + 189] = 0\n 93972: u8 [sp + 188] = 0\n 93976: u8 [sp + 187] = 0\n 93980: u8 [sp + 186] = 0\n 93984: u8 [sp + 185] = 0\n 93988: u8 [sp + 184] = 0\n 93992: u8 [sp + 183] = 0\n 93996: u8 [sp + 182] = 0\n 94000: u8 [sp + 181] = 0\n 94004: u8 [sp + 180] = 0\n 94008: u8 [sp + 179] = 0\n 94012: u8 [sp + 178] = 0\n 94016: u8 [sp + 177] = 0\n 94020: u8 [sp + 176] = 0\n 94024: u8 [sp + 175] = 0\n 94028: u8 [sp + 174] = 0\n 94032: u8 [sp + 173] = 0\n 94036: u8 [sp + 172] = 0\n 94040: u8 [sp + 171] = 0\n 94044: u8 [sp + 170] = 0\n 94048: u8 [sp + 169] = 0\n 94052: u8 [sp + 168] = 0\n 94056: u8 [sp + 167] = 0\n 94060: u8 [sp + 166] = 0\n 94064: u8 [sp + 165] = 0\n 94068: u8 [sp + 164] = 0\n 94072: u8 [sp + 163] = 0\n 94076: u8 [sp + 162] = 0\n 94080: u8 [sp + 161] = 0\n 94084: u8 [sp + 160] = 0\n 94088: u8 [sp + 0xc4] = a1\n 94092: u8 [sp + 0xd0] = a1\n 94096: u8 [sp + 0xcc] = a1\n 94100: a0 = a1 >> 0x8\n 94103: u8 [sp + 0xd1] = a0\n 94107: a2 = sp + 0xc0\n 94111: t2 = a4 & 0x1f\n 94114: a2 = a2 - t2\n 94117: a0 = u8 [a2 + 0x19]\n 94120: a1 = u8 [a2 + 0x18]\n 94123: a4 = u8 [a2 + 0x1a]\n 94126: s1 = u8 [a2 + 0x1b]\n 94129: a0 = a0 << 0x8\n 94132: a0 = a0 | a1\n 94135: a4 = a4 << 0x10\n 94138: s1 = s1 << 0x18\n 94141: a4 = a4 | s1\n 94144: t0 = a4 | a0\n 94147: a1 = u8 [a2 + 0x1d]\n 94150: a4 = u8 [a2 + 0x1c]\n 94153: s1 = u8 [a2 + 0x1e]\n 94156: a0 = u8 [a2 + 0x1f]\n 94159: a1 = a1 << 0x8\n 94162: a1 = a1 | a4\n 94165: s1 = s1 << 0x10\n 94168: a0 = a0 << 0x18\n 94171: a0 = a0 | s1\n 94174: a0 = a0 | a1\n 94177: a0 = a0 << 0x20\n 94180: a0 = a0 | t0\n 94183: u64 [sp + 0x48] = a0\n 94186: a0 = u8 [a2 + 0x11]\n 94189: a1 = u8 [a2 + 0x10]\n 94192: a4 = u8 [a2 + 0x12]\n 94195: s1 = u8 [a2 + 0x13]\n 94198: a0 = a0 << 0x8\n 94201: a0 = a0 | a1\n 94204: a4 = a4 << 0x10\n 94207: s1 = s1 << 0x18\n 94210: a4 = a4 | s1\n 94213: t0 = a4 | a0\n 94216: a1 = u8 [a2 + 0x15]\n 94219: a4 = u8 [a2 + 0x14]\n 94222: s1 = u8 [a2 + 0x16]\n 94225: a0 = u8 [a2 + 0x17]\n 94228: a1 = a1 << 0x8\n 94231: a1 = a1 | a4\n 94234: s1 = s1 << 0x10\n 94237: a0 = a0 << 0x18\n 94240: a0 = a0 | s1\n 94243: a0 = a0 | a1\n 94246: a0 = a0 << 0x20\n 94249: a0 = a0 | t0\n 94252: u64 [sp + 0x20] = a0\n 94255: t0 = u8 [a2 + 0x9]\n 94258: a1 = u8 [a2 + 0x8]\n 94261: a4 = u8 [a2 + 0xa]\n 94264: a0 = u8 [a2 + 0xb]\n 94267: t0 = t0 << 0x8\n 94270: a1 = t0 | a1\n 94273: a4 = a4 << 0x10\n 94276: a0 = a0 << 0x18\n 94279: a0 = a0 | a4\n 94282: t0 = a0 | a1\n 94285: a3 = u8 [a2 + 0xd]\n 94288: a4 = u8 [a2 + 0xc]\n 94291: a1 = u8 [a2 + 0xe]\n 94294: a0 = u8 [a2 + 0xf]\n 94297: a3 = a3 << 0x8\n 94300: a3 = a3 | a4\n 94303: a1 = a1 << 0x10\n 94306: a0 = a0 << 0x18\n 94309: a0 = a0 | a1\n 94312: a0 = a0 | a3\n 94315: a0 = a0 << 0x20\n 94318: ra = a0 | t0\n 94321: a0 = u8 [a2 + 0x1]\n 94324: a1 = u8 [a2]\n 94326: a3 = u8 [a2 + 0x2]\n 94329: a4 = u8 [a2 + 0x3]\n 94332: a0 = a0 << 0x8\n 94335: a0 = a0 | a1\n 94338: a3 = a3 << 0x10\n 94341: a4 = a4 << 0x18\n 94344: a3 = a3 | a4\n 94347: a0 = a0 | a3\n 94350: a1 = u8 [a2 + 0x5]\n 94353: a3 = u8 [a2 + 0x4]\n 94356: a4 = u8 [a2 + 0x6]\n 94359: a2 = u8 [a2 + 0x7]\n 94362: a1 = a1 << 0x8\n 94365: a1 = a1 | a3\n 94368: a4 = a4 << 0x10\n 94371: a2 = a2 << 0x18\n 94374: a2 = a2 | a4\n 94377: a1 = a1 | a2\n 94380: a1 = a1 << 0x20\n 94383: s1 = a1 | a0\n 94386: a4 = u64 [sp + 0x98]\n 94390: a0 = a4 >> 0x38\n 94393: u8 [sp + 0x107] = a0\n 94397: a0 = a4 >> 0x30\n 94400: u8 [sp + 0x106] = a0\n 94404: a0 = a4 >> 0x28\n 94407: u8 [sp + 0x105] = a0\n 94411: a0 = a4 >> 0x20\n 94414: u8 [sp + 0x104] = a0\n 94418: a0 = a4 >> 0x18\n 94421: u8 [sp + 0x103] = a0\n 94425: a0 = a4 >> 0x10\n 94428: u8 [sp + 0x102] = a0\n 94432: a0 = a4 >> 0x8\n 94435: u8 [sp + 0x101] = a0\n 94439: a2 = u64 [sp + 0x90]\n 94443: a0 = a2 >> 0x38\n 94446: u8 [sp + 0x10f] = a0\n 94450: a0 = a2 >> 0x30\n 94453: u8 [sp + 0x10e] = a0\n 94457: a0 = a2 >> 0x28\n 94460: u8 [sp + 0x10d] = a0\n 94464: a0 = a2 >> 0x20\n 94467: u8 [sp + 0x10c] = a0\n 94471: a0 = a2 >> 0x18\n 94474: u8 [sp + 0x10b] = a0\n 94478: a0 = a2 >> 0x10\n 94481: u8 [sp + 0x10a] = a0\n 94485: a0 = a2 >> 0x8\n 94488: u8 [sp + 0x109] = a0\n 94492: a1 = u64 [sp + 0x88]\n 94496: a0 = a1 >> 0x18\n 94499: u8 [sp + 0x113] = a0\n 94503: a0 = a1 >> 0x10\n 94506: u8 [sp + 0x112] = a0\n 94510: a0 = a1 >> 0x8\n 94513: u8 [sp + 0x111] = a0\n 94517: a0 = sp + 0x100\n 94521: a3 = a0 - t2\n 94524: u8 [sp + 287] = 0\n 94528: u8 [sp + 286] = 0\n 94532: u8 [sp + 285] = 0\n 94536: u8 [sp + 284] = 0\n 94540: u8 [sp + 283] = 0\n 94544: u8 [sp + 282] = 0\n 94548: u8 [sp + 281] = 0\n 94552: u8 [sp + 280] = 0\n 94556: u8 [sp + 279] = 0\n 94560: u8 [sp + 278] = 0\n 94564: u8 [sp + 277] = 0\n 94568: u8 [sp + 276] = 0\n 94572: u8 [sp + 255] = 0\n 94576: u8 [sp + 254] = 0\n 94580: u8 [sp + 253] = 0\n 94584: u8 [sp + 252] = 0\n 94588: u8 [sp + 251] = 0\n 94592: u8 [sp + 250] = 0\n 94596: u8 [sp + 249] = 0\n 94600: u8 [sp + 248] = 0\n 94604: u8 [sp + 247] = 0\n 94608: u8 [sp + 246] = 0\n 94612: u8 [sp + 245] = 0\n 94616: u8 [sp + 244] = 0\n 94620: u8 [sp + 243] = 0\n 94624: u8 [sp + 242] = 0\n 94628: u8 [sp + 241] = 0\n 94632: u8 [sp + 240] = 0\n 94636: u8 [sp + 239] = 0\n 94640: u8 [sp + 238] = 0\n 94644: u8 [sp + 237] = 0\n 94648: u8 [sp + 236] = 0\n 94652: u8 [sp + 235] = 0\n 94656: u8 [sp + 234] = 0\n 94660: u8 [sp + 233] = 0\n 94664: u8 [sp + 232] = 0\n 94668: u8 [sp + 231] = 0\n 94672: u8 [sp + 230] = 0\n 94676: u8 [sp + 229] = 0\n 94680: u8 [sp + 228] = 0\n 94684: u8 [sp + 227] = 0\n 94688: u8 [sp + 226] = 0\n 94692: u8 [sp + 225] = 0\n 94696: u8 [sp + 224] = 0\n 94700: u8 [sp + 0x100] = a4\n 94704: u8 [sp + 0x108] = a2\n 94708: u8 [sp + 0x110] = a1\n 94712: t2 = u8 [a3 + 0x19]\n 94715: a1 = u8 [a3 + 0x18]\n 94718: a4 = u8 [a3 + 0x1a]\n 94721: a0 = u8 [a3 + 0x1b]\n 94724: t2 = t2 << 0x8\n 94727: a1 = t2 | a1\n 94730: a4 = a4 << 0x10\n 94733: a0 = a0 << 0x18\n 94736: a0 = a0 | a4\n 94739: t2 = a0 | a1\n 94742: a2 = u8 [a3 + 0x1d]\n 94745: a4 = u8 [a3 + 0x1c]\n 94748: a1 = u8 [a3 + 0x1e]\n 94751: a0 = u8 [a3 + 0x1f]\n 94754: a2 = a2 << 0x8\n 94757: a2 = a2 | a4\n 94760: a1 = a1 << 0x10\n 94763: a0 = a0 << 0x18\n 94766: a0 = a0 | a1\n 94769: a0 = a0 | a2\n 94772: a0 = a0 << 0x20\n 94775: t2 = a0 | t2\n 94778: a0 = u8 [a3 + 0x11]\n 94781: a1 = u8 [a3 + 0x10]\n 94784: a2 = u8 [a3 + 0x12]\n 94787: a4 = u8 [a3 + 0x13]\n 94790: a0 = a0 << 0x8\n 94793: a0 = a0 | a1\n 94796: a2 = a2 << 0x10\n 94799: a4 = a4 << 0x18\n 94802: a2 = a2 | a4\n 94805: a5 = a2 | a0\n 94808: a1 = u8 [a3 + 0x15]\n 94811: a2 = u8 [a3 + 0x14]\n 94814: a4 = u8 [a3 + 0x16]\n 94817: a0 = u8 [a3 + 0x17]\n 94820: a1 = a1 << 0x8\n 94823: a1 = a1 | a2\n 94826: a4 = a4 << 0x10\n 94829: a0 = a0 << 0x18\n 94832: a0 = a0 | a4\n 94835: a0 = a0 | a1\n 94838: a0 = a0 << 0x20\n 94841: t0 = a0 | a5\n 94844: a0 = u8 [a3 + 0x9]\n 94847: a2 = u8 [a3 + 0x8]\n 94850: a4 = u8 [a3 + 0xa]\n 94853: a5 = u8 [a3 + 0xb]\n 94856: a0 = a0 << 0x8\n 94859: a0 = a0 | a2\n 94862: a4 = a4 << 0x10\n 94865: a5 = a5 << 0x18\n 94868: a4 = a4 | a5\n 94871: a1 = a4 | a0\n 94874: a2 = u8 [a3 + 0xd]\n 94877: a4 = u8 [a3 + 0xc]\n 94880: a5 = u8 [a3 + 0xe]\n 94883: a0 = u8 [a3 + 0xf]\n 94886: a2 = a2 << 0x8\n 94889: a2 = a2 | a4\n 94892: a5 = a5 << 0x10\n 94895: a0 = a0 << 0x18\n 94898: a0 = a0 | a5\n 94901: a0 = a0 | a2\n 94904: a0 = a0 << 0x20\n 94907: a0 = a0 | a1\n 94910: a1 = u8 [a3 + 0x1]\n 94913: a2 = u8 [a3]\n 94915: a4 = u8 [a3 + 0x2]\n 94918: a5 = u8 [a3 + 0x3]\n 94921: a1 = a1 << 0x8\n 94924: a1 = a1 | a2\n 94927: a4 = a4 << 0x10\n 94930: a5 = a5 << 0x18\n 94933: a4 = a4 | a5\n 94936: a1 = a1 | a4\n 94939: a2 = u8 [a3 + 0x5]\n 94942: a4 = u8 [a3 + 0x4]\n 94945: a5 = u8 [a3 + 0x6]\n 94948: a3 = u8 [a3 + 0x7]\n 94951: a2 = a2 << 0x8\n 94954: a2 = a2 | a4\n 94957: a5 = a5 << 0x10\n 94960: a3 = a3 << 0x18\n 94963: a3 = a3 | a5\n 94966: a2 = a2 | a3\n 94969: a2 = a2 << 0x20\n 94972: a3 = a2 | a1\n 94975: s1 = 0 if t1 != 0\n 94977: ra = 0 if t1 != 0\n 94979: a4 = u64 [sp + 0x20]\n 94982: a4 = 0 if t1 != 0\n 94984: a2 = u64 [sp + 0x48]\n 94987: a2 = 0 if t1 != 0\n 94989: a3 = 0 if t1 != 0\n 94991: a0 = 0 if t1 != 0\n 94993: t0 = 0 if t1 != 0\n 94995: t2 = 0 if t1 != 0\n 94997: a1 = u64 [sp + 0x28]\n 95000: t1 = a1 & ~a2\n 95003: t2 = t2 & a2\n 95006: a1 = u64 [sp + 0x50]\n 95009: a2 = a4\n 95011: a4 = a1 & ~a4\n 95014: a5 = t0 & a2\n 95017: a1 = u64 [sp + 0x58]\n 95020: a1 = a1 & ~ra\n 95023: a0 = a0 & ra\n 95026: a2 = u64 [sp + 0x60]\n 95029: a2 = a2 & ~s1\n 95032: a3 = a3 & s1\n 95035: a2 = a2 | a3\n 95038: a0 = a0 | a1\n 95041: a4 = a4 | a5\n 95044: a1 = t1 | t2\n 95047: a3 = u64 [sp + 0x68]\n 95050: u64 [sp + 0x2d8] = a3\n 95054: a3 = u64 [sp + 0x70]\n 95057: u64 [sp + 0x2d0] = a3\n 95061: a3 = u64 [sp + 0x78]\n 95064: u64 [sp + 0x2c8] = a3\n 95068: a3 = u64 [sp + 0x80]\n 95072: u64 [sp + 0x2c0] = a3\n 95076: u64 [sp + 0x278] = a1\n 95080: u64 [sp + 0x270] = a4\n 95084: u64 [sp + 0x268] = a0\n 95088: u64 [sp + 0x260] = a2\n 95092: i32 a1 = sp + 0x2c0\n 95096: i32 a3 = sp + 0x260\n 95100: a2 = 0xffffffffffffffff\n 95103: a4 = 0x20\n 95106: a0 = 0\n 95108: ecalli 12 // 'set_storage'\n 95110: u64 [sp + 128] = 0\n 95114: fallthrough\n      : @1275 (gas: 3)\n 95115: a1 = 0x20\n 95118: a0 = 0\n 95120: ra = 1166, jump @0\n      : @1276 [@dyn 583] (gas: 62)\n 95127: a1 = u64 [sp + 0x30]\n 95130: a2 = reverse a1\n 95132: a1 = u64 [sp + 0x38]\n 95135: a4 = reverse a1\n 95137: a1 = u64 [sp + 0x40]\n 95140: a3 = reverse a1\n 95142: a1 = a3 >> 0x38\n 95145: u8 [a0 + 0x1f] = a1\n 95148: a1 = a3 >> 0x30\n 95151: u8 [a0 + 0x1e] = a1\n 95154: a1 = a3 >> 0x28\n 95157: u8 [a0 + 0x1d] = a1\n 95160: a1 = a3 >> 0x20\n 95163: u8 [a0 + 0x1c] = a1\n 95166: a1 = a3 >> 0x18\n 95169: u8 [a0 + 0x1b] = a1\n 95172: a1 = a3 >> 0x10\n 95175: u8 [a0 + 0x1a] = a1\n 95178: a1 = a3 >> 0x8\n 95181: u8 [a0 + 0x19] = a1\n 95184: u64 [sp + 0x58] = a3\n 95187: u8 [a0 + 0x18] = a3\n 95190: u8 [a0 + 0x10] = a4\n 95193: u8 [a0 + 11] = 0\n 95196: u8 [a0 + 10] = 0\n 95199: u8 [a0 + 9] = 0\n 95202: u8 [a0 + 7] = 0\n 95205: u8 [a0 + 6] = 0\n 95208: u8 [a0 + 5] = 0\n 95211: u8 [a0 + 4] = 0\n 95214: u8 [a0 + 3] = 0\n 95217: u8 [a0 + 2] = 0\n 95220: u8 [a0 + 1] = 0\n 95223: u8 [a0 + 0] = 0\n 95225: a1 = a4 >> 0x38\n 95228: u8 [a0 + 0x17] = a1\n 95231: a1 = a4 >> 0x30\n 95234: u8 [a0 + 0x16] = a1\n 95237: a1 = a4 >> 0x28\n 95240: u8 [a0 + 0x15] = a1\n 95243: a1 = a4 >> 0x20\n 95246: u8 [a0 + 0x14] = a1\n 95249: a1 = a4 >> 0x18\n 95252: u8 [a0 + 0x13] = a1\n 95255: a1 = a4 >> 0x10\n 95258: u8 [a0 + 0x12] = a1\n 95261: u64 [sp + 0x50] = a4\n 95264: a1 = a4 >> 0x8\n 95267: u8 [a0 + 0x11] = a1\n 95270: u8 [a0 + 0x8] = a2\n 95273: a1 = a2 >> 0x38\n 95276: u8 [a0 + 0xf] = a1\n 95279: a1 = a2 >> 0x30\n 95282: u8 [a0 + 0xe] = a1\n 95285: a1 = a2 >> 0x28\n 95288: u8 [a0 + 0xd] = a1\n 95291: u64 [sp + 0x60] = a2\n 95294: a1 = a2 >> 0x20\n 95297: u8 [a0 + 0xc] = a1\n 95300: a0 = 0x20\n 95303: a1 = 0x20\n 95306: ra = 1168, jump @0\n      : @1277 [@dyn 584] (gas: 35)\n 95313: u8 [a0 + 31] = 0x2\n 95317: u8 [a0 + 30] = 0\n 95320: u8 [a0 + 29] = 0\n 95323: u8 [a0 + 28] = 0\n 95326: u8 [a0 + 27] = 0\n 95329: u8 [a0 + 26] = 0\n 95332: u8 [a0 + 25] = 0\n 95335: u8 [a0 + 24] = 0\n 95338: u8 [a0 + 23] = 0\n 95341: u8 [a0 + 22] = 0\n 95344: u8 [a0 + 21] = 0\n 95347: u8 [a0 + 20] = 0\n 95350: u8 [a0 + 19] = 0\n 95353: u8 [a0 + 18] = 0\n 95356: u8 [a0 + 17] = 0\n 95359: u8 [a0 + 16] = 0\n 95362: u8 [a0 + 15] = 0\n 95365: u8 [a0 + 14] = 0\n 95368: u8 [a0 + 13] = 0\n 95371: u8 [a0 + 12] = 0\n 95374: u8 [a0 + 11] = 0\n 95377: u8 [a0 + 10] = 0\n 95380: u8 [a0 + 9] = 0\n 95383: u8 [a0 + 8] = 0\n 95386: u8 [a0 + 7] = 0\n 95389: u8 [a0 + 6] = 0\n 95392: u8 [a0 + 5] = 0\n 95395: u8 [a0 + 4] = 0\n 95398: u8 [a0 + 3] = 0\n 95401: u8 [a0 + 2] = 0\n 95404: u8 [a0 + 1] = 0\n 95407: u8 [a0 + 0] = 0\n 95409: a1 = 0x40\n 95412: a0 = 0\n 95414: ra = 1170, jump @0\n      : @1278 [@dyn 585] (gas: 55)\n 95421: i32 a0 = a0 + 0\n 95423: i32 a2 = sp + 0x260\n 95427: a1 = 0x40\n 95430: ecalli 8 // 'hash_keccak_256'\n 95432: a0 = u64 [sp + 0x278]\n 95436: a1 = u64 [sp + 0x270]\n 95440: a2 = u64 [sp + 0x268]\n 95444: a3 = u64 [sp + 0x260]\n 95448: a0 = reverse a0\n 95450: u64 [sp + 0x78] = a0\n 95453: a1 = reverse a1\n 95455: u64 [sp + 0x70] = a1\n 95458: a2 = reverse a2\n 95460: u64 [sp + 0x68] = a2\n 95463: s1 = reverse a3\n 95465: u64 [sp + 0x2d8] = s1\n 95469: u64 [sp + 0x2d0] = a2\n 95473: u64 [sp + 0x2c8] = a1\n 95477: u64 [sp + 0x2c0] = a0\n 95481: u64 [sp + 632] = 0\n 95485: u64 [sp + 624] = 0\n 95489: u64 [sp + 616] = 0\n 95493: u64 [sp + 608] = 0\n 95497: u32 [sp + 672] = 0x20\n 95502: i32 a1 = sp + 0x2c0\n 95506: i32 a3 = sp + 0x260\n 95510: i32 a4 = sp + 0x2a0\n 95514: a2 = 0xffffffffffffffff\n 95517: a0 = 0\n 95519: ecalli 7 // 'get_storage'\n 95521: a0 = u64 [sp + 0x260]\n 95525: a1 = u64 [sp + 0x268]\n 95529: a2 = u64 [sp + 0x270]\n 95533: a3 = u64 [sp + 0x278]\n 95537: a0 = a0 & 0xffffffffffffff00\n 95541: u64 [sp + 0x2d8] = s1\n 95545: a4 = u64 [sp + 0x68]\n 95548: u64 [sp + 0x2d0] = a4\n 95552: a4 = u64 [sp + 0x70]\n 95555: u64 [sp + 0x2c8] = a4\n 95559: a4 = u64 [sp + 0x78]\n 95562: u64 [sp + 0x2c0] = a4\n 95566: u64 [sp + 0x278] = a3\n 95570: u64 [sp + 0x270] = a2\n 95574: u64 [sp + 0x268] = a1\n 95578: u64 [sp + 0x260] = a0\n 95582: i32 a1 = sp + 0x2c0\n 95586: i32 a3 = sp + 0x260\n 95590: a2 = 0xffffffffffffffff\n 95593: a4 = 0x20\n 95596: a0 = 0\n 95598: ecalli 12 // 'set_storage'\n 95600: a1 = 0x20\n 95603: a0 = 0\n 95605: ra = 1172, jump @0\n      : @1279 [@dyn 586] (gas: 75)\n 95612: a1 = u64 [sp + 0x80]\n 95616: a2 = reverse a1\n 95618: a1 = u64 [sp + 0x88]\n 95622: a3 = reverse a1\n 95624: a1 = u64 [sp + 0x90]\n 95628: a5 = reverse a1\n 95630: a1 = u64 [sp + 0x98]\n 95634: a4 = reverse a1\n 95636: a1 = a4 >> 0x38\n 95639: u8 [a0 + 0x1f] = a1\n 95642: a1 = a4 >> 0x30\n 95645: u8 [a0 + 0x1e] = a1\n 95648: a1 = a4 >> 0x28\n 95651: u8 [a0 + 0x1d] = a1\n 95654: a1 = a4 >> 0x20\n 95657: u8 [a0 + 0x1c] = a1\n 95660: a1 = a4 >> 0x18\n 95663: u8 [a0 + 0x1b] = a1\n 95666: a1 = a4 >> 0x10\n 95669: u8 [a0 + 0x1a] = a1\n 95672: a1 = a4 >> 0x8\n 95675: u8 [a0 + 0x19] = a1\n 95678: u64 [sp + 0x70] = a4\n 95681: u8 [a0 + 0x18] = a4\n 95684: a1 = a5 >> 0x38\n 95687: u8 [a0 + 0x17] = a1\n 95690: a1 = a5 >> 0x30\n 95693: u8 [a0 + 0x16] = a1\n 95696: a1 = a5 >> 0x28\n 95699: u8 [a0 + 0x15] = a1\n 95702: a1 = a5 >> 0x20\n 95705: u8 [a0 + 0x14] = a1\n 95708: a1 = a5 >> 0x18\n 95711: u8 [a0 + 0x13] = a1\n 95714: a1 = a5 >> 0x10\n 95717: u8 [a0 + 0x12] = a1\n 95720: a1 = a5 >> 0x8\n 95723: u8 [a0 + 0x11] = a1\n 95726: u64 [sp + 0x68] = a5\n 95729: u8 [a0 + 0x10] = a5\n 95732: a1 = a3 >> 0x38\n 95735: u8 [a0 + 0xf] = a1\n 95738: a1 = a3 >> 0x30\n 95741: u8 [a0 + 0xe] = a1\n 95744: a1 = a3 >> 0x28\n 95747: u8 [a0 + 0xd] = a1\n 95750: a1 = a3 >> 0x20\n 95753: u8 [a0 + 0xc] = a1\n 95756: a1 = a3 >> 0x18\n 95759: u8 [a0 + 0xb] = a1\n 95762: a1 = a3 >> 0x10\n 95765: u8 [a0 + 0xa] = a1\n 95768: a1 = a3 >> 0x8\n 95771: u8 [a0 + 0x9] = a1\n 95774: u64 [sp + 0x78] = a3\n 95777: u8 [a0 + 0x8] = a3\n 95780: a1 = a2 >> 0x38\n 95783: u8 [a0 + 0x7] = a1\n 95786: a1 = a2 >> 0x30\n 95789: u8 [a0 + 0x6] = a1\n 95792: a1 = a2 >> 0x28\n 95795: u8 [a0 + 0x5] = a1\n 95798: a1 = a2 >> 0x20\n 95801: u8 [a0 + 0x4] = a1\n 95804: a1 = a2 >> 0x18\n 95807: u8 [a0 + 0x3] = a1\n 95810: a1 = a2 >> 0x10\n 95813: u8 [a0 + 0x2] = a1\n 95816: a1 = a2 >> 0x8\n 95819: u8 [a0 + 0x1] = a1\n 95822: u64 [sp + 0x80] = a2\n 95826: u8 [a0] = a2\n 95828: a0 = 0x20\n 95831: a1 = 0x20\n 95834: ra = 1174, jump @0\n      : @1280 [@dyn 587] (gas: 35)\n 95841: u8 [a0 + 31] = 0x2\n 95845: u8 [a0 + 30] = 0\n 95848: u8 [a0 + 29] = 0\n 95851: u8 [a0 + 28] = 0\n 95854: u8 [a0 + 27] = 0\n 95857: u8 [a0 + 26] = 0\n 95860: u8 [a0 + 25] = 0\n 95863: u8 [a0 + 24] = 0\n 95866: u8 [a0 + 23] = 0\n 95869: u8 [a0 + 22] = 0\n 95872: u8 [a0 + 21] = 0\n 95875: u8 [a0 + 20] = 0\n 95878: u8 [a0 + 19] = 0\n 95881: u8 [a0 + 18] = 0\n 95884: u8 [a0 + 17] = 0\n 95887: u8 [a0 + 16] = 0\n 95890: u8 [a0 + 15] = 0\n 95893: u8 [a0 + 14] = 0\n 95896: u8 [a0 + 13] = 0\n 95899: u8 [a0 + 12] = 0\n 95902: u8 [a0 + 11] = 0\n 95905: u8 [a0 + 10] = 0\n 95908: u8 [a0 + 9] = 0\n 95911: u8 [a0 + 8] = 0\n 95914: u8 [a0 + 7] = 0\n 95917: u8 [a0 + 6] = 0\n 95920: u8 [a0 + 5] = 0\n 95923: u8 [a0 + 4] = 0\n 95926: u8 [a0 + 3] = 0\n 95929: u8 [a0 + 2] = 0\n 95932: u8 [a0 + 1] = 0\n 95935: u8 [a0 + 0] = 0\n 95937: a1 = 0x40\n 95940: a0 = 0\n 95942: ra = 1176, jump @0\n      : @1281 [@dyn 588] (gas: 56)\n 95949: i32 a0 = a0 + 0\n 95951: i32 a2 = sp + 0x260\n 95955: a1 = 0x40\n 95958: ecalli 8 // 'hash_keccak_256'\n 95960: a0 = u64 [sp + 0x278]\n 95964: a1 = u64 [sp + 0x270]\n 95968: a2 = u64 [sp + 0x268]\n 95972: a3 = u64 [sp + 0x260]\n 95976: a0 = reverse a0\n 95978: u64 [sp + 0x98] = a0\n 95982: a1 = reverse a1\n 95984: u64 [sp + 0x90] = a1\n 95988: a2 = reverse a2\n 95990: u64 [sp + 0x88] = a2\n 95994: s1 = reverse a3\n 95996: u64 [sp + 0x2d8] = s1\n 96000: u64 [sp + 0x2d0] = a2\n 96004: u64 [sp + 0x2c8] = a1\n 96008: u64 [sp + 0x2c0] = a0\n 96012: u64 [sp + 632] = 0\n 96016: u64 [sp + 624] = 0\n 96020: u64 [sp + 616] = 0\n 96024: u64 [sp + 608] = 0\n 96028: u32 [sp + 672] = 0x20\n 96033: i32 a1 = sp + 0x2c0\n 96037: i32 a3 = sp + 0x260\n 96041: i32 a4 = sp + 0x2a0\n 96045: a2 = 0xffffffffffffffff\n 96048: a0 = 0\n 96050: ecalli 7 // 'get_storage'\n 96052: a0 = u64 [sp + 0x260]\n 96056: a1 = u64 [sp + 0x268]\n 96060: a2 = u64 [sp + 0x270]\n 96064: a3 = u64 [sp + 0x278]\n 96068: a0 = a0 & 0xffffffffffffff00\n 96072: a0 = a0 | 0x1\n 96075: u64 [sp + 0x2d8] = s1\n 96079: a4 = u64 [sp + 0x88]\n 96083: u64 [sp + 0x2d0] = a4\n 96087: a4 = u64 [sp + 0x90]\n 96091: u64 [sp + 0x2c8] = a4\n 96095: a4 = u64 [sp + 0x98]\n 96099: u64 [sp + 0x2c0] = a4\n 96103: u64 [sp + 0x278] = a3\n 96107: u64 [sp + 0x270] = a2\n 96111: u64 [sp + 0x268] = a1\n 96115: u64 [sp + 0x260] = a0\n 96119: i32 a1 = sp + 0x2c0\n 96123: i32 a3 = sp + 0x260\n 96127: a2 = 0xffffffffffffffff\n 96130: a4 = 0x20\n 96133: a0 = 0\n 96135: ecalli 12 // 'set_storage'\n 96137: a0 = 0x40\n 96140: a1 = 0x20\n 96143: ra = 1178, jump @0\n      : @1282 [@dyn 589] (gas: 100)\n 96150: a1 = u8 [a0 + 0x11]\n 96153: a2 = u8 [a0 + 0x10]\n 96156: a3 = u8 [a0 + 0x12]\n 96159: a4 = u8 [a0 + 0x13]\n 96162: a1 = a1 << 0x8\n 96165: a1 = a1 | a2\n 96168: a3 = a3 << 0x10\n 96171: a4 = a4 << 0x18\n 96174: a3 = a3 | a4\n 96177: a1 = a1 | a3\n 96180: a2 = u8 [a0 + 0x15]\n 96183: a3 = u8 [a0 + 0x14]\n 96186: a4 = u8 [a0 + 0x16]\n 96189: a5 = u8 [a0 + 0x17]\n 96192: a2 = a2 << 0x8\n 96195: a2 = a2 | a3\n 96198: a4 = a4 << 0x10\n 96201: a5 = a5 << 0x18\n 96204: a4 = a4 | a5\n 96207: a2 = a2 | a4\n 96210: a2 = a2 << 0x20\n 96213: t0 = a2 | a1\n 96216: a2 = u8 [a0 + 0x1]\n 96219: a3 = u8 [a0]\n 96221: a4 = u8 [a0 + 0x2]\n 96224: a5 = u8 [a0 + 0x3]\n 96227: a2 = a2 << 0x8\n 96230: a2 = a2 | a3\n 96233: a4 = a4 << 0x10\n 96236: a5 = a5 << 0x18\n 96239: a4 = a4 | a5\n 96242: a2 = a2 | a4\n 96245: a3 = u8 [a0 + 0x5]\n 96248: a4 = u8 [a0 + 0x4]\n 96251: a5 = u8 [a0 + 0x6]\n 96254: s1 = u8 [a0 + 0x7]\n 96257: a3 = a3 << 0x8\n 96260: a3 = a3 | a4\n 96263: a5 = a5 << 0x10\n 96266: s1 = s1 << 0x18\n 96269: a5 = a5 | s1\n 96272: a3 = a3 | a5\n 96275: a3 = a3 << 0x20\n 96278: a2 = a2 | a3\n 96281: a3 = u8 [a0 + 0x19]\n 96284: a4 = u8 [a0 + 0x18]\n 96287: a5 = u8 [a0 + 0x1a]\n 96290: s1 = u8 [a0 + 0x1b]\n 96293: a3 = a3 << 0x8\n 96296: a3 = a3 | a4\n 96299: a5 = a5 << 0x10\n 96302: s1 = s1 << 0x18\n 96305: a5 = a5 | s1\n 96308: a3 = a3 | a5\n 96311: a4 = u8 [a0 + 0x1d]\n 96314: a5 = u8 [a0 + 0x1c]\n 96317: s1 = u8 [a0 + 0x1e]\n 96320: a1 = u8 [a0 + 0x1f]\n 96323: a4 = a4 << 0x8\n 96326: a4 = a4 | a5\n 96329: s1 = s1 << 0x10\n 96332: a1 = a1 << 0x18\n 96335: a1 = a1 | s1\n 96338: a1 = a1 | a4\n 96341: a1 = a1 << 0x20\n 96344: a3 = a3 | a1\n 96347: a1 = u8 [a0 + 0x9]\n 96350: a4 = u8 [a0 + 0x8]\n 96353: a5 = u8 [a0 + 0xa]\n 96356: s1 = u8 [a0 + 0xb]\n 96359: a1 = a1 << 0x8\n 96362: a1 = a1 | a4\n 96365: a5 = a5 << 0x10\n 96368: s1 = s1 << 0x18\n 96371: a5 = a5 | s1\n 96374: a1 = a1 | a5\n 96377: a4 = u8 [a0 + 0xd]\n 96380: a5 = u8 [a0 + 0xc]\n 96383: s1 = u8 [a0 + 0xe]\n 96386: a0 = u8 [a0 + 0xf]\n 96389: a4 = a4 << 0x8\n 96392: a4 = a4 | a5\n 96395: s1 = s1 << 0x10\n 96398: a0 = a0 << 0x18\n 96401: a0 = a0 | s1\n 96404: a0 = a0 | a4\n 96407: a0 = a0 << 0x20\n 96410: a0 = a0 | a1\n 96413: a1 = reverse a0\n 96415: a0 = reverse a3\n 96417: a2 = reverse a2\n 96419: a3 = reverse t0\n 96421: a2 = a2 | a3\n 96424: a3 = a0 | a1\n 96427: a3 = a3 | a2\n 96430: a3 = a3 >> 0x20\n 96433: a1 = a1 | a2\n 96436: a1 = a1 << 0x20\n 96439: a1 = a1 | a3\n 96442: jump @1288 if a1 != 0\n      : @1283 (gas: 2)\n 96446: i32 a0 = a0 + 0\n 96448: ra = 1180, jump @0\n      : @1284 [@dyn 590] (gas: 23)\n 96455: a1 = u64 [0x200a0]\n 96460: a2 = u64 [0x200a8]\n 96465: a3 = u64 [0x200b0]\n 96470: a4 = u64 [0x200b8]\n 96475: u64 [sp + 0x278] = a1\n 96479: u64 [sp + 0x270] = a2\n 96483: u64 [sp + 0x268] = a3\n 96487: u64 [sp + 0x260] = a4\n 96491: a1 = u64 [sp + 0x50]\n 96494: u64 [sp + 0x290] = a1\n 96498: a1 = u64 [sp + 0x60]\n 96501: u64 [sp + 0x288] = a1\n 96505: u64 [sp + 640] = 0\n 96509: a1 = u64 [sp + 0x58]\n 96512: u64 [sp + 0x298] = a1\n 96516: i32 a2 = a0 + 0\n 96518: i32 a0 = sp + 0x260\n 96522: a1 = 0x2\n 96525: a3 = 0\n 96527: ecalli 6 // 'deposit_event'\n 96529: a0 = 0x40\n 96532: a1 = 0x20\n 96535: ra = 1182, jump @0\n      : @1285 [@dyn 591] (gas: 100)\n 96542: a1 = u8 [a0 + 0x11]\n 96545: a2 = u8 [a0 + 0x10]\n 96548: a3 = u8 [a0 + 0x12]\n 96551: a4 = u8 [a0 + 0x13]\n 96554: a1 = a1 << 0x8\n 96557: a1 = a1 | a2\n 96560: a3 = a3 << 0x10\n 96563: a4 = a4 << 0x18\n 96566: a3 = a3 | a4\n 96569: a1 = a1 | a3\n 96572: a2 = u8 [a0 + 0x15]\n 96575: a3 = u8 [a0 + 0x14]\n 96578: a4 = u8 [a0 + 0x16]\n 96581: a5 = u8 [a0 + 0x17]\n 96584: a2 = a2 << 0x8\n 96587: a2 = a2 | a3\n 96590: a4 = a4 << 0x10\n 96593: a5 = a5 << 0x18\n 96596: a4 = a4 | a5\n 96599: a2 = a2 | a4\n 96602: a2 = a2 << 0x20\n 96605: t0 = a2 | a1\n 96608: a2 = u8 [a0 + 0x1]\n 96611: a3 = u8 [a0]\n 96613: a4 = u8 [a0 + 0x2]\n 96616: a5 = u8 [a0 + 0x3]\n 96619: a2 = a2 << 0x8\n 96622: a2 = a2 | a3\n 96625: a4 = a4 << 0x10\n 96628: a5 = a5 << 0x18\n 96631: a4 = a4 | a5\n 96634: a2 = a2 | a4\n 96637: a3 = u8 [a0 + 0x5]\n 96640: a4 = u8 [a0 + 0x4]\n 96643: a5 = u8 [a0 + 0x6]\n 96646: s1 = u8 [a0 + 0x7]\n 96649: a3 = a3 << 0x8\n 96652: a3 = a3 | a4\n 96655: a5 = a5 << 0x10\n 96658: s1 = s1 << 0x18\n 96661: a5 = a5 | s1\n 96664: a3 = a3 | a5\n 96667: a3 = a3 << 0x20\n 96670: a2 = a2 | a3\n 96673: a3 = u8 [a0 + 0x19]\n 96676: a4 = u8 [a0 + 0x18]\n 96679: a5 = u8 [a0 + 0x1a]\n 96682: s1 = u8 [a0 + 0x1b]\n 96685: a3 = a3 << 0x8\n 96688: a3 = a3 | a4\n 96691: a5 = a5 << 0x10\n 96694: s1 = s1 << 0x18\n 96697: a5 = a5 | s1\n 96700: a3 = a3 | a5\n 96703: a4 = u8 [a0 + 0x1d]\n 96706: a5 = u8 [a0 + 0x1c]\n 96709: s1 = u8 [a0 + 0x1e]\n 96712: a1 = u8 [a0 + 0x1f]\n 96715: a4 = a4 << 0x8\n 96718: a4 = a4 | a5\n 96721: s1 = s1 << 0x10\n 96724: a1 = a1 << 0x18\n 96727: a1 = a1 | s1\n 96730: a1 = a1 | a4\n 96733: a1 = a1 << 0x20\n 96736: a3 = a3 | a1\n 96739: a1 = u8 [a0 + 0x9]\n 96742: a4 = u8 [a0 + 0x8]\n 96745: a5 = u8 [a0 + 0xa]\n 96748: s1 = u8 [a0 + 0xb]\n 96751: a1 = a1 << 0x8\n 96754: a1 = a1 | a4\n 96757: a5 = a5 << 0x10\n 96760: s1 = s1 << 0x18\n 96763: a5 = a5 | s1\n 96766: a1 = a1 | a5\n 96769: a4 = u8 [a0 + 0xd]\n 96772: a5 = u8 [a0 + 0xc]\n 96775: s1 = u8 [a0 + 0xe]\n 96778: a0 = u8 [a0 + 0xf]\n 96781: a4 = a4 << 0x8\n 96784: a4 = a4 | a5\n 96787: s1 = s1 << 0x10\n 96790: a0 = a0 << 0x18\n 96793: a0 = a0 | s1\n 96796: a0 = a0 | a4\n 96799: a0 = a0 << 0x20\n 96802: a0 = a0 | a1\n 96805: a1 = reverse a0\n 96807: a0 = reverse a3\n 96809: a2 = reverse a2\n 96811: a3 = reverse t0\n 96813: a2 = a2 | a3\n 96816: a3 = a0 | a1\n 96819: a3 = a3 | a2\n 96822: a3 = a3 >> 0x20\n 96825: a1 = a1 | a2\n 96828: a1 = a1 << 0x20\n 96831: a1 = a1 | a3\n 96834: jump @1288 if a1 != 0\n      : @1286 (gas: 2)\n 96837: i32 a0 = a0 + 0\n 96839: ra = 1184, jump @0\n      : @1287 [@dyn 592] (gas: 27)\n 96846: a1 = u64 [0x200c0]\n 96851: a2 = u64 [0x200c8]\n 96856: a3 = u64 [0x200d0]\n 96861: a4 = u64 [0x200d8]\n 96866: u64 [sp + 0x278] = a1\n 96870: u64 [sp + 0x270] = a2\n 96874: u64 [sp + 0x268] = a3\n 96878: u64 [sp + 0x260] = a4\n 96882: a1 = u64 [sp + 0x68]\n 96885: u64 [sp + 0x290] = a1\n 96889: a1 = u64 [sp + 0x78]\n 96892: u64 [sp + 0x288] = a1\n 96896: a1 = u64 [sp + 0x80]\n 96900: u64 [sp + 0x280] = a1\n 96904: a1 = u64 [sp + 0x70]\n 96907: u64 [sp + 0x298] = a1\n 96911: i32 a2 = a0 + 0\n 96913: i32 a0 = sp + 0x260\n 96917: a1 = 0x2\n 96920: a3 = 0\n 96922: ecalli 6 // 'deposit_event'\n 96924: sp = s0 + 0xfffffffffffffd00\n 96928: ra = u64 [sp + 0x2f8]\n 96932: s0 = u64 [sp + 0x2f0]\n 96936: s1 = u64 [sp + 0x2e8]\n 96940: sp = sp + 0x300\n 96944: ret\n      : @1288 (gas: 1)\n 96946: trap\n      : @1289 (gas: 33)\n 96947: sp = sp + 0xffffffffffffff20\n 96951: u64 [sp + 0xd8] = ra\n 96955: u64 [sp + 0xd0] = s0\n 96959: u64 [sp + 0xc8] = s1\n 96963: s0 = sp + 0xe0\n 96967: sp = sp & 0xffffffffffffffe0\n 96970: a1 = u64 [a0 + 0x18]\n 96973: u64 [sp + 0x38] = a1\n 96976: a1 = u64 [a0 + 0x10]\n 96979: u64 [sp + 0x30] = a1\n 96982: a1 = u64 [a0 + 0x8]\n 96985: u64 [sp + 0x28] = a1\n 96988: a0 = u64 [a0]\n 96990: u64 [sp + 0x20] = a0\n 96993: i32 a0 = sp + 0x60\n 96996: ecalli 5 // 'caller'\n 96998: a0 = u64 [sp + 0x68]\n 97001: a1 = i32 [sp + 0x70]\n 97004: s1 = u64 [sp + 0x60]\n 97007: a0 = reverse a0\n 97009: a2 = a0 << 0x20\n 97012: a1 = reverse a1\n 97014: a1 = a1 >> 0x20\n 97017: a1 = a1 | a2\n 97020: u64 [sp + 0x18] = a1\n 97023: a0 = a0 >> 0x20\n 97026: a1 = reverse s1\n 97028: a1 = a1 << 0x20\n 97031: a0 = a0 | a1\n 97034: u64 [sp + 0x10] = a0\n 97037: a1 = 0x20\n 97040: a0 = 0\n 97042: ra = 1186, jump @0\n      : @1290 [@dyn 593] (gas: 56)\n 97049: a1 = u64 [sp + 0x10]\n 97052: a1 = reverse a1\n 97054: a2 = u64 [sp + 0x18]\n 97057: a2 = reverse a2\n 97059: a3 = s1 >> 0x18\n 97062: u8 [a0 + 0xf] = a3\n 97065: a3 = s1 >> 0x10\n 97068: u8 [a0 + 0xe] = a3\n 97071: a3 = s1 >> 0x8\n 97074: u8 [a0 + 0xd] = a3\n 97077: u8 [a0 + 0xc] = s1\n 97080: u8 [a0 + 11] = 0\n 97083: u8 [a0 + 10] = 0\n 97086: u8 [a0 + 9] = 0\n 97089: u8 [a0 + 8] = 0\n 97092: u8 [a0 + 7] = 0\n 97095: u8 [a0 + 6] = 0\n 97098: u8 [a0 + 5] = 0\n 97101: u8 [a0 + 4] = 0\n 97104: u8 [a0 + 3] = 0\n 97107: u8 [a0 + 2] = 0\n 97110: u8 [a0 + 1] = 0\n 97113: u8 [a0 + 0] = 0\n 97115: u8 [a0 + 0x18] = a2\n 97118: u8 [a0 + 0x10] = a1\n 97121: a3 = a2 >> 0x38\n 97124: u8 [a0 + 0x1f] = a3\n 97127: a3 = a2 >> 0x30\n 97130: u8 [a0 + 0x1e] = a3\n 97133: a3 = a2 >> 0x28\n 97136: u8 [a0 + 0x1d] = a3\n 97139: a3 = a2 >> 0x20\n 97142: u8 [a0 + 0x1c] = a3\n 97145: a3 = a2 >> 0x18\n 97148: u8 [a0 + 0x1b] = a3\n 97151: a3 = a2 >> 0x10\n 97154: u8 [a0 + 0x1a] = a3\n 97157: a2 = a2 >> 0x8\n 97160: u8 [a0 + 0x19] = a2\n 97163: a2 = a1 >> 0x38\n 97166: u8 [a0 + 0x17] = a2\n 97169: a2 = a1 >> 0x30\n 97172: u8 [a0 + 0x16] = a2\n 97175: a2 = a1 >> 0x28\n 97178: u8 [a0 + 0x15] = a2\n 97181: a2 = a1 >> 0x20\n 97184: u8 [a0 + 0x14] = a2\n 97187: a2 = a1 >> 0x18\n 97190: u8 [a0 + 0x13] = a2\n 97193: a2 = a1 >> 0x10\n 97196: u8 [a0 + 0x12] = a2\n 97199: a1 = a1 >> 0x8\n 97202: u8 [a0 + 0x11] = a1\n 97205: a0 = 0x20\n 97208: a1 = 0x20\n 97211: ra = 1188, jump @0\n      : @1291 [@dyn 594] (gas: 35)\n 97218: u8 [a0 + 31] = 0x2\n 97222: u8 [a0 + 30] = 0\n 97225: u8 [a0 + 29] = 0\n 97228: u8 [a0 + 28] = 0\n 97231: u8 [a0 + 27] = 0\n 97234: u8 [a0 + 26] = 0\n 97237: u8 [a0 + 25] = 0\n 97240: u8 [a0 + 24] = 0\n 97243: u8 [a0 + 23] = 0\n 97246: u8 [a0 + 22] = 0\n 97249: u8 [a0 + 21] = 0\n 97252: u8 [a0 + 20] = 0\n 97255: u8 [a0 + 19] = 0\n 97258: u8 [a0 + 18] = 0\n 97261: u8 [a0 + 17] = 0\n 97264: u8 [a0 + 16] = 0\n 97267: u8 [a0 + 15] = 0\n 97270: u8 [a0 + 14] = 0\n 97273: u8 [a0 + 13] = 0\n 97276: u8 [a0 + 12] = 0\n 97279: u8 [a0 + 11] = 0\n 97282: u8 [a0 + 10] = 0\n 97285: u8 [a0 + 9] = 0\n 97288: u8 [a0 + 8] = 0\n 97291: u8 [a0 + 7] = 0\n 97294: u8 [a0 + 6] = 0\n 97297: u8 [a0 + 5] = 0\n 97300: u8 [a0 + 4] = 0\n 97303: u8 [a0 + 3] = 0\n 97306: u8 [a0 + 2] = 0\n 97309: u8 [a0 + 1] = 0\n 97312: u8 [a0 + 0] = 0\n 97314: a1 = 0x40\n 97317: a0 = 0\n 97319: ra = 1190, jump @0\n      : @1292 [@dyn 595] (gas: 28)\n 97326: i32 a0 = a0 + 0\n 97328: i32 a2 = sp + 0xa0\n 97332: a1 = 0x40\n 97335: ecalli 8 // 'hash_keccak_256'\n 97337: a0 = u64 [sp + 0xb8]\n 97341: a1 = u64 [sp + 0xb0]\n 97345: a2 = u64 [sp + 0xa8]\n 97349: a3 = u64 [sp + 0xa0]\n 97353: a0 = reverse a0\n 97355: a1 = reverse a1\n 97357: a2 = reverse a2\n 97359: a3 = reverse a3\n 97361: u64 [sp + 0x98] = a3\n 97365: u64 [sp + 0x90] = a2\n 97369: u64 [sp + 0x88] = a1\n 97373: u64 [sp + 0x80] = a0\n 97377: u64 [sp + 184] = 0\n 97381: u64 [sp + 176] = 0\n 97385: u64 [sp + 168] = 0\n 97389: u64 [sp + 160] = 0\n 97393: u32 [sp + 192] = 0x20\n 97398: i32 a1 = sp + 0x80\n 97402: i32 a3 = sp + 0xa0\n 97406: i32 a4 = sp + 0xc0\n 97410: a2 = 0xffffffffffffffff\n 97413: a0 = 0\n 97415: ecalli 7 // 'get_storage'\n 97417: fallthrough\n      : @1293 (gas: 2)\n 97418: a0 = u8 [sp + 0xa0]\n 97422: jump @1296 if a0 == 0\n      : @1294 (gas: 10)\n 97425: a0 = u64 [sp + 0x20]\n 97428: u64 [sp + 0x40] = a0\n 97431: a0 = u64 [sp + 0x28]\n 97434: u64 [sp + 0x48] = a0\n 97437: a0 = u64 [sp + 0x30]\n 97440: u64 [sp + 0x50] = a0\n 97443: a0 = sp + 0x40\n 97446: a1 = u64 [sp + 0x38]\n 97449: u64 [sp + 0x58] = a1\n 97452: ra = 1192, jump @1298\n      : @1295 [@dyn 596] (gas: 6)\n 97457: sp = s0 + 0xffffffffffffff20\n 97461: ra = u64 [sp + 0xd8]\n 97465: s0 = u64 [sp + 0xd0]\n 97469: s1 = u64 [sp + 0xc8]\n 97473: sp = sp + 0xe0\n 97477: ret\n      : @1296 (gas: 2)\n 97479: a1 = 0\n 97481: ra = 1194, jump @0\n      : @1297 [@dyn 597] (gas: 6)\n 97488: i32 a1 = a0 + 0\n 97490: a0 = 0x1\n 97493: a2 = 0\n 97495: ra = 0x4ac\n 97499: ecalli 10 // 'seal_return'\n 97501: fallthrough\n      : @1298 [@dyn 598] (gas: 33)\n 97502: sp = sp + 0xffffffffffffff00\n 97506: u64 [sp + 0xf8] = ra\n 97510: u64 [sp + 0xf0] = s0\n 97514: u64 [sp + 0xe8] = s1\n 97518: s0 = sp + 0x100\n 97522: sp = sp & 0xffffffffffffffe0\n 97525: a1 = u64 [a0]\n 97527: u64 [sp + 0x58] = a1\n 97530: a1 = u64 [a0 + 0x8]\n 97533: u64 [sp + 0x50] = a1\n 97536: a1 = u64 [a0 + 0x10]\n 97539: u64 [sp + 0x48] = a1\n 97542: s1 = u64 [a0 + 0x18]\n 97545: i32 a0 = sp + 0x80\n 97549: ecalli 5 // 'caller'\n 97551: a0 = u64 [sp + 0x88]\n 97555: a1 = i32 [sp + 0x90]\n 97559: a3 = u64 [sp + 0x80]\n 97563: u64 [sp + 0x38] = a3\n 97566: a0 = reverse a0\n 97568: a2 = a0 << 0x20\n 97571: a1 = reverse a1\n 97573: a1 = a1 >> 0x20\n 97576: a1 = a1 | a2\n 97579: u64 [sp + 0x30] = a1\n 97582: a0 = a0 >> 0x20\n 97585: a1 = reverse a3\n 97587: a1 = a1 << 0x20\n 97590: a0 = a0 | a1\n 97593: u64 [sp + 0x28] = a0\n 97596: a1 = 0x20\n 97599: a0 = 0\n 97601: ra = 1198, jump @0\n      : @1299 [@dyn 599] (gas: 71)\n 97608: u64 [sp + 0x40] = s1\n 97611: a1 = reverse s1\n 97613: a2 = u64 [sp + 0x48]\n 97616: a2 = reverse a2\n 97618: a3 = u64 [sp + 0x50]\n 97621: a3 = reverse a3\n 97623: a4 = u64 [sp + 0x58]\n 97626: a4 = reverse a4\n 97628: a5 = a4 >> 0x38\n 97631: u8 [a0 + 0x1f] = a5\n 97634: a5 = a4 >> 0x30\n 97637: u8 [a0 + 0x1e] = a5\n 97640: a5 = a4 >> 0x28\n 97643: u8 [a0 + 0x1d] = a5\n 97646: a5 = a4 >> 0x20\n 97649: u8 [a0 + 0x1c] = a5\n 97652: a5 = a4 >> 0x18\n 97655: u8 [a0 + 0x1b] = a5\n 97658: a5 = a4 >> 0x10\n 97661: u8 [a0 + 0x1a] = a5\n 97664: a5 = a4 >> 0x8\n 97667: u8 [a0 + 0x19] = a5\n 97670: u8 [a0 + 0x18] = a4\n 97673: a4 = a3 >> 0x38\n 97676: u8 [a0 + 0x17] = a4\n 97679: a4 = a3 >> 0x30\n 97682: u8 [a0 + 0x16] = a4\n 97685: a4 = a3 >> 0x28\n 97688: u8 [a0 + 0x15] = a4\n 97691: a4 = a3 >> 0x20\n 97694: u8 [a0 + 0x14] = a4\n 97697: a4 = a3 >> 0x18\n 97700: u8 [a0 + 0x13] = a4\n 97703: a4 = a3 >> 0x10\n 97706: u8 [a0 + 0x12] = a4\n 97709: a4 = a3 >> 0x8\n 97712: u8 [a0 + 0x11] = a4\n 97715: u8 [a0 + 0x10] = a3\n 97718: a3 = a2 >> 0x38\n 97721: u8 [a0 + 0xf] = a3\n 97724: a3 = a2 >> 0x30\n 97727: u8 [a0 + 0xe] = a3\n 97730: a3 = a2 >> 0x28\n 97733: u8 [a0 + 0xd] = a3\n 97736: a3 = a2 >> 0x20\n 97739: u8 [a0 + 0xc] = a3\n 97742: a3 = a2 >> 0x18\n 97745: u8 [a0 + 0xb] = a3\n 97748: a3 = a2 >> 0x10\n 97751: u8 [a0 + 0xa] = a3\n 97754: a3 = a2 >> 0x8\n 97757: u8 [a0 + 0x9] = a3\n 97760: u8 [a0 + 0x8] = a2\n 97763: a2 = a1 >> 0x38\n 97766: u8 [a0 + 0x7] = a2\n 97769: a2 = a1 >> 0x30\n 97772: u8 [a0 + 0x6] = a2\n 97775: a2 = a1 >> 0x28\n 97778: u8 [a0 + 0x5] = a2\n 97781: a2 = a1 >> 0x20\n 97784: u8 [a0 + 0x4] = a2\n 97787: a2 = a1 >> 0x18\n 97790: u8 [a0 + 0x3] = a2\n 97793: a2 = a1 >> 0x10\n 97796: u8 [a0 + 0x2] = a2\n 97799: a2 = a1 >> 0x8\n 97802: u8 [a0 + 0x1] = a2\n 97805: u8 [a0] = a1\n 97807: a0 = 0x20\n 97810: a1 = 0x20\n 97813: ra = 1200, jump @0\n      : @1300 [@dyn 600] (gas: 35)\n 97820: u8 [a0 + 31] = 0x1\n 97824: u8 [a0 + 30] = 0\n 97827: u8 [a0 + 29] = 0\n 97830: u8 [a0 + 28] = 0\n 97833: u8 [a0 + 27] = 0\n 97836: u8 [a0 + 26] = 0\n 97839: u8 [a0 + 25] = 0\n 97842: u8 [a0 + 24] = 0\n 97845: u8 [a0 + 23] = 0\n 97848: u8 [a0 + 22] = 0\n 97851: u8 [a0 + 21] = 0\n 97854: u8 [a0 + 20] = 0\n 97857: u8 [a0 + 19] = 0\n 97860: u8 [a0 + 18] = 0\n 97863: u8 [a0 + 17] = 0\n 97866: u8 [a0 + 16] = 0\n 97869: u8 [a0 + 15] = 0\n 97872: u8 [a0 + 14] = 0\n 97875: u8 [a0 + 13] = 0\n 97878: u8 [a0 + 12] = 0\n 97881: u8 [a0 + 11] = 0\n 97884: u8 [a0 + 10] = 0\n 97887: u8 [a0 + 9] = 0\n 97890: u8 [a0 + 8] = 0\n 97893: u8 [a0 + 7] = 0\n 97896: u8 [a0 + 6] = 0\n 97899: u8 [a0 + 5] = 0\n 97902: u8 [a0 + 4] = 0\n 97905: u8 [a0 + 3] = 0\n 97908: u8 [a0 + 2] = 0\n 97911: u8 [a0 + 1] = 0\n 97914: u8 [a0 + 0] = 0\n 97916: a1 = 0x40\n 97919: a0 = 0\n 97921: ra = 1202, jump @0\n      : @1301 [@dyn 601] (gas: 14)\n 97928: i32 a0 = a0 + 0\n 97930: i32 a2 = sp + 0xc0\n 97934: a1 = 0x40\n 97937: ecalli 8 // 'hash_keccak_256'\n 97939: a0 = u64 [sp + 0xc0]\n 97943: u64 [sp + 0x20] = a0\n 97946: a0 = u64 [sp + 0xc8]\n 97950: u64 [sp + 0x18] = a0\n 97953: a0 = u64 [sp + 0xd0]\n 97957: u64 [sp + 0x10] = a0\n 97960: s1 = u64 [sp + 0xd8]\n 97964: a1 = 0x20\n 97967: a0 = 0\n 97969: ra = 1204, jump @0\n      : @1302 [@dyn 602] (gas: 57)\n 97976: a1 = u64 [sp + 0x28]\n 97979: a1 = reverse a1\n 97981: a2 = u64 [sp + 0x30]\n 97984: a2 = reverse a2\n 97986: a3 = a2 >> 0x38\n 97989: u8 [a0 + 0x1f] = a3\n 97992: a3 = a2 >> 0x30\n 97995: u8 [a0 + 0x1e] = a3\n 97998: a3 = a2 >> 0x28\n 98001: u8 [a0 + 0x1d] = a3\n 98004: a3 = a2 >> 0x20\n 98007: u8 [a0 + 0x1c] = a3\n 98010: a3 = a2 >> 0x18\n 98013: u8 [a0 + 0x1b] = a3\n 98016: a3 = a2 >> 0x10\n 98019: u8 [a0 + 0x1a] = a3\n 98022: a3 = a2 >> 0x8\n 98025: u8 [a0 + 0x19] = a3\n 98028: u8 [a0 + 0x18] = a2\n 98031: a2 = a1 >> 0x38\n 98034: u8 [a0 + 0x17] = a2\n 98037: a2 = a1 >> 0x30\n 98040: u8 [a0 + 0x16] = a2\n 98043: a2 = a1 >> 0x28\n 98046: u8 [a0 + 0x15] = a2\n 98049: a2 = a1 >> 0x20\n 98052: u8 [a0 + 0x14] = a2\n 98055: a2 = a1 >> 0x18\n 98058: u8 [a0 + 0x13] = a2\n 98061: a2 = a1 >> 0x10\n 98064: u8 [a0 + 0x12] = a2\n 98067: a2 = a1 >> 0x8\n 98070: u8 [a0 + 0x11] = a2\n 98073: u8 [a0 + 0x10] = a1\n 98076: a2 = u64 [sp + 0x38]\n 98079: a1 = a2 >> 0x18\n 98082: u8 [a0 + 0xf] = a1\n 98085: a1 = a2 >> 0x10\n 98088: u8 [a0 + 0xe] = a1\n 98091: a1 = a2 >> 0x8\n 98094: u8 [a0 + 0xd] = a1\n 98097: u8 [a0 + 0xc] = a2\n 98100: u8 [a0 + 11] = 0\n 98103: u8 [a0 + 10] = 0\n 98106: u8 [a0 + 9] = 0\n 98109: u8 [a0 + 8] = 0\n 98112: u8 [a0 + 7] = 0\n 98115: u8 [a0 + 6] = 0\n 98118: u8 [a0 + 5] = 0\n 98121: u8 [a0 + 4] = 0\n 98124: u8 [a0 + 3] = 0\n 98127: u8 [a0 + 2] = 0\n 98130: u8 [a0 + 1] = 0\n 98133: u8 [a0 + 0] = 0\n 98135: a0 = 0x20\n 98138: a1 = 0x20\n 98141: ra = 1206, jump @0\n      : @1303 [@dyn 603] (gas: 66)\n 98148: a1 = s1 >> 0x38\n 98151: u8 [a0 + 0x1f] = a1\n 98154: a1 = s1 >> 0x30\n 98157: u8 [a0 + 0x1e] = a1\n 98160: a1 = s1 >> 0x28\n 98163: u8 [a0 + 0x1d] = a1\n 98166: a1 = s1 >> 0x20\n 98169: u8 [a0 + 0x1c] = a1\n 98172: a1 = s1 >> 0x18\n 98175: u8 [a0 + 0x1b] = a1\n 98178: a1 = s1 >> 0x10\n 98181: u8 [a0 + 0x1a] = a1\n 98184: a1 = s1 >> 0x8\n 98187: u8 [a0 + 0x19] = a1\n 98190: u8 [a0 + 0x18] = s1\n 98193: a2 = u64 [sp + 0x10]\n 98196: a1 = a2 >> 0x38\n 98199: u8 [a0 + 0x17] = a1\n 98202: a1 = a2 >> 0x30\n 98205: u8 [a0 + 0x16] = a1\n 98208: a1 = a2 >> 0x28\n 98211: u8 [a0 + 0x15] = a1\n 98214: a1 = a2 >> 0x20\n 98217: u8 [a0 + 0x14] = a1\n 98220: a1 = a2 >> 0x18\n 98223: u8 [a0 + 0x13] = a1\n 98226: a1 = a2 >> 0x10\n 98229: u8 [a0 + 0x12] = a1\n 98232: a1 = a2 >> 0x8\n 98235: u8 [a0 + 0x11] = a1\n 98238: u8 [a0 + 0x10] = a2\n 98241: a2 = u64 [sp + 0x18]\n 98244: a1 = a2 >> 0x38\n 98247: u8 [a0 + 0xf] = a1\n 98250: a1 = a2 >> 0x30\n 98253: u8 [a0 + 0xe] = a1\n 98256: a1 = a2 >> 0x28\n 98259: u8 [a0 + 0xd] = a1\n 98262: a1 = a2 >> 0x20\n 98265: u8 [a0 + 0xc] = a1\n 98268: a1 = a2 >> 0x18\n 98271: u8 [a0 + 0xb] = a1\n 98274: a1 = a2 >> 0x10\n 98277: u8 [a0 + 0xa] = a1\n 98280: a1 = a2 >> 0x8\n 98283: u8 [a0 + 0x9] = a1\n 98286: u8 [a0 + 0x8] = a2\n 98289: a2 = u64 [sp + 0x20]\n 98292: a1 = a2 >> 0x38\n 98295: u8 [a0 + 0x7] = a1\n 98298: a1 = a2 >> 0x30\n 98301: u8 [a0 + 0x6] = a1\n 98304: a1 = a2 >> 0x28\n 98307: u8 [a0 + 0x5] = a1\n 98310: a1 = a2 >> 0x20\n 98313: u8 [a0 + 0x4] = a1\n 98316: a1 = a2 >> 0x18\n 98319: u8 [a0 + 0x3] = a1\n 98322: a1 = a2 >> 0x10\n 98325: u8 [a0 + 0x2] = a1\n 98328: a1 = a2 >> 0x8\n 98331: u8 [a0 + 0x1] = a1\n 98334: u8 [a0] = a2\n 98336: a1 = 0x40\n 98339: a0 = 0\n 98341: ra = 1208, jump @0\n      : @1304 [@dyn 604] (gas: 28)\n 98348: i32 a0 = a0 + 0\n 98350: i32 a2 = sp + 0xc0\n 98354: a1 = 0x40\n 98357: ecalli 8 // 'hash_keccak_256'\n 98359: a0 = u64 [sp + 0xd8]\n 98363: a1 = u64 [sp + 0xd0]\n 98367: a2 = u64 [sp + 0xc8]\n 98371: a3 = u64 [sp + 0xc0]\n 98375: a0 = reverse a0\n 98377: a1 = reverse a1\n 98379: a2 = reverse a2\n 98381: a3 = reverse a3\n 98383: u64 [sp + 0xb8] = a3\n 98387: u64 [sp + 0xb0] = a2\n 98391: u64 [sp + 0xa8] = a1\n 98395: u64 [sp + 0xa0] = a0\n 98399: u64 [sp + 216] = 0\n 98403: u64 [sp + 208] = 0\n 98407: u64 [sp + 200] = 0\n 98411: u64 [sp + 192] = 0\n 98415: u32 [sp + 224] = 0x20\n 98420: i32 a1 = sp + 0xa0\n 98424: i32 a3 = sp + 0xc0\n 98428: i32 a4 = sp + 0xe0\n 98432: a2 = 0xffffffffffffffff\n 98435: a0 = 0\n 98437: ecalli 7 // 'get_storage'\n 98439: fallthrough\n      : @1305 (gas: 2)\n 98440: a0 = u8 [sp + 0xc0]\n 98444: jump @1308 if a0 == 0\n      : @1306 (gas: 10)\n 98447: a0 = u64 [sp + 0x58]\n 98450: u64 [sp + 0x60] = a0\n 98453: a0 = u64 [sp + 0x50]\n 98456: u64 [sp + 0x68] = a0\n 98459: a0 = u64 [sp + 0x48]\n 98462: u64 [sp + 0x70] = a0\n 98465: a0 = sp + 0x60\n 98468: a1 = u64 [sp + 0x40]\n 98471: u64 [sp + 0x78] = a1\n 98474: ra = 1210, jump @1310\n      : @1307 [@dyn 605] (gas: 6)\n 98479: sp = s0 + 0xffffffffffffff00\n 98483: ra = u64 [sp + 0xf8]\n 98487: s0 = u64 [sp + 0xf0]\n 98491: s1 = u64 [sp + 0xe8]\n 98495: sp = sp + 0x100\n 98499: ret\n      : @1308 (gas: 2)\n 98501: a1 = 0\n 98503: ra = 1212, jump @0\n      : @1309 [@dyn 606] (gas: 6)\n 98510: i32 a1 = a0 + 0\n 98512: a0 = 0x1\n 98515: a2 = 0\n 98517: ra = 0x4be\n 98521: ecalli 10 // 'seal_return'\n 98523: fallthrough\n      : @1310 [@dyn 607] (gas: 16)\n 98524: sp = sp + 0xffffffffffffff60\n 98528: u64 [sp + 0x98] = ra\n 98532: u64 [sp + 0x90] = s0\n 98536: u64 [sp + 0x88] = s1\n 98540: s0 = sp + 0xa0\n 98544: sp = sp & 0xffffffffffffffe0\n 98547: a1 = u64 [a0]\n 98549: u64 [sp] = a1\n 98551: a1 = u64 [a0 + 0x8]\n 98554: u64 [sp + 0x18] = a1\n 98557: a1 = u64 [a0 + 0x10]\n 98560: u64 [sp + 0x10] = a1\n 98563: s1 = u64 [a0 + 0x18]\n 98566: a1 = 0x20\n 98569: a0 = 0\n 98571: ra = 1216, jump @0\n      : @1311 [@dyn 608] (gas: 71)\n 98578: u64 [sp + 0x8] = s1\n 98581: a1 = reverse s1\n 98583: s1 = u64 [sp]\n 98585: a2 = u64 [sp + 0x10]\n 98588: a2 = reverse a2\n 98590: a3 = u64 [sp + 0x18]\n 98593: a3 = reverse a3\n 98595: a4 = reverse s1\n 98597: u8 [a0 + 0x18] = a4\n 98600: u8 [a0 + 0x10] = a3\n 98603: u8 [a0 + 0x8] = a2\n 98606: u8 [a0] = a1\n 98608: a5 = a4 >> 0x38\n 98611: u8 [a0 + 0x1f] = a5\n 98614: a5 = a4 >> 0x30\n 98617: u8 [a0 + 0x1e] = a5\n 98620: a5 = a4 >> 0x28\n 98623: u8 [a0 + 0x1d] = a5\n 98626: a5 = a4 >> 0x20\n 98629: u8 [a0 + 0x1c] = a5\n 98632: a5 = a4 >> 0x18\n 98635: u8 [a0 + 0x1b] = a5\n 98638: a5 = a4 >> 0x10\n 98641: u8 [a0 + 0x1a] = a5\n 98644: a4 = a4 >> 0x8\n 98647: u8 [a0 + 0x19] = a4\n 98650: a4 = a3 >> 0x38\n 98653: u8 [a0 + 0x17] = a4\n 98656: a4 = a3 >> 0x30\n 98659: u8 [a0 + 0x16] = a4\n 98662: a4 = a3 >> 0x28\n 98665: u8 [a0 + 0x15] = a4\n 98668: a4 = a3 >> 0x20\n 98671: u8 [a0 + 0x14] = a4\n 98674: a4 = a3 >> 0x18\n 98677: u8 [a0 + 0x13] = a4\n 98680: a4 = a3 >> 0x10\n 98683: u8 [a0 + 0x12] = a4\n 98686: a3 = a3 >> 0x8\n 98689: u8 [a0 + 0x11] = a3\n 98692: a3 = a2 >> 0x38\n 98695: u8 [a0 + 0xf] = a3\n 98698: a3 = a2 >> 0x30\n 98701: u8 [a0 + 0xe] = a3\n 98704: a3 = a2 >> 0x28\n 98707: u8 [a0 + 0xd] = a3\n 98710: a3 = a2 >> 0x20\n 98713: u8 [a0 + 0xc] = a3\n 98716: a3 = a2 >> 0x18\n 98719: u8 [a0 + 0xb] = a3\n 98722: a3 = a2 >> 0x10\n 98725: u8 [a0 + 0xa] = a3\n 98728: a2 = a2 >> 0x8\n 98731: u8 [a0 + 0x9] = a2\n 98734: a2 = a1 >> 0x38\n 98737: u8 [a0 + 0x7] = a2\n 98740: a2 = a1 >> 0x30\n 98743: u8 [a0 + 0x6] = a2\n 98746: a2 = a1 >> 0x28\n 98749: u8 [a0 + 0x5] = a2\n 98752: a2 = a1 >> 0x20\n 98755: u8 [a0 + 0x4] = a2\n 98758: a2 = a1 >> 0x18\n 98761: u8 [a0 + 0x3] = a2\n 98764: a2 = a1 >> 0x10\n 98767: u8 [a0 + 0x2] = a2\n 98770: a1 = a1 >> 0x8\n 98773: u8 [a0 + 0x1] = a1\n 98776: a0 = 0x20\n 98779: a1 = 0x20\n 98782: ra = 1218, jump @0\n      : @1312 [@dyn 609] (gas: 35)\n 98789: u8 [a0 + 31] = 0\n 98792: u8 [a0 + 30] = 0\n 98795: u8 [a0 + 29] = 0\n 98798: u8 [a0 + 28] = 0\n 98801: u8 [a0 + 27] = 0\n 98804: u8 [a0 + 26] = 0\n 98807: u8 [a0 + 25] = 0\n 98810: u8 [a0 + 24] = 0\n 98813: u8 [a0 + 23] = 0\n 98816: u8 [a0 + 22] = 0\n 98819: u8 [a0 + 21] = 0\n 98822: u8 [a0 + 20] = 0\n 98825: u8 [a0 + 19] = 0\n 98828: u8 [a0 + 18] = 0\n 98831: u8 [a0 + 17] = 0\n 98834: u8 [a0 + 16] = 0\n 98837: u8 [a0 + 15] = 0\n 98840: u8 [a0 + 14] = 0\n 98843: u8 [a0 + 13] = 0\n 98846: u8 [a0 + 12] = 0\n 98849: u8 [a0 + 11] = 0\n 98852: u8 [a0 + 10] = 0\n 98855: u8 [a0 + 9] = 0\n 98858: u8 [a0 + 8] = 0\n 98861: u8 [a0 + 7] = 0\n 98864: u8 [a0 + 6] = 0\n 98867: u8 [a0 + 5] = 0\n 98870: u8 [a0 + 4] = 0\n 98873: u8 [a0 + 3] = 0\n 98876: u8 [a0 + 2] = 0\n 98879: u8 [a0 + 1] = 0\n 98882: u8 [a0 + 0] = 0\n 98884: a1 = 0x40\n 98887: a0 = 0\n 98889: ra = 1220, jump @0\n      : @1313 [@dyn 610] (gas: 36)\n 98896: i32 a0 = a0 + 0\n 98898: i32 a2 = sp + 0x60\n 98901: a1 = 0x40\n 98904: ecalli 8 // 'hash_keccak_256'\n 98906: a0 = u64 [sp + 0x60]\n 98909: a1 = u64 [sp + 0x68]\n 98912: a2 = u64 [sp + 0x70]\n 98915: a3 = u64 [sp + 0x78]\n 98918: a0 = reverse a0\n 98920: a1 = reverse a1\n 98922: a2 = reverse a2\n 98924: a3 = reverse a3\n 98926: a4 = a3 + 0x3\n 98929: a3 = a4 <u a3\n 98932: a5 = a2 + a3\n 98935: a2 = a5 <u a2\n 98938: a2 = a3 if a3 == 0\n 98941: a2 = a2 + a1\n 98944: a1 = a2 <u a1\n 98947: a0 = a0 + a1\n 98950: u64 [sp + 0x48] = a5\n 98953: u64 [sp + 0x40] = a4\n 98956: u64 [sp + 0x50] = a2\n 98959: u64 [sp + 0x58] = a0\n 98962: u64 [sp + 120] = 0\n 98965: u64 [sp + 112] = 0\n 98968: u64 [sp + 104] = 0\n 98971: u64 [sp + 96] = 0\n 98974: u32 [sp + 128] = 0x20\n 98979: i32 a1 = sp + 0x40\n 98982: i32 a3 = sp + 0x60\n 98985: i32 a4 = sp + 0x80\n 98989: a2 = 0xffffffffffffffff\n 98992: a0 = 0\n 98994: ecalli 7 // 'get_storage'\n 98996: fallthrough\n      : @1314 (gas: 2)\n 98997: a0 = u8 [sp + 0x60]\n 99000: jump @1317 if a0 != 0\n      : @1315 (gas: 30)\n 99004: u64 [sp + 0x20] = s1\n 99007: a0 = u64 [sp + 0x18]\n 99010: u64 [sp + 0x28] = a0\n 99013: a0 = u64 [sp + 0x10]\n 99016: u64 [sp + 0x30] = a0\n 99019: a0 = sp + 0x20\n 99022: a1 = u64 [sp + 0x8]\n 99025: u64 [sp + 0x38] = a1\n 99028: ra = 0x4c6\n 99032: sp = sp + 0xfffffffffffffd40\n 99036: u64 [sp + 0x2b8] = ra\n 99040: u64 [sp + 0x2b0] = s0\n 99044: u64 [sp + 0x2a8] = s1\n 99048: s0 = sp + 0x2c0\n 99052: sp = sp & 0xffffffffffffffe0\n 99055: a2 = u64 [a0]\n 99057: a1 = u64 [a0 + 0x8]\n 99060: a3 = u64 [a0 + 0x10]\n 99063: s1 = u64 [a0 + 0x18]\n 99066: u64 [sp + 0x1f8] = s1\n 99070: u64 [sp + 0xa8] = a3\n 99074: u64 [sp + 0x1f0] = a3\n 99078: u64 [sp + 0xb0] = a1\n 99082: u64 [sp + 0x1e8] = a1\n 99086: a0 = sp + 0x200\n 99090: a1 = sp + 0x1e0\n 99094: u64 [sp + 0xb8] = a2\n 99098: u64 [sp + 0x1e0] = a2\n 99102: ra = 0x4d6\n 99106: jump @969\n      : @1316 [@dyn 611] (gas: 6)\n 99110: sp = s0 + 0xffffffffffffff60\n 99114: ra = u64 [sp + 0x98]\n 99118: s0 = u64 [sp + 0x90]\n 99122: s1 = u64 [sp + 0x88]\n 99126: sp = sp + 0xa0\n 99130: ret\n      : @1317 (gas: 3)\n 99132: a0 = 0\n 99134: a1 = 0\n 99136: ra = 1224, jump @0\n      : @1318 [@dyn 612] (gas: 6)\n 99143: i32 a1 = a0 + 0\n 99145: a0 = 0x1\n 99148: a2 = 0\n 99150: ra = 0x4ca\n 99154: ecalli 10 // 'seal_return'\n 99156: fallthrough\n      : @1319 [@dyn 613] (gas: 9)\n 99157: a2 = u64 [a1 + 0x18]\n 99160: a3 = u64 [a1 + 0x10]\n 99163: a4 = u64 [a1 + 0x8]\n 99166: a1 = u64 [a1]\n 99168: u64 [a0 + 0x18] = a2\n 99171: u64 [a0 + 0x10] = a3\n 99174: u64 [a0 + 0x8] = a4\n 99177: u64 [a0] = a1\n 99179: ret\n      : @1320 (gas: 27)\n 99181: a0 = u64 [sp + 0x90]\n 99185: a1 = u64 [sp + 0x88]\n 99189: a2 = u64 [sp + 0x80]\n 99193: a3 = u64 [sp + 0x98]\n 99197: a4 = a0 << 0x3f\n 99200: a5 = a1 >> 0x1\n 99203: a4 = a4 | a5\n 99206: a5 = a3 << 0x3f\n 99209: a0 = a0 >> 0x1\n 99212: s1 = a0 | a5\n 99215: a1 = a1 << 0x3f\n 99218: a5 = a2 >> 0x1\n 99221: a5 = a5 | a1\n 99224: a3 = a3 >> 0x1\n 99227: a2 = a2 & 0x1\n 99230: a0 = -a2\n 99232: t0 = a2 <u 0x1\n 99235: a1 = a5 & 0x7f\n 99238: s1 = s1 & a0\n 99241: a4 = a4 & a0\n 99244: a1 = a5 if a2 != 0\n 99247: a3 = a3 & a0\n 99250: a0 = a1 <u 0x20\n 99253: a0 = 0 if a4 != 0\n 99255: a2 = s1 | a3\n 99258: a0 = 0 if a2 != 0\n 99260: jump @1322 if t0 != a0\n      : @1321 (gas: 11)\n 99263: a0 = u64 [sp + 0x18]\n 99266: u64 [a0] = a1\n 99268: u64 [a0 + 0x8] = a4\n 99271: u64 [a0 + 0x10] = s1\n 99274: u64 [a0 + 0x18] = a3\n 99277: sp = s0 + 0xffffffffffffff40\n 99281: ra = u64 [sp + 0xb8]\n 99285: s0 = u64 [sp + 0xb0]\n 99289: s1 = u64 [sp + 0xa8]\n 99293: sp = sp + 0xc0\n 99297: ret\n      : @1322 (gas: 8)\n 99299: u64 [sp + 80] = 0\n 99302: u64 [sp + 72] = 0\n 99305: u64 [sp + 64] = 0\n 99308: a0 = 0x4e487b7100000000\n 99318: a1 = sp + 0x40\n 99321: u64 [sp + 0x58] = a0\n 99324: a0 = 0\n 99326: ra = 1228, jump @23\n      : @1323 [@dyn 614] (gas: 7)\n 99333: u64 [sp + 56] = 0\n 99336: u64 [sp + 48] = 0\n 99339: u64 [sp + 32] = 0x22\n 99343: a0 = 0x4\n 99346: a1 = sp + 0x20\n 99349: u64 [sp + 40] = 0\n 99352: ra = 1230, jump @23\n      : @1324 [@dyn 615] (gas: 3)\n 99359: a1 = 0x24\n 99362: a0 = 0\n 99364: ra = 1232, jump @0\n      : @1325 [@dyn 616] (gas: 6)\n 99371: i32 a1 = a0 + 0\n 99373: a0 = 0x1\n 99376: a2 = 0x24\n 99379: ra = 0x4d2\n 99383: ecalli 10 // 'seal_return'\n 99385: fallthrough\n      : @1326 [@dyn 617] (gas: 18)\n 99386: sp = sp + 0xffffffffffffffa0\n 99389: u64 [sp + 0x58] = ra\n 99392: u64 [sp + 0x50] = s0\n 99395: u64 [sp + 0x48] = s1\n 99398: s0 = sp + 0x60\n 99401: sp = sp & 0xfffffffffffffff0\n 99404: a2 = u64 [a1]\n 99406: a3 = u64 [a1 + 0x8]\n 99409: a4 = u64 [a1 + 0x10]\n 99412: a1 = u64 [a1 + 0x18]\n 99415: s1 = a0\n 99417: u64 [sp + 0x18] = a1\n 99420: u64 [sp + 0x10] = a4\n 99423: u64 [sp + 0x8] = a3\n 99426: a0 = sp + 0x20\n 99429: a1 = sp\n 99431: u64 [sp] = a2\n 99433: ra = 1236, jump @492\n      : @1327 [@dyn 618] (gas: 14)\n 99440: a0 = u64 [sp + 0x30]\n 99443: a1 = u64 [sp + 0x38]\n 99446: a2 = u64 [sp + 0x20]\n 99449: a3 = u64 [sp + 0x28]\n 99452: u64 [s1 + 0x10] = a0\n 99455: u64 [s1 + 0x18] = a1\n 99458: u64 [s1] = a2\n 99460: u64 [s1 + 0x8] = a3\n 99463: sp = s0 + 0xffffffffffffffa0\n 99466: ra = u64 [sp + 0x58]\n 99469: s0 = u64 [sp + 0x50]\n 99472: s1 = u64 [sp + 0x48]\n 99475: sp = sp + 0x60\n 99478: ret\n      : @1328 [@dyn 619] (gas: 8)\n 99480: a0 = u64 [sp + 0x210]\n 99484: a1 = u64 [sp + 0x218]\n 99488: a2 = u64 [sp + 0x208]\n 99492: a3 = u64 [sp + 0x200]\n 99496: a1 = a1 | a2\n 99499: a0 = a0 | a3\n 99502: a0 = a0 | a1\n 99505: jump @1343 if a0 == 0\n      : @1329 (gas: 3)\n 99509: a1 = 0x20\n 99512: a0 = 0\n 99514: ra = 1240, jump @0\n      : @1330 [@dyn 620] (gas: 74)\n 99521: a2 = reverse s1\n 99523: a1 = u64 [sp + 0xa8]\n 99527: a4 = reverse a1\n 99529: a1 = u64 [sp + 0xb0]\n 99533: a5 = reverse a1\n 99535: a1 = u64 [sp + 0xb8]\n 99539: a3 = reverse a1\n 99541: a1 = a3 >> 0x38\n 99544: u8 [a0 + 0x1f] = a1\n 99547: a1 = a3 >> 0x30\n 99550: u8 [a0 + 0x1e] = a1\n 99553: a1 = a3 >> 0x28\n 99556: u8 [a0 + 0x1d] = a1\n 99559: a1 = a3 >> 0x20\n 99562: u8 [a0 + 0x1c] = a1\n 99565: a1 = a3 >> 0x18\n 99568: u8 [a0 + 0x1b] = a1\n 99571: a1 = a3 >> 0x10\n 99574: u8 [a0 + 0x1a] = a1\n 99577: a1 = a3 >> 0x8\n 99580: u8 [a0 + 0x19] = a1\n 99583: u64 [sp + 0x28] = a3\n 99586: u8 [a0 + 0x18] = a3\n 99589: u8 [a0 + 0x10] = a5\n 99592: a1 = a5 >> 0x38\n 99595: u8 [a0 + 0x17] = a1\n 99598: a1 = a5 >> 0x30\n 99601: u8 [a0 + 0x16] = a1\n 99604: a1 = a5 >> 0x28\n 99607: u8 [a0 + 0x15] = a1\n 99610: a1 = a5 >> 0x20\n 99613: u8 [a0 + 0x14] = a1\n 99616: a1 = a5 >> 0x18\n 99619: u8 [a0 + 0x13] = a1\n 99622: a1 = a5 >> 0x10\n 99625: u8 [a0 + 0x12] = a1\n 99628: u64 [sp + 0x18] = a5\n 99631: a1 = a5 >> 0x8\n 99634: u8 [a0 + 0x11] = a1\n 99637: u8 [a0 + 0x8] = a4\n 99640: a1 = a4 >> 0x38\n 99643: u8 [a0 + 0xf] = a1\n 99646: a1 = a4 >> 0x30\n 99649: u8 [a0 + 0xe] = a1\n 99652: a1 = a4 >> 0x28\n 99655: u8 [a0 + 0xd] = a1\n 99658: a1 = a4 >> 0x20\n 99661: u8 [a0 + 0xc] = a1\n 99664: a1 = a4 >> 0x18\n 99667: u8 [a0 + 0xb] = a1\n 99670: a1 = a4 >> 0x10\n 99673: u8 [a0 + 0xa] = a1\n 99676: u64 [sp + 0x20] = a4\n 99679: a1 = a4 >> 0x8\n 99682: u8 [a0 + 0x9] = a1\n 99685: u8 [a0] = a2\n 99687: a1 = a2 >> 0x38\n 99690: u8 [a0 + 0x7] = a1\n 99693: a1 = a2 >> 0x30\n 99696: u8 [a0 + 0x6] = a1\n 99699: a1 = a2 >> 0x28\n 99702: u8 [a0 + 0x5] = a1\n 99705: a1 = a2 >> 0x20\n 99708: u8 [a0 + 0x4] = a1\n 99711: a1 = a2 >> 0x18\n 99714: u8 [a0 + 0x3] = a1\n 99717: a1 = a2 >> 0x10\n 99720: u8 [a0 + 0x2] = a1\n 99723: u64 [sp + 0x30] = a2\n 99726: a1 = a2 >> 0x8\n 99729: u8 [a0 + 0x1] = a1\n 99732: a0 = 0x20\n 99735: a1 = 0x20\n 99738: ra = 1242, jump @0\n      : @1331 [@dyn 621] (gas: 35)\n 99745: u8 [a0 + 31] = 0\n 99748: u8 [a0 + 30] = 0\n 99751: u8 [a0 + 29] = 0\n 99754: u8 [a0 + 28] = 0\n 99757: u8 [a0 + 27] = 0\n 99760: u8 [a0 + 26] = 0\n 99763: u8 [a0 + 25] = 0\n 99766: u8 [a0 + 24] = 0\n 99769: u8 [a0 + 23] = 0\n 99772: u8 [a0 + 22] = 0\n 99775: u8 [a0 + 21] = 0\n 99778: u8 [a0 + 20] = 0\n 99781: u8 [a0 + 19] = 0\n 99784: u8 [a0 + 18] = 0\n 99787: u8 [a0 + 17] = 0\n 99790: u8 [a0 + 16] = 0\n 99793: u8 [a0 + 15] = 0\n 99796: u8 [a0 + 14] = 0\n 99799: u8 [a0 + 13] = 0\n 99802: u8 [a0 + 12] = 0\n 99805: u8 [a0 + 11] = 0\n 99808: u8 [a0 + 10] = 0\n 99811: u8 [a0 + 9] = 0\n 99814: u8 [a0 + 8] = 0\n 99817: u8 [a0 + 7] = 0\n 99820: u8 [a0 + 6] = 0\n 99823: u8 [a0 + 5] = 0\n 99826: u8 [a0 + 4] = 0\n 99829: u8 [a0 + 3] = 0\n 99832: u8 [a0 + 2] = 0\n 99835: u8 [a0 + 1] = 0\n 99838: u8 [a0 + 0] = 0\n 99840: a1 = 0x40\n 99843: a0 = 0\n 99845: ra = 1244, jump @0\n      : @1332 [@dyn 622] (gas: 176)\n 99852: i32 a0 = a0 + 0\n 99854: i32 a2 = sp + 0x260\n 99858: a1 = 0x40\n 99861: ecalli 8 // 'hash_keccak_256'\n 99863: a0 = u64 [sp + 0x260]\n 99867: a1 = u64 [sp + 0x268]\n 99871: a2 = u64 [sp + 0x270]\n 99875: a3 = u64 [sp + 0x278]\n 99879: a4 = reverse a0\n 99881: u64 [sp + 0xb0] = a4\n 99885: a5 = reverse a1\n 99887: a1 = reverse a2\n 99889: u64 [sp + 0xb8] = a1\n 99893: a0 = reverse a3\n 99895: u64 [sp + 0xa0] = a0\n 99899: a2 = a0 + 0x3\n 99902: u64 [sp + 0x88] = a2\n 99906: a0 = a2 <u a0\n 99909: a3 = a1 + a0\n 99912: u64 [sp + 0x90] = a3\n 99916: a1 = a3 <u a1\n 99919: a1 = a0 if a0 == 0\n 99922: u64 [sp + 0xa8] = a5\n 99926: s1 = a5 + a1\n 99929: a0 = s1 <u a5\n 99932: a0 = a0 + a4\n 99935: u64 [sp + 0x98] = a0\n 99939: u64 [sp + 0x248] = a3\n 99943: u64 [sp + 0x240] = a2\n 99947: u64 [sp + 0x250] = s1\n 99951: u64 [sp + 0x258] = a0\n 99955: u64 [sp + 632] = 0\n 99959: u64 [sp + 624] = 0\n 99963: u64 [sp + 616] = 0\n 99967: u64 [sp + 608] = 0\n 99971: u32 [sp + 544] = 0x20\n 99976: i32 a1 = sp + 0x240\n 99980: i32 a3 = sp + 0x260\n 99984: i32 a4 = sp + 0x220\n 99988: a2 = 0xffffffffffffffff\n 99991: a0 = 0\n 99993: ecalli 7 // 'get_storage'\n 99995: a0 = u64 [sp + 0x260]\n 99999: a1 = u64 [sp + 0x268]\n100003: a2 = u64 [sp + 0x270]\n100007: a3 = u64 [sp + 0x278]\n100011: a0 = a0 & 0xffffffffffffff00\n100015: a0 = a0 | 0x1\n100018: a4 = u64 [sp + 0x98]\n100022: u64 [sp + 0x258] = a4\n100026: u64 [sp + 0x10] = s1\n100029: u64 [sp + 0x250] = s1\n100033: a4 = u64 [sp + 0x90]\n100037: u64 [sp + 0x248] = a4\n100041: a4 = u64 [sp + 0x88]\n100045: u64 [sp + 0x240] = a4\n100049: u64 [sp + 0x278] = a3\n100053: u64 [sp + 0x270] = a2\n100057: u64 [sp + 0x268] = a1\n100061: u64 [sp + 0x260] = a0\n100065: i32 a1 = sp + 0x240\n100069: i32 a3 = sp + 0x260\n100073: a2 = 0xffffffffffffffff\n100076: a4 = 0x20\n100079: a0 = 0\n100081: ecalli 12 // 'set_storage'\n100083: a0 = u64 [sp + 0xb0]\n100087: u64 [sp + 0x258] = a0\n100091: a0 = u64 [sp + 0xa8]\n100095: u64 [sp + 0x250] = a0\n100099: a0 = u64 [sp + 0xb8]\n100103: u64 [sp + 0x248] = a0\n100107: s1 = u64 [sp + 0xa0]\n100111: u64 [sp + 0x240] = s1\n100115: u64 [sp + 632] = 0\n100119: u64 [sp + 624] = 0\n100123: u64 [sp + 616] = 0\n100127: u64 [sp + 608] = 0\n100131: u32 [sp + 544] = 0x20\n100136: i32 a1 = sp + 0x240\n100140: i32 a3 = sp + 0x260\n100144: i32 a4 = sp + 0x220\n100148: a2 = 0xffffffffffffffff\n100151: a0 = 0\n100153: ecalli 7 // 'get_storage'\n100155: a0 = s1 + 0x1\n100158: a1 = a0 <u 0x1\n100161: a2 = u64 [sp + 0xb8]\n100165: a1 = a1 + a2\n100168: a2 = a0 | a1\n100171: a2 = a2 <u 0x1\n100174: a4 = u64 [sp + 0xa8]\n100178: a2 = a2 + a4\n100181: a3 = a2 <u a4\n100184: s1 = a4\n100186: a4 = u64 [sp + 0xb0]\n100190: a3 = a3 + a4\n100193: u64 [sp + 0x258] = a3\n100197: u64 [sp + 0x250] = a2\n100201: u64 [sp + 0x248] = a1\n100205: a1 = u64 [sp + 0x260]\n100209: u64 [sp + 0x80] = a1\n100213: u64 [sp + 0x240] = a0\n100217: a0 = u64 [sp + 0x268]\n100221: u64 [sp + 0x78] = a0\n100224: u32 [sp + 544] = 0x20\n100229: a0 = u32 [sp + 0x270]\n100233: u64 [sp + 0x70] = a0\n100236: u64 [sp + 632] = 0\n100240: u64 [sp + 624] = 0\n100244: u64 [sp + 616] = 0\n100248: u64 [sp + 608] = 0\n100252: i32 a1 = sp + 0x240\n100256: i32 a3 = sp + 0x260\n100260: i32 a4 = sp + 0x220\n100264: a2 = 0xffffffffffffffff\n100267: a0 = 0\n100269: ecalli 7 // 'get_storage'\n100271: a0 = u64 [sp + 0x260]\n100275: u64 [sp + 0x68] = a0\n100278: a0 = u64 [sp + 0x268]\n100282: u64 [sp + 0x60] = a0\n100285: a0 = u64 [sp + 0x270]\n100289: u64 [sp + 0x58] = a0\n100292: a0 = u64 [sp + 0x278]\n100296: u64 [sp + 0x50] = a0\n100299: a0 = u64 [sp + 0xa0]\n100303: a1 = a0 + 0x2\n100306: a0 = a1 <u a0\n100309: a2 = a1\n100311: u64 [sp + 0x48] = a1\n100314: a1 = u64 [sp + 0xb8]\n100318: a3 = a1 + a0\n100321: u64 [sp + 0x40] = a3\n100324: a1 = a3 <u a1\n100327: a1 = a0 if a0 == 0\n100330: a0 = s1\n100332: s1 = s1 + a1\n100335: a0 = s1 <u a0\n100338: a1 = u64 [sp + 0xb0]\n100342: a0 = a0 + a1\n100345: u64 [sp + 0x38] = a0\n100348: u64 [sp + 0x1b8] = a0\n100352: u64 [sp + 0x1b0] = s1\n100356: u64 [sp + 0x1a8] = a3\n100360: a0 = sp + 0x1c0\n100364: a1 = sp + 0x1a0\n100368: u64 [sp + 0x1a0] = a2\n100372: ra = 0x4de\n100376: sp = sp + 0xffffffffffffff40\n100380: u64 [sp + 0xb8] = ra\n100384: u64 [sp + 0xb0] = s0\n100388: u64 [sp + 0xa8] = s1\n100392: s0 = sp + 0xc0\n100396: sp = sp & 0xffffffffffffffe0\n100399: u64 [sp + 0x18] = a0\n100402: a0 = u64 [a1 + 0x18]\n100405: a2 = u64 [a1 + 0x10]\n100408: a3 = u64 [a1 + 0x8]\n100411: a1 = u64 [a1]\n100413: u64 [sp + 0x78] = a0\n100416: u64 [sp + 0x70] = a2\n100419: u64 [sp + 0x68] = a3\n100422: u64 [sp + 0x60] = a1\n100425: u64 [sp + 152] = 0\n100429: u64 [sp + 144] = 0\n100433: u64 [sp + 136] = 0\n100437: u64 [sp + 128] = 0\n100441: u32 [sp + 160] = 0x20\n100446: i32 a1 = sp + 0x60\n100449: i32 a3 = sp + 0x80\n100453: i32 a4 = sp + 0xa0\n100457: a2 = 0xffffffffffffffff\n100460: a0 = 0\n100462: ecalli 7 // 'get_storage'\n100464: jump @1320\n      : @1333 [@dyn 623] (gas: 18)\n100467: a0 = u64 [sp + 0x1c0]\n100471: u64 [sp + 0xb8] = a0\n100475: a0 = u64 [sp + 0x1c8]\n100479: u64 [sp + 0xb0] = a0\n100483: a0 = u64 [sp + 0x1d0]\n100487: u64 [sp + 0xa8] = a0\n100491: a0 = u64 [sp + 0x1d8]\n100495: u64 [sp + 0xa0] = a0\n100499: a0 = u64 [sp + 0x38]\n100502: u64 [sp + 0x178] = a0\n100506: u64 [sp + 0x170] = s1\n100510: a0 = u64 [sp + 0x40]\n100513: u64 [sp + 0x168] = a0\n100517: a0 = sp + 0x180\n100521: a1 = sp + 0x160\n100525: a2 = u64 [sp + 0x48]\n100528: u64 [sp + 0x160] = a2\n100532: ra = 1248, jump @492\n      : @1334 [@dyn 624] (gas: 37)\n100539: a0 = u64 [sp + 0x180]\n100543: a1 = u64 [sp + 0x188]\n100547: a2 = u64 [sp + 0x190]\n100551: a3 = u64 [sp + 0x198]\n100555: u64 [sp + 0xd8] = a3\n100559: u64 [sp + 0xd0] = a2\n100563: u64 [sp + 0xc8] = a1\n100567: u64 [sp + 0xc0] = a0\n100571: a0 = u64 [sp + 0xa0]\n100575: u64 [sp + 0xf8] = a0\n100579: a0 = u64 [sp + 0xa8]\n100583: u64 [sp + 0xf0] = a0\n100587: a0 = u64 [sp + 0xb0]\n100591: u64 [sp + 0xe8] = a0\n100595: a0 = u64 [sp + 0xb8]\n100599: u64 [sp + 0xe0] = a0\n100603: a0 = u64 [sp + 0x50]\n100606: u64 [sp + 0x118] = a0\n100610: a0 = u64 [sp + 0x58]\n100613: u64 [sp + 0x110] = a0\n100617: a0 = u64 [sp + 0x60]\n100620: u64 [sp + 0x108] = a0\n100624: a0 = u64 [sp + 0x68]\n100627: u64 [sp + 0x100] = a0\n100631: a0 = u64 [sp + 0x70]\n100634: u64 [sp + 0x130] = a0\n100638: a0 = u64 [sp + 0x78]\n100641: u64 [sp + 0x128] = a0\n100645: a0 = u64 [sp + 0x80]\n100649: u64 [sp + 0x120] = a0\n100653: a0 = sp + 0x140\n100657: a1 = sp + 0x120\n100661: a2 = sp + 0x100\n100665: a3 = sp + 0xe0\n100669: a4 = sp + 0xc0\n100673: u64 [sp + 312] = 0\n100677: ra = 1250, jump @1443\n      : @1335 [@dyn 625] (gas: 11)\n100683: a0 = u64 [sp + 0x150]\n100687: a1 = u64 [sp + 0x158]\n100691: a2 = u64 [sp + 0x148]\n100695: a3 = u64 [sp + 0x140]\n100699: a1 = a1 | a2\n100702: a0 = a0 | a3\n100705: a0 = a0 | a1\n100708: u64 [sp + 0xb8] = a0\n100712: a0 = 0x40\n100715: a1 = 0x20\n100718: ra = 1252, jump @0\n      : @1336 [@dyn 626] (gas: 94)\n100725: a1 = u8 [a0 + 0x19]\n100728: a2 = u8 [a0 + 0x18]\n100731: a3 = u8 [a0 + 0x1a]\n100734: a4 = u8 [a0 + 0x1b]\n100737: a1 = a1 << 0x8\n100740: a1 = a1 | a2\n100743: a3 = a3 << 0x10\n100746: a4 = a4 << 0x18\n100749: a3 = a3 | a4\n100752: a1 = a1 | a3\n100755: a2 = u8 [a0 + 0x1d]\n100758: a3 = u8 [a0 + 0x1c]\n100761: a4 = u8 [a0 + 0x1e]\n100764: a5 = u8 [a0 + 0x1f]\n100767: a2 = a2 << 0x8\n100770: a2 = a2 | a3\n100773: a4 = a4 << 0x10\n100776: a5 = a5 << 0x18\n100779: a4 = a4 | a5\n100782: a2 = a2 | a4\n100785: a2 = a2 << 0x20\n100788: t0 = a2 | a1\n100791: a2 = u8 [a0 + 0x11]\n100794: a3 = u8 [a0 + 0x10]\n100797: a4 = u8 [a0 + 0x12]\n100800: a5 = u8 [a0 + 0x13]\n100803: a2 = a2 << 0x8\n100806: a2 = a2 | a3\n100809: a4 = a4 << 0x10\n100812: a5 = a5 << 0x18\n100815: a4 = a4 | a5\n100818: a2 = a2 | a4\n100821: a3 = u8 [a0 + 0x15]\n100824: a4 = u8 [a0 + 0x14]\n100827: a5 = u8 [a0 + 0x16]\n100830: s1 = u8 [a0 + 0x17]\n100833: a3 = a3 << 0x8\n100836: a3 = a3 | a4\n100839: a5 = a5 << 0x10\n100842: s1 = s1 << 0x18\n100845: a5 = a5 | s1\n100848: a3 = a3 | a5\n100851: a3 = a3 << 0x20\n100854: a2 = a2 | a3\n100857: a3 = u8 [a0 + 0x9]\n100860: a4 = u8 [a0 + 0x8]\n100863: a5 = u8 [a0 + 0xa]\n100866: s1 = u8 [a0 + 0xb]\n100869: a3 = a3 << 0x8\n100872: a3 = a3 | a4\n100875: a5 = a5 << 0x10\n100878: s1 = s1 << 0x18\n100881: a5 = a5 | s1\n100884: a3 = a3 | a5\n100887: a4 = u8 [a0 + 0xd]\n100890: a5 = u8 [a0 + 0xc]\n100893: s1 = u8 [a0 + 0xe]\n100896: a1 = u8 [a0 + 0xf]\n100899: a4 = a4 << 0x8\n100902: a4 = a4 | a5\n100905: s1 = s1 << 0x10\n100908: a1 = a1 << 0x18\n100911: a1 = a1 | s1\n100914: a1 = a1 | a4\n100917: a1 = a1 << 0x20\n100920: a3 = a3 | a1\n100923: a1 = u8 [a0 + 0x1]\n100926: a4 = u8 [a0]\n100928: a5 = u8 [a0 + 0x2]\n100931: s1 = u8 [a0 + 0x3]\n100934: a1 = a1 << 0x8\n100937: a1 = a1 | a4\n100940: a5 = a5 << 0x10\n100943: s1 = s1 << 0x18\n100946: a5 = a5 | s1\n100949: a1 = a1 | a5\n100952: a4 = u8 [a0 + 0x5]\n100955: a5 = u8 [a0 + 0x4]\n100958: s1 = u8 [a0 + 0x6]\n100961: a0 = u8 [a0 + 0x7]\n100964: a4 = a4 << 0x8\n100967: a4 = a4 | a5\n100970: s1 = s1 << 0x10\n100973: a0 = a0 << 0x18\n100976: a0 = a0 | s1\n100979: a0 = a0 | a4\n100982: a0 = a0 << 0x20\n100985: a0 = a0 | a1\n100988: a4 = reverse a0\n100990: a3 = reverse a3\n100992: a2 = reverse a2\n100994: a0 = reverse t0\n100996: a1 = u64 [sp + 0xb8]\n101000: jump @1340 if a1 == 0\n      : @1337 (gas: 8)\n101003: a1 = a0 | a3\n101006: a2 = a2 | a4\n101009: a1 = a1 | a2\n101012: a1 = a1 >> 0x20\n101015: a2 = a2 | a3\n101018: a2 = a2 << 0x20\n101021: a1 = a1 | a2\n101024: jump @1344 if a1 != 0\n      : @1338 (gas: 2)\n101028: i32 a0 = a0 + 0\n101030: ra = 1254, jump @0\n      : @1339 [@dyn 627] (gas: 22)\n101037: a1 = u64 [0x200e0]\n101042: a2 = u64 [0x200e8]\n101047: a3 = u64 [0x200f0]\n101052: a4 = u64 [0x200f8]\n101057: u64 [sp + 0x278] = a1\n101061: u64 [sp + 0x270] = a2\n101065: u64 [sp + 0x268] = a3\n101069: u64 [sp + 0x260] = a4\n101073: a1 = u64 [sp + 0x18]\n101076: u64 [sp + 0x290] = a1\n101080: a1 = u64 [sp + 0x20]\n101083: u64 [sp + 0x288] = a1\n101087: a1 = u64 [sp + 0x30]\n101090: u64 [sp + 0x280] = a1\n101094: a1 = u64 [sp + 0x28]\n101097: u64 [sp + 0x298] = a1\n101101: i32 a2 = a0 + 0\n101103: i32 a0 = sp + 0x260\n101107: a1 = 0x2\n101110: a3 = 0\n101112: ecalli 6 // 'deposit_event'\n101114: jump @1343\n      : @1340 (gas: 9)\n101117: s1 = u64 [sp + 0x98]\n101121: a1 = a0 | a3\n101124: a2 = a2 | a4\n101127: a1 = a1 | a2\n101130: a1 = a1 >> 0x20\n101133: a2 = a2 | a3\n101136: a2 = a2 << 0x20\n101139: a1 = a1 | a2\n101142: jump @1344 if a1 != 0\n      : @1341 (gas: 2)\n101146: i32 a0 = a0 + 0\n101148: ra = 1256, jump @0\n      : @1342 [@dyn 628] (gas: 62)\n101155: a1 = u64 [0x20100]\n101160: a2 = u64 [0x20108]\n101165: a3 = u64 [0x20110]\n101170: a4 = u64 [0x20118]\n101175: u64 [sp + 0x278] = a1\n101179: u64 [sp + 0x270] = a2\n101183: u64 [sp + 0x268] = a3\n101187: u64 [sp + 0x260] = a4\n101191: a1 = u64 [sp + 0x18]\n101194: u64 [sp + 0x290] = a1\n101198: a1 = u64 [sp + 0x20]\n101201: u64 [sp + 0x288] = a1\n101205: a1 = u64 [sp + 0x30]\n101208: u64 [sp + 0x280] = a1\n101212: a1 = u64 [sp + 0x28]\n101215: u64 [sp + 0x298] = a1\n101219: i32 a2 = a0 + 0\n101221: i32 a0 = sp + 0x260\n101225: a1 = 0x2\n101228: a3 = 0\n101230: ecalli 6 // 'deposit_event'\n101232: u64 [sp + 0x258] = s1\n101236: a0 = u64 [sp + 0x10]\n101239: u64 [sp + 0x250] = a0\n101243: a0 = u64 [sp + 0x90]\n101247: u64 [sp + 0x248] = a0\n101251: s1 = u64 [sp + 0x88]\n101255: u64 [sp + 0x240] = s1\n101259: u64 [sp + 632] = 0\n101263: u64 [sp + 624] = 0\n101267: u64 [sp + 616] = 0\n101271: u64 [sp + 608] = 0\n101275: u32 [sp + 544] = 0x20\n101280: i32 a1 = sp + 0x240\n101284: i32 a3 = sp + 0x260\n101288: i32 a4 = sp + 0x220\n101292: a2 = 0xffffffffffffffff\n101295: a0 = 0\n101297: ecalli 7 // 'get_storage'\n101299: a0 = u64 [sp + 0x260]\n101303: a1 = u64 [sp + 0x268]\n101307: a2 = u64 [sp + 0x270]\n101311: a3 = u64 [sp + 0x278]\n101315: a0 = a0 & 0xffffffffffffff00\n101319: a4 = u64 [sp + 0x98]\n101323: u64 [sp + 0x258] = a4\n101327: a4 = u64 [sp + 0x10]\n101330: u64 [sp + 0x250] = a4\n101334: a4 = u64 [sp + 0x90]\n101338: u64 [sp + 0x248] = a4\n101342: u64 [sp + 0x240] = s1\n101346: u64 [sp + 0x278] = a3\n101350: u64 [sp + 0x270] = a2\n101354: u64 [sp + 0x268] = a1\n101358: u64 [sp + 0x260] = a0\n101362: i32 a1 = sp + 0x240\n101366: i32 a3 = sp + 0x260\n101370: a2 = 0xffffffffffffffff\n101373: a4 = 0x20\n101376: a0 = 0\n101378: ecalli 12 // 'set_storage'\n101380: fallthrough\n      : @1343 (gas: 6)\n101381: sp = s0 + 0xfffffffffffffd40\n101385: ra = u64 [sp + 0x2b8]\n101389: s0 = u64 [sp + 0x2b0]\n101393: s1 = u64 [sp + 0x2a8]\n101397: sp = sp + 0x2c0\n101401: ret\n      : @1344 (gas: 1)\n101403: trap\n      : @1345 (gas: 8)\n101404: a0 = u64 [s1 + 0x50]\n101407: a1 = u64 [s1 + 0x58]\n101410: a2 = u64 [s1 + 0x48]\n101413: a3 = u64 [s1 + 0x40]\n101416: a1 = a1 | a2\n101419: a0 = a0 | a3\n101422: a0 = a0 | a1\n101425: jump @1351 if a0 == 0\n      : @1346 (gas: 30)\n101429: i32 a0 = s1 + 0x60\n101432: ecalli 5 // 'caller'\n101434: a0 = u32 [s1 + 0x70]\n101437: u64 [s1 + 0x28] = a0\n101440: a0 = u64 [s1 + 0x68]\n101443: u64 [s1 + 0x20] = a0\n101446: a0 = u64 [s1 + 0x60]\n101449: u64 [s1 + 0x38] = a0\n101452: a0 = sp + 0xffffffffffffffe0\n101455: a0 = a0 & 0xffffffffffffffe0\n101458: u64 [s1 + 0x30] = a0\n101461: sp = a0\n101463: u64 [a0 + 24] = 0\n101466: u64 [a0 + 16] = 0\n101469: u64 [a0 + 8] = 0\n101472: u64 [a0 + 0] = 0\n101474: i32 a0 = a0 + 0\n101476: ecalli 13 // 'value_transferred'\n101478: a1 = u64 [s1 + 0x30]\n101481: a0 = u64 [a1 + 0x18]\n101484: u64 [s1 + 0x8] = a0\n101487: a0 = u64 [a1 + 0x10]\n101490: u64 [s1 + 0x10] = a0\n101493: a0 = u64 [a1 + 0x8]\n101496: u64 [s1 + 0x18] = a0\n101499: a0 = u64 [a1]\n101501: u64 [s1 + 0x30] = a0\n101504: a0 = 0x40\n101507: a1 = 0x20\n101510: ra = 1258, jump @0\n      : @1347 [@dyn 629] (gas: 100)\n101517: a1 = u8 [a0 + 0x11]\n101520: a2 = u8 [a0 + 0x10]\n101523: a3 = u8 [a0 + 0x12]\n101526: a4 = u8 [a0 + 0x13]\n101529: a1 = a1 << 0x8\n101532: a1 = a1 | a2\n101535: a3 = a3 << 0x10\n101538: a4 = a4 << 0x18\n101541: a3 = a3 | a4\n101544: a1 = a1 | a3\n101547: a2 = u8 [a0 + 0x15]\n101550: a3 = u8 [a0 + 0x14]\n101553: a4 = u8 [a0 + 0x16]\n101556: a5 = u8 [a0 + 0x17]\n101559: a2 = a2 << 0x8\n101562: a2 = a2 | a3\n101565: a4 = a4 << 0x10\n101568: a5 = a5 << 0x18\n101571: a4 = a4 | a5\n101574: a2 = a2 | a4\n101577: a2 = a2 << 0x20\n101580: t0 = a2 | a1\n101583: a2 = u8 [a0 + 0x1]\n101586: a3 = u8 [a0]\n101588: a4 = u8 [a0 + 0x2]\n101591: a5 = u8 [a0 + 0x3]\n101594: a2 = a2 << 0x8\n101597: a2 = a2 | a3\n101600: a4 = a4 << 0x10\n101603: a5 = a5 << 0x18\n101606: a4 = a4 | a5\n101609: a2 = a2 | a4\n101612: a3 = u8 [a0 + 0x5]\n101615: a4 = u8 [a0 + 0x4]\n101618: a5 = u8 [a0 + 0x6]\n101621: a1 = u8 [a0 + 0x7]\n101624: a3 = a3 << 0x8\n101627: a3 = a3 | a4\n101630: a5 = a5 << 0x10\n101633: a1 = a1 << 0x18\n101636: a1 = a1 | a5\n101639: a1 = a1 | a3\n101642: a1 = a1 << 0x20\n101645: t1 = a1 | a2\n101648: a1 = u8 [a0 + 0x19]\n101651: a3 = u8 [a0 + 0x18]\n101654: a4 = u8 [a0 + 0x1a]\n101657: a5 = u8 [a0 + 0x1b]\n101660: a1 = a1 << 0x8\n101663: a1 = a1 | a3\n101666: a4 = a4 << 0x10\n101669: a5 = a5 << 0x18\n101672: a4 = a4 | a5\n101675: a1 = a1 | a4\n101678: a3 = u8 [a0 + 0x1d]\n101681: a4 = u8 [a0 + 0x1c]\n101684: a5 = u8 [a0 + 0x1e]\n101687: a2 = u8 [a0 + 0x1f]\n101690: a3 = a3 << 0x8\n101693: a3 = a3 | a4\n101696: a5 = a5 << 0x10\n101699: a2 = a2 << 0x18\n101702: a2 = a2 | a5\n101705: a2 = a2 | a3\n101708: a2 = a2 << 0x20\n101711: a3 = a2 | a1\n101714: a1 = u8 [a0 + 0x9]\n101717: a2 = u8 [a0 + 0x8]\n101720: a4 = u8 [a0 + 0xa]\n101723: a5 = u8 [a0 + 0xb]\n101726: a1 = a1 << 0x8\n101729: a1 = a1 | a2\n101732: a4 = a4 << 0x10\n101735: a5 = a5 << 0x18\n101738: a4 = a4 | a5\n101741: a1 = a1 | a4\n101744: a2 = u8 [a0 + 0xd]\n101747: a4 = u8 [a0 + 0xc]\n101750: a5 = u8 [a0 + 0xe]\n101753: a0 = u8 [a0 + 0xf]\n101756: a2 = a2 << 0x8\n101759: a2 = a2 | a4\n101762: a5 = a5 << 0x10\n101765: a0 = a0 << 0x18\n101768: a0 = a0 | a5\n101771: a0 = a0 | a2\n101774: a0 = a0 << 0x20\n101777: a0 = a0 | a1\n101780: a1 = reverse a0\n101782: a0 = reverse a3\n101784: a2 = reverse t1\n101786: a3 = reverse t0\n101788: a2 = a2 | a3\n101791: a3 = a0 | a1\n101794: a3 = a3 | a2\n101797: a3 = a3 >> 0x20\n101800: a1 = a1 | a2\n101803: a1 = a1 << 0x20\n101806: a1 = a1 | a3\n101809: jump @1352 if a1 != 0\n      : @1348 (gas: 18)\n101813: a1 = u64 [s1 + 0x20]\n101816: a1 = reverse a1\n101818: a2 = a1 << 0x20\n101821: a3 = u64 [s1 + 0x28]\n101824: a3 = reverse a3\n101826: a3 = a3 >> 0x20\n101829: a2 = a2 | a3\n101832: u64 [s1 + 0x28] = a2\n101835: a2 = u64 [s1 + 0x38]\n101838: a2 = reverse a2\n101840: a2 = a2 << 0x20\n101843: a1 = a1 >> 0x20\n101846: a1 = a1 | a2\n101849: u64 [s1 + 0x20] = a1\n101852: i32 a0 = a0 + 0\n101854: u64 [s1] = a0\n101856: a1 = 0x20\n101859: ra = 1260, jump @0\n      : @1349 [@dyn 630] (gas: 71)\n101866: a1 = u64 [s1 + 0x8]\n101869: a1 = reverse a1\n101871: a2 = u64 [s1 + 0x10]\n101874: a2 = reverse a2\n101876: a3 = u64 [s1 + 0x18]\n101879: a3 = reverse a3\n101881: a4 = u64 [s1 + 0x30]\n101884: a4 = reverse a4\n101886: a5 = a4 >> 0x38\n101889: u8 [a0 + 0x1f] = a5\n101892: a5 = a4 >> 0x30\n101895: u8 [a0 + 0x1e] = a5\n101898: a5 = a4 >> 0x28\n101901: u8 [a0 + 0x1d] = a5\n101904: a5 = a4 >> 0x20\n101907: u8 [a0 + 0x1c] = a5\n101910: a5 = a4 >> 0x18\n101913: u8 [a0 + 0x1b] = a5\n101916: a5 = a4 >> 0x10\n101919: u8 [a0 + 0x1a] = a5\n101922: a5 = a4 >> 0x8\n101925: u8 [a0 + 0x19] = a5\n101928: u8 [a0 + 0x18] = a4\n101931: u8 [a0 + 0x10] = a3\n101934: a4 = a3 >> 0x38\n101937: u8 [a0 + 0x17] = a4\n101940: a4 = a3 >> 0x30\n101943: u8 [a0 + 0x16] = a4\n101946: a4 = a3 >> 0x28\n101949: u8 [a0 + 0x15] = a4\n101952: a4 = a3 >> 0x20\n101955: u8 [a0 + 0x14] = a4\n101958: a4 = a3 >> 0x18\n101961: u8 [a0 + 0x13] = a4\n101964: a4 = a3 >> 0x10\n101967: u8 [a0 + 0x12] = a4\n101970: a3 = a3 >> 0x8\n101973: u8 [a0 + 0x11] = a3\n101976: u8 [a0 + 0x8] = a2\n101979: a3 = a2 >> 0x38\n101982: u8 [a0 + 0xf] = a3\n101985: a3 = a2 >> 0x30\n101988: u8 [a0 + 0xe] = a3\n101991: a3 = a2 >> 0x28\n101994: u8 [a0 + 0xd] = a3\n101997: a3 = a2 >> 0x20\n102000: u8 [a0 + 0xc] = a3\n102003: a3 = a2 >> 0x18\n102006: u8 [a0 + 0xb] = a3\n102009: a3 = a2 >> 0x10\n102012: u8 [a0 + 0xa] = a3\n102015: a2 = a2 >> 0x8\n102018: u8 [a0 + 0x9] = a2\n102021: u8 [a0] = a1\n102023: a2 = a1 >> 0x38\n102026: u8 [a0 + 0x7] = a2\n102029: a2 = a1 >> 0x30\n102032: u8 [a0 + 0x6] = a2\n102035: a2 = a1 >> 0x28\n102038: u8 [a0 + 0x5] = a2\n102041: a2 = a1 >> 0x20\n102044: u8 [a0 + 0x4] = a2\n102047: a2 = a1 >> 0x18\n102050: u8 [a0 + 0x3] = a2\n102053: a2 = a1 >> 0x10\n102056: u8 [a0 + 0x2] = a2\n102059: a1 = a1 >> 0x8\n102062: u8 [a0 + 0x1] = a1\n102065: a1 = 0x20\n102068: a0 = u64 [s1]\n102070: ra = 1262, jump @0\n      : @1350 [@dyn 631] (gas: 24)\n102077: a1 = u64 [0x20120]\n102082: a2 = u64 [0x20128]\n102087: a3 = u64 [0x20130]\n102092: a4 = u64 [0x20138]\n102097: u64 [s1 + 0x98] = a1\n102101: u64 [s1 + 0x90] = a2\n102105: u64 [s1 + 0x88] = a3\n102109: u64 [s1 + 0x80] = a4\n102113: a1 = u64 [s1 + 0x20]\n102116: a1 = reverse a1\n102118: a2 = u64 [s1 + 0x28]\n102121: a2 = reverse a2\n102123: a3 = u64 [s1 + 0x38]\n102126: a3 = a3 << 0x20\n102129: u64 [s1 + 0xb8] = a2\n102133: u64 [s1 + 0xb0] = a1\n102137: u64 [s1 + 0xa8] = a3\n102141: u64 [s1 + 160] = 0\n102145: i32 a2 = a0 + 0\n102147: i32 a0 = s1 + 0x80\n102151: a1 = 0x2\n102154: a3 = 0x20\n102157: ecalli 6 // 'deposit_event'\n102159: fallthrough\n      : @1351 (gas: 6)\n102160: sp = s0 + 0xffffffffffffff20\n102164: ra = u64 [sp + 0xd8]\n102168: s0 = u64 [sp + 0xd0]\n102172: s1 = u64 [sp + 0xc8]\n102176: sp = sp + 0xe0\n102180: ret\n      : @1352 (gas: 1)\n102182: trap\n      : @1353 (gas: 15)\n102183: sp = sp + 0xffffffffffffff20\n102187: u64 [sp + 0xd8] = ra\n102191: u64 [sp + 0xd0] = s0\n102195: u64 [sp + 0xc8] = s1\n102199: s0 = sp + 0xe0\n102203: sp = sp & 0xffffffffffffffe0\n102206: t0 = u64 [a1 + 0x18]\n102209: a5 = u64 [a1 + 0x10]\n102212: a4 = u64 [a1]\n102214: s1 = u64 [a1 + 0x8]\n102217: a1 = a5 | t0\n102220: a3 = a4 <u 0x20\n102223: a3 = 0 if s1 != 0\n102225: a3 = 0 if a1 != 0\n102227: jump @1361 if a3 != 0\n      : @1354 (gas: 23)\n102231: a1 = u64 [a2 + 0x18]\n102234: u64 [sp + 0x50] = a1\n102237: a1 = u64 [a2 + 0x10]\n102240: u64 [sp + 0x40] = a1\n102243: a1 = u64 [a2 + 0x8]\n102246: u64 [sp + 0x58] = a1\n102249: a1 = u64 [a2]\n102251: u64 [sp + 0x20] = a1\n102254: a1 = u64 [a0 + 0x18]\n102257: u64 [sp] = a1\n102259: a1 = u64 [a0 + 0x10]\n102262: u64 [sp + 0x8] = a1\n102265: a1 = u64 [a0 + 0x8]\n102268: u64 [sp + 0x10] = a1\n102271: a0 = u64 [a0]\n102273: u64 [sp + 0x18] = a0\n102276: a1 = 0x20\n102279: a0 = 0\n102281: u64 [sp + 0x28] = t0\n102284: u64 [sp + 0x48] = a5\n102287: u64 [sp + 0x38] = s1\n102290: u64 [sp + 0x30] = a4\n102293: ra = 1264, jump @0\n      : @1355 [@dyn 632] (gas: 71)\n102300: a1 = u64 [sp]\n102302: a1 = reverse a1\n102304: a2 = u64 [sp + 0x8]\n102307: a2 = reverse a2\n102309: a3 = u64 [sp + 0x10]\n102312: a3 = reverse a3\n102314: a4 = u64 [sp + 0x18]\n102317: a4 = reverse a4\n102319: a5 = a4 >> 0x38\n102322: u8 [a0 + 0x1f] = a5\n102325: a5 = a4 >> 0x30\n102328: u8 [a0 + 0x1e] = a5\n102331: a5 = a4 >> 0x28\n102334: u8 [a0 + 0x1d] = a5\n102337: a5 = a4 >> 0x20\n102340: u8 [a0 + 0x1c] = a5\n102343: a5 = a4 >> 0x18\n102346: u8 [a0 + 0x1b] = a5\n102349: a5 = a4 >> 0x10\n102352: u8 [a0 + 0x1a] = a5\n102355: a5 = a4 >> 0x8\n102358: u8 [a0 + 0x19] = a5\n102361: u8 [a0 + 0x18] = a4\n102364: u8 [a0 + 0x10] = a3\n102367: a4 = a3 >> 0x38\n102370: u8 [a0 + 0x17] = a4\n102373: a4 = a3 >> 0x30\n102376: u8 [a0 + 0x16] = a4\n102379: a4 = a3 >> 0x28\n102382: u8 [a0 + 0x15] = a4\n102385: a4 = a3 >> 0x20\n102388: u8 [a0 + 0x14] = a4\n102391: a4 = a3 >> 0x18\n102394: u8 [a0 + 0x13] = a4\n102397: a4 = a3 >> 0x10\n102400: u8 [a0 + 0x12] = a4\n102403: a3 = a3 >> 0x8\n102406: u8 [a0 + 0x11] = a3\n102409: u8 [a0 + 0x8] = a2\n102412: a3 = a2 >> 0x38\n102415: u8 [a0 + 0xf] = a3\n102418: a3 = a2 >> 0x30\n102421: u8 [a0 + 0xe] = a3\n102424: a3 = a2 >> 0x28\n102427: u8 [a0 + 0xd] = a3\n102430: a3 = a2 >> 0x20\n102433: u8 [a0 + 0xc] = a3\n102436: a3 = a2 >> 0x18\n102439: u8 [a0 + 0xb] = a3\n102442: a3 = a2 >> 0x10\n102445: u8 [a0 + 0xa] = a3\n102448: a2 = a2 >> 0x8\n102451: u8 [a0 + 0x9] = a2\n102454: u8 [a0] = a1\n102456: a2 = a1 >> 0x38\n102459: u8 [a0 + 0x7] = a2\n102462: a2 = a1 >> 0x30\n102465: u8 [a0 + 0x6] = a2\n102468: a2 = a1 >> 0x28\n102471: u8 [a0 + 0x5] = a2\n102474: a2 = a1 >> 0x20\n102477: u8 [a0 + 0x4] = a2\n102480: a2 = a1 >> 0x18\n102483: u8 [a0 + 0x3] = a2\n102486: a2 = a1 >> 0x10\n102489: u8 [a0 + 0x2] = a2\n102492: a1 = a1 >> 0x8\n102495: u8 [a0 + 0x1] = a1\n102498: a1 = 0x20\n102501: a0 = 0\n102503: ra = 1266, jump @0\n      : @1356 [@dyn 633] (gas: 5)\n102510: i32 a0 = a0 + 0\n102512: i32 a2 = sp + 0xa0\n102516: a1 = 0x20\n102519: ecalli 8 // 'hash_keccak_256'\n102521: fallthrough\n      : @1357 (gas: 112)\n102522: a2 = u64 [sp + 0x20]\n102525: a1 = a2 + 0x1f\n102528: a0 = a1 <u a2\n102531: t1 = a2\n102533: a4 = u64 [sp + 0x58]\n102536: a3 = a4 + a0\n102539: a2 = a3 <u a4\n102542: t0 = a4\n102544: a2 = a0 if a0 == 0\n102547: s1 = u64 [sp + 0x40]\n102550: a2 = a2 + s1\n102553: u64 [sp + 0x18] = a2\n102556: a2 = a2 << 0x3b\n102559: a4 = a3 >> 0x5\n102562: a2 = a2 | a4\n102565: a3 = a3 << 0x3b\n102568: a1 = a1 >> 0x5\n102571: a5 = a1 | a3\n102574: a1 = t1 <u 0x20\n102577: a1 = 0 if t0 != 0\n102579: a3 = u64 [sp + 0xb8]\n102583: t1 = u64 [sp + 0xb0]\n102587: a0 = u64 [sp + 0x50]\n102590: a4 = s1 | a0\n102593: a1 = 0 if a4 != 0\n102595: a4 = reverse a3\n102597: s1 = reverse t1\n102599: a2 = 0 if a1 != 0\n102601: a5 = 0 if a1 != 0\n102603: a5 = a5 + a4\n102606: u64 [sp + 0x58] = a5\n102609: a5 = a5 <u a4\n102612: a3 = s1 + a5\n102615: t0 = a3 + a2\n102618: a3 = t0 ^ s1\n102621: ra = t0 <u s1\n102624: ra = a5 if a3 == 0\n102627: a0 = u64 [sp + 0x30]\n102630: t2 = a0 + 0x1f\n102633: a0 = t2 <u a0\n102636: a2 = u64 [sp + 0x38]\n102639: a3 = a2 + a0\n102642: a5 = a3 <u a2\n102645: a5 = a0 if a0 == 0\n102648: a0 = u64 [sp + 0x48]\n102651: a5 = a5 + a0\n102654: a0 = a5 << 0x3b\n102657: a2 = a3 >> 0x5\n102660: a0 = a0 | a2\n102663: a3 = a3 << 0x3b\n102666: a2 = t2 >> 0x5\n102669: a2 = a2 | a3\n102672: t2 = a4 + a2\n102675: a2 = t2 <u a4\n102678: a3 = s1 + a2\n102681: t1 = a3 + a0\n102684: a0 = t1 ^ s1\n102687: a3 = t1 <u s1\n102690: a3 = a2 if a0 == 0\n102693: a4 = u64 [sp + 0x18]\n102696: a0 = u64 [sp + 0x40]\n102699: a0 = a4 <u a0\n102702: a2 = u64 [sp + 0x50]\n102705: a0 = a0 + a2\n102708: a2 = a4 >> 0x5\n102711: a4 = a0 << 0x3b\n102714: a2 = a2 | a4\n102717: a0 = a0 >> 0x5\n102720: a4 = u64 [sp + 0xa8]\n102724: s1 = u64 [sp + 0xa0]\n102728: a2 = 0 if a1 != 0\n102730: a0 = 0 if a1 != 0\n102732: a1 = reverse a4\n102734: a4 = reverse s1\n102736: u64 [sp + 0x50] = a4\n102739: a0 = a0 + a4\n102742: a2 = a2 + a1\n102745: s1 = a2 <u a1\n102748: a0 = a0 + s1\n102751: a4 = a2 + ra\n102754: s1 = a4 <u a2\n102757: s1 = s1 + a0\n102760: a0 = u64 [sp + 0x48]\n102763: a0 = a5 <u a0\n102766: a2 = u64 [sp + 0x28]\n102769: a0 = a0 + a2\n102772: a5 = a5 >> 0x5\n102775: a2 = a0 << 0x3b\n102778: a2 = a2 | a5\n102781: a5 = u64 [sp + 0x58]\n102784: a0 = a0 >> 0x5\n102787: a2 = a2 + a1\n102790: ra = a2 + a3\n102793: a1 = a2 <u a1\n102796: a2 = ra <u a2\n102799: a3 = u64 [sp + 0x50]\n102802: a0 = a0 + a3\n102805: a0 = a0 + a1\n102808: a3 = a0 + a2\n102811: a0 = t0 ^ t1\n102814: a1 = t0 <u t1\n102817: a2 = a5 <u t2\n102820: a2 = a1 if a0 != 0\n102823: a0 = a4 <u ra\n102826: a1 = s1 ^ a3\n102829: u64 [sp + 0x40] = a3\n102832: a3 = s1 <u a3\n102835: a3 = a0 if a1 == 0\n102838: a0 = a4 ^ ra\n102841: a0 = a0 | a1\n102844: a2 = a3 if a0 != 0\n102847: jump @1361 if a2 == 0\n      : @1358 (gas: 5)\n102851: a0 = a4\n102853: u64 [sp + 0x38] = t2\n102856: u64 [sp + 0x30] = t1\n102859: u64 [sp + 0x28] = ra\n102862: fallthrough\n      : @1359 (gas: 36)\n102863: u64 [sp + 0x48] = a0\n102866: u64 [sp + 0x50] = t0\n102869: u64 [sp + 0x58] = a5\n102872: u64 [sp + 0x90] = a0\n102876: u64 [sp + 0x88] = t0\n102880: u64 [sp + 0x80] = a5\n102884: u64 [sp + 0x98] = s1\n102888: u64 [sp + 184] = 0\n102892: u64 [sp + 176] = 0\n102896: u64 [sp + 168] = 0\n102900: u64 [sp + 160] = 0\n102904: u32 [sp + 96] = 0x20\n102908: i32 a1 = sp + 0x80\n102912: i32 a3 = sp + 0xa0\n102916: i32 a4 = sp + 0x60\n102919: a2 = 0xffffffffffffffff\n102922: a0 = 0\n102924: ecalli 7 // 'get_storage'\n102926: u64 [sp + 0x98] = s1\n102930: a0 = u64 [sp + 0x48]\n102933: u64 [sp + 0x90] = a0\n102937: a0 = u64 [sp + 0x50]\n102940: u64 [sp + 0x88] = a0\n102944: a0 = u64 [sp + 0x58]\n102947: u64 [sp + 0x80] = a0\n102951: u64 [sp + 184] = 0\n102955: u64 [sp + 176] = 0\n102959: u64 [sp + 168] = 0\n102963: u64 [sp + 160] = 0\n102967: i32 a1 = sp + 0x80\n102971: i32 a3 = sp + 0xa0\n102975: a2 = 0xffffffffffffffff\n102978: a4 = 0x20\n102981: a0 = 0\n102983: ecalli 12 // 'set_storage'\n102985: fallthrough\n      : @1360 (gas: 27)\n102986: ra = u64 [sp + 0x28]\n102989: t1 = u64 [sp + 0x30]\n102992: t2 = u64 [sp + 0x38]\n102995: t0 = u64 [sp + 0x50]\n102998: a5 = u64 [sp + 0x58]\n103001: a5 = a5 + 0x1\n103004: a0 = a5 <u 0x1\n103007: t0 = t0 + a0\n103010: a0 = a5 | t0\n103013: a0 = a0 <u 0x1\n103016: a1 = u64 [sp + 0x48]\n103019: a0 = a0 + a1\n103022: a1 = a0 <u a1\n103025: s1 = s1 + a1\n103028: a1 = a5 <u t2\n103031: a2 = t0 ^ t1\n103034: a3 = t0 <u t1\n103037: a3 = a1 if a2 == 0\n103040: a1 = a0 <u ra\n103043: a4 = u64 [sp + 0x40]\n103046: a2 = s1 ^ a4\n103049: a4 = s1 <u a4\n103052: a4 = a1 if a2 == 0\n103055: a1 = a0 ^ ra\n103058: a1 = a1 | a2\n103061: a4 = a3 if a1 == 0\n103064: jump @1359 if a4 != 0\n      : @1361 (gas: 6)\n103068: sp = s0 + 0xffffffffffffff20\n103072: ra = u64 [sp + 0xd8]\n103076: s0 = u64 [sp + 0xd0]\n103080: s1 = u64 [sp + 0xc8]\n103084: sp = sp + 0xe0\n103088: ret\n      : @1362 (gas: 21)\n103090: sp = sp + 0xfffffffffffffd40\n103094: u64 [sp + 0x2b8] = ra\n103098: u64 [sp + 0x2b0] = s0\n103102: u64 [sp + 0x2a8] = s1\n103106: s0 = sp + 0x2c0\n103110: sp = sp & 0xffffffffffffffe0\n103113: a3 = u64 [a1 + 0x10]\n103116: a2 = u64 [a1 + 0x18]\n103119: a4 = u64 [a1 + 0x8]\n103122: a5 = u64 [a1]\n103124: u64 [sp + 0x98] = a2\n103128: u64 [sp + 0x88] = a4\n103132: a1 = a4 | a2\n103135: a2 = a5 | a3\n103138: a2 = a2 | a1\n103141: a2 = a2 >> 0x20\n103144: u64 [sp + 0x90] = a3\n103148: a1 = a1 | a3\n103151: a1 = a1 << 0x20\n103154: a1 = a1 | a2\n103157: jump @1392 if a1 != 0\n      : @1363 (gas: 13)\n103161: a1 = u64 [a0 + 0x18]\n103164: u64 [sp + 0x40] = a1\n103167: a1 = u64 [a0 + 0x10]\n103170: u64 [sp + 0x58] = a1\n103173: a1 = u64 [a0 + 0x8]\n103176: u64 [sp + 0x48] = a1\n103179: a0 = u64 [a0]\n103181: u64 [sp + 0x50] = a0\n103184: u64 [sp + 0x80] = a5\n103188: i32 a0 = a5 + 0\n103190: a1 = 0x20\n103193: u64 [sp + 0x18] = a0\n103196: ra = 1268, jump @0\n      : @1364 [@dyn 634] (gas: 80)\n103203: a1 = u8 [a0 + 0x9]\n103206: a2 = u8 [a0 + 0x8]\n103209: a3 = u8 [a0 + 0xa]\n103212: a4 = u8 [a0 + 0xb]\n103215: a1 = a1 << 0x8\n103218: a1 = a1 | a2\n103221: a3 = a3 << 0x10\n103224: a4 = a4 << 0x18\n103227: a3 = a3 | a4\n103230: a1 = a1 | a3\n103233: a2 = u8 [a0 + 0xd]\n103236: a3 = u8 [a0 + 0xc]\n103239: a4 = u8 [a0 + 0xe]\n103242: a5 = u8 [a0 + 0xf]\n103245: a2 = a2 << 0x8\n103248: a2 = a2 | a3\n103251: a4 = a4 << 0x10\n103254: a5 = a5 << 0x18\n103257: a4 = a4 | a5\n103260: a2 = a2 | a4\n103263: a2 = a2 << 0x20\n103266: t0 = a2 | a1\n103269: a1 = u8 [a0 + 0x1]\n103272: a2 = u8 [a0]\n103274: a3 = u8 [a0 + 0x2]\n103277: a4 = u8 [a0 + 0x3]\n103280: a1 = a1 << 0x8\n103283: a1 = a1 | a2\n103286: a3 = a3 << 0x10\n103289: a4 = a4 << 0x18\n103292: a3 = a3 | a4\n103295: a1 = a1 | a3\n103298: a2 = u8 [a0 + 0x5]\n103301: a3 = u8 [a0 + 0x4]\n103304: a4 = u8 [a0 + 0x6]\n103307: a5 = u8 [a0 + 0x7]\n103310: a2 = a2 << 0x8\n103313: a2 = a2 | a3\n103316: a4 = a4 << 0x10\n103319: a5 = a5 << 0x18\n103322: a4 = a4 | a5\n103325: a2 = a2 | a4\n103328: a2 = a2 << 0x20\n103331: s1 = a2 | a1\n103334: a1 = u8 [a0 + 0x11]\n103337: a2 = u8 [a0 + 0x10]\n103340: a3 = u8 [a0 + 0x12]\n103343: a4 = u8 [a0 + 0x13]\n103346: a1 = a1 << 0x8\n103349: a1 = a1 | a2\n103352: a3 = a3 << 0x10\n103355: a4 = a4 << 0x18\n103358: a3 = a3 | a4\n103361: a1 = a1 | a3\n103364: a2 = u8 [a0 + 0x15]\n103367: a3 = u8 [a0 + 0x14]\n103370: a4 = u8 [a0 + 0x16]\n103373: a5 = u8 [a0 + 0x17]\n103376: a2 = a2 << 0x8\n103379: a2 = a2 | a3\n103382: a4 = a4 << 0x10\n103385: a5 = a5 << 0x18\n103388: a4 = a4 | a5\n103391: a2 = a2 | a4\n103394: a2 = a2 << 0x20\n103397: a1 = a1 | a2\n103400: u64 [sp + 0x60] = a1\n103403: a1 = reverse a1\n103405: u64 [sp + 0x68] = s1\n103408: a3 = reverse s1\n103410: u64 [sp + 0x70] = t0\n103413: a2 = reverse t0\n103415: u64 [sp + 0x30] = a2\n103418: u64 [sp + 0x28] = a3\n103421: a2 = a2 | a3\n103424: u64 [sp + 0x38] = a1\n103427: a1 = a1 <u 0x1\n103430: u64 [sp + 0xd8] = a2\n103434: a1 = 0 if a2 != 0\n103436: jump @1393 if a1 == 0\n      : @1365 (gas: 36)\n103440: a1 = u8 [a0 + 0x18]\n103443: u64 [sp + 0xb8] = a1\n103447: a1 = u8 [a0 + 0x19]\n103450: u64 [sp + 0x78] = a1\n103453: a1 = u8 [a0 + 0x1a]\n103456: u64 [sp + 0xa8] = a1\n103460: a1 = u8 [a0 + 0x1b]\n103463: u64 [sp + 0xa0] = a1\n103467: a1 = u8 [a0 + 0x1c]\n103470: u64 [sp + 0xd0] = a1\n103474: a1 = u8 [a0 + 0x1d]\n103477: u64 [sp + 0xb0] = a1\n103481: a1 = u8 [a0 + 0x1e]\n103484: u64 [sp + 0xc8] = a1\n103488: a0 = u8 [a0 + 0x1f]\n103491: u64 [sp + 0xc0] = a0\n103495: u32 [sp + 576] = 0x20\n103500: a0 = u64 [sp + 0x58]\n103503: u64 [sp + 0x270] = a0\n103507: a0 = u64 [sp + 0x48]\n103510: u64 [sp + 0x268] = a0\n103514: a0 = u64 [sp + 0x50]\n103517: u64 [sp + 0x260] = a0\n103521: s1 = u64 [sp + 0x40]\n103524: u64 [sp + 0x278] = s1\n103528: u64 [sp + 664] = 0\n103532: u64 [sp + 656] = 0\n103536: u64 [sp + 648] = 0\n103540: u64 [sp + 640] = 0\n103544: i32 a1 = sp + 0x260\n103548: i32 a3 = sp + 0x280\n103552: i32 a4 = sp + 0x240\n103556: a2 = 0xffffffffffffffff\n103559: a0 = 0\n103561: ecalli 7 // 'get_storage'\n103563: fallthrough\n      : @1366 (gas: 28)\n103564: a0 = u64 [sp + 0x290]\n103568: a1 = u64 [sp + 0x288]\n103572: a2 = u64 [sp + 0x280]\n103576: a3 = u64 [sp + 0x298]\n103580: a4 = a0 << 0x3f\n103583: a5 = a1 >> 0x1\n103586: a4 = a4 | a5\n103589: a5 = a3 << 0x3f\n103592: a0 = a0 >> 0x1\n103595: t2 = s1\n103597: s1 = a0 | a5\n103600: a1 = a1 << 0x3f\n103603: a5 = a2 >> 0x1\n103606: a1 = a1 | a5\n103609: a5 = a3 >> 0x1\n103612: a2 = a2 & 0x1\n103615: a0 = -a2\n103617: t0 = a2 <u 0x1\n103620: a3 = a1 & 0x7f\n103623: t1 = a0 & s1\n103626: a4 = a4 & a0\n103629: a3 = a1 if a2 != 0\n103632: a1 = a0 & a5\n103635: a0 = a3 <u 0x20\n103638: a0 = 0 if a4 != 0\n103640: a2 = t1 | a1\n103643: a0 = 0 if a2 != 0\n103645: jump @1395 if t0 != a0\n      : @1367 (gas: 47)\n103649: a0 = u64 [sp + 0x78]\n103652: a0 = a0 << 0x8\n103655: a2 = u64 [sp + 0xb8]\n103659: a0 = a0 | a2\n103662: a2 = u64 [sp + 0xa8]\n103666: a2 = a2 << 0x10\n103669: a5 = u64 [sp + 0xa0]\n103673: a5 = a5 << 0x18\n103676: a2 = a2 | a5\n103679: a0 = a0 | a2\n103682: a2 = u64 [sp + 0xb0]\n103686: a2 = a2 << 0x8\n103689: a5 = u64 [sp + 0xd0]\n103693: a2 = a2 | a5\n103696: a5 = u64 [sp + 0xc8]\n103700: a5 = a5 << 0x10\n103703: s1 = u64 [sp + 0xc0]\n103707: s1 = s1 << 0x18\n103710: a5 = a5 | s1\n103713: a2 = a2 | a5\n103716: a2 = a2 << 0x20\n103719: a0 = a0 | a2\n103722: u64 [sp + 0xd0] = a0\n103726: a0 = reverse a0\n103728: u64 [sp + 0x20] = a0\n103731: u64 [sp + 0x1e0] = a0\n103735: u64 [sp + 0x200] = a3\n103739: a0 = u64 [sp + 0x50]\n103742: u64 [sp + 0x220] = a0\n103746: a0 = u64 [sp + 0x38]\n103749: u64 [sp + 0x1e8] = a0\n103753: u64 [sp + 0x208] = a4\n103757: a0 = u64 [sp + 0x48]\n103760: u64 [sp + 0x228] = a0\n103764: a0 = u64 [sp + 0x30]\n103767: u64 [sp + 0x1f0] = a0\n103771: u64 [sp + 0x210] = t1\n103775: a0 = u64 [sp + 0x58]\n103778: u64 [sp + 0x230] = a0\n103782: s1 = u64 [sp + 0x28]\n103785: u64 [sp + 0x1f8] = s1\n103789: u64 [sp + 0x218] = a1\n103793: a0 = sp + 0x220\n103797: a1 = sp + 0x200\n103801: a2 = sp + 0x1e0\n103805: u64 [sp + 0x238] = t2\n103809: ra = 1270, jump @1353\n      : @1368 [@dyn 635] (gas: 16)\n103815: a3 = u64 [sp + 0x20]\n103818: a2 = u64 [sp + 0x38]\n103821: a0 = a2 >u 0\n103823: a1 = a3 <u 0x20\n103826: a1 = a1 ^ 0x1\n103829: a1 = a0 if a2 != 0\n103832: a0 = u64 [sp + 0x30]\n103835: a0 = a0 >u 0\n103837: a2 = s1 >u 0\n103839: a2 = a0 if s1 == 0\n103842: a0 = u64 [sp + 0xd8]\n103846: a2 = a1 if a0 == 0\n103849: a4 = u64 [sp + 0x40]\n103852: a5 = u64 [sp + 0x58]\n103855: s1 = u64 [sp + 0x50]\n103858: jump @1379 if a2 == 0\n      : @1369 (gas: 5)\n103862: a3 = a3 & 0xffffffffffffffe0\n103865: u64 [sp + 0x18] = a3\n103868: a1 = 0x20\n103871: a0 = 0\n103873: ra = 1272, jump @0\n      : @1370 [@dyn 636] (gas: 70)\n103880: a1 = u64 [sp + 0x40]\n103883: a1 = reverse a1\n103885: a2 = u64 [sp + 0x58]\n103888: a2 = reverse a2\n103890: a3 = u64 [sp + 0x48]\n103893: a3 = reverse a3\n103895: a4 = reverse s1\n103897: a5 = a4 >> 0x38\n103900: u8 [a0 + 0x1f] = a5\n103903: a5 = a4 >> 0x30\n103906: u8 [a0 + 0x1e] = a5\n103909: a5 = a4 >> 0x28\n103912: u8 [a0 + 0x1d] = a5\n103915: a5 = a4 >> 0x20\n103918: u8 [a0 + 0x1c] = a5\n103921: a5 = a4 >> 0x18\n103924: u8 [a0 + 0x1b] = a5\n103927: a5 = a4 >> 0x10\n103930: u8 [a0 + 0x1a] = a5\n103933: a5 = a4 >> 0x8\n103936: u8 [a0 + 0x19] = a5\n103939: u8 [a0 + 0x18] = a4\n103942: u8 [a0 + 0x10] = a3\n103945: a4 = a3 >> 0x38\n103948: u8 [a0 + 0x17] = a4\n103951: a4 = a3 >> 0x30\n103954: u8 [a0 + 0x16] = a4\n103957: a4 = a3 >> 0x28\n103960: u8 [a0 + 0x15] = a4\n103963: a4 = a3 >> 0x20\n103966: u8 [a0 + 0x14] = a4\n103969: a4 = a3 >> 0x18\n103972: u8 [a0 + 0x13] = a4\n103975: a4 = a3 >> 0x10\n103978: u8 [a0 + 0x12] = a4\n103981: a3 = a3 >> 0x8\n103984: u8 [a0 + 0x11] = a3\n103987: u8 [a0 + 0x8] = a2\n103990: a3 = a2 >> 0x38\n103993: u8 [a0 + 0xf] = a3\n103996: a3 = a2 >> 0x30\n103999: u8 [a0 + 0xe] = a3\n104002: a3 = a2 >> 0x28\n104005: u8 [a0 + 0xd] = a3\n104008: a3 = a2 >> 0x20\n104011: u8 [a0 + 0xc] = a3\n104014: a3 = a2 >> 0x18\n104017: u8 [a0 + 0xb] = a3\n104020: a3 = a2 >> 0x10\n104023: u8 [a0 + 0xa] = a3\n104026: a2 = a2 >> 0x8\n104029: u8 [a0 + 0x9] = a2\n104032: u8 [a0] = a1\n104034: a2 = a1 >> 0x38\n104037: u8 [a0 + 0x7] = a2\n104040: a2 = a1 >> 0x30\n104043: u8 [a0 + 0x6] = a2\n104046: a2 = a1 >> 0x28\n104049: u8 [a0 + 0x5] = a2\n104052: a2 = a1 >> 0x20\n104055: u8 [a0 + 0x4] = a2\n104058: a2 = a1 >> 0x18\n104061: u8 [a0 + 0x3] = a2\n104064: a2 = a1 >> 0x10\n104067: u8 [a0 + 0x2] = a2\n104070: a1 = a1 >> 0x8\n104073: u8 [a0 + 0x1] = a1\n104076: a1 = 0x20\n104079: a0 = 0\n104081: ra = 1274, jump @0\n      : @1371 [@dyn 637] (gas: 5)\n104088: i32 a0 = a0 + 0\n104090: i32 a2 = sp + 0x280\n104094: a1 = 0x20\n104097: ecalli 8 // 'hash_keccak_256'\n104099: fallthrough\n      : @1372 (gas: 13)\n104100: a0 = u64 [sp + 0x280]\n104104: a1 = u64 [sp + 0x288]\n104108: a2 = u64 [sp + 0x290]\n104112: a3 = u64 [sp + 0x298]\n104116: a0 = reverse a0\n104118: u64 [sp + 0xd0] = a0\n104122: t0 = reverse a1\n104124: a0 = reverse a2\n104126: u64 [sp + 0xd8] = a0\n104130: a0 = reverse a3\n104132: u64 [sp + 0xc0] = a0\n104136: a0 = u64 [sp + 0x18]\n104139: jump @1383 if a0 == 0\n      : @1373 (gas: 118)\n104143: u64 [sp + 176] = 0\n104147: u64 [sp + 184] = 0\n104151: u64 [sp + 168] = 0\n104155: ra = u64 [sp + 0x80]\n104159: s1 = ra + 0x20\n104162: a0 = s1 <u ra\n104165: t2 = u64 [sp + 0x88]\n104169: a2 = t2 + a0\n104172: a3 = a2 <u t2\n104175: a3 = a0 if a0 == 0\n104178: t1 = u64 [sp + 0x90]\n104182: a3 = a3 + t1\n104185: a0 = a3 <u t1\n104188: u64 [sp + 0xc8] = t0\n104192: t0 = u64 [sp + 0x98]\n104196: t0 = t0 + a0\n104199: a4 = a3 >u 0\n104201: a5 = t0 >u 0\n104203: a5 = a4 if t0 == 0\n104206: a4 = 0x100000000\n104216: a1 = s1\n104218: a0 = maxu(s1, a4)\n104221: s1 = a4 if a5 == 0\n104224: a1 = a4 if a2 == 0\n104227: a0 = a1 if a2 != 0\n104230: a1 = a3 | t0\n104233: a0 = s1 if a1 != 0\n104236: a4 = a2\n104238: a4 = 0 if a5 == 0\n104240: a4 = a2 if a1 == 0\n104243: a1 = a3\n104245: a1 = 0 if t0 == 0\n104247: a1 = a3 if t0 == 0\n104250: a2 = t2 ^ 0xffffffffffffffff\n104253: a4 = a4 + a2\n104256: a3 = ra ^ 0xffffffffffffffff\n104259: a0 = a0 + a3\n104262: a3 = a0 <u a3\n104265: a4 = a4 + a3\n104268: a5 = a4 ^ a2\n104271: a2 = a4 <u a2\n104274: a2 = a3 if a5 == 0\n104277: a5 = t1 ^ 0xffffffffffffffff\n104280: u64 [sp + 0x78] = a5\n104283: a5 = a5 + a1\n104286: s1 = a5 + a2\n104289: a1 = s1 << 0x3b\n104292: a2 = a4 >> 0x5\n104295: a1 = a1 | a2\n104298: a4 = a4 << 0x3b\n104301: a0 = a0 >> 0x5\n104304: a2 = a0 | a4\n104307: u64 [sp + 0xa0] = a2\n104311: a4 = u64 [sp + 0x18]\n104314: a0 = a4 <u 0x1\n104317: a3 = -a0\n104319: ra = a0 << 0x3b\n104322: a4 = a4 + 0xffffffffffffffff\n104325: a4 = a4 >> 0x5\n104328: a0 = a4 - ra\n104331: t2 = a1 ^ a3\n104334: a4 = a1 <u a3\n104337: t1 = a2 <u a0\n104340: t1 = a4 if t2 != 0\n104343: a2 = u64 [sp + 0x98]\n104347: a4 = a2 ^ 0xffffffffffffffff\n104350: t0 = t0 + a4\n104353: a2 = u64 [sp + 0x78]\n104356: a4 = a5 <u a2\n104359: a4 = a4 + t0\n104362: a5 = s1 <u a5\n104365: a4 = a4 + a5\n104368: s1 = s1 >> 0x5\n104371: a5 = a4 << 0x3b\n104374: a5 = a5 | s1\n104377: a4 = a4 >> 0x5\n104380: s1 = a3 >> 0x5\n104383: t0 = s1 - ra\n104386: a2 = a5 <u t0\n104389: t2 = a4 ^ s1\n104392: ra = a4 <u s1\n104395: ra = a2 if t2 == 0\n104398: a2 = a5 ^ t0\n104401: a2 = a2 | t2\n104404: ra = t1 if a2 == 0\n104407: a2 = u64 [sp + 0xa0]\n104411: a2 = a0 if ra == 0\n104414: a1 = a3 if ra == 0\n104417: a4 = s1 if ra == 0\n104420: a5 = t0 if ra == 0\n104423: a0 = a5 >> 0x3b\n104426: a4 = a4 << 0x5\n104429: t0 = a4 | a0\n104432: a4 = u64 [sp + 0xb0]\n104436: a0 = a1 >> 0x3b\n104439: a5 = a5 << 0x5\n104442: t2 = a5 | a0\n104445: a5 = u64 [sp + 0xb8]\n104449: a3 = a2 >> 0x3b\n104452: a1 = a1 << 0x5\n104455: a0 = a1 | a3\n104458: t1 = a2 << 0x5\n104461: a3 = t1 + 0x40\n104464: u64 [sp + 0x78] = a3\n104467: a3 = a3 <u t1\n104470: s1 = u64 [sp + 0xa8]\n104474: a1 = a0 + a3\n104477: u64 [sp + 0x70] = a1\n104480: a1 = a1 <u a0\n104483: a1 = a3 if a3 == 0\n104486: a1 = a1 + t2\n104489: u64 [sp + 0x68] = a1\n104492: a1 = a1 <u t2\n104495: a1 = a1 + t0\n104498: u64 [sp + 0x60] = a1\n104501: a2 = 0x20\n104504: a3 = u64 [sp + 0xc8]\n104508: fallthrough\n      : @1374 (gas: 31)\n104509: u64 [sp + 0xa8] = s1\n104513: u64 [sp + 0xc8] = a3\n104517: a0 = u64 [sp + 0x80]\n104521: a0 = a0 + a2\n104524: u64 [sp + 0xa0] = a2\n104528: a1 = a0 <u a2\n104531: a2 = u64 [sp + 0x88]\n104535: a2 = a2 + a4\n104538: a2 = a2 + a1\n104541: a3 = a2 ^ a4\n104544: u64 [sp + 0xb0] = a4\n104548: a4 = a2 <u a4\n104551: a4 = a1 if a3 == 0\n104554: a1 = u64 [sp + 0x90]\n104558: a1 = a1 + a5\n104561: u64 [sp + 0xb8] = a5\n104565: a3 = a1 <u a5\n104568: a5 = u64 [sp + 0x98]\n104572: a5 = a5 + s1\n104575: a3 = a3 + a5\n104578: a4 = a4 + a1\n104581: a1 = a4 <u a1\n104584: a1 = a1 + a3\n104587: a1 = a1 | a2\n104590: a2 = a0 | a4\n104593: a2 = a2 | a1\n104596: a1 = a1 | a4\n104599: a2 = a2 >> 0x20\n104602: a1 = a1 << 0x20\n104605: a1 = a1 | a2\n104608: jump @1392 if a1 != 0\n      : @1375 (gas: 3)\n104612: i32 a0 = a0 + 0\n104614: a1 = 0x20\n104617: ra = 1276, jump @0\n      : @1376 [@dyn 638] (gas: 111)\n104624: a1 = u8 [a0 + 0x1]\n104627: a2 = u8 [a0]\n104629: a3 = u8 [a0 + 0x2]\n104632: a4 = u8 [a0 + 0x3]\n104635: a1 = a1 << 0x8\n104638: a1 = a1 | a2\n104641: a3 = a3 << 0x10\n104644: a4 = a4 << 0x18\n104647: a3 = a3 | a4\n104650: a1 = a1 | a3\n104653: a2 = u8 [a0 + 0x5]\n104656: a3 = u8 [a0 + 0x4]\n104659: a4 = u8 [a0 + 0x6]\n104662: a5 = u8 [a0 + 0x7]\n104665: a2 = a2 << 0x8\n104668: a2 = a2 | a3\n104671: a4 = a4 << 0x10\n104674: a5 = a5 << 0x18\n104677: a4 = a4 | a5\n104680: a2 = a2 | a4\n104683: a2 = a2 << 0x20\n104686: t0 = a2 | a1\n104689: a2 = u8 [a0 + 0x9]\n104692: a3 = u8 [a0 + 0x8]\n104695: a4 = u8 [a0 + 0xa]\n104698: a5 = u8 [a0 + 0xb]\n104701: a2 = a2 << 0x8\n104704: a2 = a2 | a3\n104707: a4 = a4 << 0x10\n104710: a5 = a5 << 0x18\n104713: a4 = a4 | a5\n104716: a2 = a2 | a4\n104719: a3 = u8 [a0 + 0xd]\n104722: a4 = u8 [a0 + 0xc]\n104725: a5 = u8 [a0 + 0xe]\n104728: s1 = u8 [a0 + 0xf]\n104731: a3 = a3 << 0x8\n104734: a3 = a3 | a4\n104737: a5 = a5 << 0x10\n104740: s1 = s1 << 0x18\n104743: a5 = a5 | s1\n104746: a3 = a3 | a5\n104749: a3 = a3 << 0x20\n104752: a2 = a2 | a3\n104755: a3 = u8 [a0 + 0x11]\n104758: a4 = u8 [a0 + 0x10]\n104761: a5 = u8 [a0 + 0x12]\n104764: s1 = u8 [a0 + 0x13]\n104767: a3 = a3 << 0x8\n104770: a3 = a3 | a4\n104773: a5 = a5 << 0x10\n104776: s1 = s1 << 0x18\n104779: a5 = a5 | s1\n104782: a3 = a3 | a5\n104785: a4 = u8 [a0 + 0x15]\n104788: a5 = u8 [a0 + 0x14]\n104791: s1 = u8 [a0 + 0x16]\n104794: a1 = u8 [a0 + 0x17]\n104797: a4 = a4 << 0x8\n104800: a4 = a4 | a5\n104803: s1 = s1 << 0x10\n104806: a1 = a1 << 0x18\n104809: a1 = a1 | s1\n104812: a1 = a1 | a4\n104815: a1 = a1 << 0x20\n104818: a3 = a3 | a1\n104821: a1 = u8 [a0 + 0x19]\n104824: a4 = u8 [a0 + 0x18]\n104827: a5 = u8 [a0 + 0x1a]\n104830: s1 = u8 [a0 + 0x1b]\n104833: a1 = a1 << 0x8\n104836: a1 = a1 | a4\n104839: a5 = a5 << 0x10\n104842: s1 = s1 << 0x18\n104845: a5 = a5 | s1\n104848: a1 = a1 | a5\n104851: a4 = u8 [a0 + 0x1d]\n104854: a5 = u8 [a0 + 0x1c]\n104857: s1 = u8 [a0 + 0x1e]\n104860: a0 = u8 [a0 + 0x1f]\n104863: a4 = a4 << 0x8\n104866: a4 = a4 | a5\n104869: s1 = s1 << 0x10\n104872: a0 = a0 << 0x18\n104875: a0 = a0 | s1\n104878: a0 = a0 | a4\n104881: a0 = a0 << 0x20\n104884: a0 = a0 | a1\n104887: a0 = reverse a0\n104889: a1 = reverse a3\n104891: a2 = reverse a2\n104893: a3 = reverse t0\n104895: a4 = u64 [sp + 0xd0]\n104899: u64 [sp + 0x278] = a4\n104903: a4 = u64 [sp + 0xc8]\n104907: u64 [sp + 0x270] = a4\n104911: a4 = u64 [sp + 0xd8]\n104915: u64 [sp + 0x268] = a4\n104919: s1 = u64 [sp + 0xc0]\n104923: u64 [sp + 0x260] = s1\n104927: u64 [sp + 0x298] = a3\n104931: u64 [sp + 0x290] = a2\n104935: u64 [sp + 0x288] = a1\n104939: u64 [sp + 0x280] = a0\n104943: i32 a1 = sp + 0x260\n104947: i32 a3 = sp + 0x280\n104951: a2 = 0xffffffffffffffff\n104954: a4 = 0x20\n104957: a0 = 0\n104959: ecalli 12 // 'set_storage'\n104961: fallthrough\n      : @1377 (gas: 42)\n104962: s1 = s1 + 0x1\n104965: a0 = s1 <u 0x1\n104968: a1 = u64 [sp + 0xd8]\n104972: a1 = a1 + a0\n104975: u64 [sp + 0xc0] = s1\n104979: u64 [sp + 0xd8] = a1\n104983: a0 = s1 | a1\n104986: a0 = a0 <u 0x1\n104989: a1 = u64 [sp + 0xc8]\n104993: t0 = a1 + a0\n104996: a2 = t0 <u a1\n104999: a0 = u64 [sp + 0xa0]\n105003: a1 = a0 + 0x20\n105006: a0 = a1 <u a0\n105009: a3 = u64 [sp + 0xb0]\n105013: t2 = a3 + a0\n105016: a3 = t2 <u a3\n105019: a3 = a0 if a0 == 0\n105022: a4 = u64 [sp + 0xb8]\n105026: a0 = a4 + a3\n105029: a3 = a0 <u a4\n105032: s1 = u64 [sp + 0xa8]\n105036: s1 = s1 + a3\n105039: a3 = u64 [sp + 0x68]\n105042: a3 = a3 ^ a0\n105045: a4 = u64 [sp + 0x78]\n105048: a4 = a4 ^ a1\n105051: a3 = a3 | a4\n105054: a4 = u64 [sp + 0x60]\n105057: a4 = a4 ^ s1\n105060: a5 = u64 [sp + 0x70]\n105063: a5 = t2 ^ a5\n105066: a4 = a4 | a5\n105069: t1 = a3 | a4\n105072: a3 = u64 [sp + 0xd0]\n105076: a3 = a3 + a2\n105079: u64 [sp + 0xd0] = a3\n105083: a2 = a1\n105085: a4 = t2\n105087: a5 = a0\n105089: a3 = t0\n105091: jump @1374 if t1 != 0\n      : @1378 (gas: 1)\n105095: jump @1384\n      : @1379 (gas: 8)\n105098: a0 = u64 [sp + 0x68]\n105101: a1 = u64 [sp + 0x60]\n105104: a0 = a0 | a1\n105107: a1 = u64 [sp + 0x70]\n105110: a2 = u64 [sp + 0xd0]\n105114: a1 = a1 | a2\n105117: a0 = a0 | a1\n105120: jump @1389 if a0 == 0\n      : @1380 (gas: 10)\n105124: a0 = u64 [sp + 0x98]\n105128: a1 = u64 [sp + 0x90]\n105132: a0 = a0 | a1\n105135: a1 = 0xffffffe0\n105145: a2 = u64 [sp + 0x80]\n105149: a1 = a2 <u a1\n105152: a2 = u64 [sp + 0x88]\n105156: a1 = 0 if a2 != 0\n105158: a1 = 0 if a0 != 0\n105160: jump @1392 if a1 == 0\n      : @1381 (gas: 4)\n105164: a0 = u64 [sp + 0x18]\n105167: i32 a0 = a0 + 0x20\n105170: a1 = 0x20\n105173: ra = 1278, jump @0\n      : @1382 [@dyn 639] (gas: 280)\n105180: a1 = u8 [a0 + 0x19]\n105183: a2 = u8 [a0 + 0x18]\n105186: a3 = u8 [a0 + 0x1a]\n105189: a4 = u8 [a0 + 0x1b]\n105192: a1 = a1 << 0x8\n105195: a1 = a1 | a2\n105198: a3 = a3 << 0x10\n105201: a4 = a4 << 0x18\n105204: a3 = a3 | a4\n105207: a1 = a1 | a3\n105210: a2 = u8 [a0 + 0x1d]\n105213: a3 = u8 [a0 + 0x1c]\n105216: a4 = u8 [a0 + 0x1e]\n105219: a5 = u8 [a0 + 0x1f]\n105222: a2 = a2 << 0x8\n105225: a2 = a2 | a3\n105228: a4 = a4 << 0x10\n105231: a5 = a5 << 0x18\n105234: a4 = a4 | a5\n105237: a2 = a2 | a4\n105240: a2 = a2 << 0x20\n105243: t0 = a2 | a1\n105246: a1 = u8 [a0 + 0x11]\n105249: a2 = u8 [a0 + 0x10]\n105252: a3 = u8 [a0 + 0x12]\n105255: a4 = u8 [a0 + 0x13]\n105258: a1 = a1 << 0x8\n105261: a1 = a1 | a2\n105264: a3 = a3 << 0x10\n105267: a4 = a4 << 0x18\n105270: a3 = a3 | a4\n105273: a1 = a1 | a3\n105276: a2 = u8 [a0 + 0x15]\n105279: a3 = u8 [a0 + 0x14]\n105282: a4 = u8 [a0 + 0x16]\n105285: a5 = u8 [a0 + 0x17]\n105288: a2 = a2 << 0x8\n105291: a2 = a2 | a3\n105294: a4 = a4 << 0x10\n105297: a5 = a5 << 0x18\n105300: a4 = a4 | a5\n105303: a2 = a2 | a4\n105306: a2 = a2 << 0x20\n105309: a1 = a1 | a2\n105312: u64 [sp + 0xd8] = a1\n105316: a1 = u8 [a0 + 0x9]\n105319: a3 = u8 [a0 + 0x8]\n105322: a4 = u8 [a0 + 0xa]\n105325: a5 = u8 [a0 + 0xb]\n105328: a1 = a1 << 0x8\n105331: a1 = a1 | a3\n105334: a4 = a4 << 0x10\n105337: a5 = a5 << 0x18\n105340: a4 = a4 | a5\n105343: a1 = a1 | a4\n105346: a3 = u8 [a0 + 0xd]\n105349: a4 = u8 [a0 + 0xc]\n105352: a5 = u8 [a0 + 0xe]\n105355: s1 = u8 [a0 + 0xf]\n105358: a3 = a3 << 0x8\n105361: a3 = a3 | a4\n105364: a5 = a5 << 0x10\n105367: s1 = s1 << 0x18\n105370: a5 = a5 | s1\n105373: a3 = a3 | a5\n105376: a3 = a3 << 0x20\n105379: a1 = a1 | a3\n105382: u64 [sp + 0xd0] = a1\n105386: a1 = u8 [a0 + 0x1]\n105389: a4 = u8 [a0]\n105391: a5 = u8 [a0 + 0x2]\n105394: s1 = u8 [a0 + 0x3]\n105397: a1 = a1 << 0x8\n105400: a1 = a1 | a4\n105403: a5 = a5 << 0x10\n105406: s1 = s1 << 0x18\n105409: a5 = a5 | s1\n105412: a1 = a1 | a5\n105415: a4 = u8 [a0 + 0x5]\n105418: a5 = u8 [a0 + 0x4]\n105421: s1 = u8 [a0 + 0x6]\n105424: a0 = u8 [a0 + 0x7]\n105427: a4 = a4 << 0x8\n105430: a4 = a4 | a5\n105433: s1 = s1 << 0x10\n105436: a0 = a0 << 0x18\n105439: a0 = a0 | s1\n105442: a0 = a0 | a4\n105445: a0 = a0 << 0x20\n105448: ra = a0 | a1\n105451: u8 [sp + 479] = 0\n105455: u8 [sp + 478] = 0\n105459: u8 [sp + 477] = 0\n105463: u8 [sp + 476] = 0\n105467: u8 [sp + 475] = 0\n105471: u8 [sp + 474] = 0\n105475: u8 [sp + 473] = 0\n105479: u8 [sp + 472] = 0\n105483: u8 [sp + 471] = 0\n105487: u8 [sp + 470] = 0\n105491: u8 [sp + 469] = 0\n105495: u8 [sp + 468] = 0\n105499: u8 [sp + 467] = 0\n105503: u8 [sp + 466] = 0\n105507: u8 [sp + 465] = 0\n105511: u8 [sp + 464] = 0\n105515: u8 [sp + 463] = 0\n105519: u8 [sp + 462] = 0\n105523: u8 [sp + 461] = 0\n105527: u8 [sp + 460] = 0\n105531: u8 [sp + 459] = 0\n105535: u8 [sp + 458] = 0\n105539: u8 [sp + 457] = 0\n105543: u8 [sp + 456] = 0\n105547: u8 [sp + 455] = 0\n105551: u8 [sp + 454] = 0\n105555: u8 [sp + 453] = 0\n105559: u8 [sp + 452] = 0\n105563: u8 [sp + 451] = 0\n105567: u8 [sp + 450] = 0\n105571: u8 [sp + 449] = 0\n105575: u8 [sp + 448] = 0\n105579: u8 [sp + 447] = 0xff\n105585: u8 [sp + 446] = 0xff\n105591: u8 [sp + 445] = 0xff\n105597: u8 [sp + 443] = 0xff\n105603: u8 [sp + 440] = 0xffffffffffffffff\n105608: u8 [sp + 439] = 0xff\n105614: u8 [sp + 438] = 0xff\n105620: u8 [sp + 437] = 0xff\n105626: u8 [sp + 435] = 0xff\n105632: u8 [sp + 432] = 0xffffffffffffffff\n105637: u8 [sp + 431] = 0xff\n105643: u8 [sp + 430] = 0xff\n105649: u8 [sp + 429] = 0xff\n105655: u8 [sp + 427] = 0xff\n105661: u8 [sp + 424] = 0xffffffffffffffff\n105666: u8 [sp + 423] = 0xff\n105672: u8 [sp + 422] = 0xff\n105678: u8 [sp + 421] = 0xff\n105684: u8 [sp + 419] = 0xff\n105690: u8 [sp + 416] = 0xffffffffffffffff\n105695: a1 = 0xffffffff\n105705: u8 [sp + 0x1bc] = a1\n105709: a5 = 0xffffffffffff\n105719: u8 [sp + 0x1ba] = a5\n105723: a4 = 0xffffffffffffff\n105733: u8 [sp + 0x1b9] = a4\n105737: u8 [sp + 0x1b4] = a1\n105741: u8 [sp + 0x1b2] = a5\n105745: u8 [sp + 0x1b1] = a4\n105749: u8 [sp + 0x1ac] = a1\n105753: u8 [sp + 0x1aa] = a5\n105757: u8 [sp + 0x1a9] = a4\n105761: u8 [sp + 0x1a4] = a1\n105765: u8 [sp + 0x1a2] = a5\n105769: u8 [sp + 0x1a1] = a4\n105773: t2 = u64 [sp + 0x20]\n105776: a4 = t2 & 0x1f\n105779: a1 = sp + 0x1a0\n105783: a4 = a4 + a1\n105786: a1 = u8 [a4 + 0x19]\n105789: a5 = u8 [a4 + 0x18]\n105792: s1 = u8 [a4 + 0x1a]\n105795: a2 = u8 [a4 + 0x1b]\n105798: a1 = a1 << 0x8\n105801: a1 = a1 | a5\n105804: s1 = s1 << 0x10\n105807: a2 = a2 << 0x18\n105810: a2 = a2 | s1\n105813: a1 = a1 | a2\n105816: a2 = u8 [a4 + 0x1d]\n105819: a5 = u8 [a4 + 0x1c]\n105822: s1 = u8 [a4 + 0x1e]\n105825: a3 = u8 [a4 + 0x1f]\n105828: a2 = a2 << 0x8\n105831: a2 = a2 | a5\n105834: s1 = s1 << 0x10\n105837: a3 = a3 << 0x18\n105840: a3 = a3 | s1\n105843: a2 = a2 | a3\n105846: a2 = a2 << 0x20\n105849: t1 = a2 | a1\n105852: a1 = u8 [a4 + 0x11]\n105855: a2 = u8 [a4 + 0x10]\n105858: a3 = u8 [a4 + 0x12]\n105861: s1 = u8 [a4 + 0x13]\n105864: a1 = a1 << 0x8\n105867: a1 = a1 | a2\n105870: a3 = a3 << 0x10\n105873: s1 = s1 << 0x18\n105876: a3 = a3 | s1\n105879: a1 = a1 | a3\n105882: a2 = u8 [a4 + 0x15]\n105885: a3 = u8 [a4 + 0x14]\n105888: s1 = u8 [a4 + 0x16]\n105891: a0 = u8 [a4 + 0x17]\n105894: a2 = a2 << 0x8\n105897: a2 = a2 | a3\n105900: s1 = s1 << 0x10\n105903: a0 = a0 << 0x18\n105906: a0 = a0 | s1\n105909: a0 = a0 | a2\n105912: a0 = a0 << 0x20\n105915: s1 = a0 | a1\n105918: a0 = u8 [a4 + 0x9]\n105921: a1 = u8 [a4 + 0x8]\n105924: a2 = u8 [a4 + 0xa]\n105927: a3 = u8 [a4 + 0xb]\n105930: a0 = a0 << 0x8\n105933: a0 = a0 | a1\n105936: a2 = a2 << 0x10\n105939: a3 = a3 << 0x18\n105942: a2 = a2 | a3\n105945: a5 = a2 | a0\n105948: a1 = u8 [a4 + 0xd]\n105951: a2 = u8 [a4 + 0xc]\n105954: a3 = u8 [a4 + 0xe]\n105957: a0 = u8 [a4 + 0xf]\n105960: a1 = a1 << 0x8\n105963: a1 = a1 | a2\n105966: a3 = a3 << 0x10\n105969: a0 = a0 << 0x18\n105972: a0 = a0 | a3\n105975: a0 = a0 | a1\n105978: a0 = a0 << 0x20\n105981: a1 = a0 | a5\n105984: a0 = u8 [a4 + 0x1]\n105987: a2 = u8 [a4]\n105989: a3 = u8 [a4 + 0x2]\n105992: a5 = u8 [a4 + 0x3]\n105995: a0 = a0 << 0x8\n105998: a0 = a0 | a2\n106001: a3 = a3 << 0x10\n106004: a5 = a5 << 0x18\n106007: a3 = a3 | a5\n106010: a0 = a0 | a3\n106013: a2 = u8 [a4 + 0x5]\n106016: a3 = u8 [a4 + 0x4]\n106019: a5 = u8 [a4 + 0x6]\n106022: a4 = u8 [a4 + 0x7]\n106025: a2 = a2 << 0x8\n106028: a2 = a2 | a3\n106031: a5 = a5 << 0x10\n106034: a4 = a4 << 0x18\n106037: a4 = a4 | a5\n106040: a2 = a2 | a4\n106043: a2 = a2 << 0x20\n106046: a0 = a0 | a2\n106049: a2 = reverse t0\n106051: t0 = a2 & ~a0\n106054: a0 = u64 [sp + 0xd8]\n106058: a0 = reverse a0\n106060: a2 = a0 & ~a1\n106063: a0 = reverse ra\n106065: a1 = u64 [sp + 0xd0]\n106069: a1 = reverse a1\n106071: a1 = a1 & ~s1\n106074: a0 = a0 & ~t1\n106077: a4 = t2 >> 0x3f\n106080: a3 = u64 [sp + 0x38]\n106083: a5 = a3 << 0x1\n106086: a4 = a4 | a5\n106089: a5 = a3 >> 0x3f\n106092: a3 = u64 [sp + 0x30]\n106095: s1 = a3 << 0x1\n106098: a5 = a5 | s1\n106101: s1 = a3 >> 0x3f\n106104: a3 = u64 [sp + 0x28]\n106107: a3 = a3 << 0x1\n106110: a3 = a3 | s1\n106113: t1 = a0 | a3\n106116: a1 = a1 | a5\n106119: a2 = a2 | a4\n106122: a3 = t2 << 0x1\n106125: a3 = t0 | a3\n106128: a4 = u64 [sp + 0x40]\n106131: a5 = u64 [sp + 0x58]\n106134: s1 = u64 [sp + 0x50]\n106137: jump @1390\n      : @1383 (gas: 4)\n106140: t2 = 0\n106142: s1 = 0\n106144: a1 = 0x20\n106147: fallthrough\n      : @1384 (gas: 10)\n106148: a5 = u64 [sp + 0x20]\n106151: a2 = u64 [sp + 0x18]\n106154: a2 = a2 ^ a5\n106157: a3 = u64 [sp + 0x30]\n106160: a2 = a2 | a3\n106163: a3 = u64 [sp + 0x38]\n106166: a4 = u64 [sp + 0x28]\n106169: a3 = a3 | a4\n106172: a2 = a2 | a3\n106175: jump @1388 if a2 == 0\n      : @1385 (gas: 27)\n106179: u64 [sp + 0xc8] = t0\n106183: a2 = u64 [sp + 0x80]\n106187: a2 = a2 + a1\n106190: a3 = a2 <u a1\n106193: a4 = u64 [sp + 0x88]\n106197: a4 = a4 + t2\n106200: a4 = a4 + a3\n106203: a5 = a4 ^ t2\n106206: a1 = a4 <u t2\n106209: a1 = a3 if a5 == 0\n106212: a3 = u64 [sp + 0x90]\n106216: a3 = a3 + a0\n106219: a1 = a1 + a3\n106222: a5 = a1 <u a3\n106225: a0 = a3 <u a0\n106228: a3 = u64 [sp + 0x98]\n106232: a3 = a3 + s1\n106235: a0 = a0 + a3\n106238: a0 = a0 + a5\n106241: a3 = a2 | a1\n106244: a0 = a0 | a4\n106247: a3 = a3 | a0\n106250: a3 = a3 >> 0x20\n106253: a0 = a0 | a1\n106256: a0 = a0 << 0x20\n106259: a0 = a0 | a3\n106262: jump @1392 if a0 != 0\n      : @1386 (gas: 3)\n106266: i32 a0 = a2 + 0\n106268: a1 = 0x20\n106271: ra = 1280, jump @0\n      : @1387 [@dyn 640] (gas: 277)\n106278: a1 = u8 [a0 + 0x19]\n106281: a2 = u8 [a0 + 0x18]\n106284: a3 = u8 [a0 + 0x1a]\n106287: a4 = u8 [a0 + 0x1b]\n106290: a1 = a1 << 0x8\n106293: a1 = a1 | a2\n106296: a3 = a3 << 0x10\n106299: a4 = a4 << 0x18\n106302: a3 = a3 | a4\n106305: a1 = a1 | a3\n106308: a2 = u8 [a0 + 0x1d]\n106311: a3 = u8 [a0 + 0x1c]\n106314: a4 = u8 [a0 + 0x1e]\n106317: a5 = u8 [a0 + 0x1f]\n106320: a2 = a2 << 0x8\n106323: a2 = a2 | a3\n106326: a4 = a4 << 0x10\n106329: a5 = a5 << 0x18\n106332: a4 = a4 | a5\n106335: a2 = a2 | a4\n106338: a2 = a2 << 0x20\n106341: a1 = a1 | a2\n106344: u64 [sp + 0xb8] = a1\n106348: a1 = u8 [a0 + 0x11]\n106351: a2 = u8 [a0 + 0x10]\n106354: a3 = u8 [a0 + 0x12]\n106357: a4 = u8 [a0 + 0x13]\n106360: a1 = a1 << 0x8\n106363: a1 = a1 | a2\n106366: a3 = a3 << 0x10\n106369: a4 = a4 << 0x18\n106372: a3 = a3 | a4\n106375: a1 = a1 | a3\n106378: a2 = u8 [a0 + 0x15]\n106381: a3 = u8 [a0 + 0x14]\n106384: a4 = u8 [a0 + 0x16]\n106387: a5 = u8 [a0 + 0x17]\n106390: a2 = a2 << 0x8\n106393: a2 = a2 | a3\n106396: a4 = a4 << 0x10\n106399: a5 = a5 << 0x18\n106402: a4 = a4 | a5\n106405: a2 = a2 | a4\n106408: a2 = a2 << 0x20\n106411: t1 = a2 | a1\n106414: a1 = u8 [a0 + 0x9]\n106417: a3 = u8 [a0 + 0x8]\n106420: a4 = u8 [a0 + 0xa]\n106423: a5 = u8 [a0 + 0xb]\n106426: a1 = a1 << 0x8\n106429: a1 = a1 | a3\n106432: a4 = a4 << 0x10\n106435: a5 = a5 << 0x18\n106438: a4 = a4 | a5\n106441: a1 = a1 | a4\n106444: a3 = u8 [a0 + 0xd]\n106447: a4 = u8 [a0 + 0xc]\n106450: a5 = u8 [a0 + 0xe]\n106453: s1 = u8 [a0 + 0xf]\n106456: a3 = a3 << 0x8\n106459: a3 = a3 | a4\n106462: a5 = a5 << 0x10\n106465: s1 = s1 << 0x18\n106468: a5 = a5 | s1\n106471: a3 = a3 | a5\n106474: a3 = a3 << 0x20\n106477: t2 = a3 | a1\n106480: a1 = u8 [a0 + 0x1]\n106483: a4 = u8 [a0]\n106485: a5 = u8 [a0 + 0x2]\n106488: s1 = u8 [a0 + 0x3]\n106491: a1 = a1 << 0x8\n106494: a1 = a1 | a4\n106497: a5 = a5 << 0x10\n106500: s1 = s1 << 0x18\n106503: a5 = a5 | s1\n106506: a1 = a1 | a5\n106509: a4 = u8 [a0 + 0x5]\n106512: a5 = u8 [a0 + 0x4]\n106515: s1 = u8 [a0 + 0x6]\n106518: a0 = u8 [a0 + 0x7]\n106521: a4 = a4 << 0x8\n106524: a4 = a4 | a5\n106527: s1 = s1 << 0x10\n106530: a0 = a0 << 0x18\n106533: a0 = a0 | s1\n106536: a0 = a0 | a4\n106539: a0 = a0 << 0x20\n106542: ra = a0 | a1\n106545: u8 [sp + 415] = 0\n106549: u8 [sp + 414] = 0\n106553: u8 [sp + 413] = 0\n106557: u8 [sp + 412] = 0\n106561: u8 [sp + 411] = 0\n106565: u8 [sp + 410] = 0\n106569: u8 [sp + 409] = 0\n106573: u8 [sp + 408] = 0\n106577: u8 [sp + 407] = 0\n106581: u8 [sp + 406] = 0\n106585: u8 [sp + 405] = 0\n106589: u8 [sp + 404] = 0\n106593: u8 [sp + 403] = 0\n106597: u8 [sp + 402] = 0\n106601: u8 [sp + 401] = 0\n106605: u8 [sp + 400] = 0\n106609: u8 [sp + 399] = 0\n106613: u8 [sp + 398] = 0\n106617: u8 [sp + 397] = 0\n106621: u8 [sp + 396] = 0\n106625: u8 [sp + 395] = 0\n106629: u8 [sp + 394] = 0\n106633: u8 [sp + 393] = 0\n106637: u8 [sp + 392] = 0\n106641: u8 [sp + 391] = 0\n106645: u8 [sp + 390] = 0\n106649: u8 [sp + 389] = 0\n106653: u8 [sp + 388] = 0\n106657: u8 [sp + 387] = 0\n106661: u8 [sp + 386] = 0\n106665: u8 [sp + 385] = 0\n106669: u8 [sp + 384] = 0\n106673: u8 [sp + 383] = 0xff\n106679: u8 [sp + 382] = 0xff\n106685: u8 [sp + 381] = 0xff\n106691: u8 [sp + 379] = 0xff\n106697: u8 [sp + 376] = 0xffffffffffffffff\n106702: u8 [sp + 375] = 0xff\n106708: u8 [sp + 374] = 0xff\n106714: u8 [sp + 373] = 0xff\n106720: u8 [sp + 371] = 0xff\n106726: u8 [sp + 368] = 0xffffffffffffffff\n106731: u8 [sp + 367] = 0xff\n106737: u8 [sp + 366] = 0xff\n106743: u8 [sp + 365] = 0xff\n106749: u8 [sp + 363] = 0xff\n106755: u8 [sp + 360] = 0xffffffffffffffff\n106760: u8 [sp + 359] = 0xff\n106766: u8 [sp + 358] = 0xff\n106772: u8 [sp + 357] = 0xff\n106778: u8 [sp + 355] = 0xff\n106784: u8 [sp + 352] = 0xffffffffffffffff\n106789: a1 = 0xffffffff\n106799: u8 [sp + 0x17c] = a1\n106803: a5 = 0xffffffffffff\n106813: u8 [sp + 0x17a] = a5\n106817: a4 = 0xffffffffffffff\n106827: u8 [sp + 0x179] = a4\n106831: u8 [sp + 0x174] = a1\n106835: u8 [sp + 0x172] = a5\n106839: u8 [sp + 0x171] = a4\n106843: u8 [sp + 0x16c] = a1\n106847: u8 [sp + 0x16a] = a5\n106851: u8 [sp + 0x169] = a4\n106855: u8 [sp + 0x164] = a1\n106859: u8 [sp + 0x162] = a5\n106863: u8 [sp + 0x161] = a4\n106867: a4 = u64 [sp + 0x20]\n106870: a4 = a4 & 0x1f\n106873: a1 = sp + 0x160\n106877: a4 = a4 + a1\n106880: a1 = u8 [a4 + 0x19]\n106883: a5 = u8 [a4 + 0x18]\n106886: s1 = u8 [a4 + 0x1a]\n106889: a2 = u8 [a4 + 0x1b]\n106892: a1 = a1 << 0x8\n106895: a1 = a1 | a5\n106898: s1 = s1 << 0x10\n106901: a2 = a2 << 0x18\n106904: a2 = a2 | s1\n106907: a1 = a1 | a2\n106910: a2 = u8 [a4 + 0x1d]\n106913: a5 = u8 [a4 + 0x1c]\n106916: s1 = u8 [a4 + 0x1e]\n106919: a3 = u8 [a4 + 0x1f]\n106922: a2 = a2 << 0x8\n106925: a2 = a2 | a5\n106928: s1 = s1 << 0x10\n106931: a3 = a3 << 0x18\n106934: a3 = a3 | s1\n106937: a2 = a2 | a3\n106940: a2 = a2 << 0x20\n106943: t0 = a2 | a1\n106946: a1 = u8 [a4 + 0x11]\n106949: a2 = u8 [a4 + 0x10]\n106952: a3 = u8 [a4 + 0x12]\n106955: s1 = u8 [a4 + 0x13]\n106958: a1 = a1 << 0x8\n106961: a1 = a1 | a2\n106964: a3 = a3 << 0x10\n106967: s1 = s1 << 0x18\n106970: a3 = a3 | s1\n106973: a1 = a1 | a3\n106976: a2 = u8 [a4 + 0x15]\n106979: a3 = u8 [a4 + 0x14]\n106982: s1 = u8 [a4 + 0x16]\n106985: a0 = u8 [a4 + 0x17]\n106988: a2 = a2 << 0x8\n106991: a2 = a2 | a3\n106994: s1 = s1 << 0x10\n106997: a0 = a0 << 0x18\n107000: a0 = a0 | s1\n107003: a0 = a0 | a2\n107006: a0 = a0 << 0x20\n107009: s1 = a0 | a1\n107012: a0 = u8 [a4 + 0x9]\n107015: a1 = u8 [a4 + 0x8]\n107018: a2 = u8 [a4 + 0xa]\n107021: a3 = u8 [a4 + 0xb]\n107024: a0 = a0 << 0x8\n107027: a0 = a0 | a1\n107030: a2 = a2 << 0x10\n107033: a3 = a3 << 0x18\n107036: a2 = a2 | a3\n107039: a5 = a2 | a0\n107042: a1 = u8 [a4 + 0xd]\n107045: a2 = u8 [a4 + 0xc]\n107048: a3 = u8 [a4 + 0xe]\n107051: a0 = u8 [a4 + 0xf]\n107054: a1 = a1 << 0x8\n107057: a1 = a1 | a2\n107060: a3 = a3 << 0x10\n107063: a0 = a0 << 0x18\n107066: a0 = a0 | a3\n107069: a0 = a0 | a1\n107072: a0 = a0 << 0x20\n107075: a1 = a0 | a5\n107078: a0 = u8 [a4 + 0x1]\n107081: a2 = u8 [a4]\n107083: a3 = u8 [a4 + 0x2]\n107086: a5 = u8 [a4 + 0x3]\n107089: a0 = a0 << 0x8\n107092: a0 = a0 | a2\n107095: a3 = a3 << 0x10\n107098: a5 = a5 << 0x18\n107101: a3 = a3 | a5\n107104: a0 = a0 | a3\n107107: a2 = u8 [a4 + 0x5]\n107110: a3 = u8 [a4 + 0x4]\n107113: a5 = u8 [a4 + 0x6]\n107116: a4 = u8 [a4 + 0x7]\n107119: a2 = a2 << 0x8\n107122: a2 = a2 | a3\n107125: a5 = a5 << 0x10\n107128: a4 = a4 << 0x18\n107131: a4 = a4 | a5\n107134: a2 = a2 | a4\n107137: a2 = a2 << 0x20\n107140: a0 = a0 | a2\n107143: a2 = u64 [sp + 0xb8]\n107147: a2 = reverse a2\n107149: a0 = a2 & ~a0\n107152: a2 = reverse t1\n107154: a1 = a2 & ~a1\n107157: a2 = reverse t2\n107159: a2 = a2 & ~s1\n107162: a3 = reverse ra\n107164: a3 = a3 & ~t0\n107167: a4 = u64 [sp + 0xd0]\n107171: u64 [sp + 0x278] = a4\n107175: a4 = u64 [sp + 0xc8]\n107179: u64 [sp + 0x270] = a4\n107183: a4 = u64 [sp + 0xd8]\n107187: u64 [sp + 0x268] = a4\n107191: a4 = u64 [sp + 0xc0]\n107195: u64 [sp + 0x260] = a4\n107199: u64 [sp + 0x298] = a3\n107203: u64 [sp + 0x290] = a2\n107207: u64 [sp + 0x288] = a1\n107211: u64 [sp + 0x280] = a0\n107215: i32 a1 = sp + 0x260\n107219: i32 a3 = sp + 0x280\n107223: a2 = 0xffffffffffffffff\n107226: a4 = 0x20\n107229: a0 = 0\n107231: ecalli 12 // 'set_storage'\n107233: a5 = u64 [sp + 0x20]\n107236: fallthrough\n      : @1388 (gas: 27)\n107237: a2 = u64 [sp + 0x30]\n107240: a0 = a2 >> 0x3f\n107243: a1 = u64 [sp + 0x28]\n107246: a1 = a1 << 0x1\n107249: a0 = a0 | a1\n107252: a3 = u64 [sp + 0x38]\n107255: a1 = a3 >> 0x3f\n107258: a2 = a2 << 0x1\n107261: a1 = a1 | a2\n107264: a2 = a5 >> 0x3f\n107267: a3 = a3 << 0x1\n107270: a2 = a2 | a3\n107273: a3 = a5 << 0x1\n107276: a3 = a3 + 0x1\n107279: a4 = u64 [sp + 0x48]\n107282: u64 [sp + 0x268] = a4\n107286: a4 = u64 [sp + 0x50]\n107289: u64 [sp + 0x260] = a4\n107293: a4 = u64 [sp + 0x58]\n107296: u64 [sp + 0x270] = a4\n107300: a4 = u64 [sp + 0x40]\n107303: u64 [sp + 0x278] = a4\n107307: u64 [sp + 0x280] = a3\n107311: u64 [sp + 0x288] = a2\n107315: u64 [sp + 0x290] = a1\n107319: u64 [sp + 0x298] = a0\n107323: jump @1391\n      : @1389 (gas: 5)\n107325: a3 = 0\n107327: a2 = 0\n107329: a1 = 0\n107331: t1 = 0\n107333: fallthrough\n      : @1390 (gas: 10)\n107334: a0 = u64 [sp + 0x48]\n107337: u64 [sp + 0x268] = a0\n107341: u64 [sp + 0x260] = s1\n107345: u64 [sp + 0x270] = a5\n107349: u64 [sp + 0x278] = a4\n107353: u64 [sp + 0x280] = a3\n107357: u64 [sp + 0x288] = a2\n107361: u64 [sp + 0x290] = a1\n107365: u64 [sp + 0x298] = t1\n107369: fallthrough\n      : @1391 (gas: 12)\n107370: i32 a1 = sp + 0x260\n107374: i32 a3 = sp + 0x280\n107378: a2 = 0xffffffffffffffff\n107381: a4 = 0x20\n107384: a0 = 0\n107386: ecalli 12 // 'set_storage'\n107388: sp = s0 + 0xfffffffffffffd40\n107392: ra = u64 [sp + 0x2b8]\n107396: s0 = u64 [sp + 0x2b0]\n107400: s1 = u64 [sp + 0x2a8]\n107404: sp = sp + 0x2c0\n107408: ret\n      : @1392 (gas: 1)\n107410: trap\n      : @1393 (gas: 8)\n107411: u64 [sp + 272] = 0\n107415: u64 [sp + 264] = 0\n107419: u64 [sp + 256] = 0\n107423: a0 = 0x4e487b7100000000\n107433: a1 = sp + 0x100\n107437: u64 [sp + 0x118] = a0\n107441: a0 = 0\n107443: ra = 1282, jump @23\n      : @1394 [@dyn 641] (gas: 8)\n107450: u64 [sp + 248] = 0\n107454: u64 [sp + 240] = 0\n107458: u64 [sp + 224] = 0x41\n107463: a0 = 0x4\n107466: a1 = sp + 0xe0\n107470: u64 [sp + 232] = 0\n107474: ra = 0x506\n107478: jump @23\n      : @1395 (gas: 8)\n107482: u64 [sp + 336] = 0\n107486: u64 [sp + 328] = 0\n107490: u64 [sp + 320] = 0\n107494: a0 = 0x4e487b7100000000\n107504: a1 = sp + 0x140\n107508: u64 [sp + 0x158] = a0\n107512: a0 = 0\n107514: ra = 1284, jump @23\n      : @1396 [@dyn 642] (gas: 7)\n107521: u64 [sp + 312] = 0\n107525: u64 [sp + 304] = 0\n107529: u64 [sp + 288] = 0x22\n107534: a0 = 0x4\n107537: a1 = sp + 0x120\n107541: u64 [sp + 296] = 0\n107545: ra = 1286, jump @23\n      : @1397 [@dyn 643] (gas: 3)\n107552: a1 = 0x24\n107555: a0 = 0\n107557: ra = 1288, jump @0\n      : @1398 [@dyn 644] (gas: 6)\n107564: i32 a1 = a0 + 0\n107566: a0 = 0x1\n107569: a2 = 0x24\n107572: ra = 0x50a\n107576: ecalli 10 // 'seal_return'\n107578: fallthrough\n      : @1399 [@dyn 645] (gas: 24)\n107579: sp = sp + 0xffffffffffffffb0\n107582: u64 [sp + 0x48] = ra\n107585: u64 [sp + 0x40] = s0\n107588: s0 = sp + 0x50\n107591: sp = sp & 0xfffffffffffffff0\n107594: t0 = u64 [a0]\n107596: t1 = u64 [a0 + 0x8]\n107599: a4 = u64 [a0 + 0x10]\n107602: a0 = u64 [a0 + 0x18]\n107605: a5 = u64 [a1]\n107607: a2 = u64 [a1 + 0x8]\n107610: a3 = u64 [a1 + 0x10]\n107613: a1 = u64 [a1 + 0x18]\n107616: u64 [sp + 0x18] = a1\n107619: u64 [sp + 0x10] = a3\n107622: u64 [sp + 0x8] = a2\n107625: u64 [sp] = a5\n107627: u64 [sp + 0x38] = a0\n107630: u64 [sp + 0x30] = a4\n107633: u64 [sp + 0x28] = t1\n107636: a0 = sp + 0x20\n107639: a1 = sp\n107641: u64 [sp + 0x20] = t0\n107644: ra = 1292, jump @1362\n      : @1400 [@dyn 646] (gas: 5)\n107650: sp = s0 + 0xffffffffffffffb0\n107653: ra = u64 [sp + 0x48]\n107656: s0 = u64 [sp + 0x40]\n107659: sp = sp + 0x50\n107662: ret\n      : @1401 (gas: 22)\n107664: sp = sp + 0xfffffffffffffea0\n107668: u64 [sp + 0x158] = ra\n107672: u64 [sp + 0x150] = s0\n107676: u64 [sp + 0x148] = s1\n107680: s0 = sp + 0x160\n107684: sp = sp & 0xffffffffffffffe0\n107687: a4 = u64 [a1 + 0x10]\n107690: a5 = u64 [a1 + 0x18]\n107693: a2 = u64 [a1 + 0x8]\n107696: a3 = u64 [a1]\n107698: u64 [sp + 0x70] = a2\n107701: u64 [sp + 0x58] = a5\n107704: a1 = a2 | a5\n107707: u64 [sp + 0x80] = a3\n107711: a2 = a3 | a4\n107714: a2 = a2 | a1\n107717: a2 = a2 >> 0x20\n107720: u64 [sp + 0x60] = a4\n107723: a1 = a1 | a4\n107726: a1 = a1 << 0x20\n107729: a1 = a1 | a2\n107732: jump @1413 if a1 != 0\n      : @1402 (gas: 12)\n107736: a1 = u64 [a0 + 0x18]\n107739: u64 [sp + 0x78] = a1\n107742: a1 = u64 [a0 + 0x10]\n107745: u64 [sp + 0x98] = a1\n107749: a1 = u64 [a0 + 0x8]\n107752: u64 [sp + 0x90] = a1\n107756: a0 = u64 [a0]\n107758: u64 [sp + 0x88] = a0\n107762: a0 = i32 [sp + 0x80]\n107766: a1 = 0x20\n107769: u64 [sp + 0x68] = a0\n107772: ra = 1294, jump @0\n      : @1403 [@dyn 647] (gas: 105)\n107779: a1 = u8 [a0 + 0x11]\n107782: a2 = u8 [a0 + 0x10]\n107785: a3 = u8 [a0 + 0x12]\n107788: a4 = u8 [a0 + 0x13]\n107791: a1 = a1 << 0x8\n107794: a1 = a1 | a2\n107797: a3 = a3 << 0x10\n107800: a4 = a4 << 0x18\n107803: a3 = a3 | a4\n107806: a1 = a1 | a3\n107809: a2 = u8 [a0 + 0x15]\n107812: a3 = u8 [a0 + 0x14]\n107815: a4 = u8 [a0 + 0x16]\n107818: a5 = u8 [a0 + 0x17]\n107821: a2 = a2 << 0x8\n107824: a2 = a2 | a3\n107827: a4 = a4 << 0x10\n107830: a5 = a5 << 0x18\n107833: a4 = a4 | a5\n107836: a2 = a2 | a4\n107839: a2 = a2 << 0x20\n107842: a1 = a1 | a2\n107845: a2 = u8 [a0 + 0x19]\n107848: a3 = u8 [a0 + 0x18]\n107851: a4 = u8 [a0 + 0x1a]\n107854: a5 = u8 [a0 + 0x1b]\n107857: a2 = a2 << 0x8\n107860: a2 = a2 | a3\n107863: a4 = a4 << 0x10\n107866: a5 = a5 << 0x18\n107869: a4 = a4 | a5\n107872: a2 = a2 | a4\n107875: a3 = u8 [a0 + 0x1d]\n107878: a4 = u8 [a0 + 0x1c]\n107881: a5 = u8 [a0 + 0x1e]\n107884: s1 = u8 [a0 + 0x1f]\n107887: a3 = a3 << 0x8\n107890: a3 = a3 | a4\n107893: a5 = a5 << 0x10\n107896: s1 = s1 << 0x18\n107899: a5 = a5 | s1\n107902: a3 = a3 | a5\n107905: a3 = a3 << 0x20\n107908: a2 = a2 | a3\n107911: a3 = u8 [a0 + 0xd]\n107914: a4 = u8 [a0 + 0xc]\n107917: a5 = u8 [a0 + 0xe]\n107920: a0 = u8 [a0 + 0xf]\n107923: a3 = a3 << 0x8\n107926: a3 = a3 | a4\n107929: a5 = a5 << 0x10\n107932: a0 = a0 << 0x18\n107935: a0 = a0 | a5\n107938: a0 = a0 | a3\n107941: a2 = reverse a2\n107943: u64 [sp + 0x50] = a2\n107946: a1 = reverse a1\n107948: u64 [sp + 0x48] = a1\n107951: s1 = reverse a0\n107953: s1 = s1 >> 0x20\n107956: u64 [sp + 0x40] = s1\n107959: s1 = u64 [sp + 0x78]\n107962: u64 [sp + 0x118] = s1\n107966: a0 = u64 [sp + 0x98]\n107970: u64 [sp + 0x110] = a0\n107974: a0 = u64 [sp + 0x90]\n107978: u64 [sp + 0x108] = a0\n107982: a0 = u64 [sp + 0x88]\n107986: u64 [sp + 0x100] = a0\n107990: u64 [sp + 312] = 0\n107994: u64 [sp + 304] = 0\n107998: u64 [sp + 296] = 0\n108002: u64 [sp + 288] = 0\n108006: u32 [sp + 224] = 0x20\n108011: i32 a1 = sp + 0x100\n108015: i32 a3 = sp + 0x120\n108019: i32 a4 = sp + 0xe0\n108023: a2 = 0xffffffffffffffff\n108026: a0 = 0\n108028: ecalli 7 // 'get_storage'\n108030: a0 = u32 [sp + 0x134]\n108034: a0 = a0 << 0x20\n108037: a1 = u64 [sp + 0x138]\n108041: a2 = u64 [sp + 0x40]\n108044: a0 = a0 | a2\n108047: u64 [sp + 0x118] = s1\n108051: a2 = u64 [sp + 0x98]\n108055: u64 [sp + 0x110] = a2\n108059: a2 = u64 [sp + 0x90]\n108063: u64 [sp + 0x108] = a2\n108067: a2 = u64 [sp + 0x88]\n108071: u64 [sp + 0x100] = a2\n108075: u64 [sp + 0x138] = a1\n108079: u64 [sp + 0x130] = a0\n108083: a0 = u64 [sp + 0x48]\n108086: u64 [sp + 0x128] = a0\n108090: a0 = u64 [sp + 0x50]\n108093: u64 [sp + 0x120] = a0\n108097: i32 a1 = sp + 0x100\n108101: i32 a3 = sp + 0x120\n108105: a2 = 0xffffffffffffffff\n108108: a4 = 0x20\n108111: a0 = 0\n108113: ecalli 12 // 'set_storage'\n108115: fallthrough\n      : @1404 (gas: 13)\n108116: a0 = u64 [sp + 0x60]\n108119: a2 = u64 [sp + 0x58]\n108122: a2 = a2 | a0\n108125: a0 = 0x100000000\n108135: u64 [sp + 0x40] = a0\n108138: a0 = 0xffffffe0\n108148: a1 = u64 [sp + 0x80]\n108152: a0 = a1 <u a0\n108155: a1 = u64 [sp + 0x70]\n108158: a0 = 0 if a1 != 0\n108160: u64 [sp + 0x60] = a2\n108163: a0 = 0 if a2 != 0\n108165: jump @1413 if a0 == 0\n      : @1405 (gas: 20)\n108169: a0 = u64 [sp + 0x88]\n108173: a2 = a0 + 0x1\n108176: u64 [sp + 0x48] = a2\n108179: a0 = a2 <u 0x1\n108182: a1 = u64 [sp + 0x90]\n108186: a0 = a0 + a1\n108189: u64 [sp + 0x58] = a0\n108192: a0 = a0 | a2\n108195: a0 = a0 <u 0x1\n108198: a1 = u64 [sp + 0x98]\n108202: a0 = a0 + a1\n108205: u64 [sp + 0x50] = a0\n108208: a0 = a0 <u a1\n108211: a1 = u64 [sp + 0x78]\n108214: a0 = a0 + a1\n108217: u64 [sp + 0x38] = a0\n108220: a0 = u64 [sp + 0x68]\n108223: i32 a0 = a0 + 0x20\n108226: a1 = 0x20\n108229: ra = 1296, jump @0\n      : @1406 [@dyn 648] (gas: 137)\n108236: a1 = u8 [a0 + 0x1]\n108239: a2 = u8 [a0]\n108241: a3 = u8 [a0 + 0x2]\n108244: a4 = u8 [a0 + 0x3]\n108247: a1 = a1 << 0x8\n108250: a1 = a1 | a2\n108253: a3 = a3 << 0x10\n108256: a4 = a4 << 0x18\n108259: a3 = a3 | a4\n108262: a1 = a1 | a3\n108265: a2 = u8 [a0 + 0x5]\n108268: a3 = u8 [a0 + 0x4]\n108271: a4 = u8 [a0 + 0x6]\n108274: a5 = u8 [a0 + 0x7]\n108277: a2 = a2 << 0x8\n108280: a2 = a2 | a3\n108283: a4 = a4 << 0x10\n108286: a5 = a5 << 0x18\n108289: a4 = a4 | a5\n108292: a2 = a2 | a4\n108295: a2 = a2 << 0x20\n108298: t0 = a2 | a1\n108301: a2 = u8 [a0 + 0x9]\n108304: a3 = u8 [a0 + 0x8]\n108307: a4 = u8 [a0 + 0xa]\n108310: a5 = u8 [a0 + 0xb]\n108313: a2 = a2 << 0x8\n108316: a2 = a2 | a3\n108319: a4 = a4 << 0x10\n108322: a5 = a5 << 0x18\n108325: a4 = a4 | a5\n108328: a2 = a2 | a4\n108331: a3 = u8 [a0 + 0xd]\n108334: a4 = u8 [a0 + 0xc]\n108337: a5 = u8 [a0 + 0xe]\n108340: s1 = u8 [a0 + 0xf]\n108343: a3 = a3 << 0x8\n108346: a3 = a3 | a4\n108349: a5 = a5 << 0x10\n108352: s1 = s1 << 0x18\n108355: a5 = a5 | s1\n108358: a3 = a3 | a5\n108361: a3 = a3 << 0x20\n108364: a2 = a2 | a3\n108367: a3 = u8 [a0 + 0x11]\n108370: a4 = u8 [a0 + 0x10]\n108373: a5 = u8 [a0 + 0x12]\n108376: s1 = u8 [a0 + 0x13]\n108379: a3 = a3 << 0x8\n108382: a3 = a3 | a4\n108385: a5 = a5 << 0x10\n108388: s1 = s1 << 0x18\n108391: a5 = a5 | s1\n108394: a3 = a3 | a5\n108397: a4 = u8 [a0 + 0x15]\n108400: a5 = u8 [a0 + 0x14]\n108403: s1 = u8 [a0 + 0x16]\n108406: a1 = u8 [a0 + 0x17]\n108409: a4 = a4 << 0x8\n108412: a4 = a4 | a5\n108415: s1 = s1 << 0x10\n108418: a1 = a1 << 0x18\n108421: a1 = a1 | s1\n108424: a1 = a1 | a4\n108427: a1 = a1 << 0x20\n108430: a3 = a3 | a1\n108433: a1 = u8 [a0 + 0x19]\n108436: a4 = u8 [a0 + 0x18]\n108439: a5 = u8 [a0 + 0x1a]\n108442: s1 = u8 [a0 + 0x1b]\n108445: a1 = a1 << 0x8\n108448: a1 = a1 | a4\n108451: a5 = a5 << 0x10\n108454: s1 = s1 << 0x18\n108457: a5 = a5 | s1\n108460: a1 = a1 | a5\n108463: a4 = u8 [a0 + 0x1d]\n108466: a5 = u8 [a0 + 0x1c]\n108469: s1 = u8 [a0 + 0x1e]\n108472: a0 = u8 [a0 + 0x1f]\n108475: a4 = a4 << 0x8\n108478: a4 = a4 | a5\n108481: s1 = s1 << 0x10\n108484: a0 = a0 << 0x18\n108487: a0 = a0 | s1\n108490: a0 = a0 | a4\n108493: a0 = a0 << 0x20\n108496: a0 = a0 | a1\n108499: u32 [sp + 224] = 0x20\n108504: a0 = reverse a0\n108506: u64 [sp + 0x30] = a0\n108509: a0 = reverse a3\n108511: u64 [sp + 0x28] = a0\n108514: a0 = reverse a2\n108516: u64 [sp + 0x20] = a0\n108519: a0 = reverse t0\n108521: u64 [sp + 0x18] = a0\n108524: a0 = u64 [sp + 0x50]\n108527: u64 [sp + 0x110] = a0\n108531: a0 = u64 [sp + 0x58]\n108534: u64 [sp + 0x108] = a0\n108538: a0 = u64 [sp + 0x48]\n108541: u64 [sp + 0x100] = a0\n108545: s1 = u64 [sp + 0x38]\n108548: u64 [sp + 0x118] = s1\n108552: u64 [sp + 312] = 0\n108556: u64 [sp + 304] = 0\n108560: u64 [sp + 296] = 0\n108564: u64 [sp + 288] = 0\n108568: i32 a1 = sp + 0x100\n108572: i32 a3 = sp + 0x120\n108576: i32 a4 = sp + 0xe0\n108580: a2 = 0xffffffffffffffff\n108583: a0 = 0\n108585: ecalli 7 // 'get_storage'\n108587: u64 [sp + 0x118] = s1\n108591: a0 = u64 [sp + 0x50]\n108594: u64 [sp + 0x110] = a0\n108598: a0 = u64 [sp + 0x58]\n108601: u64 [sp + 0x108] = a0\n108605: a0 = u64 [sp + 0x48]\n108608: u64 [sp + 0x100] = a0\n108612: a0 = u64 [sp + 0x18]\n108615: u64 [sp + 0x138] = a0\n108619: a0 = u64 [sp + 0x20]\n108622: u64 [sp + 0x130] = a0\n108626: a0 = u64 [sp + 0x28]\n108629: u64 [sp + 0x128] = a0\n108633: a0 = u64 [sp + 0x30]\n108636: u64 [sp + 0x120] = a0\n108640: i32 a1 = sp + 0x100\n108644: i32 a3 = sp + 0x120\n108648: a2 = 0xffffffffffffffff\n108651: a4 = 0x20\n108654: a0 = 0\n108656: ecalli 12 // 'set_storage'\n108658: fallthrough\n      : @1407 (gas: 9)\n108659: a0 = u64 [sp + 0x40]\n108662: a0 = a0 + 0xffffffffffffffc0\n108665: a1 = u64 [sp + 0x80]\n108669: a0 = a1 <u a0\n108672: a1 = u64 [sp + 0x70]\n108675: a0 = 0 if a1 != 0\n108677: a1 = u64 [sp + 0x60]\n108680: a0 = 0 if a1 != 0\n108682: jump @1413 if a0 == 0\n      : @1408 (gas: 20)\n108686: a0 = u64 [sp + 0x88]\n108690: a1 = a0 + 0x2\n108693: u64 [sp + 0x58] = a1\n108696: a0 = a1 <u a0\n108699: a1 = u64 [sp + 0x90]\n108703: a2 = a1 + a0\n108706: u64 [sp + 0x50] = a2\n108709: s1 = a2 <u a1\n108712: s1 = a0 if a0 == 0\n108715: a0 = u64 [sp + 0x98]\n108719: s1 = s1 + a0\n108722: u64 [sp + 0x40] = s1\n108725: a0 = s1 <u a0\n108728: a1 = u64 [sp + 0x78]\n108731: a0 = a0 + a1\n108734: u64 [sp + 0x48] = a0\n108737: a0 = u64 [sp + 0x68]\n108740: i32 a0 = a0 + 0x40\n108743: a1 = 0x20\n108746: ra = 1298, jump @0\n      : @1409 [@dyn 649] (gas: 107)\n108753: a1 = u8 [a0 + 0x1]\n108756: a2 = u8 [a0]\n108758: a3 = u8 [a0 + 0x2]\n108761: a4 = u8 [a0 + 0x3]\n108764: a1 = a1 << 0x8\n108767: a1 = a1 | a2\n108770: a3 = a3 << 0x10\n108773: a4 = a4 << 0x18\n108776: a3 = a3 | a4\n108779: a1 = a1 | a3\n108782: a2 = u8 [a0 + 0x5]\n108785: a3 = u8 [a0 + 0x4]\n108788: a4 = u8 [a0 + 0x6]\n108791: a5 = u8 [a0 + 0x7]\n108794: a2 = a2 << 0x8\n108797: a2 = a2 | a3\n108800: a4 = a4 << 0x10\n108803: a5 = a5 << 0x18\n108806: a4 = a4 | a5\n108809: a2 = a2 | a4\n108812: a2 = a2 << 0x20\n108815: t0 = a2 | a1\n108818: a2 = u8 [a0 + 0x9]\n108821: a3 = u8 [a0 + 0x8]\n108824: a4 = u8 [a0 + 0xa]\n108827: a5 = u8 [a0 + 0xb]\n108830: a2 = a2 << 0x8\n108833: a2 = a2 | a3\n108836: a4 = a4 << 0x10\n108839: a5 = a5 << 0x18\n108842: a4 = a4 | a5\n108845: a2 = a2 | a4\n108848: a3 = u8 [a0 + 0xd]\n108851: a4 = u8 [a0 + 0xc]\n108854: a5 = u8 [a0 + 0xe]\n108857: a1 = u8 [a0 + 0xf]\n108860: a3 = a3 << 0x8\n108863: a3 = a3 | a4\n108866: a5 = a5 << 0x10\n108869: a1 = a1 << 0x18\n108872: a1 = a1 | a5\n108875: a1 = a1 | a3\n108878: a1 = a1 << 0x20\n108881: a2 = a2 | a1\n108884: a1 = u8 [a0 + 0x11]\n108887: a3 = u8 [a0 + 0x10]\n108890: a4 = u8 [a0 + 0x12]\n108893: a5 = u8 [a0 + 0x13]\n108896: a1 = a1 << 0x8\n108899: a1 = a1 | a3\n108902: a4 = a4 << 0x10\n108905: a5 = a5 << 0x18\n108908: a4 = a4 | a5\n108911: a1 = a1 | a4\n108914: a3 = u8 [a0 + 0x15]\n108917: a4 = u8 [a0 + 0x14]\n108920: a5 = u8 [a0 + 0x16]\n108923: s1 = u8 [a0 + 0x17]\n108926: a3 = a3 << 0x8\n108929: a3 = a3 | a4\n108932: a5 = a5 << 0x10\n108935: s1 = s1 << 0x18\n108938: a5 = a5 | s1\n108941: a3 = a3 | a5\n108944: a3 = a3 << 0x20\n108947: a3 = a3 | a1\n108950: a1 = u8 [a0 + 0x19]\n108953: a4 = u8 [a0 + 0x18]\n108956: a5 = u8 [a0 + 0x1a]\n108959: s1 = u8 [a0 + 0x1b]\n108962: a1 = a1 << 0x8\n108965: a1 = a1 | a4\n108968: a5 = a5 << 0x10\n108971: s1 = s1 << 0x18\n108974: a5 = a5 | s1\n108977: a1 = a1 | a5\n108980: a4 = u8 [a0 + 0x1d]\n108983: a5 = u8 [a0 + 0x1c]\n108986: s1 = u8 [a0 + 0x1e]\n108989: a0 = u8 [a0 + 0x1f]\n108992: a4 = a4 << 0x8\n108995: a4 = a4 | a5\n108998: s1 = s1 << 0x10\n109001: a0 = a0 << 0x18\n109004: a0 = a0 | s1\n109007: a0 = a0 | a4\n109010: a0 = a0 << 0x20\n109013: a0 = a0 | a1\n109016: a4 = reverse a0\n109018: a0 = reverse a3\n109020: a1 = reverse a2\n109022: a2 = reverse t0\n109024: a3 = u64 [sp + 0x50]\n109027: u64 [sp + 0xc8] = a3\n109031: a3 = u64 [sp + 0x58]\n109034: u64 [sp + 0xc0] = a3\n109038: a3 = u64 [sp + 0x40]\n109041: u64 [sp + 0xd0] = a3\n109045: a3 = u64 [sp + 0x48]\n109048: u64 [sp + 0xd8] = a3\n109052: u64 [sp + 0xb8] = a2\n109056: u64 [sp + 0xb0] = a1\n109060: u64 [sp + 0xa8] = a0\n109064: a0 = sp + 0xc0\n109068: a1 = sp + 0xa0\n109072: u64 [sp + 0xa0] = a4\n109076: ra = 1300, jump @1362\n      : @1410 [@dyn 650] (gas: 8)\n109082: a0 = 0xffffffa0\n109092: a1 = u64 [sp + 0x80]\n109096: a0 = a1 <u a0\n109099: a1 = u64 [sp + 0x70]\n109102: a0 = 0 if a1 != 0\n109104: a1 = u64 [sp + 0x60]\n109107: a0 = 0 if a1 != 0\n109109: jump @1413 if a0 == 0\n      : @1411 (gas: 20)\n109113: a0 = u64 [sp + 0x88]\n109117: a1 = a0 + 0x3\n109120: u64 [sp + 0x80] = a1\n109124: a0 = a1 <u a0\n109127: a1 = u64 [sp + 0x90]\n109131: a2 = a1 + a0\n109134: u64 [sp + 0x88] = a2\n109138: a1 = a2 <u a1\n109141: a1 = a0 if a0 == 0\n109144: a0 = u64 [sp + 0x98]\n109148: a1 = a1 + a0\n109151: u64 [sp + 0x90] = a1\n109155: a0 = a1 <u a0\n109158: a1 = u64 [sp + 0x78]\n109161: a0 = a0 + a1\n109164: u64 [sp + 0x98] = a0\n109168: a0 = u64 [sp + 0x68]\n109171: i32 a0 = a0 + 0x60\n109174: a1 = 0x20\n109177: ra = 1302, jump @0\n      : @1412 [@dyn 651] (gas: 140)\n109184: a1 = u8 [a0 + 0x11]\n109187: a2 = u8 [a0 + 0x10]\n109190: a3 = u8 [a0 + 0x12]\n109193: a4 = u8 [a0 + 0x13]\n109196: a1 = a1 << 0x8\n109199: a1 = a1 | a2\n109202: a3 = a3 << 0x10\n109205: a4 = a4 << 0x18\n109208: a3 = a3 | a4\n109211: t0 = a3 | a1\n109214: a1 = u8 [a0 + 0x1]\n109217: a2 = u8 [a0]\n109219: a3 = u8 [a0 + 0x2]\n109222: a4 = u8 [a0 + 0x3]\n109225: a1 = a1 << 0x8\n109228: a1 = a1 | a2\n109231: a3 = a3 << 0x10\n109234: a4 = a4 << 0x18\n109237: a2 = a4 | a3\n109240: t1 = a2 | a1\n109243: a1 = u8 [a0 + 0x15]\n109246: a3 = u8 [a0 + 0x14]\n109249: a4 = u8 [a0 + 0x16]\n109252: a5 = u8 [a0 + 0x17]\n109255: a1 = a1 << 0x8\n109258: a1 = a1 | a3\n109261: a4 = a4 << 0x10\n109264: a5 = a5 << 0x18\n109267: a3 = a5 | a4\n109270: t2 = a3 | a1\n109273: a1 = u8 [a0 + 0x5]\n109276: a4 = u8 [a0 + 0x4]\n109279: a5 = u8 [a0 + 0x6]\n109282: s1 = u8 [a0 + 0x7]\n109285: a1 = a1 << 0x8\n109288: a1 = a1 | a4\n109291: a5 = a5 << 0x10\n109294: s1 = s1 << 0x18\n109297: a4 = s1 | a5\n109300: ra = a4 | a1\n109303: a1 = u8 [a0 + 0x19]\n109306: a5 = u8 [a0 + 0x18]\n109309: s1 = u8 [a0 + 0x1a]\n109312: a2 = u8 [a0 + 0x1b]\n109315: a1 = a1 << 0x8\n109318: a1 = a1 | a5\n109321: s1 = s1 << 0x10\n109324: a2 = a2 << 0x18\n109327: a2 = a2 | s1\n109330: a5 = a2 | a1\n109333: a1 = u8 [a0 + 0x9]\n109336: a2 = u8 [a0 + 0x8]\n109339: s1 = u8 [a0 + 0xa]\n109342: a3 = u8 [a0 + 0xb]\n109345: a1 = a1 << 0x8\n109348: a1 = a1 | a2\n109351: s1 = s1 << 0x10\n109354: a3 = a3 << 0x18\n109357: a3 = a3 | s1\n109360: a1 = a1 | a3\n109363: a2 = u8 [a0 + 0x1d]\n109366: a3 = u8 [a0 + 0x1c]\n109369: s1 = u8 [a0 + 0x1e]\n109372: a4 = u8 [a0 + 0x1f]\n109375: a2 = a2 << 0x8\n109378: a2 = a2 | a3\n109381: s1 = s1 << 0x10\n109384: a4 = a4 << 0x18\n109387: a4 = a4 | s1\n109390: a2 = a2 | a4\n109393: a3 = u8 [a0 + 0xd]\n109396: a4 = u8 [a0 + 0xc]\n109399: s1 = u8 [a0 + 0xe]\n109402: a0 = u8 [a0 + 0xf]\n109405: a3 = a3 << 0x8\n109408: a3 = a3 | a4\n109411: s1 = s1 << 0x10\n109414: a0 = a0 << 0x18\n109417: a0 = a0 | s1\n109420: a0 = a0 | a3\n109423: a0 = a0 | a2\n109426: a1 = a1 | a5\n109429: a0 = a0 << 0x20\n109432: a0 = a0 | a1\n109435: a1 = ra | t2\n109438: a2 = t1 | t0\n109441: a1 = a1 << 0x20\n109444: a1 = a1 | a2\n109447: a0 = a0 | a1\n109450: u32 [sp + 224] = 0x20\n109455: a0 = a0 >u 0\n109457: u64 [sp + 0x78] = a0\n109460: a0 = u64 [sp + 0x90]\n109464: u64 [sp + 0x110] = a0\n109468: a0 = u64 [sp + 0x88]\n109472: u64 [sp + 0x108] = a0\n109476: a0 = u64 [sp + 0x80]\n109480: u64 [sp + 0x100] = a0\n109484: s1 = u64 [sp + 0x98]\n109488: u64 [sp + 0x118] = s1\n109492: u64 [sp + 312] = 0\n109496: u64 [sp + 304] = 0\n109500: u64 [sp + 296] = 0\n109504: u64 [sp + 288] = 0\n109508: i32 a1 = sp + 0x100\n109512: i32 a3 = sp + 0x120\n109516: i32 a4 = sp + 0xe0\n109520: a2 = 0xffffffffffffffff\n109523: a0 = 0\n109525: ecalli 7 // 'get_storage'\n109527: a0 = u64 [sp + 0x120]\n109531: a1 = u64 [sp + 0x128]\n109535: a2 = u64 [sp + 0x130]\n109539: a3 = u64 [sp + 0x138]\n109543: a0 = a0 & 0xffffffffffffff00\n109547: a4 = u64 [sp + 0x78]\n109550: a0 = a0 | a4\n109553: u64 [sp + 0x118] = s1\n109557: a4 = u64 [sp + 0x90]\n109561: u64 [sp + 0x110] = a4\n109565: a4 = u64 [sp + 0x88]\n109569: u64 [sp + 0x108] = a4\n109573: a4 = u64 [sp + 0x80]\n109577: u64 [sp + 0x100] = a4\n109581: u64 [sp + 0x138] = a3\n109585: u64 [sp + 0x130] = a2\n109589: u64 [sp + 0x128] = a1\n109593: u64 [sp + 0x120] = a0\n109597: i32 a1 = sp + 0x100\n109601: i32 a3 = sp + 0x120\n109605: a2 = 0xffffffffffffffff\n109608: a4 = 0x20\n109611: a0 = 0\n109613: ecalli 12 // 'set_storage'\n109615: sp = s0 + 0xfffffffffffffea0\n109619: ra = u64 [sp + 0x158]\n109623: s0 = u64 [sp + 0x150]\n109627: s1 = u64 [sp + 0x148]\n109631: sp = sp + 0x160\n109635: ret\n      : @1413 (gas: 1)\n109637: trap\n      : @1414 (gas: 58)\n109638: sp = sp + 0xfffffffffffffe00\n109642: u64 [sp + 0x1f8] = ra\n109646: u64 [sp + 0x1f0] = s0\n109650: u64 [sp + 0x1e8] = s1\n109654: s0 = sp + 0x200\n109658: sp = sp & 0xffffffffffffffe0\n109661: u64 [sp] = a0\n109663: a0 = u64 [a4 + 0x18]\n109666: u64 [sp + 0x8] = a0\n109669: a0 = u64 [a4 + 0x10]\n109672: u64 [sp + 0x10] = a0\n109675: a0 = u64 [a4 + 0x8]\n109678: u64 [sp + 0x18] = a0\n109681: a0 = u64 [a4]\n109683: u64 [sp + 0x20] = a0\n109686: a0 = u64 [a3 + 0x18]\n109689: u64 [sp + 0x28] = a0\n109692: a0 = u64 [a3 + 0x10]\n109695: u64 [sp + 0x30] = a0\n109698: a0 = u64 [a3 + 0x8]\n109701: u64 [sp + 0x38] = a0\n109704: a0 = u64 [a3]\n109706: u64 [sp + 0x40] = a0\n109709: s1 = u64 [a2 + 0x10]\n109712: a0 = u64 [a2 + 0x8]\n109715: u64 [sp + 0x48] = a0\n109718: a0 = u64 [a2]\n109720: u64 [sp + 0x70] = a0\n109723: u64 [sp + 384] = 0x5\n109728: u32 [sp + 352] = 0x20\n109733: u64 [sp + 408] = 0\n109737: u64 [sp + 400] = 0\n109741: u64 [sp + 392] = 0\n109745: u64 [sp + 440] = 0\n109749: u64 [sp + 432] = 0\n109753: u64 [sp + 424] = 0\n109757: u64 [sp + 416] = 0\n109761: i32 a1 = sp + 0x180\n109765: i32 a3 = sp + 0x1a0\n109769: i32 a4 = sp + 0x160\n109773: a2 = 0xffffffffffffffff\n109776: a0 = 0\n109778: ecalli 7 // 'get_storage'\n109780: a0 = u64 [sp + 0x1b8]\n109784: u64 [sp + 0x50] = a0\n109787: a0 = u64 [sp + 0x1b0]\n109791: u64 [sp + 0x58] = a0\n109794: a0 = u64 [sp + 0x1a8]\n109798: u64 [sp + 0x60] = a0\n109801: a0 = u64 [sp + 0x1a0]\n109805: u64 [sp + 0x68] = a0\n109808: u64 [sp + 312] = 0\n109812: u64 [sp + 304] = 0\n109816: u64 [sp + 288] = 0x80\n109822: a0 = sp + 0x140\n109826: a1 = sp + 0x120\n109830: u64 [sp + 296] = 0\n109834: ra = 1304, jump @114\n      : @1415 [@dyn 652] (gas: 16)\n109841: a2 = u64 [sp + 0x158]\n109845: a3 = u64 [sp + 0x150]\n109849: a0 = u64 [sp + 0x148]\n109853: a1 = u64 [sp + 0x140]\n109857: u64 [sp + 0x98] = a0\n109861: u64 [sp + 0x78] = a2\n109864: a0 = a0 | a2\n109867: u64 [sp + 0x90] = a1\n109871: a1 = a1 | a3\n109874: a1 = a1 | a0\n109877: a1 = a1 >> 0x20\n109880: u64 [sp + 0x80] = a3\n109884: a0 = a0 | a3\n109887: a0 = a0 << 0x20\n109890: a0 = a0 | a1\n109893: jump @1433 if a0 != 0\n      : @1416 (gas: 6)\n109897: s1 = s1 << 0x20\n109900: s1 = s1 >> 0x20\n109903: a0 = i32 [sp + 0x90]\n109907: a1 = 0x20\n109910: u64 [sp + 0x88] = a0\n109914: ra = 1306, jump @0\n      : @1417 [@dyn 653] (gas: 67)\n109921: a1 = reverse s1\n109923: a2 = u64 [sp + 0x48]\n109926: a2 = reverse a2\n109928: a3 = u64 [sp + 0x70]\n109931: a3 = reverse a3\n109933: a4 = a3 >> 0x38\n109936: u8 [a0 + 0x1f] = a4\n109939: a4 = a3 >> 0x30\n109942: u8 [a0 + 0x1e] = a4\n109945: a4 = a3 >> 0x28\n109948: u8 [a0 + 0x1d] = a4\n109951: a4 = a3 >> 0x20\n109954: u8 [a0 + 0x1c] = a4\n109957: a4 = a3 >> 0x18\n109960: u8 [a0 + 0x1b] = a4\n109963: a4 = a3 >> 0x10\n109966: u8 [a0 + 0x1a] = a4\n109969: a4 = a3 >> 0x8\n109972: u8 [a0 + 0x19] = a4\n109975: u8 [a0 + 0x18] = a3\n109978: u8 [a0 + 0x10] = a2\n109981: u8 [a0 + 11] = 0\n109984: u8 [a0 + 10] = 0\n109987: u8 [a0 + 9] = 0\n109990: u8 [a0 + 7] = 0\n109993: u8 [a0 + 6] = 0\n109996: u8 [a0 + 5] = 0\n109999: u8 [a0 + 4] = 0\n110002: u8 [a0 + 3] = 0\n110005: u8 [a0 + 2] = 0\n110008: u8 [a0 + 1] = 0\n110011: u8 [a0 + 0] = 0\n110013: a3 = a2 >> 0x38\n110016: u8 [a0 + 0x17] = a3\n110019: a3 = a2 >> 0x30\n110022: u8 [a0 + 0x16] = a3\n110025: a3 = a2 >> 0x28\n110028: u8 [a0 + 0x15] = a3\n110031: a3 = a2 >> 0x20\n110034: u8 [a0 + 0x14] = a3\n110037: a3 = a2 >> 0x18\n110040: u8 [a0 + 0x13] = a3\n110043: a3 = a2 >> 0x10\n110046: u8 [a0 + 0x12] = a3\n110049: a2 = a2 >> 0x8\n110052: u8 [a0 + 0x11] = a2\n110055: u8 [a0 + 0x8] = a1\n110058: a2 = a1 >> 0x38\n110061: u8 [a0 + 0xf] = a2\n110064: a2 = a1 >> 0x30\n110067: u8 [a0 + 0xe] = a2\n110070: a2 = a1 >> 0x28\n110073: u8 [a0 + 0xd] = a2\n110076: a1 = a1 >> 0x20\n110079: a2 = u64 [sp + 0x78]\n110082: a4 = u64 [sp + 0x80]\n110086: a4 = a4 | a2\n110089: s1 = 0x100000000\n110099: a2 = 0xffffffe0\n110109: a3 = u64 [sp + 0x90]\n110113: a2 = a3 <u a2\n110116: a3 = u64 [sp + 0x98]\n110120: a2 = 0 if a3 != 0\n110122: u64 [sp + 0x70] = a4\n110125: a2 = 0 if a4 != 0\n110127: u8 [a0 + 0xc] = a1\n110130: jump @1433 if a2 == 0\n      : @1418 (gas: 4)\n110134: a0 = u64 [sp + 0x88]\n110138: i32 a0 = a0 + 0x20\n110141: a1 = 0x20\n110144: ra = 1308, jump @0\n      : @1419 [@dyn 654] (gas: 76)\n110151: a1 = u64 [sp + 0x28]\n110154: a1 = reverse a1\n110156: a2 = u64 [sp + 0x30]\n110159: a2 = reverse a2\n110161: a3 = u64 [sp + 0x38]\n110164: a3 = reverse a3\n110166: a4 = u64 [sp + 0x40]\n110169: a4 = reverse a4\n110171: a5 = a4 >> 0x38\n110174: u8 [a0 + 0x1f] = a5\n110177: a5 = a4 >> 0x30\n110180: u8 [a0 + 0x1e] = a5\n110183: a5 = a4 >> 0x28\n110186: u8 [a0 + 0x1d] = a5\n110189: a5 = a4 >> 0x20\n110192: u8 [a0 + 0x1c] = a5\n110195: a5 = a4 >> 0x18\n110198: u8 [a0 + 0x1b] = a5\n110201: a5 = a4 >> 0x10\n110204: u8 [a0 + 0x1a] = a5\n110207: a5 = a4 >> 0x8\n110210: u8 [a0 + 0x19] = a5\n110213: u8 [a0 + 0x18] = a4\n110216: u8 [a0 + 0x10] = a3\n110219: a4 = a3 >> 0x38\n110222: u8 [a0 + 0x17] = a4\n110225: a4 = a3 >> 0x30\n110228: u8 [a0 + 0x16] = a4\n110231: a4 = a3 >> 0x28\n110234: u8 [a0 + 0x15] = a4\n110237: a4 = a3 >> 0x20\n110240: u8 [a0 + 0x14] = a4\n110243: a4 = a3 >> 0x18\n110246: u8 [a0 + 0x13] = a4\n110249: a4 = a3 >> 0x10\n110252: u8 [a0 + 0x12] = a4\n110255: a3 = a3 >> 0x8\n110258: u8 [a0 + 0x11] = a3\n110261: u8 [a0 + 0x8] = a2\n110264: a3 = a2 >> 0x38\n110267: u8 [a0 + 0xf] = a3\n110270: a3 = a2 >> 0x30\n110273: u8 [a0 + 0xe] = a3\n110276: a3 = a2 >> 0x28\n110279: u8 [a0 + 0xd] = a3\n110282: a3 = a2 >> 0x20\n110285: u8 [a0 + 0xc] = a3\n110288: a3 = a2 >> 0x18\n110291: u8 [a0 + 0xb] = a3\n110294: a3 = a2 >> 0x10\n110297: u8 [a0 + 0xa] = a3\n110300: a2 = a2 >> 0x8\n110303: u8 [a0 + 0x9] = a2\n110306: u8 [a0] = a1\n110308: a2 = a1 >> 0x38\n110311: u8 [a0 + 0x7] = a2\n110314: a2 = a1 >> 0x30\n110317: u8 [a0 + 0x6] = a2\n110320: a2 = a1 >> 0x28\n110323: u8 [a0 + 0x5] = a2\n110326: a2 = a1 >> 0x20\n110329: u8 [a0 + 0x4] = a2\n110332: a2 = a1 >> 0x18\n110335: u8 [a0 + 0x3] = a2\n110338: a2 = a1 >> 0x10\n110341: u8 [a0 + 0x2] = a2\n110344: a1 = a1 >> 0x8\n110347: a2 = s1 + 0xffffffffffffffc0\n110350: s1 = u64 [sp + 0x90]\n110354: a2 = s1 <u a2\n110357: a3 = u64 [sp + 0x98]\n110361: a2 = 0 if a3 != 0\n110363: a3 = u64 [sp + 0x70]\n110366: a2 = 0 if a3 != 0\n110368: u8 [a0 + 0x1] = a1\n110371: jump @1433 if a2 == 0\n      : @1420 (gas: 4)\n110375: a0 = u64 [sp + 0x88]\n110379: i32 a0 = a0 + 0x40\n110382: a1 = 0x20\n110385: ra = 1310, jump @0\n      : @1421 [@dyn 655] (gas: 75)\n110392: a1 = u64 [sp + 0x8]\n110395: a1 = reverse a1\n110397: a2 = u64 [sp + 0x10]\n110400: a2 = reverse a2\n110402: a3 = u64 [sp + 0x18]\n110405: a3 = reverse a3\n110407: a4 = u64 [sp + 0x20]\n110410: a4 = reverse a4\n110412: a5 = a4 >> 0x38\n110415: u8 [a0 + 0x1f] = a5\n110418: a5 = a4 >> 0x30\n110421: u8 [a0 + 0x1e] = a5\n110424: a5 = a4 >> 0x28\n110427: u8 [a0 + 0x1d] = a5\n110430: a5 = a4 >> 0x20\n110433: u8 [a0 + 0x1c] = a5\n110436: a5 = a4 >> 0x18\n110439: u8 [a0 + 0x1b] = a5\n110442: a5 = a4 >> 0x10\n110445: u8 [a0 + 0x1a] = a5\n110448: a5 = a4 >> 0x8\n110451: u8 [a0 + 0x19] = a5\n110454: u8 [a0 + 0x18] = a4\n110457: u8 [a0 + 0x10] = a3\n110460: a4 = a3 >> 0x38\n110463: u8 [a0 + 0x17] = a4\n110466: a4 = a3 >> 0x30\n110469: u8 [a0 + 0x16] = a4\n110472: a4 = a3 >> 0x28\n110475: u8 [a0 + 0x15] = a4\n110478: a4 = a3 >> 0x20\n110481: u8 [a0 + 0x14] = a4\n110484: a4 = a3 >> 0x18\n110487: u8 [a0 + 0x13] = a4\n110490: a4 = a3 >> 0x10\n110493: u8 [a0 + 0x12] = a4\n110496: a3 = a3 >> 0x8\n110499: u8 [a0 + 0x11] = a3\n110502: u8 [a0 + 0x8] = a2\n110505: a3 = a2 >> 0x38\n110508: u8 [a0 + 0xf] = a3\n110511: a3 = a2 >> 0x30\n110514: u8 [a0 + 0xe] = a3\n110517: a3 = a2 >> 0x28\n110520: u8 [a0 + 0xd] = a3\n110523: a3 = a2 >> 0x20\n110526: u8 [a0 + 0xc] = a3\n110529: a3 = a2 >> 0x18\n110532: u8 [a0 + 0xb] = a3\n110535: a3 = a2 >> 0x10\n110538: u8 [a0 + 0xa] = a3\n110541: a2 = a2 >> 0x8\n110544: u8 [a0 + 0x9] = a2\n110547: u8 [a0] = a1\n110549: a2 = a1 >> 0x38\n110552: u8 [a0 + 0x7] = a2\n110555: a2 = a1 >> 0x30\n110558: u8 [a0 + 0x6] = a2\n110561: a2 = a1 >> 0x28\n110564: u8 [a0 + 0x5] = a2\n110567: a2 = a1 >> 0x20\n110570: u8 [a0 + 0x4] = a2\n110573: a2 = a1 >> 0x18\n110576: u8 [a0 + 0x3] = a2\n110579: a2 = a1 >> 0x10\n110582: u8 [a0 + 0x2] = a2\n110585: a1 = a1 >> 0x8\n110588: a2 = 0xffffffa0\n110598: a2 = s1 <u a2\n110601: a3 = u64 [sp + 0x98]\n110605: a2 = 0 if a3 != 0\n110607: a3 = u64 [sp + 0x70]\n110610: a2 = 0 if a3 != 0\n110612: u8 [a0 + 0x1] = a1\n110615: jump @1433 if a2 == 0\n      : @1422 (gas: 4)\n110619: a0 = u64 [sp + 0x88]\n110623: i32 a0 = a0 + 0x60\n110626: a1 = 0x20\n110629: ra = 1312, jump @0\n      : @1423 [@dyn 656] (gas: 35)\n110636: u8 [a0 + 31] = 0\n110639: u8 [a0 + 30] = 0\n110642: u8 [a0 + 29] = 0\n110645: u8 [a0 + 28] = 0\n110648: u8 [a0 + 27] = 0\n110651: u8 [a0 + 26] = 0\n110654: u8 [a0 + 25] = 0\n110657: u8 [a0 + 24] = 0\n110660: u8 [a0 + 23] = 0\n110663: u8 [a0 + 22] = 0\n110666: u8 [a0 + 21] = 0\n110669: u8 [a0 + 20] = 0\n110672: u8 [a0 + 19] = 0\n110675: u8 [a0 + 18] = 0\n110678: u8 [a0 + 17] = 0\n110681: u8 [a0 + 16] = 0\n110684: u8 [a0 + 15] = 0\n110687: u8 [a0 + 14] = 0\n110690: u8 [a0 + 13] = 0\n110693: u8 [a0 + 12] = 0\n110696: u8 [a0 + 11] = 0\n110699: u8 [a0 + 10] = 0\n110702: u8 [a0 + 9] = 0\n110705: u8 [a0 + 8] = 0\n110708: u8 [a0 + 7] = 0\n110711: u8 [a0 + 6] = 0\n110714: u8 [a0 + 5] = 0\n110717: u8 [a0 + 4] = 0\n110720: u8 [a0 + 3] = 0\n110723: u8 [a0 + 2] = 0\n110726: u8 [a0 + 1] = 0\n110729: u8 [a0 + 0] = 0\n110731: a1 = 0x20\n110734: a0 = 0\n110736: ra = 1314, jump @0\n      : @1424 [@dyn 657] (gas: 75)\n110743: a1 = u64 [sp + 0x50]\n110746: a2 = reverse a1\n110748: a1 = u64 [sp + 0x58]\n110751: a3 = reverse a1\n110753: a1 = u64 [sp + 0x60]\n110756: a5 = reverse a1\n110758: a1 = u64 [sp + 0x68]\n110761: a4 = reverse a1\n110763: a1 = a4 >> 0x38\n110766: u8 [a0 + 0x1f] = a1\n110769: a1 = a4 >> 0x30\n110772: u8 [a0 + 0x1e] = a1\n110775: a1 = a4 >> 0x28\n110778: u8 [a0 + 0x1d] = a1\n110781: a1 = a4 >> 0x20\n110784: u8 [a0 + 0x1c] = a1\n110787: a1 = a4 >> 0x18\n110790: u8 [a0 + 0x1b] = a1\n110793: a1 = a4 >> 0x10\n110796: u8 [a0 + 0x1a] = a1\n110799: a1 = a4 >> 0x8\n110802: u8 [a0 + 0x19] = a1\n110805: u64 [sp + 0x40] = a4\n110808: u8 [a0 + 0x18] = a4\n110811: a1 = a5 >> 0x38\n110814: u8 [a0 + 0x17] = a1\n110817: a1 = a5 >> 0x30\n110820: u8 [a0 + 0x16] = a1\n110823: a1 = a5 >> 0x28\n110826: u8 [a0 + 0x15] = a1\n110829: a1 = a5 >> 0x20\n110832: u8 [a0 + 0x14] = a1\n110835: a1 = a5 >> 0x18\n110838: u8 [a0 + 0x13] = a1\n110841: a1 = a5 >> 0x10\n110844: u8 [a0 + 0x12] = a1\n110847: a1 = a5 >> 0x8\n110850: u8 [a0 + 0x11] = a1\n110853: u64 [sp + 0x38] = a5\n110856: u8 [a0 + 0x10] = a5\n110859: a1 = a3 >> 0x38\n110862: u8 [a0 + 0xf] = a1\n110865: a1 = a3 >> 0x30\n110868: u8 [a0 + 0xe] = a1\n110871: a1 = a3 >> 0x28\n110874: u8 [a0 + 0xd] = a1\n110877: a1 = a3 >> 0x20\n110880: u8 [a0 + 0xc] = a1\n110883: a1 = a3 >> 0x18\n110886: u8 [a0 + 0xb] = a1\n110889: a1 = a3 >> 0x10\n110892: u8 [a0 + 0xa] = a1\n110895: a1 = a3 >> 0x8\n110898: u8 [a0 + 0x9] = a1\n110901: u64 [sp + 0x48] = a3\n110904: u8 [a0 + 0x8] = a3\n110907: a1 = a2 >> 0x38\n110910: u8 [a0 + 0x7] = a1\n110913: a1 = a2 >> 0x30\n110916: u8 [a0 + 0x6] = a1\n110919: a1 = a2 >> 0x28\n110922: u8 [a0 + 0x5] = a1\n110925: a1 = a2 >> 0x20\n110928: u8 [a0 + 0x4] = a1\n110931: a1 = a2 >> 0x18\n110934: u8 [a0 + 0x3] = a1\n110937: a1 = a2 >> 0x10\n110940: u8 [a0 + 0x2] = a1\n110943: a1 = a2 >> 0x8\n110946: u8 [a0 + 0x1] = a1\n110949: u64 [sp + 0x70] = a2\n110952: u8 [a0] = a2\n110954: a0 = 0x20\n110957: a1 = 0x20\n110960: ra = 1316, jump @0\n      : @1425 [@dyn 658] (gas: 35)\n110967: u8 [a0 + 31] = 0\n110970: u8 [a0 + 30] = 0\n110973: u8 [a0 + 29] = 0\n110976: u8 [a0 + 28] = 0\n110979: u8 [a0 + 27] = 0\n110982: u8 [a0 + 26] = 0\n110985: u8 [a0 + 25] = 0\n110988: u8 [a0 + 24] = 0\n110991: u8 [a0 + 23] = 0\n110994: u8 [a0 + 22] = 0\n110997: u8 [a0 + 21] = 0\n111000: u8 [a0 + 20] = 0\n111003: u8 [a0 + 19] = 0\n111006: u8 [a0 + 18] = 0\n111009: u8 [a0 + 17] = 0\n111012: u8 [a0 + 16] = 0\n111015: u8 [a0 + 15] = 0\n111018: u8 [a0 + 14] = 0\n111021: u8 [a0 + 13] = 0\n111024: u8 [a0 + 12] = 0\n111027: u8 [a0 + 11] = 0\n111030: u8 [a0 + 10] = 0\n111033: u8 [a0 + 9] = 0\n111036: u8 [a0 + 8] = 0\n111039: u8 [a0 + 7] = 0\n111042: u8 [a0 + 6] = 0\n111045: u8 [a0 + 5] = 0\n111048: u8 [a0 + 4] = 0\n111051: u8 [a0 + 3] = 0\n111054: u8 [a0 + 2] = 0\n111057: u8 [a0 + 1] = 0\n111060: u8 [a0 + 0] = 0\n111062: a1 = 0x40\n111065: a0 = 0\n111067: ra = 1318, jump @0\n      : @1426 [@dyn 659] (gas: 26)\n111074: i32 a0 = a0 + 0\n111076: i32 a2 = sp + 0x1a0\n111080: a1 = 0x40\n111083: ecalli 8 // 'hash_keccak_256'\n111085: a0 = u64 [sp + 0x1b8]\n111089: a1 = u64 [sp + 0x1b0]\n111093: a2 = u64 [sp + 0x1a8]\n111097: a3 = u64 [sp + 0x1a0]\n111101: a4 = reverse a0\n111103: a0 = reverse a1\n111105: a1 = reverse a2\n111107: a2 = reverse a3\n111109: a3 = u64 [sp + 0x78]\n111112: u64 [sp + 0xf8] = a3\n111116: a3 = u64 [sp + 0x80]\n111120: u64 [sp + 0xf0] = a3\n111124: a3 = u64 [sp + 0x98]\n111128: u64 [sp + 0xe8] = a3\n111132: u64 [sp + 0xe0] = s1\n111136: u64 [sp + 0x118] = a2\n111140: u64 [sp + 0x110] = a1\n111144: u64 [sp + 0x108] = a0\n111148: a0 = sp + 0x100\n111152: a1 = sp + 0xe0\n111156: u64 [sp + 0x100] = a4\n111160: ra = 1320, jump @1401\n      : @1427 [@dyn 660] (gas: 16)\n111166: u64 [sp + 408] = 0\n111170: u64 [sp + 400] = 0\n111174: u64 [sp + 392] = 0\n111178: u64 [sp + 384] = 0x5\n111183: u64 [sp + 440] = 0\n111187: u64 [sp + 432] = 0\n111191: u64 [sp + 424] = 0\n111195: u64 [sp + 416] = 0\n111199: u32 [sp + 352] = 0x20\n111204: i32 a1 = sp + 0x180\n111208: i32 a3 = sp + 0x1a0\n111212: i32 a4 = sp + 0x160\n111216: a2 = 0xffffffffffffffff\n111219: a0 = 0\n111221: ecalli 7 // 'get_storage'\n111223: fallthrough\n      : @1428 (gas: 19)\n111224: s1 = u64 [sp + 0x1a0]\n111228: a0 = u64 [sp + 0x1b8]\n111232: a1 = u64 [sp + 0x1a8]\n111236: a2 = u64 [sp + 0x1b0]\n111240: s1 = s1 + 0x1\n111243: a3 = s1 <u 0x1\n111246: a3 = a3 + a1\n111249: a1 = s1 | a3\n111252: a1 = a1 <u 0x1\n111255: a4 = a2 + a1\n111258: a1 = a4 <u a2\n111261: a0 = a0 + a1\n111264: u64 [sp + 0x98] = a3\n111268: u64 [sp + 0x88] = a0\n111272: a0 = a0 | a3\n111275: u64 [sp + 0x90] = a4\n111279: a1 = s1 | a4\n111282: a0 = a0 | a1\n111285: jump @1434 if a0 == 0\n      : @1429 (gas: 35)\n111289: u64 [sp + 408] = 0\n111293: u64 [sp + 400] = 0\n111297: u64 [sp + 392] = 0\n111301: u64 [sp + 384] = 0x5\n111306: u64 [sp + 440] = 0\n111310: u64 [sp + 432] = 0\n111314: u64 [sp + 424] = 0\n111318: u64 [sp + 416] = 0\n111322: u32 [sp + 352] = 0x20\n111327: i32 a1 = sp + 0x180\n111331: i32 a3 = sp + 0x1a0\n111335: i32 a4 = sp + 0x160\n111339: a2 = 0xffffffffffffffff\n111342: a0 = 0\n111344: ecalli 7 // 'get_storage'\n111346: u64 [sp + 408] = 0\n111350: u64 [sp + 400] = 0\n111354: u64 [sp + 392] = 0\n111358: u64 [sp + 384] = 0x5\n111363: a0 = u64 [sp + 0x88]\n111367: u64 [sp + 0x1b8] = a0\n111371: a0 = u64 [sp + 0x90]\n111375: u64 [sp + 0x1b0] = a0\n111379: a0 = u64 [sp + 0x98]\n111383: u64 [sp + 0x1a8] = a0\n111387: u64 [sp + 0x1a0] = s1\n111391: i32 a1 = sp + 0x180\n111395: i32 a3 = sp + 0x1a0\n111399: a2 = 0xffffffffffffffff\n111402: a4 = 0x20\n111405: a0 = 0\n111407: ecalli 12 // 'set_storage'\n111409: a0 = 0x40\n111412: a1 = 0x20\n111415: ra = 1322, jump @0\n      : @1430 [@dyn 661] (gas: 100)\n111422: a1 = u8 [a0 + 0x11]\n111425: a2 = u8 [a0 + 0x10]\n111428: a3 = u8 [a0 + 0x12]\n111431: a4 = u8 [a0 + 0x13]\n111434: a1 = a1 << 0x8\n111437: a1 = a1 | a2\n111440: a3 = a3 << 0x10\n111443: a4 = a4 << 0x18\n111446: a3 = a3 | a4\n111449: a1 = a1 | a3\n111452: a2 = u8 [a0 + 0x15]\n111455: a3 = u8 [a0 + 0x14]\n111458: a4 = u8 [a0 + 0x16]\n111461: a5 = u8 [a0 + 0x17]\n111464: a2 = a2 << 0x8\n111467: a2 = a2 | a3\n111470: a4 = a4 << 0x10\n111473: a5 = a5 << 0x18\n111476: a4 = a4 | a5\n111479: a2 = a2 | a4\n111482: a2 = a2 << 0x20\n111485: t0 = a2 | a1\n111488: a2 = u8 [a0 + 0x1]\n111491: a3 = u8 [a0]\n111493: a4 = u8 [a0 + 0x2]\n111496: a5 = u8 [a0 + 0x3]\n111499: a2 = a2 << 0x8\n111502: a2 = a2 | a3\n111505: a4 = a4 << 0x10\n111508: a5 = a5 << 0x18\n111511: a4 = a4 | a5\n111514: a2 = a2 | a4\n111517: a3 = u8 [a0 + 0x5]\n111520: a4 = u8 [a0 + 0x4]\n111523: a5 = u8 [a0 + 0x6]\n111526: s1 = u8 [a0 + 0x7]\n111529: a3 = a3 << 0x8\n111532: a3 = a3 | a4\n111535: a5 = a5 << 0x10\n111538: s1 = s1 << 0x18\n111541: a5 = a5 | s1\n111544: a3 = a3 | a5\n111547: a3 = a3 << 0x20\n111550: a2 = a2 | a3\n111553: a3 = u8 [a0 + 0x19]\n111556: a4 = u8 [a0 + 0x18]\n111559: a5 = u8 [a0 + 0x1a]\n111562: s1 = u8 [a0 + 0x1b]\n111565: a3 = a3 << 0x8\n111568: a3 = a3 | a4\n111571: a5 = a5 << 0x10\n111574: s1 = s1 << 0x18\n111577: a5 = a5 | s1\n111580: a3 = a3 | a5\n111583: a4 = u8 [a0 + 0x1d]\n111586: a5 = u8 [a0 + 0x1c]\n111589: s1 = u8 [a0 + 0x1e]\n111592: a1 = u8 [a0 + 0x1f]\n111595: a4 = a4 << 0x8\n111598: a4 = a4 | a5\n111601: s1 = s1 << 0x10\n111604: a1 = a1 << 0x18\n111607: a1 = a1 | s1\n111610: a1 = a1 | a4\n111613: a1 = a1 << 0x20\n111616: a3 = a3 | a1\n111619: a1 = u8 [a0 + 0x9]\n111622: a4 = u8 [a0 + 0x8]\n111625: a5 = u8 [a0 + 0xa]\n111628: s1 = u8 [a0 + 0xb]\n111631: a1 = a1 << 0x8\n111634: a1 = a1 | a4\n111637: a5 = a5 << 0x10\n111640: s1 = s1 << 0x18\n111643: a5 = a5 | s1\n111646: a1 = a1 | a5\n111649: a4 = u8 [a0 + 0xd]\n111652: a5 = u8 [a0 + 0xc]\n111655: s1 = u8 [a0 + 0xe]\n111658: a0 = u8 [a0 + 0xf]\n111661: a4 = a4 << 0x8\n111664: a4 = a4 | a5\n111667: s1 = s1 << 0x10\n111670: a0 = a0 << 0x18\n111673: a0 = a0 | s1\n111676: a0 = a0 | a4\n111679: a0 = a0 << 0x20\n111682: a0 = a0 | a1\n111685: a1 = reverse a0\n111687: a0 = reverse a3\n111689: a2 = reverse a2\n111691: a3 = reverse t0\n111693: a2 = a2 | a3\n111696: a3 = a0 | a1\n111699: a3 = a3 | a2\n111702: a3 = a3 >> 0x20\n111705: a1 = a1 | a2\n111708: a1 = a1 << 0x20\n111711: a1 = a1 | a3\n111714: jump @1433 if a1 != 0\n      : @1431 (gas: 2)\n111718: i32 a0 = a0 + 0\n111720: ra = 1324, jump @0\n      : @1432 [@dyn 662] (gas: 36)\n111727: a1 = u64 [0x20140]\n111732: a2 = u64 [0x20148]\n111737: a3 = u64 [0x20150]\n111742: a4 = u64 [0x20158]\n111747: u64 [sp + 0x1b8] = a1\n111751: u64 [sp + 0x1b0] = a2\n111755: u64 [sp + 0x1a8] = a3\n111759: u64 [sp + 0x1a0] = a4\n111763: a1 = u64 [sp + 0x38]\n111766: u64 [sp + 0x1d0] = a1\n111770: a1 = u64 [sp + 0x48]\n111773: u64 [sp + 0x1c8] = a1\n111777: a1 = u64 [sp + 0x70]\n111780: u64 [sp + 0x1c0] = a1\n111784: a1 = u64 [sp + 0x40]\n111787: u64 [sp + 0x1d8] = a1\n111791: i32 a2 = a0 + 0\n111793: i32 a0 = sp + 0x1a0\n111797: a1 = 0x2\n111800: a3 = 0\n111802: ecalli 6 // 'deposit_event'\n111804: a0 = u64 [sp]\n111806: a1 = u64 [sp + 0x50]\n111809: u64 [a0 + 0x18] = a1\n111812: a1 = u64 [sp + 0x58]\n111815: u64 [a0 + 0x10] = a1\n111818: a1 = u64 [sp + 0x60]\n111821: u64 [a0 + 0x8] = a1\n111824: a1 = u64 [sp + 0x68]\n111827: u64 [a0] = a1\n111829: sp = s0 + 0xfffffffffffffe00\n111833: ra = u64 [sp + 0x1f8]\n111837: s0 = u64 [sp + 0x1f0]\n111841: s1 = u64 [sp + 0x1e8]\n111845: sp = sp + 0x200\n111849: ret\n      : @1433 (gas: 1)\n111851: trap\n      : @1434 (gas: 8)\n111852: u64 [sp + 208] = 0\n111856: u64 [sp + 200] = 0\n111860: u64 [sp + 192] = 0\n111864: a0 = 0x4e487b7100000000\n111874: a1 = sp + 0xc0\n111878: u64 [sp + 0xd8] = a0\n111882: a0 = 0\n111884: ra = 1326, jump @23\n      : @1435 [@dyn 663] (gas: 7)\n111891: u64 [sp + 184] = 0\n111895: u64 [sp + 176] = 0\n111899: u64 [sp + 160] = 0x11\n111904: a0 = 0x4\n111907: a1 = sp + 0xa0\n111911: u64 [sp + 168] = 0\n111915: ra = 1328, jump @23\n      : @1436 [@dyn 664] (gas: 3)\n111922: a1 = 0x24\n111925: a0 = 0\n111927: ra = 1330, jump @0\n      : @1437 [@dyn 665] (gas: 6)\n111934: i32 a1 = a0 + 0\n111936: a0 = 0x1\n111939: a2 = 0x24\n111942: ra = 0x534\n111946: ecalli 10 // 'seal_return'\n111948: fallthrough\n      : @1438 [@dyn 666] (gas: 14)\n111949: sp = sp + 0xffffffffffffff20\n111953: u64 [sp + 0xd8] = ra\n111957: u64 [sp + 0xd0] = s0\n111961: u64 [sp + 0xc8] = s1\n111965: s0 = sp + 0xe0\n111969: sp = sp & 0xfffffffffffffff0\n111972: ra = u64 [a1 + 0x10]\n111975: t2 = u64 [a1 + 0x8]\n111978: a5 = u64 [a1]\n111980: s1 = ra << 0x20\n111983: s1 = s1 >> 0x20\n111986: a4 = a5 | t2\n111989: a4 = a4 | s1\n111992: jump @1441 if a4 == 0\n      : @1439 (gas: 33)\n111996: s1 = a0\n111998: a0 = u64 [a3 + 0x18]\n112001: u64 [sp + 0x10] = a0\n112004: t0 = u64 [a3 + 0x10]\n112007: a0 = u64 [a3 + 0x8]\n112010: a3 = u64 [a3]\n112012: a4 = u64 [a2 + 0x18]\n112015: u64 [sp + 0x8] = a4\n112018: a4 = u64 [a2 + 0x10]\n112021: t1 = u64 [a2 + 0x8]\n112024: a2 = u64 [a2]\n112026: a1 = u64 [a1 + 0x18]\n112029: u64 [sp + 0x18] = a1\n112032: u64 [sp + 0x20] = a3\n112035: u64 [sp + 0x40] = a2\n112038: u64 [sp + 0x60] = a5\n112041: u64 [sp + 0x28] = a0\n112044: u64 [sp + 0x48] = t1\n112047: u64 [sp + 0x68] = t2\n112050: u64 [sp + 0x30] = t0\n112053: u64 [sp + 0x50] = a4\n112056: u64 [sp + 0x70] = ra\n112059: a0 = u64 [sp + 0x10]\n112062: u64 [sp + 0x38] = a0\n112065: a0 = u64 [sp + 0x8]\n112068: u64 [sp + 0x58] = a0\n112071: a0 = sp + 0xa0\n112075: a2 = sp + 0x60\n112078: a3 = sp + 0x40\n112081: a4 = sp + 0x20\n112084: a5 = u64 [sp + 0x18]\n112087: u64 [sp + 0x78] = a5\n112090: ra = 1334, jump @1414\n      : @1440 [@dyn 667] (gas: 14)\n112096: a0 = u64 [sp + 0xb0]\n112100: a1 = u64 [sp + 0xb8]\n112104: a2 = u64 [sp + 0xa0]\n112108: a3 = u64 [sp + 0xa8]\n112112: u64 [s1 + 0x10] = a0\n112115: u64 [s1 + 0x18] = a1\n112118: u64 [s1] = a2\n112120: u64 [s1 + 0x8] = a3\n112123: sp = s0 + 0xffffffffffffff20\n112127: ra = u64 [sp + 0xd8]\n112131: s0 = u64 [sp + 0xd0]\n112135: s1 = u64 [sp + 0xc8]\n112139: sp = sp + 0xe0\n112143: ret\n      : @1441 (gas: 3)\n112145: a0 = 0\n112147: a1 = 0\n112149: ra = 1336, jump @0\n      : @1442 [@dyn 668] (gas: 6)\n112156: i32 a1 = a0 + 0\n112158: a0 = 0x1\n112161: a2 = 0\n112163: ra = 0x53a\n112167: ecalli 10 // 'seal_return'\n112169: fallthrough\n      : @1443 [@dyn 669] (gas: 39)\n112170: sp = sp + 0xfffffffffffffde0\n112174: u64 [sp + 0x218] = ra\n112178: u64 [sp + 0x210] = s0\n112182: u64 [sp + 0x208] = s1\n112186: s0 = sp + 0x220\n112190: sp = sp & 0xffffffffffffffe0\n112193: a5 = u64 [a3 + 0x18]\n112196: u64 [sp + 0x108] = a5\n112200: a5 = u64 [a3 + 0x10]\n112203: u64 [sp + 0x110] = a5\n112207: a5 = u64 [a3 + 0x8]\n112210: u64 [sp + 0x100] = a5\n112214: a3 = u64 [a3]\n112216: u64 [sp + 0x178] = a3\n112220: a3 = u64 [a2]\n112222: u64 [sp + 0x170] = a3\n112226: a3 = u64 [a2 + 0x8]\n112229: u64 [sp + 0x168] = a3\n112233: a3 = u64 [a2 + 0x10]\n112236: u64 [sp + 0x160] = a3\n112240: a2 = u64 [a2 + 0x18]\n112243: u64 [sp + 0x158] = a2\n112247: a2 = u64 [a1]\n112249: u64 [sp + 0x150] = a2\n112253: a2 = u64 [a1 + 0x10]\n112256: u64 [sp + 0x148] = a2\n112260: a1 = u64 [a1 + 0x8]\n112263: u64 [sp + 0x140] = a1\n112267: a1 = u64 [a4 + 0x18]\n112270: u64 [sp + 0x138] = a1\n112274: a1 = u64 [a4 + 0x10]\n112277: u64 [sp + 0x130] = a1\n112281: a1 = u64 [a4 + 0x8]\n112284: u64 [sp + 0x120] = a1\n112288: s1 = u64 [a4]\n112290: u64 [sp] = a0\n112292: a0 = 0x40\n112295: a1 = 0x20\n112298: ra = 1340, jump @0\n      : @1444 [@dyn 670] (gas: 81)\n112305: a1 = u8 [a0 + 0x18]\n112308: u64 [sp + 0xf8] = a1\n112312: a1 = u8 [a0 + 0x19]\n112315: u64 [sp + 0xe0] = a1\n112319: a1 = u8 [a0 + 0x1a]\n112322: u64 [sp + 0xf0] = a1\n112326: a1 = u8 [a0 + 0x1b]\n112329: u64 [sp + 0xe8] = a1\n112333: a1 = s1 + 0x20\n112336: u64 [sp + 0x118] = a1\n112340: a1 = a1 <u s1\n112343: a3 = u64 [sp + 0x120]\n112347: a2 = a3 + a1\n112350: u64 [sp + 0x128] = a2\n112354: s1 = a2 <u a3\n112357: s1 = a1 if a1 == 0\n112360: a1 = u8 [a0 + 0x1c]\n112363: u64 [sp + 0x20] = a1\n112366: a1 = u8 [a0 + 0x1d]\n112369: u64 [sp + 0x8] = a1\n112372: a1 = u8 [a0 + 0x1e]\n112375: u64 [sp + 0x18] = a1\n112378: a1 = u8 [a0 + 0x1f]\n112381: u64 [sp + 0x10] = a1\n112384: a1 = u8 [a0 + 0x10]\n112387: u64 [sp + 0x48] = a1\n112390: a1 = u8 [a0 + 0x11]\n112393: u64 [sp + 0x28] = a1\n112396: a1 = u8 [a0 + 0x12]\n112399: u64 [sp + 0x38] = a1\n112402: a1 = u8 [a0 + 0x13]\n112405: u64 [sp + 0x30] = a1\n112408: a1 = u8 [a0 + 0x14]\n112411: u64 [sp + 0x60] = a1\n112414: a1 = u8 [a0 + 0x15]\n112417: u64 [sp + 0x40] = a1\n112420: a1 = u8 [a0 + 0x16]\n112423: u64 [sp + 0x58] = a1\n112426: a1 = u8 [a0 + 0x17]\n112429: u64 [sp + 0x50] = a1\n112432: a1 = u8 [a0 + 0x8]\n112435: u64 [sp + 0x88] = a1\n112439: a1 = u8 [a0 + 0x9]\n112442: u64 [sp + 0x68] = a1\n112445: a1 = u8 [a0 + 0xa]\n112448: u64 [sp + 0x78] = a1\n112451: a1 = u8 [a0 + 0xb]\n112454: u64 [sp + 0x70] = a1\n112457: a1 = u8 [a0 + 0xc]\n112460: u64 [sp + 0xa0] = a1\n112464: a1 = u8 [a0 + 0xd]\n112467: u64 [sp + 0x80] = a1\n112471: a1 = u8 [a0 + 0xe]\n112474: u64 [sp + 0x98] = a1\n112478: a1 = u8 [a0 + 0xf]\n112481: u64 [sp + 0x90] = a1\n112485: a1 = u8 [a0]\n112487: u64 [sp + 0xc8] = a1\n112491: a1 = u8 [a0 + 0x1]\n112494: u64 [sp + 0xa8] = a1\n112498: a1 = u8 [a0 + 0x2]\n112501: u64 [sp + 0xb8] = a1\n112505: a1 = u8 [a0 + 0x3]\n112508: u64 [sp + 0xb0] = a1\n112512: a1 = u8 [a0 + 0x4]\n112515: u64 [sp + 0x120] = a1\n112519: a1 = u8 [a0 + 0x5]\n112522: u64 [sp + 0xc0] = a1\n112526: a1 = u8 [a0 + 0x6]\n112529: u64 [sp + 0xd8] = a1\n112533: a0 = u8 [a0 + 0x7]\n112536: u64 [sp + 0xd0] = a0\n112540: a0 = u64 [sp + 0x130]\n112544: s1 = s1 + a0\n112547: a0 = s1 <u a0\n112550: a1 = u64 [sp + 0x138]\n112554: a0 = a0 + a1\n112557: u64 [sp + 0x138] = a0\n112561: ra = 0x53e\n112565: ecalli 9 // 'ref_time_left'\n112567: fallthrough\n      : @1445 [@dyn 671] (gas: 36)\n112568: t1 = u64 [sp + 0x118]\n112572: a4 = a0\n112574: a0 = u64 [sp + 0x140]\n112578: a0 = reverse a0\n112580: a1 = u64 [sp + 0x148]\n112584: a1 = reverse a1\n112586: a1 = a1 >> 0x20\n112589: a2 = a0 << 0x20\n112592: a1 = a1 | a2\n112595: a0 = a0 >> 0x20\n112598: a2 = u64 [sp + 0x150]\n112602: a2 = reverse a2\n112604: a3 = a2 << 0x20\n112607: a0 = a0 | a3\n112610: u64 [sp + 0x188] = a0\n112614: u64 [sp + 0x180] = a1\n112618: a2 = a2 >> 0x20\n112621: u32 [sp + 0x190] = a2\n112625: a0 = u64 [sp + 0x158]\n112629: u64 [sp + 0x1b8] = a0\n112633: a0 = u64 [sp + 0x160]\n112637: u64 [sp + 0x1b0] = a0\n112641: a0 = u64 [sp + 0x168]\n112645: u64 [sp + 0x1a8] = a0\n112649: a0 = u64 [sp + 0x128]\n112653: a1 = u64 [sp + 0x138]\n112657: a0 = a0 | a1\n112660: a1 = t1 | s1\n112663: a1 = a1 | a0\n112666: a0 = a0 | s1\n112669: a1 = a1 >> 0x20\n112672: a0 = a0 << 0x20\n112675: a0 = a0 | a1\n112678: a1 = u64 [sp + 0x170]\n112682: u64 [sp + 0x1a0] = a1\n112686: jump @1451 if a0 != 0\n      : @1446 (gas: 12)\n112690: t0 = u64 [sp + 0x178]\n112694: a2 = u64 [sp + 0x110]\n112698: a0 = t0 | a2\n112701: a1 = u64 [sp + 0x108]\n112705: a3 = u64 [sp + 0x100]\n112709: a1 = a1 | a3\n112712: a0 = a0 | a1\n112715: a0 = a0 >> 0x20\n112718: a1 = a1 | a2\n112721: a1 = a1 << 0x20\n112724: a0 = a0 | a1\n112727: jump @1451 if a0 != 0\n      : @1447 (gas: 102)\n112731: u64 [sp + 0x170] = a4\n112735: a0 = u64 [sp + 0xe0]\n112739: a0 = a0 << 0x8\n112742: a1 = u64 [sp + 0xf8]\n112746: a0 = a0 | a1\n112749: a1 = u64 [sp + 0xf0]\n112753: a1 = a1 << 0x10\n112756: a2 = u64 [sp + 0xe8]\n112760: a2 = a2 << 0x18\n112763: a1 = a1 | a2\n112766: a0 = a0 | a1\n112769: a1 = u64 [sp + 0x8]\n112772: a1 = a1 << 0x8\n112775: a2 = u64 [sp + 0x20]\n112778: a1 = a1 | a2\n112781: a2 = u64 [sp + 0x18]\n112784: a2 = a2 << 0x10\n112787: a3 = u64 [sp + 0x10]\n112790: a3 = a3 << 0x18\n112793: a2 = a2 | a3\n112796: a1 = a1 | a2\n112799: a1 = a1 << 0x20\n112802: a0 = a0 | a1\n112805: a1 = u64 [sp + 0x28]\n112808: a1 = a1 << 0x8\n112811: a2 = u64 [sp + 0x48]\n112814: a1 = a1 | a2\n112817: a2 = u64 [sp + 0x38]\n112820: a2 = a2 << 0x10\n112823: a3 = u64 [sp + 0x30]\n112826: a3 = a3 << 0x18\n112829: a2 = a2 | a3\n112832: a1 = a1 | a2\n112835: a2 = u64 [sp + 0x40]\n112838: a2 = a2 << 0x8\n112841: a3 = u64 [sp + 0x60]\n112844: a2 = a2 | a3\n112847: a3 = u64 [sp + 0x58]\n112850: a3 = a3 << 0x10\n112853: a4 = u64 [sp + 0x50]\n112856: a4 = a4 << 0x18\n112859: a3 = a3 | a4\n112862: a2 = a2 | a3\n112865: a2 = a2 << 0x20\n112868: a1 = a1 | a2\n112871: a2 = u64 [sp + 0x68]\n112874: a2 = a2 << 0x8\n112877: a3 = u64 [sp + 0x88]\n112881: a2 = a2 | a3\n112884: a3 = u64 [sp + 0x78]\n112887: a3 = a3 << 0x10\n112890: a4 = u64 [sp + 0x70]\n112893: a4 = a4 << 0x18\n112896: a3 = a3 | a4\n112899: a2 = a2 | a3\n112902: a3 = u64 [sp + 0x80]\n112906: a3 = a3 << 0x8\n112909: a4 = u64 [sp + 0xa0]\n112913: a3 = a3 | a4\n112916: a4 = u64 [sp + 0x98]\n112920: a4 = a4 << 0x10\n112923: a5 = u64 [sp + 0x90]\n112927: a5 = a5 << 0x18\n112930: a4 = a4 | a5\n112933: a3 = a3 | a4\n112936: a3 = a3 << 0x20\n112939: a2 = a2 | a3\n112942: a3 = u64 [sp + 0xa8]\n112946: a3 = a3 << 0x8\n112949: a4 = u64 [sp + 0xc8]\n112953: a3 = a3 | a4\n112956: a4 = u64 [sp + 0xb8]\n112960: a4 = a4 << 0x10\n112963: a5 = u64 [sp + 0xb0]\n112967: a5 = a5 << 0x18\n112970: a4 = a4 | a5\n112973: a3 = a3 | a4\n112976: a4 = u64 [sp + 0xc0]\n112980: a4 = a4 << 0x8\n112983: a5 = u64 [sp + 0x120]\n112987: a4 = a4 | a5\n112990: a5 = u64 [sp + 0xd8]\n112994: a5 = a5 << 0x10\n112997: s1 = u64 [sp + 0xd0]\n113001: s1 = s1 << 0x18\n113004: a5 = a5 | s1\n113007: a4 = a4 | a5\n113010: a4 = a4 << 0x20\n113013: a3 = a3 | a4\n113016: a3 = reverse a3\n113018: a2 = reverse a2\n113020: a1 = reverse a1\n113022: a0 = reverse a0\n113024: a1 = a1 | a3\n113027: u64 [sp + 0x168] = a0\n113031: a0 = a0 | a2\n113034: a0 = a0 | a1\n113037: a1 = a1 | a2\n113040: a0 = a0 >> 0x20\n113043: a1 = a1 << 0x20\n113046: a0 = a0 | a1\n113049: jump @1451 if a0 != 0\n      : @1448 (gas: 4)\n113053: i32 a0 = t1 + 0\n113055: i32 s1 = t0 + 0\n113057: a1 = s1\n113059: ra = 1344, jump @0\n      : @1449 [@dyn 672] (gas: 4)\n113066: u64 [sp + 0x160] = a0\n113070: a0 = i32 [sp + 0x168]\n113074: a1 = 0\n113076: ra = 1346, jump @0\n      : @1450 [@dyn 673] (gas: 57)\n113083: u32 [sp + 448] = 0\n113087: a1 = s1 >u 0\n113089: a3 = u64 [sp + 0x170]\n113093: a2 = a3 + 0xffffffffffff6f6d\n113098: a3 = a2 <u a3\n113101: a4 = a3 + 0xffffffffffffffff\n113104: a3 = 0 if a4 != 0\n113106: a2 = a2 <u 0xfffffffffffff703\n113110: a5 = a4 + 0x1\n113113: a4 = a4 <u 0xffffffffffffffff\n113116: a4 = a2 if a5 == 0\n113119: a2 = a3 >u 0\n113121: a2 = a4 if a3 == 0\n113124: a1 = a1 | a2\n113127: a2 = -a1\n113129: u64 [sp + 0x1f8] = a2\n113133: u64 [sp + 0x1f0] = a2\n113137: u64 [sp + 0x1e8] = a2\n113141: u64 [sp + 0x1e0] = a2\n113145: a2 = sp + 0x180\n113149: a2 = a2 << 0x20\n113152: a2 = a2 >> 0x20\n113155: a1 = a1 << 0x23\n113158: s1 = a1 | a2\n113161: a1 = sp + 0x1a0\n113165: a1 = a1 << 0x20\n113168: a1 = a1 >> 0x20\n113171: a2 = sp + 0x1e0\n113175: a2 = a2 << 0x20\n113178: a3 = a2 | a1\n113181: a1 = u64 [sp + 0x160]\n113185: a1 = a1 << 0x20\n113188: a1 = a1 >> 0x20\n113191: a4 = u64 [sp + 0x178]\n113195: a4 = a4 << 0x20\n113198: a4 = a4 | a1\n113201: a0 = a0 << 0x20\n113204: a0 = a0 >> 0x20\n113207: a1 = sp + 0x1c0\n113211: a1 = a1 << 0x20\n113214: a5 = a1 | a0\n113217: a1 = 0xffffffffffffffff\n113220: a2 = 0xffffffffffffffff\n113223: a0 = s1\n113225: ecalli 1 // 'call'\n113227: a0 = a0 <u 0x1\n113230: a1 = u64 [sp]\n113232: u64 [a1 + 24] = 0\n113235: u64 [a1 + 16] = 0\n113238: u64 [a1 + 8] = 0\n113241: u64 [a1] = a0\n113243: sp = s0 + 0xfffffffffffffde0\n113247: ra = u64 [sp + 0x218]\n113251: s0 = u64 [sp + 0x210]\n113255: s1 = u64 [sp + 0x208]\n113259: sp = sp + 0x220\n113263: ret\n      : @1451 (gas: 1)\n113265: trap\n      : @1452 [export #0: 'call'] (gas: 2)\n113266: a0 = 0\n113268: ra = 1348, jump @25\n      : @1453 [@dyn 674] [export #1: 'deploy'] (gas: 2)\n113275: a0 = 0x1\n113278: ra = 1350, jump @25\n      : @1454 [@dyn 675] (gas: 27)\n113285: sp = sp + 0xffffffffffffff80\n113288: u64 [sp + 0x78] = ra\n113291: u64 [sp + 0x70] = s0\n113294: u64 [sp + 0x68] = s1\n113297: s0 = sp + 0x80\n113301: sp = sp & 0xfffffffffffffff0\n113304: t0 = u64 [a1]\n113306: t1 = u64 [a1 + 0x8]\n113309: t2 = u64 [a1 + 0x10]\n113312: a1 = u64 [a1 + 0x18]\n113315: a3 = u64 [a2]\n113317: a4 = u64 [a2 + 0x8]\n113320: a5 = u64 [a2 + 0x10]\n113323: a2 = u64 [a2 + 0x18]\n113326: s1 = a0\n113328: u64 [sp + 0x18] = a2\n113331: u64 [sp + 0x10] = a5\n113334: u64 [sp + 0x8] = a4\n113337: u64 [sp] = a3\n113339: u64 [sp + 0x38] = a1\n113342: u64 [sp + 0x30] = t2\n113345: u64 [sp + 0x28] = t1\n113348: a0 = sp + 0x40\n113351: a1 = sp + 0x20\n113354: a2 = sp\n113356: u64 [sp + 0x20] = t0\n113359: ra = 1352, jump @1011\n      : @1455 [@dyn 676] (gas: 14)\n113366: a0 = u64 [sp + 0x50]\n113369: a1 = u64 [sp + 0x58]\n113372: a2 = u64 [sp + 0x40]\n113375: a3 = u64 [sp + 0x48]\n113378: u64 [s1 + 0x10] = a0\n113381: u64 [s1 + 0x18] = a1\n113384: u64 [s1] = a2\n113386: u64 [s1 + 0x8] = a3\n113389: sp = s0 + 0xffffffffffffff80\n113392: ra = u64 [sp + 0x78]\n113395: s0 = u64 [sp + 0x70]\n113398: s1 = u64 [sp + 0x68]\n113401: sp = sp + 0x80\n113405: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"MAX_OWNER_COUNT()": "d74f8edd",
							"addOwner(address)": "7065cb48",
							"changeRequirement(uint256)": "ba51a6df",
							"confirmTransaction(uint256)": "c01a8c84",
							"confirmations(uint256,address)": "3411c81c",
							"executeTransaction(uint256)": "ee22610b",
							"getConfirmationCount(uint256)": "8b51d13f",
							"getConfirmations(uint256)": "b5dc40c3",
							"getOwners()": "a0e67e2b",
							"getTransactionCount(bool,bool)": "54741525",
							"getTransactionIds(uint256,uint256,bool,bool)": "a8abe69a",
							"isConfirmed(uint256)": "784547a7",
							"isOwner(address)": "2f54bf6e",
							"owners(uint256)": "025e7c27",
							"removeOwner(address)": "173825d9",
							"replaceOwner(address,address)": "e20056e6",
							"required()": "dc8452cd",
							"revokeConfirmation(uint256)": "20ea8d86",
							"submitTransaction(address,uint256,bytes)": "c6427474",
							"transactionCount()": "b77bf600",
							"transactions(uint256)": "9ace38c2"
						}
					},
					"irOptimized": "/// @use-src 1:\"ReviveMultisig.sol\"\nobject \"MultiSigWallet_1291\" {\n    code {\n        {\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1, _2 := copy_arguments_for_constructor_object_MultiSigWallet()\n            constructor_MultiSigWallet(_1, _2)\n            let _3 := allocate_unbounded()\n            codecopy(_3, dataoffset(\"MultiSigWallet_1291_deployed\"), datasize(\"MultiSigWallet_1291_deployed\"))\n            return(_3, datasize(\"MultiSigWallet_1291_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function round_up_to_mul_of(value) -> result\n        {\n            result := and(add(value, 31), not(31))\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n        { revert(0, 0) }\n        function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n        { revert(0, 0) }\n        function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n        { revert(0, 0) }\n        function array_allocation_size_array_address_dyn(length) -> size\n        {\n            if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n            size := mul(length, 0x20)\n            size := add(size, 0x20)\n        }\n        function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        { revert(0, 0) }\n        function cleanup_uint160(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function cleanup_address(value) -> cleaned\n        {\n            cleaned := cleanup_uint160(value)\n        }\n        function validator_revert_address(value)\n        {\n            if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n        }\n        function abi_decode_address_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_address(value)\n        }\n        function abi_decode_available_length_array_address_dyn_fromMemory(offset, length, end) -> array\n        {\n            array := allocate_memory(array_allocation_size_array_address_dyn(length))\n            let dst := array\n            mstore(array, length)\n            dst := add(array, 0x20)\n            let srcEnd := add(offset, mul(length, 0x20))\n            if gt(srcEnd, end)\n            {\n                revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n            }\n            let src := offset\n            for { } lt(src, srcEnd) { src := add(src, 0x20) }\n            {\n                let elementPos := src\n                mstore(dst, abi_decode_address_fromMemory(elementPos, end))\n                dst := add(dst, 0x20)\n            }\n        }\n        function abi_decode_array_address_dyn_fromMemory(offset, end) -> array\n        {\n            if iszero(slt(add(offset, 0x1f), end))\n            {\n                revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n            }\n            let length := mload(offset)\n            array := abi_decode_available_length_array_address_dyn_fromMemory(add(offset, 0x20), length, end)\n        }\n        function cleanup_uint256(value) -> cleaned\n        { cleaned := value }\n        function validator_revert_uint256(value)\n        {\n            if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n        }\n        function abi_decode_uint256_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_uint256(value)\n        }\n        function abi_decode_array_address_dynt_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n        {\n            if slt(sub(dataEnd, headStart), 64)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n            let offset := mload(add(headStart, 0))\n            if gt(offset, sub(shl(64, 1), 1))\n            {\n                revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            }\n            value0 := abi_decode_array_address_dyn_fromMemory(add(headStart, offset), dataEnd)\n            let offset_1 := 32\n            value1 := abi_decode_uint256_fromMemory(add(headStart, offset_1), dataEnd)\n        }\n        function copy_arguments_for_constructor_object_MultiSigWallet() -> ret_param, ret_param_1\n        {\n            let programSize := datasize(\"MultiSigWallet_1291\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            ret_param, ret_param_1 := abi_decode_array_address_dynt_uint256_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n        }\n        function array_length_array_address_dyn(value) -> length\n        { length := mload(value) }\n        function cleanup_t_rational_by(value) -> cleaned\n        { cleaned := value }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_rational_by_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n        }\n        /// @src 1:812:853  \"uint constant public MAX_OWNER_COUNT = 50\"\n        function constant_MAX_OWNER_COUNT() -> ret\n        {\n            /// @src 1:851:853  \"50\"\n            let expr := 0x32\n            let _1 := convert_rational_by_to_uint256(expr)\n            ret := _1\n        }\n        function cleanup_rational_by(value) -> cleaned\n        { cleaned := value }\n        function convert_t_rational_by_to_t_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n        }\n        function require_helper(condition)\n        {\n            if iszero(condition) { revert(0, 0) }\n        }\n        /// @ast-id 477 @src 1:2226:2451  \"modifier validRequirement(uint ownerCount, uint _required) {...\"\n        function modifier_validRequirement(var_owners_498_mpos, var_required)\n        {\n            /// @src 1:2945:2952  \"_owners\"\n            let _4_mpos := var_owners_498_mpos\n            let expr_503_mpos := _4_mpos\n            /// @src 1:2945:2959  \"_owners.length\"\n            let expr := array_length_array_address_dyn(expr_503_mpos)\n            let _1 := expr\n            let var_ownerCount := _1\n            /// @src 1:2961:2970  \"_required\"\n            let _2 := var_required\n            let expr_1 := _2\n            let _3 := expr_1\n            let var_required_1 := _3\n            /// @src 1:2303:2313  \"ownerCount\"\n            let _4 := var_ownerCount\n            let expr_2 := _4\n            /// @src 1:2317:2332  \"MAX_OWNER_COUNT\"\n            let expr_3 := constant_MAX_OWNER_COUNT()\n            /// @src 1:2303:2332  \"ownerCount <= MAX_OWNER_COUNT\"\n            let expr_4 := iszero(gt(cleanup_uint256(expr_2), cleanup_uint256(expr_3)))\n            /// @src 1:2303:2371  \"ownerCount <= MAX_OWNER_COUNT...\"\n            let expr_5 := expr_4\n            if expr_5\n            {\n                /// @src 1:2348:2357  \"_required\"\n                let _5 := var_required_1\n                let expr_6 := _5\n                /// @src 1:2361:2371  \"ownerCount\"\n                let _6 := var_ownerCount\n                let expr_7 := _6\n                /// @src 1:2348:2371  \"_required <= ownerCount\"\n                let expr_8 := iszero(gt(cleanup_uint256(expr_6), cleanup_uint256(expr_7)))\n                /// @src 1:2303:2371  \"ownerCount <= MAX_OWNER_COUNT...\"\n                expr_5 := expr_8\n            }\n            /// @src 1:2303:2401  \"ownerCount <= MAX_OWNER_COUNT...\"\n            let expr_9 := expr_5\n            if expr_9\n            {\n                /// @src 1:2387:2396  \"_required\"\n                let _7 := var_required_1\n                let expr_10 := _7\n                /// @src 1:2400:2401  \"0\"\n                let expr_11 := 0x00\n                /// @src 1:2387:2401  \"_required != 0\"\n                let expr_12 := iszero(eq(cleanup_uint256(expr_10), convert_t_rational_by_to_t_uint256(expr_11)))\n                /// @src 1:2303:2401  \"ownerCount <= MAX_OWNER_COUNT...\"\n                expr_9 := expr_12\n            }\n            /// @src 1:2303:2432  \"ownerCount <= MAX_OWNER_COUNT...\"\n            let expr_13 := expr_9\n            if expr_13\n            {\n                /// @src 1:2417:2427  \"ownerCount\"\n                let _8 := var_ownerCount\n                let expr_14 := _8\n                /// @src 1:2431:2432  \"0\"\n                let expr_15 := 0x00\n                /// @src 1:2417:2432  \"ownerCount != 0\"\n                let expr_16 := iszero(eq(cleanup_uint256(expr_14), convert_t_rational_by_to_t_uint256(expr_15)))\n                /// @src 1:2303:2432  \"ownerCount <= MAX_OWNER_COUNT...\"\n                expr_13 := expr_16\n            }\n            /// @src 1:2295:2433  \"require(ownerCount <= MAX_OWNER_COUNT...\"\n            require_helper(expr_13)\n            /// @src 1:2443:2444  \"_\"\n            fun_inner(var_owners_498_mpos, var_required)\n        }\n        /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n        function increment_wrapping_uint256(value) -> ret\n        {\n            ret := cleanup_uint256(add(value, 1))\n        }\n        function panic_error_0x32()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x32)\n            revert(0, 0x24)\n        }\n        function memory_array_index_access_address_dyn(baseRef, index) -> addr\n        {\n            if iszero(lt(index, array_length_array_address_dyn(baseRef))) { panic_error_0x32() }\n            let offset := mul(index, 32)\n            offset := add(offset, 32)\n            addr := add(baseRef, offset)\n        }\n        function read_from_memoryt_address(ptr) -> returnValue\n        {\n            let value := cleanup_address(mload(ptr))\n            returnValue := value\n        }\n        function convert_uint160_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_uint160(value)))\n        }\n        function convert_uint160_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function mapping_index_access_mapping_address_bool_of_address(slot, key) -> dataSlot\n        {\n            mstore(0, convert_address_to_address(key))\n            mstore(0x20, slot)\n            dataSlot := keccak256(0, 0x40)\n        }\n        function shift_right_unsigned(value) -> newValue\n        { newValue := shr(0, value) }\n        function cleanup_from_storage_bool(value) -> cleaned\n        { cleaned := and(value, 0xff) }\n        function extract_from_storage_value_offset_bool(slot_value) -> value\n        {\n            value := cleanup_from_storage_bool(shift_right_unsigned(slot_value))\n        }\n        function read_from_storage_split_offset_bool(slot) -> value\n        {\n            value := extract_from_storage_value_offset_bool(sload(slot))\n        }\n        function cleanup_bool(value) -> cleaned\n        {\n            cleaned := iszero(iszero(value))\n        }\n        function convert_rational_by_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_rational_by(value)))\n        }\n        function convert_rational_by_to_address(value) -> converted\n        {\n            converted := convert_rational_by_to_uint160(value)\n        }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift_0(value, toInsert) -> result\n        {\n            let mask := 255\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function convert_bool_to_bool(value) -> converted\n        {\n            converted := cleanup_bool(value)\n        }\n        function prepare_store_bool(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_bool_to_bool(slot, value)\n        {\n            let convertedValue := convert_bool_to_bool(value)\n            sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n        }\n        function array_length_array_address_dyn_storage(value) -> length\n        { length := sload(value) }\n        function array_convert_length_to_size_array_address_dyn_storage(length) -> size\n        {\n            size := length\n            size := div(add(length, sub(1, 1)), 1)\n        }\n        function array_dataslot_array_address_dyn_storage(ptr) -> data\n        {\n            data := ptr\n            mstore(0, ptr)\n            data := keccak256(0, 0x20)\n        }\n        function shift_left_dynamic(bits, value) -> newValue\n        { newValue := shl(bits, value) }\n        function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n        {\n            let shiftBits := mul(shiftBytes, 8)\n            let mask := shift_left_dynamic(shiftBits, not(0))\n            toInsert := shift_left_dynamic(shiftBits, toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function convert_uint256_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_uint256(value)))\n        }\n        function prepare_store_uint256(value) -> ret\n        { ret := value }\n        function update_storage_value_uint256_to_uint256(slot, offset, value)\n        {\n            let convertedValue := convert_uint256_to_uint256(value)\n            sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n        }\n        function zero_value_for_split_uint256() -> ret\n        { ret := 0 }\n        function storage_set_to_zero_uint256(slot, offset)\n        {\n            let zero := zero_value_for_split_uint256()\n            update_storage_value_uint256_to_uint256(slot, offset, zero)\n        }\n        function clear_storage_range_address(start, end)\n        {\n            for { } lt(start, end) { start := add(start, 1) }\n            {\n                storage_set_to_zero_uint256(start, 0)\n            }\n        }\n        function cleanup_storage_array_end_array_address_dyn(array, len, startIndex)\n        {\n            if lt(startIndex, len)\n            {\n                let oldSlotCount := array_convert_length_to_size_array_address_dyn_storage(len)\n                let newSlotCount := array_convert_length_to_size_array_address_dyn_storage(startIndex)\n                let arrayDataStart := array_dataslot_array_address_dyn_storage(array)\n                let deleteStart := add(arrayDataStart, newSlotCount)\n                let deleteEnd := add(arrayDataStart, oldSlotCount)\n                clear_storage_range_address(deleteStart, deleteEnd)\n            }\n        }\n        function resize_array_array_address_dyn_storage(array, newLen)\n        {\n            if gt(newLen, 18446744073709551616) { panic_error_0x41() }\n            let oldLen := array_length_array_address_dyn_storage(array)\n            sstore(array, newLen)\n            cleanup_storage_array_end_array_address_dyn(array, oldLen, newLen)\n        }\n        function array_dataslot_array_address_dyn(ptr) -> data\n        {\n            data := ptr\n            data := add(ptr, 0x20)\n        }\n        function prepare_store_address(value) -> ret\n        { ret := value }\n        function copy_array_to_storage_from_array_address_dyn_to_array_address_dyn(dst, src)\n        {\n            let length := array_length_array_address_dyn(src)\n            if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n            resize_array_array_address_dyn_storage(dst, length)\n            let srcPtr := array_dataslot_array_address_dyn(src)\n            let dstSlot := array_dataslot_array_address_dyn_storage(dst)\n            let fullSlots := div(length, 1)\n            let i := 0\n            for { } lt(i, fullSlots) { i := add(i, 1) }\n            {\n                let dstSlotValue := 0\n                let stackItem := read_from_memoryt_address(srcPtr)\n                let itemValue := prepare_store_address(stackItem)\n                dstSlotValue := itemValue\n                srcPtr := add(srcPtr, 32)\n                sstore(add(dstSlot, i), dstSlotValue)\n            }\n        }\n        function update_storage_value_offset_array_address_dyn_to_array_address_dyn(slot, value)\n        {\n            copy_array_to_storage_from_array_address_dyn_to_array_address_dyn(slot, value)\n        }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := not(0)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function update_storage_value_offset_uint256_to_uint256(slot, value)\n        {\n            let convertedValue := convert_uint256_to_uint256(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n        }\n        /// @src 1:2866:3208  \"constructor(address[] memory _owners, uint _required)...\"\n        function fun_inner(var_owners_mpos, var__required)\n        {\n            /// @src 1:2998:2999  \"0\"\n            let expr := 0x00\n            /// @src 1:2991:2999  \"uint i=0\"\n            let var_i := convert_t_rational_by_to_t_uint256(expr)\n            /// @src 1:2986:3146  \"for (uint i=0; i<_owners.length; i++) {...\"\n            for { }\n            /** @src 1:2991:2999  \"uint i=0\" */ 1\n            {\n                /// @src 1:3019:3022  \"i++\"\n                let _1 := var_i\n                let _2 := increment_wrapping_uint256(_1)\n                var_i := _2\n            }\n            {\n                /// @src 1:3001:3002  \"i\"\n                let _3 := var_i\n                let expr_1 := _3\n                /// @src 1:3003:3010  \"_owners\"\n                let _mpos := var_owners_mpos\n                let expr_513_mpos := _mpos\n                /// @src 1:3003:3017  \"_owners.length\"\n                let expr_2 := array_length_array_address_dyn(expr_513_mpos)\n                /// @src 1:3001:3017  \"i<_owners.length\"\n                let expr_3 := lt(cleanup_uint256(expr_1), cleanup_uint256(expr_2))\n                if iszero(expr_3) { break }\n                /// @src 1:3047:3054  \"isOwner\"\n                let _slot := 0x02\n                let expr_slot := _slot\n                /// @src 1:3055:3062  \"_owners\"\n                let _19_mpos := var_owners_mpos\n                let expr_521_mpos := _19_mpos\n                /// @src 1:3063:3064  \"i\"\n                let _4 := var_i\n                let expr_4 := _4\n                /// @src 1:3055:3065  \"_owners[i]\"\n                let _5 := read_from_memoryt_address(memory_array_index_access_address_dyn(expr_521_mpos, expr_4))\n                let expr_5 := _5\n                /// @src 1:3047:3066  \"isOwner[_owners[i]]\"\n                let _6 := mapping_index_access_mapping_address_bool_of_address(expr_slot, expr_5)\n                let _7 := read_from_storage_split_offset_bool(_6)\n                let expr_6 := _7\n                /// @src 1:3046:3066  \"!isOwner[_owners[i]]\"\n                let expr_7 := cleanup_bool(iszero(expr_6))\n                /// @src 1:3046:3094  \"!isOwner[_owners[i]] && _owners[i] != address(0)\"\n                let expr_8 := expr_7\n                if expr_8\n                {\n                    /// @src 1:3070:3077  \"_owners\"\n                    let _24_mpos := var_owners_mpos\n                    let expr_mpos := _24_mpos\n                    /// @src 1:3078:3079  \"i\"\n                    let _8 := var_i\n                    let expr_9 := _8\n                    /// @src 1:3070:3080  \"_owners[i]\"\n                    let _9 := read_from_memoryt_address(memory_array_index_access_address_dyn(expr_mpos, expr_9))\n                    let expr_10 := _9\n                    /// @src 1:3092:3093  \"0\"\n                    let expr_11 := 0x00\n                    /// @src 1:3084:3094  \"address(0)\"\n                    let expr_12 := convert_rational_by_to_address(expr_11)\n                    /// @src 1:3070:3094  \"_owners[i] != address(0)\"\n                    let expr_13 := iszero(eq(cleanup_address(expr_10), cleanup_address(expr_12)))\n                    /// @src 1:3046:3094  \"!isOwner[_owners[i]] && _owners[i] != address(0)\"\n                    expr_8 := expr_13\n                }\n                /// @src 1:3038:3095  \"require(!isOwner[_owners[i]] && _owners[i] != address(0))\"\n                require_helper(expr_8)\n                /// @src 1:3131:3135  \"true\"\n                let expr_14 := 0x01\n                /// @src 1:3109:3116  \"isOwner\"\n                let _27_slot := 0x02\n                let expr_537_slot := _27_slot\n                /// @src 1:3117:3124  \"_owners\"\n                let _28_mpos := var_owners_mpos\n                let expr_538_mpos := _28_mpos\n                /// @src 1:3125:3126  \"i\"\n                let _10 := var_i\n                let expr_15 := _10\n                /// @src 1:3117:3127  \"_owners[i]\"\n                let _11 := read_from_memoryt_address(memory_array_index_access_address_dyn(expr_538_mpos, expr_15))\n                let expr_16 := _11\n                /// @src 1:3109:3128  \"isOwner[_owners[i]]\"\n                let _12 := mapping_index_access_mapping_address_bool_of_address(expr_537_slot, expr_16)\n                /// @src 1:3109:3135  \"isOwner[_owners[i]] = true\"\n                update_storage_value_offset_bool_to_bool(_12, expr_14)\n            }\n            /// @src 1:3164:3171  \"_owners\"\n            let _32_mpos := var_owners_mpos\n            let expr_548_mpos := _32_mpos\n            /// @src 1:3155:3171  \"owners = _owners\"\n            update_storage_value_offset_array_address_dyn_to_array_address_dyn(0x03, expr_548_mpos)\n            /// @src 1:3192:3201  \"_required\"\n            let _13 := var__required\n            let expr_17 := _13\n            /// @src 1:3181:3201  \"required = _required\"\n            update_storage_value_offset_uint256_to_uint256(0x04, expr_17)\n        }\n        /// @ast-id 556 @src 1:2866:3208  \"constructor(address[] memory _owners, uint _required)...\"\n        function constructor_MultiSigWallet(var__owners_mpos, var_required)\n        {\n            modifier_validRequirement(var__owners_mpos, var_required)\n        }\n    }\n    /// @use-src 1:\"ReviveMultisig.sol\"\n    object \"MultiSigWallet_1291_deployed\" {\n        code {\n            {\n                /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n                mstore(64, 128)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x025e7c27 { external_fun_owners() }\n                    case 0x173825d9 { external_fun_removeOwner() }\n                    case 0x20ea8d86 {\n                        external_fun_revokeConfirmation()\n                    }\n                    case 0x2f54bf6e { external_fun_isOwner() }\n                    case 0x3411c81c { external_fun_confirmations() }\n                    case 0x54741525 {\n                        external_fun_getTransactionCount()\n                    }\n                    case 0x7065cb48 { external_fun_addOwner() }\n                    case 0x784547a7 { external_fun_isConfirmed() }\n                    case 0x8b51d13f {\n                        external_fun_getConfirmationCount()\n                    }\n                    case 0x9ace38c2 { external_fun_transactions() }\n                    case 0xa0e67e2b { external_fun_getOwners() }\n                    case 0xa8abe69a {\n                        external_fun_getTransactionIds()\n                    }\n                    case 0xb5dc40c3 {\n                        external_fun_getConfirmations()\n                    }\n                    case 0xb77bf600 {\n                        external_fun_transactionCount()\n                    }\n                    case 0xba51a6df {\n                        external_fun_changeRequirement()\n                    }\n                    case 0xc01a8c84 {\n                        external_fun_confirmTransaction()\n                    }\n                    case 0xc6427474 {\n                        external_fun_submitTransaction()\n                    }\n                    case 0xd74f8edd {\n                        external_fun_MAX_OWNER_COUNT()\n                    }\n                    case 0xdc8452cd { external_fun_required() }\n                    case 0xe20056e6 { external_fun_replaceOwner() }\n                    case 0xee22610b {\n                        external_fun_executeTransaction()\n                    }\n                    default { }\n                }\n                if iszero(calldatasize())\n                {\n                    fun()\n                    stop()\n                }\n                revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            { revert(0, 0) }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_address_dyn_storage(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_address_dyn_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_address_dyn(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_address_dyn_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_address_dyn_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 319 @src 1:1062:1085  \"address[] public owners\"\n            function getter_fun_owners(key) -> ret\n            {\n                let slot := 3\n                let offset := 0\n                if iszero(lt(key, array_length_array_address_dyn_storage(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_address_dyn(slot, key)\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_owners()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret := getter_fun_owners(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function abi_decode_tuple_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_removeOwner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                fun_removeOwner(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_revokeConfirmation()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_revokeConfirmation(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_bool_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_dynamict_bool(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_bool(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_bool(sload(slot), offset)\n            }\n            /// @ast-id 316 @src 1:1016:1056  \"mapping (address => bool) public isOwner\"\n            function getter_fun_isOwner(key) -> ret\n            {\n                let slot := 2\n                let offset := 0\n                slot := mapping_index_access_mapping_address_bool_of_address(slot, key)\n                ret := read_from_storage_split_dynamic_bool(slot, offset)\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bool_to_bool(value0, add(headStart, 0))\n            }\n            function external_fun_isOwner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret := getter_fun_isOwner(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bool(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_uint256t_address(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_address(add(headStart, offset_1), dataEnd)\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(slot, key) -> dataSlot\n            {\n                mstore(0, convert_uint256_to_uint256(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            /// @ast-id 312 @src 1:946:1010  \"mapping (uint => mapping (address => bool)) public confirmations\"\n            function getter_fun_confirmations(key, key_1) -> ret\n            {\n                let slot := 1\n                let offset := 0\n                slot := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(slot, key)\n                slot := mapping_index_access_mapping_address_bool_of_address(slot, key_1)\n                ret := read_from_storage_split_dynamic_bool(slot, offset)\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function external_fun_confirmations()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_uint256t_address(4, calldatasize())\n                let ret := getter_fun_confirmations(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bool(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_bool(value)\n            {\n                if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n            }\n            function abi_decode_bool(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_bool(value)\n            }\n            function abi_decode_boolt_bool(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_bool(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_bool(add(headStart, offset_1), dataEnd)\n            }\n            function abi_encode_uint256_to_uint256_fromStack(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256_fromStack(value0, add(headStart, 0))\n            }\n            function external_fun_getTransactionCount()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_boolt_bool(4, calldatasize())\n                let ret := fun_getTransactionCount(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_addOwner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                fun_addOwner(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_isConfirmed()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret := fun_isConfirmed(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bool(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_getConfirmationCount()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret := fun_getConfirmationCount(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(slot, key) -> dataSlot\n            {\n                mstore(0, convert_uint256_to_uint256(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function panic_error_0x22()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := div(data, 2)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32)) { panic_error_0x22() }\n            }\n            function array_storeLengthForEncoding_bytes_memory_ptr(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_bytes_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function abi_encode_bytes_storage(value, pos) -> ret\n            {\n                let slotValue := sload(value)\n                let length := extract_byte_array_length(slotValue)\n                pos := array_storeLengthForEncoding_bytes_memory_ptr(pos, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(pos, and(slotValue, not(0xff)))\n                    ret := add(pos, mul(0x20, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_bytes_storage(value)\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(pos, i)\n                }\n            }\n            function abi_encodeUpdatedPos_bytes_storage(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_bytes_storage(value0, pos)\n            }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function copy_array_from_storage_to_memory_bytes(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_bytes_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            /// @ast-id 306 @src 1:891:940  \"mapping (uint => Transaction) public transactions\"\n            function getter_fun_transactions(key) -> ret, ret_1, ret_mpos, ret_2\n            {\n                let slot := 0\n                slot := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(slot, key)\n                ret := read_from_storage_split_offset_address(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                ret_mpos := copy_array_from_storage_to_memory_bytes(add(slot, 2))\n                ret_2 := read_from_storage_split_offset_bool(add(slot, 3))\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function array_length_bytes(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_bytes(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                mcopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_bytes(value, pos) -> end\n            {\n                let length := array_length_bytes(value)\n                pos := array_storeLengthForEncoding_bytes(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of(length))\n            }\n            function abi_encode_address_uint256_bytes_bool(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256_fromStack(value1, add(headStart, 32))\n                mstore(add(headStart, 64), sub(tail, headStart))\n                tail := abi_encode_bytes(value2, tail)\n                abi_encode_bool_to_bool(value3, add(headStart, 96))\n            }\n            function external_fun_transactions()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3 := getter_fun_transactions(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_uint256_bytes_bool(memPos, ret, ret_1, ret_2, ret_3)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function array_length_array_address_dyn(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_array_address_dyn_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_array_address_dyn(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function abi_encode_address_to_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encodeUpdatedPos_address(value0, pos) -> updatedPos\n            {\n                abi_encode_address_to_address(value0, pos)\n                updatedPos := add(pos, 0x20)\n            }\n            function array_nextElement_array_address_dyn(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_address_dyn(value, pos) -> end\n            {\n                let length := array_length_array_address_dyn(value)\n                pos := array_storeLengthForEncoding_array_address_dyn_fromStack(pos, length)\n                let baseRef := array_dataslot_array_address_dyn(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_address(elementValue0, pos)\n                    srcPtr := array_nextElement_array_address_dyn(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encode_array_address_dyn_memory_ptr(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_array_address_dyn(value0, tail)\n            }\n            function external_fun_getOwners()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := fun_getOwners()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_address_dyn_memory_ptr(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_uint256t_uint256t_boolt_bool(headStart, dataEnd) -> value0, value1, value2, value3\n            {\n                if slt(sub(dataEnd, headStart), 128)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_bool(add(headStart, offset_2), dataEnd)\n                let offset_3 := 96\n                value3 := abi_decode_bool(add(headStart, offset_3), dataEnd)\n            }\n            function array_length_array_uint256_dyn(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_array_uint256_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_array_uint256_dyn(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encodeUpdatedPos_uint256(value0, pos) -> updatedPos\n            {\n                abi_encode_uint256_to_uint256(value0, pos)\n                updatedPos := add(pos, 0x20)\n            }\n            function array_nextElement_array_uint256_dyn(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_uint256_dyn_memory_ptr(value, pos) -> end\n            {\n                let length := array_length_array_uint256_dyn(value)\n                pos := array_storeLengthForEncoding_array_uint256_dyn(pos, length)\n                let baseRef := array_dataslot_array_uint256_dyn(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_uint256(elementValue0, pos)\n                    srcPtr := array_nextElement_array_uint256_dyn(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encode_array_uint256_dyn(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_array_uint256_dyn_memory_ptr(value0, tail)\n            }\n            function external_fun_getTransactionIds()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2, param_3 := abi_decode_uint256t_uint256t_boolt_bool(4, calldatasize())\n                let ret := fun_getTransactionIds(param, param_1, param_2, param_3)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_uint256_dyn(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_getConfirmations()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret := fun_getConfirmations(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_address_dyn_memory_ptr(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 323 @src 1:1117:1145  \"uint public transactionCount\"\n            function getter_fun_transactionCount() -> ret\n            {\n                let slot := 5\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function external_fun_transactionCount()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_transactionCount()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_changeRequirement()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_changeRequirement(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_confirmTransaction()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_confirmTransaction(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n            { revert(0, 0) }\n            function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n            { revert(0, 0) }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_bytes(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of(length)\n                size := add(size, 0x20)\n            }\n            function copy_calldata_to_memory_with_cleanup(src, dst, length)\n            {\n                calldatacopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_decode_available_length_bytes(src, length, end) -> array\n            {\n                array := allocate_memory(array_allocation_size_bytes(length))\n                mstore(array, length)\n                let dst := add(array, 0x20)\n                if gt(add(src, length), end)\n                {\n                    revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                }\n                copy_calldata_to_memory_with_cleanup(src, dst, length)\n            }\n            function abi_decode_bytes(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                let length := calldataload(offset)\n                array := abi_decode_available_length_bytes(add(offset, 0x20), length, end)\n            }\n            function abi_decode_addresst_uint256t_bytes(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := calldataload(add(headStart, 64))\n                if gt(offset_2, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value2 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n            }\n            function external_fun_submitTransaction()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2 := abi_decode_addresst_uint256t_bytes(4, calldatasize())\n                let ret := fun_submitTransaction(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_rational_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by_1(value)))\n            }\n            /// @src 1:812:853  \"uint constant public MAX_OWNER_COUNT = 50\"\n            function constant_MAX_OWNER_COUNT() -> ret\n            {\n                /// @src 1:851:853  \"50\"\n                let expr := 0x32\n                let _1 := convert_rational_by_to_uint256(expr)\n                ret := _1\n            }\n            /// @ast-id 301 @src 1:812:853  \"uint constant public MAX_OWNER_COUNT = 50\"\n            function getter_fun_MAX_OWNER_COUNT() -> ret\n            {\n                ret := constant_MAX_OWNER_COUNT()\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function external_fun_MAX_OWNER_COUNT()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_MAX_OWNER_COUNT()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 321 @src 1:1091:1111  \"uint public required\"\n            function getter_fun_required() -> ret\n            {\n                let slot := 4\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function external_fun_required()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_required()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_addresst_address(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_address(add(headStart, offset_1), dataEnd)\n            }\n            function external_fun_replaceOwner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_address(4, calldatasize())\n                fun_replaceOwner(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_executeTransaction()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_executeTransaction(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n            { revert(0, 0) }\n            function convert_contract_MultiSigWallet_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function require_helper(condition)\n            {\n                if iszero(condition) { revert(0, 0) }\n            }\n            /// @ast-id 346 @src 1:1309:1395  \"modifier onlyWallet() {...\"\n            function modifier_onlyWallet_600(var_owner)\n            {\n                /// @src 1:1349:1359  \"msg.sender\"\n                let expr := caller()\n                /// @src 1:1371:1375  \"this\"\n                let expr_address := address()\n                /// @src 1:1363:1376  \"address(this)\"\n                let expr_1 := convert_contract_MultiSigWallet_to_address(expr_address)\n                /// @src 1:1349:1376  \"msg.sender == address(this)\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 1:1341:1377  \"require(msg.sender == address(this))\"\n                require_helper(expr_2)\n                /// @src 1:1387:1388  \"_\"\n                modifier_ownerExists_603(var_owner)\n            }\n            /// @ast-id 371 @src 1:1501:1588  \"modifier ownerExists(address owner) {...\"\n            function modifier_ownerExists_603(var_owner)\n            {\n                /// @src 1:3830:3835  \"owner\"\n                let _1 := var_owner\n                let expr := _1\n                let _2 := expr\n                let var_owner_1 := _2\n                /// @src 1:1555:1562  \"isOwner\"\n                let _4_slot := 0x02\n                let expr_364_slot := _4_slot\n                /// @src 1:1563:1568  \"owner\"\n                let _3 := var_owner_1\n                let expr_1 := _3\n                /// @src 1:1555:1569  \"isOwner[owner]\"\n                let _4 := mapping_index_access_mapping_address_bool_of_address(expr_364_slot, expr_1)\n                let _5 := read_from_storage_split_offset_bool(_4)\n                let expr_2 := _5\n                /// @src 1:1547:1570  \"require(isOwner[owner])\"\n                require_helper(expr_2)\n                /// @src 1:1580:1581  \"_\"\n                fun_removeOwner_inner(var_owner)\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := 255\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_0_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n            }\n            function increment_wrapping_uint256(value) -> ret\n            {\n                ret := cleanup_uint256(add(value, 1))\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                diff := sub(x, y)\n                if gt(diff, x) { panic_error_0x11() }\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic20(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, sub(shl(160, 1), 1))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_address_to_address(slot, offset, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_dynamic20(sload(slot), offset, prepare_store_address(convertedValue)))\n            }\n            function convert_array_array_address_dyn_storage_to_array_address_dyn_ptr(value) -> converted\n            { converted := value }\n            function panic_error_0x31()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x31)\n                revert(0, 0x24)\n            }\n            function array_length_array_address_dyn_storage_ptr(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_address_dyn_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_address_dyn_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_address_dyn_storage_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_address_dyn_storage_ptr(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function zero_value_for_split_address() -> ret\n            { ret := 0 }\n            function storage_set_to_zero_address(slot, offset)\n            {\n                let zero := zero_value_for_split_address()\n                update_storage_value_address_to_address(slot, offset, zero)\n            }\n            function array_pop_array_address_dyn_storage_ptr(array)\n            {\n                let oldLen := array_length_array_address_dyn_storage_ptr(array)\n                if iszero(oldLen) { panic_error_0x31() }\n                let newLen := sub(oldLen, 1)\n                let slot, offset := storage_array_index_access_address_dyn_ptr(array, newLen)\n                storage_set_to_zero_address(slot, offset)\n                sstore(array, newLen)\n            }\n            /// @src 1:3740:4199  \"function removeOwner(address owner)...\"\n            function fun_removeOwner_inner(var_owner)\n            {\n                /// @src 1:3868:3873  \"false\"\n                let expr := 0x00\n                /// @src 1:3851:3858  \"isOwner\"\n                let _8_slot := 0x02\n                let expr_605_slot := _8_slot\n                /// @src 1:3859:3864  \"owner\"\n                let _1 := var_owner\n                let expr_1 := _1\n                /// @src 1:3851:3865  \"isOwner[owner]\"\n                let _2 := mapping_index_access_mapping_address_bool_of_address(expr_605_slot, expr_1)\n                /// @src 1:3851:3873  \"isOwner[owner] = false\"\n                update_storage_value_offset_bool_to_bool(_2, expr)\n                /// @src 1:3895:3896  \"0\"\n                let expr_2 := 0x00\n                /// @src 1:3888:3896  \"uint i=0\"\n                let var_i := convert_rational_0_by_1_to_uint256(expr_2)\n                /// @src 1:3883:4053  \"for (uint i=0; i<owners.length - 1; i++)...\"\n                for { }\n                /** @src 1:3888:3896  \"uint i=0\" */ 1\n                {\n                    /// @src 1:3919:3922  \"i++\"\n                    let _3 := var_i\n                    let _4 := increment_wrapping_uint256(_3)\n                    var_i := _4\n                }\n                {\n                    /// @src 1:3898:3899  \"i\"\n                    let _5 := var_i\n                    let expr_3 := _5\n                    /// @src 1:3900:3906  \"owners\"\n                    let _14_slot := 0x03\n                    let expr_616_slot := _14_slot\n                    /// @src 1:3900:3913  \"owners.length\"\n                    let expr_4 := array_length_array_address_dyn_storage(expr_616_slot)\n                    /// @src 1:3916:3917  \"1\"\n                    let expr_5 := 0x01\n                    /// @src 1:3900:3917  \"owners.length - 1\"\n                    let expr_6 := checked_sub_uint256(expr_4, convert_t_rational_by_to_t_uint256(expr_5))\n                    /// @src 1:3898:3917  \"i<owners.length - 1\"\n                    let expr_7 := lt(cleanup_uint256(expr_3), cleanup_uint256(expr_6))\n                    if iszero(expr_7) { break }\n                    /// @src 1:3940:3946  \"owners\"\n                    let _15_slot := 0x03\n                    let expr_624_slot := _15_slot\n                    /// @src 1:3947:3948  \"i\"\n                    let _6 := var_i\n                    let expr_8 := _6\n                    /// @src 1:3940:3949  \"owners[i]\"\n                    let _7, _8 := storage_array_index_access_address_dyn(expr_624_slot, expr_8)\n                    let _9 := read_from_storage_split_dynamic_address(_7, _8)\n                    let expr_9 := _9\n                    /// @src 1:3953:3958  \"owner\"\n                    let _10 := var_owner\n                    let expr_10 := _10\n                    /// @src 1:3940:3958  \"owners[i] == owner\"\n                    let expr_11 := eq(cleanup_address(expr_9), cleanup_address(expr_10))\n                    /// @src 1:3936:4053  \"if (owners[i] == owner) {...\"\n                    if expr_11\n                    {\n                        /// @src 1:3990:3996  \"owners\"\n                        let _21_slot := 0x03\n                        let expr_632_slot := _21_slot\n                        /// @src 1:3997:4003  \"owners\"\n                        let _22_slot := 0x03\n                        let expr_633_slot := _22_slot\n                        /// @src 1:3997:4010  \"owners.length\"\n                        let expr_12 := array_length_array_address_dyn_storage(expr_633_slot)\n                        /// @src 1:4013:4014  \"1\"\n                        let expr_13 := 0x01\n                        /// @src 1:3997:4014  \"owners.length - 1\"\n                        let expr_14 := checked_sub_uint256(expr_12, convert_t_rational_by_to_t_uint256(expr_13))\n                        /// @src 1:3990:4015  \"owners[owners.length - 1]\"\n                        let _11, _12 := storage_array_index_access_address_dyn(expr_632_slot, expr_14)\n                        let _13 := read_from_storage_split_dynamic_address(_11, _12)\n                        let expr_15 := _13\n                        /// @src 1:3978:3984  \"owners\"\n                        let _26_slot := 0x03\n                        let expr_629_slot := _26_slot\n                        /// @src 1:3985:3986  \"i\"\n                        let _14 := var_i\n                        let expr_16 := _14\n                        /// @src 1:3978:3987  \"owners[i]\"\n                        let _15, _16 := storage_array_index_access_address_dyn(expr_629_slot, expr_16)\n                        /// @src 1:3978:4015  \"owners[i] = owners[owners.length - 1]\"\n                        update_storage_value_address_to_address(_15, _16, expr_15)\n                        /// @src 1:4033:4038  \"break\"\n                        break\n                    }\n                }\n                /// @src 1:4062:4068  \"owners\"\n                let _30_slot := 0x03\n                let expr_644_slot := _30_slot\n                /// @src 1:4062:4072  \"owners.pop\"\n                let expr_self_slot := convert_array_array_address_dyn_storage_to_array_address_dyn_ptr(expr_644_slot)\n                array_pop_array_address_dyn_storage_ptr(expr_self_slot)\n                /// @src 1:4088:4096  \"required\"\n                let _17 := read_from_storage_split_offset_uint256(0x04)\n                let expr_17 := _17\n                /// @src 1:4099:4105  \"owners\"\n                let _32_slot := 0x03\n                let expr_650_slot := _32_slot\n                /// @src 1:4099:4112  \"owners.length\"\n                let expr_18 := array_length_array_address_dyn_storage(expr_650_slot)\n                /// @src 1:4088:4112  \"required > owners.length\"\n                let expr_19 := gt(cleanup_uint256(expr_17), cleanup_uint256(expr_18))\n                /// @src 1:4084:4158  \"if (required > owners.length)...\"\n                if expr_19\n                {\n                    /// @src 1:4144:4150  \"owners\"\n                    let _33_slot := 0x03\n                    let expr_654_slot := _33_slot\n                    /// @src 1:4144:4157  \"owners.length\"\n                    let expr_20 := array_length_array_address_dyn_storage(expr_654_slot)\n                    fun_changeRequirement(expr_20)\n                }\n                /// @src 1:4186:4191  \"owner\"\n                let _18 := var_owner\n                let expr_21 := _18\n                /// @src 1:4173:4192  \"OwnerRemoval(owner)\"\n                let _19 := 0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90\n                let _20 := convert_address_to_address(expr_21)\n                let _21 := allocate_unbounded()\n                let _22 := abi_encode_tuple(_21)\n                log2(_21, sub(_22, _21), _19, _20)\n            }\n            /// @ast-id 664 @src 1:3740:4199  \"function removeOwner(address owner)...\"\n            function fun_removeOwner(var_owner)\n            {\n                modifier_onlyWallet_600(var_owner)\n            }\n            /// @ast-id 371 @src 1:1501:1588  \"modifier ownerExists(address owner) {...\"\n            function modifier_ownerExists(var_transactionId)\n            {\n                /// @src 1:6429:6439  \"msg.sender\"\n                let expr := caller()\n                let _1 := expr\n                let var_owner := _1\n                /// @src 1:1555:1562  \"isOwner\"\n                let _40_slot := 0x02\n                let expr_slot := _40_slot\n                /// @src 1:1563:1568  \"owner\"\n                let _2 := var_owner\n                let expr_1 := _2\n                /// @src 1:1555:1569  \"isOwner[owner]\"\n                let _3 := mapping_index_access_mapping_address_bool_of_address(expr_slot, expr_1)\n                let _4 := read_from_storage_split_offset_bool(_3)\n                let expr_2 := _4\n                /// @src 1:1547:1570  \"require(isOwner[owner])\"\n                require_helper(expr_2)\n                /// @src 1:1580:1581  \"_\"\n                modifier_confirmed(var_transactionId)\n            }\n            /// @ast-id 405 @src 1:1737:1863  \"modifier confirmed(uint transactionId, address owner) {...\"\n            function modifier_confirmed(var_transactionId)\n            {\n                /// @src 1:6459:6472  \"transactionId\"\n                let _1 := var_transactionId\n                let expr := _1\n                let _2 := expr\n                let var_transactionId_1 := _2\n                /// @src 1:6474:6484  \"msg.sender\"\n                let expr_1 := caller()\n                let _3 := expr_1\n                let var_owner := _3\n                /// @src 1:1809:1822  \"confirmations\"\n                let _47_slot := 0x01\n                let expr_396_slot := _47_slot\n                /// @src 1:1823:1836  \"transactionId\"\n                let _4 := var_transactionId_1\n                let expr_2 := _4\n                /// @src 1:1809:1837  \"confirmations[transactionId]\"\n                let _5 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_396_slot, expr_2)\n                let _50_slot := _5\n                let expr_398_slot := _50_slot\n                /// @src 1:1838:1843  \"owner\"\n                let _6 := var_owner\n                let expr_3 := _6\n                /// @src 1:1809:1844  \"confirmations[transactionId][owner]\"\n                let _7 := mapping_index_access_mapping_address_bool_of_address(expr_398_slot, expr_3)\n                let _8 := read_from_storage_split_offset_bool(_7)\n                let expr_4 := _8\n                /// @src 1:1801:1845  \"require(confirmations[transactionId][owner])\"\n                require_helper(expr_4)\n                /// @src 1:1855:1856  \"_\"\n                modifier_notExecuted(var_transactionId)\n            }\n            /// @ast-id 436 @src 1:2005:2120  \"modifier notExecuted(uint transactionId) {...\"\n            function modifier_notExecuted(var_transactionId)\n            {\n                /// @src 1:6506:6519  \"transactionId\"\n                let _1 := var_transactionId\n                let expr := _1\n                let _2 := expr\n                let var_transactionId_1 := _2\n                /// @src 1:2065:2077  \"transactions\"\n                let _56_slot := 0x00\n                let expr_427_slot := _56_slot\n                /// @src 1:2078:2091  \"transactionId\"\n                let _3 := var_transactionId_1\n                let expr_1 := _3\n                /// @src 1:2065:2092  \"transactions[transactionId]\"\n                let _4 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_427_slot, expr_1)\n                let _59_slot := _4\n                let expr_slot := _59_slot\n                /// @src 1:2065:2101  \"transactions[transactionId].executed\"\n                let _5 := add(expr_slot, 3)\n                let _6 := read_from_storage_split_offset_bool(_5)\n                let expr_2 := _6\n                /// @src 1:2064:2101  \"!transactions[transactionId].executed\"\n                let expr_3 := cleanup_bool(iszero(expr_2))\n                /// @src 1:2056:2102  \"require(!transactions[transactionId].executed)\"\n                require_helper(expr_3)\n                /// @src 1:2112:2113  \"_\"\n                fun_revokeConfirmation_inner(var_transactionId)\n            }\n            /// @src 1:6346:6642  \"function revokeConfirmation(uint transactionId)...\"\n            function fun_revokeConfirmation_inner(var_transactionId)\n            {\n                /// @src 1:6578:6583  \"false\"\n                let expr := 0x00\n                /// @src 1:6535:6548  \"confirmations\"\n                let _62_slot := 0x01\n                let expr_830_slot := _62_slot\n                /// @src 1:6549:6562  \"transactionId\"\n                let _1 := var_transactionId\n                let expr_1 := _1\n                /// @src 1:6535:6563  \"confirmations[transactionId]\"\n                let _2 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_830_slot, expr_1)\n                let _65_slot := _2\n                let expr_834_slot := _65_slot\n                /// @src 1:6564:6574  \"msg.sender\"\n                let expr_2 := caller()\n                /// @src 1:6535:6575  \"confirmations[transactionId][msg.sender]\"\n                let _3 := mapping_index_access_mapping_address_bool_of_address(expr_834_slot, expr_2)\n                /// @src 1:6535:6583  \"confirmations[transactionId][msg.sender] = false\"\n                update_storage_value_offset_bool_to_bool(_3, expr)\n                /// @src 1:6609:6619  \"msg.sender\"\n                let expr_3 := caller()\n                /// @src 1:6621:6634  \"transactionId\"\n                let _4 := var_transactionId\n                let expr_4 := _4\n                /// @src 1:6598:6635  \"Revocation(msg.sender, transactionId)\"\n                let _5 := 0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9\n                let _6 := convert_address_to_address(expr_3)\n                let _7 := convert_uint256_to_uint256(expr_4)\n                let _8 := allocate_unbounded()\n                let _9 := abi_encode_tuple(_8)\n                log3(_8, sub(_9, _8), _5, _6, _7)\n            }\n            /// @ast-id 846 @src 1:6346:6642  \"function revokeConfirmation(uint transactionId)...\"\n            function fun_revokeConfirmation(var_transactionId)\n            {\n                modifier_ownerExists(var_transactionId)\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function zero_value_for_split_uint256() -> ret\n            { ret := 0 }\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            /// @ast-id 1089 @src 1:10675:10990  \"function getTransactionCount(bool pending, bool executed)...\"\n            function fun_getTransactionCount(var_pending, var_executed) -> var_count\n            {\n                /// @src 1:10778:10788  \"uint count\"\n                let zero_uint256 := zero_value_for_split_uint256()\n                var_count := zero_uint256\n                /// @src 1:10816:10817  \"0\"\n                let expr := 0x00\n                /// @src 1:10809:10817  \"uint i=0\"\n                let var_i := convert_rational_0_by_1_to_uint256(expr)\n                /// @src 1:10804:10983  \"for (uint i=0; i<transactionCount; i++)...\"\n                for { }\n                /** @src 1:10809:10817  \"uint i=0\" */ 1\n                {\n                    /// @src 1:10839:10842  \"i++\"\n                    let _1 := var_i\n                    let _2 := increment_wrapping_uint256(_1)\n                    var_i := _2\n                }\n                {\n                    /// @src 1:10819:10820  \"i\"\n                    let _3 := var_i\n                    let expr_1 := _3\n                    /// @src 1:10821:10837  \"transactionCount\"\n                    let _4 := read_from_storage_split_offset_uint256(0x05)\n                    let expr_2 := _4\n                    /// @src 1:10819:10837  \"i<transactionCount\"\n                    let expr_3 := lt(cleanup_uint256(expr_1), cleanup_uint256(expr_2))\n                    if iszero(expr_3) { break }\n                    /// @src 1:10863:10870  \"pending\"\n                    let _5 := var_pending\n                    let expr_4 := _5\n                    /// @src 1:10863:10899  \"pending && !transactions[i].executed\"\n                    let expr_5 := expr_4\n                    if expr_5\n                    {\n                        /// @src 1:10875:10887  \"transactions\"\n                        let _79_slot := 0x00\n                        let expr_1069_slot := _79_slot\n                        /// @src 1:10888:10889  \"i\"\n                        let _6 := var_i\n                        let expr_6 := _6\n                        /// @src 1:10875:10890  \"transactions[i]\"\n                        let _7 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_1069_slot, expr_6)\n                        let _82_slot := _7\n                        let expr_1071_slot := _82_slot\n                        /// @src 1:10875:10899  \"transactions[i].executed\"\n                        let _8 := add(expr_1071_slot, 3)\n                        let _9 := read_from_storage_split_offset_bool(_8)\n                        let expr_7 := _9\n                        /// @src 1:10874:10899  \"!transactions[i].executed\"\n                        let expr_8 := cleanup_bool(iszero(expr_7))\n                        /// @src 1:10863:10899  \"pending && !transactions[i].executed\"\n                        expr_5 := expr_8\n                    }\n                    /// @src 1:10863:10955  \"pending && !transactions[i].executed...\"\n                    let expr_9 := expr_5\n                    if iszero(expr_9)\n                    {\n                        /// @src 1:10919:10927  \"executed\"\n                        let _10 := var_executed\n                        let expr_10 := _10\n                        /// @src 1:10919:10955  \"executed && transactions[i].executed\"\n                        let expr_11 := expr_10\n                        if expr_11\n                        {\n                            /// @src 1:10931:10943  \"transactions\"\n                            let _86_slot := 0x00\n                            let expr_1076_slot := _86_slot\n                            /// @src 1:10944:10945  \"i\"\n                            let _11 := var_i\n                            let expr_12 := _11\n                            /// @src 1:10931:10946  \"transactions[i]\"\n                            let _12 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_1076_slot, expr_12)\n                            let _89_slot := _12\n                            let expr_1078_slot := _89_slot\n                            /// @src 1:10931:10955  \"transactions[i].executed\"\n                            let _13 := add(expr_1078_slot, 3)\n                            let _14 := read_from_storage_split_offset_bool(_13)\n                            let expr_13 := _14\n                            /// @src 1:10919:10955  \"executed && transactions[i].executed\"\n                            expr_11 := expr_13\n                        }\n                        /// @src 1:10863:10955  \"pending && !transactions[i].executed...\"\n                        expr_9 := expr_11\n                    }\n                    /// @src 1:10856:10983  \"if (   pending && !transactions[i].executed...\"\n                    if expr_9\n                    {\n                        /// @src 1:10982:10983  \"1\"\n                        let expr_14 := 0x01\n                        /// @src 1:10973:10983  \"count += 1\"\n                        let _15 := convert_t_rational_by_to_t_uint256(expr_14)\n                        let _16 := var_count\n                        let expr_15 := checked_add_uint256(_16, _15)\n                        var_count := expr_15\n                    }\n                }\n            }\n            /// @ast-id 346 @src 1:1309:1395  \"modifier onlyWallet() {...\"\n            function modifier_onlyWallet(var_owner)\n            {\n                /// @src 1:1349:1359  \"msg.sender\"\n                let expr := caller()\n                /// @src 1:1371:1375  \"this\"\n                let expr_address := address()\n                /// @src 1:1363:1376  \"address(this)\"\n                let expr_1 := convert_contract_MultiSigWallet_to_address(expr_address)\n                /// @src 1:1349:1376  \"msg.sender == address(this)\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 1:1341:1377  \"require(msg.sender == address(this))\"\n                require_helper(expr_2)\n                /// @src 1:1387:1388  \"_\"\n                modifier_ownerDoesNotExist(var_owner)\n            }\n            /// @ast-id 359 @src 1:1401:1495  \"modifier ownerDoesNotExist(address owner) {...\"\n            function modifier_ownerDoesNotExist(var_owner)\n            {\n                /// @src 1:3428:3433  \"owner\"\n                let _1 := var_owner\n                let expr := _1\n                let _2 := expr\n                let var_owner_1 := _2\n                /// @src 1:1462:1469  \"isOwner\"\n                let _96_slot := 0x02\n                let expr_351_slot := _96_slot\n                /// @src 1:1470:1475  \"owner\"\n                let _3 := var_owner_1\n                let expr_1 := _3\n                /// @src 1:1462:1476  \"isOwner[owner]\"\n                let _4 := mapping_index_access_mapping_address_bool_of_address(expr_351_slot, expr_1)\n                let _5 := read_from_storage_split_offset_bool(_4)\n                let expr_2 := _5\n                /// @src 1:1461:1476  \"!isOwner[owner]\"\n                let expr_3 := cleanup_bool(iszero(expr_2))\n                /// @src 1:1453:1477  \"require(!isOwner[owner])\"\n                require_helper(expr_3)\n                /// @src 1:1487:1488  \"_\"\n                modifier_notNull(var_owner)\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function convert_rational_by_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_t_rational_by(value)))\n            }\n            function convert_rational_by_to_address(value) -> converted\n            {\n                converted := convert_rational_by_to_uint160(value)\n            }\n            /// @ast-id 451 @src 1:2126:2220  \"modifier notNull(address _address) {...\"\n            function modifier_notNull(var_owner)\n            {\n                /// @src 1:3451:3456  \"owner\"\n                let _1 := var_owner\n                let expr := _1\n                let _2 := expr\n                let var__address := _2\n                /// @src 1:2179:2187  \"_address\"\n                let _3 := var__address\n                let expr_1 := _3\n                /// @src 1:2199:2200  \"0\"\n                let expr_2 := 0x00\n                /// @src 1:2191:2201  \"address(0)\"\n                let expr_3 := convert_rational_by_to_address(expr_2)\n                /// @src 1:2179:2201  \"_address != address(0)\"\n                let expr_4 := iszero(eq(cleanup_address(expr_1), cleanup_address(expr_3)))\n                /// @src 1:2171:2202  \"require(_address != address(0))\"\n                require_helper(expr_4)\n                /// @src 1:2212:2213  \"_\"\n                modifier_validRequirement_575(var_owner)\n            }\n            /// @ast-id 477 @src 1:2226:2451  \"modifier validRequirement(uint ownerCount, uint _required) {...\"\n            function modifier_validRequirement_575(var_owner)\n            {\n                /// @src 1:3483:3489  \"owners\"\n                let _103_slot := 0x03\n                let expr_570_slot := _103_slot\n                /// @src 1:3483:3496  \"owners.length\"\n                let expr := array_length_array_address_dyn_storage(expr_570_slot)\n                /// @src 1:3499:3500  \"1\"\n                let expr_1 := 0x01\n                /// @src 1:3483:3500  \"owners.length + 1\"\n                let expr_2 := checked_add_uint256(expr, convert_t_rational_by_to_t_uint256(expr_1))\n                let _1 := expr_2\n                let var_ownerCount := _1\n                /// @src 1:3502:3510  \"required\"\n                let _2 := read_from_storage_split_offset_uint256(0x04)\n                let expr_3 := _2\n                let _3 := expr_3\n                let var__required := _3\n                /// @src 1:2303:2313  \"ownerCount\"\n                let _4 := var_ownerCount\n                let expr_4 := _4\n                /// @src 1:2317:2332  \"MAX_OWNER_COUNT\"\n                let expr_5 := constant_MAX_OWNER_COUNT()\n                /// @src 1:2303:2332  \"ownerCount <= MAX_OWNER_COUNT\"\n                let expr_6 := iszero(gt(cleanup_uint256(expr_4), cleanup_uint256(expr_5)))\n                /// @src 1:2303:2371  \"ownerCount <= MAX_OWNER_COUNT...\"\n                let expr_7 := expr_6\n                if expr_7\n                {\n                    /// @src 1:2348:2357  \"_required\"\n                    let _5 := var__required\n                    let expr_8 := _5\n                    /// @src 1:2361:2371  \"ownerCount\"\n                    let _6 := var_ownerCount\n                    let expr_9 := _6\n                    /// @src 1:2348:2371  \"_required <= ownerCount\"\n                    let expr_10 := iszero(gt(cleanup_uint256(expr_8), cleanup_uint256(expr_9)))\n                    /// @src 1:2303:2371  \"ownerCount <= MAX_OWNER_COUNT...\"\n                    expr_7 := expr_10\n                }\n                /// @src 1:2303:2401  \"ownerCount <= MAX_OWNER_COUNT...\"\n                let expr_11 := expr_7\n                if expr_11\n                {\n                    /// @src 1:2387:2396  \"_required\"\n                    let _7 := var__required\n                    let expr_12 := _7\n                    /// @src 1:2400:2401  \"0\"\n                    let expr_13 := 0x00\n                    /// @src 1:2387:2401  \"_required != 0\"\n                    let expr_14 := iszero(eq(cleanup_uint256(expr_12), convert_rational_0_by_1_to_uint256(expr_13)))\n                    /// @src 1:2303:2401  \"ownerCount <= MAX_OWNER_COUNT...\"\n                    expr_11 := expr_14\n                }\n                /// @src 1:2303:2432  \"ownerCount <= MAX_OWNER_COUNT...\"\n                let expr_15 := expr_11\n                if expr_15\n                {\n                    /// @src 1:2417:2427  \"ownerCount\"\n                    let _8 := var_ownerCount\n                    let expr_16 := _8\n                    /// @src 1:2431:2432  \"0\"\n                    let expr_17 := 0x00\n                    /// @src 1:2417:2432  \"ownerCount != 0\"\n                    let expr_18 := iszero(eq(cleanup_uint256(expr_16), convert_rational_0_by_1_to_uint256(expr_17)))\n                    /// @src 1:2303:2432  \"ownerCount <= MAX_OWNER_COUNT...\"\n                    expr_15 := expr_18\n                }\n                /// @src 1:2295:2433  \"require(ownerCount <= MAX_OWNER_COUNT...\"\n                require_helper(expr_15)\n                /// @src 1:2443:2444  \"_\"\n                fun_addOwner_inner(var_owner)\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function array_push_from_address_to_array_address_dyn_storage_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_address_dyn_ptr(array, oldLen)\n                update_storage_value_address_to_address(slot, offset, value0)\n            }\n            /// @src 1:3335:3617  \"function addOwner(address owner)...\"\n            function fun_addOwner_inner(var_owner)\n            {\n                /// @src 1:3543:3547  \"true\"\n                let expr := 0x01\n                /// @src 1:3526:3533  \"isOwner\"\n                let _112_slot := 0x02\n                let expr_577_slot := _112_slot\n                /// @src 1:3534:3539  \"owner\"\n                let _1 := var_owner\n                let expr_1 := _1\n                /// @src 1:3526:3540  \"isOwner[owner]\"\n                let _2 := mapping_index_access_mapping_address_bool_of_address(expr_577_slot, expr_1)\n                /// @src 1:3526:3547  \"isOwner[owner] = true\"\n                update_storage_value_offset_bool_to_bool(_2, expr)\n                /// @src 1:3557:3563  \"owners\"\n                let _115_slot := 0x03\n                let expr_583_slot := _115_slot\n                /// @src 1:3557:3568  \"owners.push\"\n                let expr_585_self_slot := convert_array_array_address_dyn_storage_to_array_address_dyn_ptr(expr_583_slot)\n                /// @src 1:3569:3574  \"owner\"\n                let _3 := var_owner\n                let expr_2 := _3\n                /// @src 1:3557:3575  \"owners.push(owner)\"\n                array_push_from_address_to_array_address_dyn_storage_ptr(expr_585_self_slot, expr_2)\n                /// @src 1:3604:3609  \"owner\"\n                let _4 := var_owner\n                let expr_3 := _4\n                /// @src 1:3590:3610  \"OwnerAddition(owner)\"\n                let _5 := 0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d\n                let _6 := convert_address_to_address(expr_3)\n                let _7 := allocate_unbounded()\n                let _8 := abi_encode_tuple(_7)\n                log2(_7, sub(_8, _7), _5, _6)\n            }\n            /// @ast-id 594 @src 1:3335:3617  \"function addOwner(address owner)...\"\n            function fun_addOwner(var_owner)\n            {\n                modifier_onlyWallet(var_owner)\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function zero_value_for_split_bool() -> ret\n            { ret := 0 }\n            /// @ast-id 976 @src 1:8791:9146  \"function isConfirmed(uint transactionId)...\"\n            function fun_isConfirmed(var_transactionId) -> var\n            {\n                /// @src 1:8877:8881  \"bool\"\n                let zero_bool := zero_value_for_split_bool()\n                var := zero_bool\n                /// @src 1:8910:8911  \"0\"\n                let expr := 0x00\n                /// @src 1:8897:8911  \"uint count = 0\"\n                let var_count := convert_rational_0_by_1_to_uint256(expr)\n                /// @src 1:8933:8934  \"0\"\n                let expr_1 := 0x00\n                /// @src 1:8926:8934  \"uint i=0\"\n                let var_i := convert_rational_0_by_1_to_uint256(expr_1)\n                /// @src 1:8921:9118  \"for (uint i=0; i<owners.length; i++) {...\"\n                for { }\n                /** @src 1:8926:8934  \"uint i=0\" */ 1\n                {\n                    /// @src 1:8953:8956  \"i++\"\n                    let _1 := var_i\n                    let _2 := increment_wrapping_uint256(_1)\n                    var_i := _2\n                }\n                {\n                    /// @src 1:8936:8937  \"i\"\n                    let _3 := var_i\n                    let expr_2 := _3\n                    /// @src 1:8938:8944  \"owners\"\n                    let _126_slot := 0x03\n                    let expr_947_slot := _126_slot\n                    /// @src 1:8938:8951  \"owners.length\"\n                    let expr_3 := array_length_array_address_dyn_storage(expr_947_slot)\n                    /// @src 1:8936:8951  \"i<owners.length\"\n                    let expr_4 := lt(cleanup_uint256(expr_2), cleanup_uint256(expr_3))\n                    if iszero(expr_4) { break }\n                    /// @src 1:8976:8989  \"confirmations\"\n                    let _127_slot := 0x01\n                    let expr_953_slot := _127_slot\n                    /// @src 1:8990:9003  \"transactionId\"\n                    let _4 := var_transactionId\n                    let expr_5 := _4\n                    /// @src 1:8976:9004  \"confirmations[transactionId]\"\n                    let _5 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_953_slot, expr_5)\n                    let _130_slot := _5\n                    let expr_955_slot := _130_slot\n                    /// @src 1:9005:9011  \"owners\"\n                    let _131_slot := 0x03\n                    let expr_956_slot := _131_slot\n                    /// @src 1:9012:9013  \"i\"\n                    let _6 := var_i\n                    let expr_6 := _6\n                    /// @src 1:9005:9014  \"owners[i]\"\n                    let _7, _8 := storage_array_index_access_address_dyn(expr_956_slot, expr_6)\n                    let _9 := read_from_storage_split_dynamic_address(_7, _8)\n                    let expr_7 := _9\n                    /// @src 1:8976:9015  \"confirmations[transactionId][owners[i]]\"\n                    let _10 := mapping_index_access_mapping_address_bool_of_address(expr_955_slot, expr_7)\n                    let _11 := read_from_storage_split_offset_bool(_10)\n                    let expr_8 := _11\n                    /// @src 1:8972:9043  \"if (confirmations[transactionId][owners[i]])...\"\n                    if expr_8\n                    {\n                        /// @src 1:9042:9043  \"1\"\n                        let expr_9 := 0x01\n                        /// @src 1:9033:9043  \"count += 1\"\n                        let _12 := convert_t_rational_by_to_t_uint256(expr_9)\n                        let _13 := var_count\n                        let expr_10 := checked_add_uint256(_13, _12)\n                        var_count := expr_10\n                    }\n                    /// @src 1:9061:9066  \"count\"\n                    let _14 := var_count\n                    let expr_11 := _14\n                    /// @src 1:9070:9078  \"required\"\n                    let _15 := read_from_storage_split_offset_uint256(0x04)\n                    let expr_12 := _15\n                    /// @src 1:9061:9078  \"count == required\"\n                    let expr_13 := eq(cleanup_uint256(expr_11), cleanup_uint256(expr_12))\n                    /// @src 1:9057:9107  \"if (count == required)...\"\n                    if expr_13\n                    {\n                        /// @src 1:9103:9107  \"true\"\n                        let expr_14 := 0x01\n                        /// @src 1:9096:9107  \"return true\"\n                        var := expr_14\n                        leave\n                    }\n                }\n                /// @src 1:9134:9139  \"false\"\n                let expr_15 := 0x00\n                /// @src 1:9127:9139  \"return false\"\n                var := expr_15\n                leave\n            }\n            /// @ast-id 1048 @src 1:10159:10407  \"function getConfirmationCount(uint transactionId)...\"\n            function fun_getConfirmationCount(var_transactionId) -> var_count\n            {\n                /// @src 1:10254:10264  \"uint count\"\n                let zero_uint256 := zero_value_for_split_uint256()\n                var_count := zero_uint256\n                /// @src 1:10292:10293  \"0\"\n                let expr := 0x00\n                /// @src 1:10285:10293  \"uint i=0\"\n                let var_i := convert_rational_0_by_1_to_uint256(expr)\n                /// @src 1:10280:10400  \"for (uint i=0; i<owners.length; i++)...\"\n                for { }\n                /** @src 1:10285:10293  \"uint i=0\" */ 1\n                {\n                    /// @src 1:10312:10315  \"i++\"\n                    let _1 := var_i\n                    let _2 := increment_wrapping_uint256(_1)\n                    var_i := _2\n                }\n                {\n                    /// @src 1:10295:10296  \"i\"\n                    let _3 := var_i\n                    let expr_1 := _3\n                    /// @src 1:10297:10303  \"owners\"\n                    let _146_slot := 0x03\n                    let expr_1028_slot := _146_slot\n                    /// @src 1:10297:10310  \"owners.length\"\n                    let expr_2 := array_length_array_address_dyn_storage(expr_1028_slot)\n                    /// @src 1:10295:10310  \"i<owners.length\"\n                    let expr_3 := lt(cleanup_uint256(expr_1), cleanup_uint256(expr_2))\n                    if iszero(expr_3) { break }\n                    /// @src 1:10333:10346  \"confirmations\"\n                    let _147_slot := 0x01\n                    let expr_1034_slot := _147_slot\n                    /// @src 1:10347:10360  \"transactionId\"\n                    let _4 := var_transactionId\n                    let expr_4 := _4\n                    /// @src 1:10333:10361  \"confirmations[transactionId]\"\n                    let _5 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_1034_slot, expr_4)\n                    let _150_slot := _5\n                    let expr_1036_slot := _150_slot\n                    /// @src 1:10362:10368  \"owners\"\n                    let _151_slot := 0x03\n                    let expr_1037_slot := _151_slot\n                    /// @src 1:10369:10370  \"i\"\n                    let _6 := var_i\n                    let expr_5 := _6\n                    /// @src 1:10362:10371  \"owners[i]\"\n                    let _7, _8 := storage_array_index_access_address_dyn(expr_1037_slot, expr_5)\n                    let _9 := read_from_storage_split_dynamic_address(_7, _8)\n                    let expr_6 := _9\n                    /// @src 1:10333:10372  \"confirmations[transactionId][owners[i]]\"\n                    let _10 := mapping_index_access_mapping_address_bool_of_address(expr_1036_slot, expr_6)\n                    let _11 := read_from_storage_split_offset_bool(_10)\n                    let expr_7 := _11\n                    /// @src 1:10329:10400  \"if (confirmations[transactionId][owners[i]])...\"\n                    if expr_7\n                    {\n                        /// @src 1:10399:10400  \"1\"\n                        let expr_8 := 0x01\n                        /// @src 1:10390:10400  \"count += 1\"\n                        let _12 := convert_t_rational_by_to_t_uint256(expr_8)\n                        let _13 := var_count\n                        let expr_9 := checked_add_uint256(_13, _12)\n                        var_count := expr_9\n                    }\n                }\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function zero_value_for_split_array_address_dyn() -> ret\n            { ret := 96 }\n            function array_storeLengthForEncoding_array_address_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function read_from_storage_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function array_nextElement_array_address_dyn_storage(ptr) -> next\n            { next := add(ptr, 0x01) }\n            function abi_encode_array_address_dyn_storage(value, pos) -> end\n            {\n                let length := array_length_array_address_dyn_storage(value)\n                pos := array_storeLengthForEncoding_array_address_dyn(pos, length)\n                let baseRef := array_dataslot_array_address_dyn_storage(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := read_from_storage_offset_address(srcPtr)\n                    pos := abi_encodeUpdatedPos_address(elementValue0, pos)\n                    srcPtr := array_nextElement_array_address_dyn_storage(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encodeUpdatedPos_array_address_dyn_storage(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_array_address_dyn_storage(value0, pos)\n            }\n            function copy_array_from_storage_to_memory_array_address_dyn(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_array_address_dyn_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function convert_array_array_address_dyn_storage_to_array_address_dyn(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_array_address_dyn(value)\n            }\n            /// @ast-id 1099 @src 1:11074:11192  \"function getOwners()...\"\n            function fun_getOwners() -> var_mpos\n            {\n                /// @src 1:11140:11156  \"address[] memory\"\n                let zero_array_address_dyn_memory_ptr_mpos := zero_value_for_split_array_address_dyn()\n                var_mpos := zero_array_address_dyn_memory_ptr_mpos\n                /// @src 1:11179:11185  \"owners\"\n                let _161_slot := 0x03\n                let expr_1096_slot := _161_slot\n                /// @src 1:11172:11185  \"return owners\"\n                var_mpos := convert_array_array_address_dyn_storage_to_array_address_dyn(expr_1096_slot)\n                leave\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function zero_value_for_split_array_uint256_dyn() -> ret\n            { ret := 96 }\n            function array_allocation_size_array_uint256_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_array_uint256_dyn(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_array_uint256_dyn(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_memory_chunk_uint256(dataStart, dataSizeInBytes)\n            {\n                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)\n            }\n            function allocate_and_zero_memory_array_array_uint256_dyn(length) -> memPtr\n            {\n                memPtr := allocate_memory_array_array_uint256_dyn(length)\n                let dataStart := memPtr\n                let dataSize := array_allocation_size_array_uint256_dyn(length)\n                dataStart := add(dataStart, 32)\n                dataSize := sub(dataSize, 32)\n                zero_memory_chunk_uint256(dataStart, dataSize)\n            }\n            function memory_array_index_access_uint256_dyn(baseRef, index) -> addr\n            {\n                if iszero(lt(index, array_length_array_uint256_dyn(baseRef))) { panic_error_0x32() }\n                let offset := mul(index, 32)\n                offset := add(offset, 32)\n                addr := add(baseRef, offset)\n            }\n            function write_to_memory_uint256(memPtr, value)\n            {\n                mstore(memPtr, cleanup_uint256(value))\n            }\n            function read_from_memoryt_uint256(ptr) -> returnValue\n            {\n                let value := cleanup_uint256(mload(ptr))\n                returnValue := value\n            }\n            /// @ast-id 1290 @src 1:12329:13008  \"function getTransactionIds(uint from, uint to, bool pending, bool executed)...\"\n            function fun_getTransactionIds(var_from, var_to, var_pending, var_executed) -> var_transactionIds_mpos\n            {\n                /// @src 1:12450:12479  \"uint[] memory _transactionIds\"\n                let zero_array_uint256_dyn_mpos := zero_value_for_split_array_uint256_dyn()\n                var_transactionIds_mpos := zero_array_uint256_dyn_mpos\n                /// @src 1:12541:12557  \"transactionCount\"\n                let _1 := read_from_storage_split_offset_uint256(0x05)\n                let expr := _1\n                /// @src 1:12530:12558  \"new uint[](transactionCount)\"\n                let expr_1212_mpos := allocate_and_zero_memory_array_array_uint256_dyn(expr)\n                /// @src 1:12495:12558  \"uint[] memory transactionIdsTemp = new uint[](transactionCount)\"\n                let var_transactionIdsTemp_mpos := expr_1212_mpos\n                /// @src 1:12581:12582  \"0\"\n                let expr_1 := 0x00\n                /// @src 1:12568:12582  \"uint count = 0\"\n                let var_count := convert_rational_0_by_1_to_uint256(expr_1)\n                /// @src 1:12592:12598  \"uint i\"\n                let var_i\n                let zero_uint256 := zero_value_for_split_uint256()\n                var_i := zero_uint256\n                /// @src 1:12615:12616  \"0\"\n                let expr_2 := 0x00\n                /// @src 1:12613:12616  \"i=0\"\n                let _2 := convert_rational_0_by_1_to_uint256(expr_2)\n                var_i := _2\n                /// @src 1:12608:12858  \"for (i=0; i<transactionCount; i++)...\"\n                for { }\n                /** @src 1:12613:12616  \"i=0\" */ 1\n                {\n                    /// @src 1:12638:12641  \"i++\"\n                    let _3 := var_i\n                    let _4 := increment_wrapping_uint256(_3)\n                    var_i := _4\n                }\n                {\n                    /// @src 1:12618:12619  \"i\"\n                    let _5 := var_i\n                    let expr_3 := _5\n                    /// @src 1:12620:12636  \"transactionCount\"\n                    let _6 := read_from_storage_split_offset_uint256(0x05)\n                    let expr_4 := _6\n                    /// @src 1:12618:12636  \"i<transactionCount\"\n                    let expr_5 := lt(cleanup_uint256(expr_3), cleanup_uint256(expr_4))\n                    if iszero(expr_5) { break }\n                    /// @src 1:12662:12669  \"pending\"\n                    let _7 := var_pending\n                    let expr_6 := _7\n                    /// @src 1:12662:12698  \"pending && !transactions[i].executed\"\n                    let expr_7 := expr_6\n                    if expr_7\n                    {\n                        /// @src 1:12674:12686  \"transactions\"\n                        let _171_slot := 0x00\n                        let expr_1232_slot := _171_slot\n                        /// @src 1:12687:12688  \"i\"\n                        let _8 := var_i\n                        let expr_8 := _8\n                        /// @src 1:12674:12689  \"transactions[i]\"\n                        let _9 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_1232_slot, expr_8)\n                        let _174_slot := _9\n                        let expr_1234_slot := _174_slot\n                        /// @src 1:12674:12698  \"transactions[i].executed\"\n                        let _10 := add(expr_1234_slot, 3)\n                        let _11 := read_from_storage_split_offset_bool(_10)\n                        let expr_9 := _11\n                        /// @src 1:12673:12698  \"!transactions[i].executed\"\n                        let expr_10 := cleanup_bool(iszero(expr_9))\n                        /// @src 1:12662:12698  \"pending && !transactions[i].executed\"\n                        expr_7 := expr_10\n                    }\n                    /// @src 1:12662:12754  \"pending && !transactions[i].executed...\"\n                    let expr_11 := expr_7\n                    if iszero(expr_11)\n                    {\n                        /// @src 1:12718:12726  \"executed\"\n                        let _12 := var_executed\n                        let expr_12 := _12\n                        /// @src 1:12718:12754  \"executed && transactions[i].executed\"\n                        let expr_13 := expr_12\n                        if expr_13\n                        {\n                            /// @src 1:12730:12742  \"transactions\"\n                            let _178_slot := 0x00\n                            let expr_1239_slot := _178_slot\n                            /// @src 1:12743:12744  \"i\"\n                            let _13 := var_i\n                            let expr_14 := _13\n                            /// @src 1:12730:12745  \"transactions[i]\"\n                            let _14 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_1239_slot, expr_14)\n                            let _181_slot := _14\n                            let expr_1241_slot := _181_slot\n                            /// @src 1:12730:12754  \"transactions[i].executed\"\n                            let _15 := add(expr_1241_slot, 3)\n                            let _16 := read_from_storage_split_offset_bool(_15)\n                            let expr_15 := _16\n                            /// @src 1:12718:12754  \"executed && transactions[i].executed\"\n                            expr_13 := expr_15\n                        }\n                        /// @src 1:12662:12754  \"pending && !transactions[i].executed...\"\n                        expr_11 := expr_13\n                    }\n                    /// @src 1:12655:12858  \"if (   pending && !transactions[i].executed...\"\n                    if expr_11\n                    {\n                        /// @src 1:12814:12815  \"i\"\n                        let _17 := var_i\n                        let expr_16 := _17\n                        /// @src 1:12786:12804  \"transactionIdsTemp\"\n                        let _185_mpos := var_transactionIdsTemp_mpos\n                        let expr_1245_mpos := _185_mpos\n                        /// @src 1:12805:12810  \"count\"\n                        let _18 := var_count\n                        let expr_17 := _18\n                        /// @src 1:12786:12815  \"transactionIdsTemp[count] = i\"\n                        let _19 := expr_16\n                        write_to_memory_uint256(memory_array_index_access_uint256_dyn(expr_1245_mpos, expr_17), _19)\n                        /// @src 1:12842:12843  \"1\"\n                        let expr_18 := 0x01\n                        /// @src 1:12833:12843  \"count += 1\"\n                        let _20 := convert_t_rational_by_to_t_uint256(expr_18)\n                        let _21 := var_count\n                        let expr_19 := checked_add_uint256(_21, _20)\n                        var_count := expr_19\n                    }\n                }\n                /// @src 1:12896:12898  \"to\"\n                let _22 := var_to\n                let expr_20 := _22\n                /// @src 1:12901:12905  \"from\"\n                let _23 := var_from\n                let expr_21 := _23\n                /// @src 1:12896:12905  \"to - from\"\n                let expr_22 := checked_sub_uint256(expr_20, expr_21)\n                /// @src 1:12885:12906  \"new uint[](to - from)\"\n                let expr_1265_mpos := allocate_and_zero_memory_array_array_uint256_dyn(expr_22)\n                /// @src 1:12867:12906  \"_transactionIds = new uint[](to - from)\"\n                var_transactionIds_mpos := expr_1265_mpos\n                /// @src 1:12923:12927  \"from\"\n                let _24 := var_from\n                let expr_23 := _24\n                /// @src 1:12921:12927  \"i=from\"\n                var_i := expr_23\n                /// @src 1:12916:13001  \"for (i=from; i<to; i++)...\"\n                for { }\n                /** @src 1:12921:12927  \"i=from\" */ 1\n                {\n                    /// @src 1:12935:12938  \"i++\"\n                    let _25 := var_i\n                    let _26 := increment_wrapping_uint256(_25)\n                    var_i := _26\n                }\n                {\n                    /// @src 1:12929:12930  \"i\"\n                    let _27 := var_i\n                    let expr_24 := _27\n                    /// @src 1:12931:12933  \"to\"\n                    let _28 := var_to\n                    let expr_25 := _28\n                    /// @src 1:12929:12933  \"i<to\"\n                    let expr_26 := lt(cleanup_uint256(expr_24), cleanup_uint256(expr_25))\n                    if iszero(expr_26) { break }\n                    /// @src 1:12980:12998  \"transactionIdsTemp\"\n                    let _198_mpos := var_transactionIdsTemp_mpos\n                    let expr_1283_mpos := _198_mpos\n                    /// @src 1:12999:13000  \"i\"\n                    let _29 := var_i\n                    let expr_27 := _29\n                    /// @src 1:12980:13001  \"transactionIdsTemp[i]\"\n                    let _30 := read_from_memoryt_uint256(memory_array_index_access_uint256_dyn(expr_1283_mpos, expr_27))\n                    let expr_28 := _30\n                    /// @src 1:12952:12967  \"_transactionIds\"\n                    let _201_mpos := var_transactionIds_mpos\n                    let expr_1278_mpos := _201_mpos\n                    /// @src 1:12968:12969  \"i\"\n                    let _31 := var_i\n                    let expr_29 := _31\n                    /// @src 1:12972:12976  \"from\"\n                    let _32 := var_from\n                    let expr_30 := _32\n                    /// @src 1:12968:12976  \"i - from\"\n                    let expr_31 := checked_sub_uint256(expr_29, expr_30)\n                    /// @src 1:12952:13001  \"_transactionIds[i - from] = transactionIdsTemp[i]\"\n                    let _33 := expr_28\n                    write_to_memory_uint256(memory_array_index_access_uint256_dyn(expr_1278_mpos, expr_31), _33)\n                }\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function array_allocation_size_array_address_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_array_address_dyn(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_array_address_dyn(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_memory_chunk_address(dataStart, dataSizeInBytes)\n            {\n                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)\n            }\n            function allocate_and_zero_memory_array_array_address_dyn(length) -> memPtr\n            {\n                memPtr := allocate_memory_array_array_address_dyn(length)\n                let dataStart := memPtr\n                let dataSize := array_allocation_size_array_address_dyn(length)\n                dataStart := add(dataStart, 32)\n                dataSize := sub(dataSize, 32)\n                zero_memory_chunk_address(dataStart, dataSize)\n            }\n            function memory_array_index_access_address_dyn(baseRef, index) -> addr\n            {\n                if iszero(lt(index, array_length_array_address_dyn(baseRef))) { panic_error_0x32() }\n                let offset := mul(index, 32)\n                offset := add(offset, 32)\n                addr := add(baseRef, offset)\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, cleanup_address(value))\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                let value := cleanup_address(mload(ptr))\n                returnValue := value\n            }\n            /// @ast-id 1188 @src 1:11386:11964  \"function getConfirmations(uint transactionId)...\"\n            function fun_getConfirmations(var_transactionId) -> var_confirmations_mpos\n            {\n                /// @src 1:11477:11508  \"address[] memory _confirmations\"\n                let zero_array_address_dyn_mpos := zero_value_for_split_array_address_dyn()\n                var_confirmations_mpos := zero_array_address_dyn_mpos\n                /// @src 1:11575:11581  \"owners\"\n                let _206_slot := 0x03\n                let expr_1116_slot := _206_slot\n                /// @src 1:11575:11588  \"owners.length\"\n                let expr := array_length_array_address_dyn_storage(expr_1116_slot)\n                /// @src 1:11561:11589  \"new address[](owners.length)\"\n                let expr_1118_mpos := allocate_and_zero_memory_array_array_address_dyn(expr)\n                /// @src 1:11524:11589  \"address[] memory confirmationsTemp = new address[](owners.length)\"\n                let var_confirmationsTemp_mpos := expr_1118_mpos\n                /// @src 1:11612:11613  \"0\"\n                let expr_1 := 0x00\n                /// @src 1:11599:11613  \"uint count = 0\"\n                let var_count := convert_rational_0_by_1_to_uint256(expr_1)\n                /// @src 1:11623:11629  \"uint i\"\n                let var_i\n                let zero_uint256 := zero_value_for_split_uint256()\n                var_i := zero_uint256\n                /// @src 1:11646:11647  \"0\"\n                let expr_2 := 0x00\n                /// @src 1:11644:11647  \"i=0\"\n                let _1 := convert_rational_0_by_1_to_uint256(expr_2)\n                var_i := _1\n                /// @src 1:11639:11825  \"for (i=0; i<owners.length; i++)...\"\n                for { }\n                /** @src 1:11644:11647  \"i=0\" */ 1\n                {\n                    /// @src 1:11666:11669  \"i++\"\n                    let _2 := var_i\n                    let _3 := increment_wrapping_uint256(_2)\n                    var_i := _3\n                }\n                {\n                    /// @src 1:11649:11650  \"i\"\n                    let _4 := var_i\n                    let expr_3 := _4\n                    /// @src 1:11651:11657  \"owners\"\n                    let _212_slot := 0x03\n                    let expr_1132_slot := _212_slot\n                    /// @src 1:11651:11664  \"owners.length\"\n                    let expr_4 := array_length_array_address_dyn_storage(expr_1132_slot)\n                    /// @src 1:11649:11664  \"i<owners.length\"\n                    let expr_5 := lt(cleanup_uint256(expr_3), cleanup_uint256(expr_4))\n                    if iszero(expr_5) { break }\n                    /// @src 1:11687:11700  \"confirmations\"\n                    let _213_slot := 0x01\n                    let expr_1138_slot := _213_slot\n                    /// @src 1:11701:11714  \"transactionId\"\n                    let _5 := var_transactionId\n                    let expr_6 := _5\n                    /// @src 1:11687:11715  \"confirmations[transactionId]\"\n                    let _6 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_1138_slot, expr_6)\n                    let _216_slot := _6\n                    let expr_1140_slot := _216_slot\n                    /// @src 1:11716:11722  \"owners\"\n                    let _217_slot := 0x03\n                    let expr_1141_slot := _217_slot\n                    /// @src 1:11723:11724  \"i\"\n                    let _7 := var_i\n                    let expr_7 := _7\n                    /// @src 1:11716:11725  \"owners[i]\"\n                    let _8, _9 := storage_array_index_access_address_dyn(expr_1141_slot, expr_7)\n                    let _10 := read_from_storage_split_dynamic_address(_8, _9)\n                    let expr_8 := _10\n                    /// @src 1:11687:11726  \"confirmations[transactionId][owners[i]]\"\n                    let _11 := mapping_index_access_mapping_address_bool_of_address(expr_1140_slot, expr_8)\n                    let _12 := read_from_storage_split_offset_bool(_11)\n                    let expr_9 := _12\n                    /// @src 1:11683:11825  \"if (confirmations[transactionId][owners[i]]) {...\"\n                    if expr_9\n                    {\n                        /// @src 1:11773:11779  \"owners\"\n                        let _224_slot := 0x03\n                        let expr_1148_slot := _224_slot\n                        /// @src 1:11780:11781  \"i\"\n                        let _13 := var_i\n                        let expr_10 := _13\n                        /// @src 1:11773:11782  \"owners[i]\"\n                        let _14, _15 := storage_array_index_access_address_dyn(expr_1148_slot, expr_10)\n                        let _16 := read_from_storage_split_dynamic_address(_14, _15)\n                        let expr_11 := _16\n                        /// @src 1:11746:11763  \"confirmationsTemp\"\n                        let _229_mpos := var_confirmationsTemp_mpos\n                        let expr_mpos := _229_mpos\n                        /// @src 1:11764:11769  \"count\"\n                        let _17 := var_count\n                        let expr_12 := _17\n                        /// @src 1:11746:11782  \"confirmationsTemp[count] = owners[i]\"\n                        let _18 := expr_11\n                        write_to_memory_address(memory_array_index_access_address_dyn(expr_mpos, expr_12), _18)\n                        /// @src 1:11809:11810  \"1\"\n                        let expr_13 := 0x01\n                        /// @src 1:11800:11810  \"count += 1\"\n                        let _19 := convert_t_rational_by_to_t_uint256(expr_13)\n                        let _20 := var_count\n                        let expr_14 := checked_add_uint256(_20, _19)\n                        var_count := expr_14\n                    }\n                }\n                /// @src 1:11865:11870  \"count\"\n                let _21 := var_count\n                let expr_15 := _21\n                /// @src 1:11851:11871  \"new address[](count)\"\n                let expr_1165_mpos := allocate_and_zero_memory_array_array_address_dyn(expr_15)\n                /// @src 1:11834:11871  \"_confirmations = new address[](count)\"\n                var_confirmations_mpos := expr_1165_mpos\n                /// @src 1:11888:11889  \"0\"\n                let expr_16 := 0x00\n                /// @src 1:11886:11889  \"i=0\"\n                let _22 := convert_rational_0_by_1_to_uint256(expr_16)\n                var_i := _22\n                /// @src 1:11881:11957  \"for (i=0; i<count; i++)...\"\n                for { }\n                /** @src 1:11886:11889  \"i=0\" */ 1\n                {\n                    /// @src 1:11900:11903  \"i++\"\n                    let _23 := var_i\n                    let _24 := increment_wrapping_uint256(_23)\n                    var_i := _24\n                }\n                {\n                    /// @src 1:11891:11892  \"i\"\n                    let _25 := var_i\n                    let expr_17 := _25\n                    /// @src 1:11893:11898  \"count\"\n                    let _26 := var_count\n                    let expr_18 := _26\n                    /// @src 1:11891:11898  \"i<count\"\n                    let expr_19 := lt(cleanup_uint256(expr_17), cleanup_uint256(expr_18))\n                    if iszero(expr_19) { break }\n                    /// @src 1:11937:11954  \"confirmationsTemp\"\n                    let _241_mpos := var_confirmationsTemp_mpos\n                    let expr_1181_mpos := _241_mpos\n                    /// @src 1:11955:11956  \"i\"\n                    let _27 := var_i\n                    let expr_20 := _27\n                    /// @src 1:11937:11957  \"confirmationsTemp[i]\"\n                    let _28 := read_from_memoryt_address(memory_array_index_access_address_dyn(expr_1181_mpos, expr_20))\n                    let expr_21 := _28\n                    /// @src 1:11917:11931  \"_confirmations\"\n                    let _mpos := var_confirmations_mpos\n                    let expr_1178_mpos := _mpos\n                    /// @src 1:11932:11933  \"i\"\n                    let _29 := var_i\n                    let expr_22 := _29\n                    /// @src 1:11917:11957  \"_confirmations[i] = confirmationsTemp[i]\"\n                    let _30 := expr_21\n                    write_to_memory_address(memory_array_index_access_address_dyn(expr_1178_mpos, expr_22), _30)\n                }\n            }\n            /// @ast-id 346 @src 1:1309:1395  \"modifier onlyWallet() {...\"\n            function modifier_onlyWallet_733(var_required)\n            {\n                /// @src 1:1349:1359  \"msg.sender\"\n                let expr := caller()\n                /// @src 1:1371:1375  \"this\"\n                let expr_address := address()\n                /// @src 1:1363:1376  \"address(this)\"\n                let expr_1 := convert_contract_MultiSigWallet_to_address(expr_address)\n                /// @src 1:1349:1376  \"msg.sender == address(this)\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 1:1341:1377  \"require(msg.sender == address(this))\"\n                require_helper(expr_2)\n                /// @src 1:1387:1388  \"_\"\n                modifier_validRequirement(var_required)\n            }\n            /// @ast-id 477 @src 1:2226:2451  \"modifier validRequirement(uint ownerCount, uint _required) {...\"\n            function modifier_validRequirement(var_required)\n            {\n                /// @src 1:5133:5139  \"owners\"\n                let _247_slot := 0x03\n                let expr_735_slot := _247_slot\n                /// @src 1:5133:5146  \"owners.length\"\n                let expr := array_length_array_address_dyn_storage(expr_735_slot)\n                let _1 := expr\n                let var_ownerCount := _1\n                /// @src 1:5148:5157  \"_required\"\n                let _2 := var_required\n                let expr_1 := _2\n                let _3 := expr_1\n                let var_required_1 := _3\n                /// @src 1:2303:2313  \"ownerCount\"\n                let _4 := var_ownerCount\n                let expr_2 := _4\n                /// @src 1:2317:2332  \"MAX_OWNER_COUNT\"\n                let expr_3 := constant_MAX_OWNER_COUNT()\n                /// @src 1:2303:2332  \"ownerCount <= MAX_OWNER_COUNT\"\n                let expr_4 := iszero(gt(cleanup_uint256(expr_2), cleanup_uint256(expr_3)))\n                /// @src 1:2303:2371  \"ownerCount <= MAX_OWNER_COUNT...\"\n                let expr_5 := expr_4\n                if expr_5\n                {\n                    /// @src 1:2348:2357  \"_required\"\n                    let _5 := var_required_1\n                    let expr_6 := _5\n                    /// @src 1:2361:2371  \"ownerCount\"\n                    let _6 := var_ownerCount\n                    let expr_7 := _6\n                    /// @src 1:2348:2371  \"_required <= ownerCount\"\n                    let expr_8 := iszero(gt(cleanup_uint256(expr_6), cleanup_uint256(expr_7)))\n                    /// @src 1:2303:2371  \"ownerCount <= MAX_OWNER_COUNT...\"\n                    expr_5 := expr_8\n                }\n                /// @src 1:2303:2401  \"ownerCount <= MAX_OWNER_COUNT...\"\n                let expr_9 := expr_5\n                if expr_9\n                {\n                    /// @src 1:2387:2396  \"_required\"\n                    let _7 := var_required_1\n                    let expr_10 := _7\n                    /// @src 1:2400:2401  \"0\"\n                    let expr_11 := 0x00\n                    /// @src 1:2387:2401  \"_required != 0\"\n                    let expr_12 := iszero(eq(cleanup_uint256(expr_10), convert_rational_0_by_1_to_uint256(expr_11)))\n                    /// @src 1:2303:2401  \"ownerCount <= MAX_OWNER_COUNT...\"\n                    expr_9 := expr_12\n                }\n                /// @src 1:2303:2432  \"ownerCount <= MAX_OWNER_COUNT...\"\n                let expr_13 := expr_9\n                if expr_13\n                {\n                    /// @src 1:2417:2427  \"ownerCount\"\n                    let _8 := var_ownerCount\n                    let expr_14 := _8\n                    /// @src 1:2431:2432  \"0\"\n                    let expr_15 := 0x00\n                    /// @src 1:2417:2432  \"ownerCount != 0\"\n                    let expr_16 := iszero(eq(cleanup_uint256(expr_14), convert_rational_0_by_1_to_uint256(expr_15)))\n                    /// @src 1:2303:2432  \"ownerCount <= MAX_OWNER_COUNT...\"\n                    expr_13 := expr_16\n                }\n                /// @src 1:2295:2433  \"require(ownerCount <= MAX_OWNER_COUNT...\"\n                require_helper(expr_13)\n                /// @src 1:2443:2444  \"_\"\n                fun_changeRequirement_inner(var_required)\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            /// @src 1:5031:5243  \"function changeRequirement(uint _required)...\"\n            function fun_changeRequirement_inner(var_required)\n            {\n                /// @src 1:5184:5193  \"_required\"\n                let _1 := var_required\n                let expr := _1\n                /// @src 1:5173:5193  \"required = _required\"\n                update_storage_value_offset_uint256_to_uint256(0x04, expr)\n                /// @src 1:5226:5235  \"_required\"\n                let _2 := var_required\n                let expr_1 := _2\n                /// @src 1:5208:5236  \"RequirementChange(_required)\"\n                let _3 := 0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a\n                let _4 := allocate_unbounded()\n                let _5 := abi_encode_uint256(_4, expr_1)\n                log1(_4, sub(_5, _4), _3)\n            }\n            /// @ast-id 749 @src 1:5031:5243  \"function changeRequirement(uint _required)...\"\n            function fun_changeRequirement(var_required)\n            {\n                modifier_onlyWallet_733(var_required)\n            }\n            /// @ast-id 371 @src 1:1501:1588  \"modifier ownerExists(address owner) {...\"\n            function modifier_ownerExists_782(var_transactionId)\n            {\n                /// @src 1:5956:5966  \"msg.sender\"\n                let expr := caller()\n                let _1 := expr\n                let var_owner := _1\n                /// @src 1:1555:1562  \"isOwner\"\n                let _262_slot := 0x02\n                let expr_slot := _262_slot\n                /// @src 1:1563:1568  \"owner\"\n                let _2 := var_owner\n                let expr_1 := _2\n                /// @src 1:1555:1569  \"isOwner[owner]\"\n                let _3 := mapping_index_access_mapping_address_bool_of_address(expr_slot, expr_1)\n                let _4 := read_from_storage_split_offset_bool(_3)\n                let expr_2 := _4\n                /// @src 1:1547:1570  \"require(isOwner[owner])\"\n                require_helper(expr_2)\n                /// @src 1:1580:1581  \"_\"\n                modifier_transactionExists(var_transactionId)\n            }\n            /// @ast-id 389 @src 1:1594:1731  \"modifier transactionExists(uint transactionId) {...\"\n            function modifier_transactionExists(var_transactionId)\n            {\n                /// @src 1:5994:6007  \"transactionId\"\n                let _1 := var_transactionId\n                let expr := _1\n                let _2 := expr\n                let var_transactionId_1 := _2\n                /// @src 1:1659:1671  \"transactions\"\n                let _268_slot := 0x00\n                let expr_376_slot := _268_slot\n                /// @src 1:1672:1685  \"transactionId\"\n                let _3 := var_transactionId_1\n                let expr_1 := _3\n                /// @src 1:1659:1686  \"transactions[transactionId]\"\n                let _4 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_376_slot, expr_1)\n                let _271_slot := _4\n                let expr_378_slot := _271_slot\n                /// @src 1:1659:1698  \"transactions[transactionId].destination\"\n                let _5 := add(expr_378_slot, 0)\n                let _6 := read_from_storage_split_offset_address(_5)\n                let expr_2 := _6\n                /// @src 1:1710:1711  \"0\"\n                let expr_3 := 0x00\n                /// @src 1:1702:1712  \"address(0)\"\n                let expr_4 := convert_rational_by_to_address(expr_3)\n                /// @src 1:1659:1712  \"transactions[transactionId].destination != address(0)\"\n                let expr_5 := iszero(eq(cleanup_address(expr_2), cleanup_address(expr_4)))\n                /// @src 1:1651:1713  \"require(transactions[transactionId].destination != address(0))\"\n                require_helper(expr_5)\n                /// @src 1:1723:1724  \"_\"\n                modifier_notConfirmed(var_transactionId)\n            }\n            /// @ast-id 422 @src 1:1869:1999  \"modifier notConfirmed(uint transactionId, address owner) {...\"\n            function modifier_notConfirmed(var_transactionId)\n            {\n                /// @src 1:6030:6043  \"transactionId\"\n                let _1 := var_transactionId\n                let expr := _1\n                let _2 := expr\n                let var_transactionId_1 := _2\n                /// @src 1:6045:6055  \"msg.sender\"\n                let expr_1 := caller()\n                let _3 := expr_1\n                let var_owner := _3\n                /// @src 1:1945:1958  \"confirmations\"\n                let _277_slot := 0x01\n                let expr_412_slot := _277_slot\n                /// @src 1:1959:1972  \"transactionId\"\n                let _4 := var_transactionId_1\n                let expr_2 := _4\n                /// @src 1:1945:1973  \"confirmations[transactionId]\"\n                let _5 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_412_slot, expr_2)\n                let _280_slot := _5\n                let expr_414_slot := _280_slot\n                /// @src 1:1974:1979  \"owner\"\n                let _6 := var_owner\n                let expr_3 := _6\n                /// @src 1:1945:1980  \"confirmations[transactionId][owner]\"\n                let _7 := mapping_index_access_mapping_address_bool_of_address(expr_414_slot, expr_3)\n                let _8 := read_from_storage_split_offset_bool(_7)\n                let expr_4 := _8\n                /// @src 1:1944:1980  \"!confirmations[transactionId][owner]\"\n                let expr_5 := cleanup_bool(iszero(expr_4))\n                /// @src 1:1936:1981  \"require(!confirmations[transactionId][owner])\"\n                require_helper(expr_5)\n                /// @src 1:1991:1992  \"_\"\n                fun_confirmTransaction_inner(var_transactionId)\n            }\n            /// @src 1:5873:6222  \"function confirmTransaction(uint transactionId)...\"\n            function fun_confirmTransaction_inner(var_transactionId)\n            {\n                /// @src 1:6114:6118  \"true\"\n                let expr := 0x01\n                /// @src 1:6071:6084  \"confirmations\"\n                let _284_slot := 0x01\n                let expr_792_slot := _284_slot\n                /// @src 1:6085:6098  \"transactionId\"\n                let _1 := var_transactionId\n                let expr_1 := _1\n                /// @src 1:6071:6099  \"confirmations[transactionId]\"\n                let _2 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_792_slot, expr_1)\n                let _slot := _2\n                let expr_796_slot := _slot\n                /// @src 1:6100:6110  \"msg.sender\"\n                let expr_2 := caller()\n                /// @src 1:6071:6111  \"confirmations[transactionId][msg.sender]\"\n                let _3 := mapping_index_access_mapping_address_bool_of_address(expr_796_slot, expr_2)\n                /// @src 1:6071:6118  \"confirmations[transactionId][msg.sender] = true\"\n                update_storage_value_offset_bool_to_bool(_3, expr)\n                /// @src 1:6146:6156  \"msg.sender\"\n                let expr_3 := caller()\n                /// @src 1:6158:6171  \"transactionId\"\n                let _4 := var_transactionId\n                let expr_4 := _4\n                /// @src 1:6133:6172  \"Confirmation(msg.sender, transactionId)\"\n                let _5 := 0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef\n                let _6 := convert_address_to_address(expr_3)\n                let _7 := convert_uint256_to_uint256(expr_4)\n                let _8 := allocate_unbounded()\n                let _9 := abi_encode_tuple(_8)\n                log3(_8, sub(_9, _8), _5, _6, _7)\n                /// @src 1:6201:6214  \"transactionId\"\n                let _10 := var_transactionId\n                let expr_5 := _10\n                fun_executeTransaction(expr_5)\n            }\n            /// @ast-id 812 @src 1:5873:6222  \"function confirmTransaction(uint transactionId)...\"\n            function fun_confirmTransaction(var_transactionId)\n            {\n                modifier_ownerExists_782(var_transactionId)\n            }\n            /// @ast-id 774 @src 1:5516:5767  \"function submitTransaction(address destination, uint value, bytes memory data)...\"\n            function fun_submitTransaction(var_destination, var_value, var_data_756_mpos) -> var_transactionId\n            {\n                /// @src 1:5627:5645  \"uint transactionId\"\n                let zero_uint256 := zero_value_for_split_uint256()\n                var_transactionId := zero_uint256\n                /// @src 1:5692:5703  \"destination\"\n                let _1 := var_destination\n                let expr := _1\n                /// @src 1:5705:5710  \"value\"\n                let _2 := var_value\n                let expr_1 := _2\n                /// @src 1:5712:5716  \"data\"\n                let _299_mpos := var_data_756_mpos\n                let expr_765_mpos := _299_mpos\n                /// @src 1:5677:5717  \"addTransaction(destination, value, data)\"\n                let expr_2 := fun_addTransaction(expr, expr_1, expr_765_mpos)\n                /// @src 1:5661:5717  \"transactionId = addTransaction(destination, value, data)\"\n                var_transactionId := expr_2\n                /// @src 1:5746:5759  \"transactionId\"\n                let _3 := var_transactionId\n                let expr_3 := _3\n                fun_confirmTransaction(expr_3)\n            }\n            /// @ast-id 346 @src 1:1309:1395  \"modifier onlyWallet() {...\"\n            function modifier_onlyWallet_672(var_owner, var_newOwner)\n            {\n                /// @src 1:1349:1359  \"msg.sender\"\n                let expr := caller()\n                /// @src 1:1371:1375  \"this\"\n                let expr_address := address()\n                /// @src 1:1363:1376  \"address(this)\"\n                let expr_1 := convert_contract_MultiSigWallet_to_address(expr_address)\n                /// @src 1:1349:1376  \"msg.sender == address(this)\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 1:1341:1377  \"require(msg.sender == address(this))\"\n                require_helper(expr_2)\n                /// @src 1:1387:1388  \"_\"\n                modifier_ownerExists_675(var_owner, var_newOwner)\n            }\n            /// @ast-id 371 @src 1:1501:1588  \"modifier ownerExists(address owner) {...\"\n            function modifier_ownerExists_675(var_owner, var_newOwner)\n            {\n                /// @src 1:4510:4515  \"owner\"\n                let _1 := var_owner\n                let expr := _1\n                let _2 := expr\n                let var_owner_1 := _2\n                /// @src 1:1555:1562  \"isOwner\"\n                let _303_slot := 0x02\n                let expr_slot := _303_slot\n                /// @src 1:1563:1568  \"owner\"\n                let _3 := var_owner_1\n                let expr_1 := _3\n                /// @src 1:1555:1569  \"isOwner[owner]\"\n                let _4 := mapping_index_access_mapping_address_bool_of_address(expr_slot, expr_1)\n                let _5 := read_from_storage_split_offset_bool(_4)\n                let expr_2 := _5\n                /// @src 1:1547:1570  \"require(isOwner[owner])\"\n                require_helper(expr_2)\n                /// @src 1:1580:1581  \"_\"\n                modifier_ownerDoesNotExist_678(var_owner, var_newOwner)\n            }\n            /// @ast-id 359 @src 1:1401:1495  \"modifier ownerDoesNotExist(address owner) {...\"\n            function modifier_ownerDoesNotExist_678(var_owner, var_newOwner)\n            {\n                /// @src 1:4543:4551  \"newOwner\"\n                let _1 := var_newOwner\n                let expr := _1\n                let _2 := expr\n                let var_owner_1 := _2\n                /// @src 1:1462:1469  \"isOwner\"\n                let _309_slot := 0x02\n                let expr_slot := _309_slot\n                /// @src 1:1470:1475  \"owner\"\n                let _3 := var_owner_1\n                let expr_1 := _3\n                /// @src 1:1462:1476  \"isOwner[owner]\"\n                let _4 := mapping_index_access_mapping_address_bool_of_address(expr_slot, expr_1)\n                let _5 := read_from_storage_split_offset_bool(_4)\n                let expr_2 := _5\n                /// @src 1:1461:1476  \"!isOwner[owner]\"\n                let expr_3 := cleanup_bool(iszero(expr_2))\n                /// @src 1:1453:1477  \"require(!isOwner[owner])\"\n                require_helper(expr_3)\n                /// @src 1:1487:1488  \"_\"\n                fun_replaceOwner_inner(var_owner, var_newOwner)\n            }\n            /// @src 1:4401:4860  \"function replaceOwner(address owner, address newOwner)...\"\n            function fun_replaceOwner_inner(var_owner, var_newOwner)\n            {\n                /// @src 1:4579:4580  \"0\"\n                let expr := 0x00\n                /// @src 1:4572:4580  \"uint i=0\"\n                let var_i := convert_rational_0_by_1_to_uint256(expr)\n                /// @src 1:4567:4716  \"for (uint i=0; i<owners.length; i++)...\"\n                for { }\n                /** @src 1:4572:4580  \"uint i=0\" */ 1\n                {\n                    /// @src 1:4599:4602  \"i++\"\n                    let _1 := var_i\n                    let _2 := increment_wrapping_uint256(_1)\n                    var_i := _2\n                }\n                {\n                    /// @src 1:4582:4583  \"i\"\n                    let _3 := var_i\n                    let expr_1 := _3\n                    /// @src 1:4584:4590  \"owners\"\n                    let _316_slot := 0x03\n                    let expr_685_slot := _316_slot\n                    /// @src 1:4584:4597  \"owners.length\"\n                    let expr_2 := array_length_array_address_dyn_storage(expr_685_slot)\n                    /// @src 1:4582:4597  \"i<owners.length\"\n                    let expr_3 := lt(cleanup_uint256(expr_1), cleanup_uint256(expr_2))\n                    if iszero(expr_3) { break }\n                    /// @src 1:4620:4626  \"owners\"\n                    let _317_slot := 0x03\n                    let expr_691_slot := _317_slot\n                    /// @src 1:4627:4628  \"i\"\n                    let _4 := var_i\n                    let expr_4 := _4\n                    /// @src 1:4620:4629  \"owners[i]\"\n                    let _5, _6 := storage_array_index_access_address_dyn(expr_691_slot, expr_4)\n                    let _7 := read_from_storage_split_dynamic_address(_5, _6)\n                    let expr_5 := _7\n                    /// @src 1:4633:4638  \"owner\"\n                    let _8 := var_owner\n                    let expr_6 := _8\n                    /// @src 1:4620:4638  \"owners[i] == owner\"\n                    let expr_7 := eq(cleanup_address(expr_5), cleanup_address(expr_6))\n                    /// @src 1:4616:4716  \"if (owners[i] == owner) {...\"\n                    if expr_7\n                    {\n                        /// @src 1:4670:4678  \"newOwner\"\n                        let _9 := var_newOwner\n                        let expr_8 := _9\n                        /// @src 1:4658:4664  \"owners\"\n                        let _324_slot := 0x03\n                        let expr_696_slot := _324_slot\n                        /// @src 1:4665:4666  \"i\"\n                        let _10 := var_i\n                        let expr_9 := _10\n                        /// @src 1:4658:4667  \"owners[i]\"\n                        let _11, _12 := storage_array_index_access_address_dyn(expr_696_slot, expr_9)\n                        /// @src 1:4658:4678  \"owners[i] = newOwner\"\n                        update_storage_value_address_to_address(_11, _12, expr_8)\n                        /// @src 1:4696:4701  \"break\"\n                        break\n                    }\n                }\n                /// @src 1:4742:4747  \"false\"\n                let expr_10 := 0x00\n                /// @src 1:4725:4732  \"isOwner\"\n                let _328_slot := 0x02\n                let expr_706_slot := _328_slot\n                /// @src 1:4733:4738  \"owner\"\n                let _13 := var_owner\n                let expr_11 := _13\n                /// @src 1:4725:4739  \"isOwner[owner]\"\n                let _14 := mapping_index_access_mapping_address_bool_of_address(expr_706_slot, expr_11)\n                /// @src 1:4725:4747  \"isOwner[owner] = false\"\n                update_storage_value_offset_bool_to_bool(_14, expr_10)\n                /// @src 1:4777:4781  \"true\"\n                let expr_12 := 0x01\n                /// @src 1:4757:4764  \"isOwner\"\n                let _331_slot := 0x02\n                let expr_712_slot := _331_slot\n                /// @src 1:4765:4773  \"newOwner\"\n                let _15 := var_newOwner\n                let expr_13 := _15\n                /// @src 1:4757:4774  \"isOwner[newOwner]\"\n                let _16 := mapping_index_access_mapping_address_bool_of_address(expr_712_slot, expr_13)\n                /// @src 1:4757:4781  \"isOwner[newOwner] = true\"\n                update_storage_value_offset_bool_to_bool(_16, expr_12)\n                /// @src 1:4809:4814  \"owner\"\n                let _17 := var_owner\n                let expr_14 := _17\n                /// @src 1:4796:4815  \"OwnerRemoval(owner)\"\n                let _18 := 0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90\n                let _19 := convert_address_to_address(expr_14)\n                let _20 := allocate_unbounded()\n                let _21 := abi_encode_tuple(_20)\n                log2(_20, sub(_21, _20), _18, _19)\n                /// @src 1:4844:4852  \"newOwner\"\n                let _22 := var_newOwner\n                let expr_15 := _22\n                /// @src 1:4830:4853  \"OwnerAddition(newOwner)\"\n                let _23 := 0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d\n                let _24 := convert_address_to_address(expr_15)\n                let _25 := allocate_unbounded()\n                let _26 := abi_encode_tuple(_25)\n                log2(_25, sub(_26, _25), _23, _24)\n            }\n            /// @ast-id 727 @src 1:4401:4860  \"function replaceOwner(address owner, address newOwner)...\"\n            function fun_replaceOwner(var_owner, var_newOwner)\n            {\n                modifier_onlyWallet_672(var_owner, var_newOwner)\n            }\n            /// @ast-id 371 @src 1:1501:1588  \"modifier ownerExists(address owner) {...\"\n            function modifier_ownerExists_854(var_transactionId)\n            {\n                /// @src 1:6839:6849  \"msg.sender\"\n                let expr := caller()\n                let _1 := expr\n                let var_owner := _1\n                /// @src 1:1555:1562  \"isOwner\"\n                let _345_slot := 0x02\n                let expr_slot := _345_slot\n                /// @src 1:1563:1568  \"owner\"\n                let _2 := var_owner\n                let expr_1 := _2\n                /// @src 1:1555:1569  \"isOwner[owner]\"\n                let _3 := mapping_index_access_mapping_address_bool_of_address(expr_slot, expr_1)\n                let _4 := read_from_storage_split_offset_bool(_3)\n                let expr_2 := _4\n                /// @src 1:1547:1570  \"require(isOwner[owner])\"\n                require_helper(expr_2)\n                /// @src 1:1580:1581  \"_\"\n                modifier_confirmed_859(var_transactionId)\n            }\n            /// @ast-id 405 @src 1:1737:1863  \"modifier confirmed(uint transactionId, address owner) {...\"\n            function modifier_confirmed_859(var_transactionId)\n            {\n                /// @src 1:6869:6882  \"transactionId\"\n                let _1 := var_transactionId\n                let expr := _1\n                let _2 := expr\n                let var_transactionId_1 := _2\n                /// @src 1:6884:6894  \"msg.sender\"\n                let expr_1 := caller()\n                let _3 := expr_1\n                let var_owner := _3\n                /// @src 1:1809:1822  \"confirmations\"\n                let _352_slot := 0x01\n                let expr_slot := _352_slot\n                /// @src 1:1823:1836  \"transactionId\"\n                let _4 := var_transactionId_1\n                let expr_2 := _4\n                /// @src 1:1809:1837  \"confirmations[transactionId]\"\n                let _5 := mapping_index_access_mapping_uint256_mapping_address_bool_of_uint256(expr_slot, expr_2)\n                let _355_slot := _5\n                let expr_slot_1 := _355_slot\n                /// @src 1:1838:1843  \"owner\"\n                let _6 := var_owner\n                let expr_3 := _6\n                /// @src 1:1809:1844  \"confirmations[transactionId][owner]\"\n                let _7 := mapping_index_access_mapping_address_bool_of_address(expr_slot_1, expr_3)\n                let _8 := read_from_storage_split_offset_bool(_7)\n                let expr_4 := _8\n                /// @src 1:1801:1845  \"require(confirmations[transactionId][owner])\"\n                require_helper(expr_4)\n                /// @src 1:1855:1856  \"_\"\n                modifier_notExecuted_862(var_transactionId)\n            }\n            /// @ast-id 436 @src 1:2005:2120  \"modifier notExecuted(uint transactionId) {...\"\n            function modifier_notExecuted_862(var_transactionId)\n            {\n                /// @src 1:6916:6929  \"transactionId\"\n                let _1 := var_transactionId\n                let expr := _1\n                let _2 := expr\n                let var_transactionId_1 := _2\n                /// @src 1:2065:2077  \"transactions\"\n                let _361_slot := 0x00\n                let expr_slot := _361_slot\n                /// @src 1:2078:2091  \"transactionId\"\n                let _3 := var_transactionId_1\n                let expr_1 := _3\n                /// @src 1:2065:2092  \"transactions[transactionId]\"\n                let _4 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_slot, expr_1)\n                let _364_slot := _4\n                let expr_slot_1 := _364_slot\n                /// @src 1:2065:2101  \"transactions[transactionId].executed\"\n                let _5 := add(expr_slot_1, 3)\n                let _6 := read_from_storage_split_offset_bool(_5)\n                let expr_2 := _6\n                /// @src 1:2064:2101  \"!transactions[transactionId].executed\"\n                let expr_3 := cleanup_bool(iszero(expr_2))\n                /// @src 1:2056:2102  \"require(!transactions[transactionId].executed)\"\n                require_helper(expr_3)\n                /// @src 1:2112:2113  \"_\"\n                fun_executeTransaction_inner(var_transactionId)\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function convert_struct_Transaction_storage_to_struct_Transaction_ptr(value) -> converted\n            { converted := value }\n            function array_length_bytes_storage(value) -> length\n            {\n                length := sload(value)\n                length := extract_byte_array_length(length)\n            }\n            function convert_array_bytes_storage_to_bytes(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_bytes(value)\n            }\n            /// @src 1:6756:7352  \"function executeTransaction(uint transactionId)...\"\n            function fun_executeTransaction_inner(var_transactionId)\n            {\n                /// @src 1:6961:6974  \"transactionId\"\n                let _1 := var_transactionId\n                let expr := _1\n                /// @src 1:6949:6975  \"isConfirmed(transactionId)\"\n                let expr_1 := fun_isConfirmed(expr)\n                /// @src 1:6945:7346  \"if (isConfirmed(transactionId)) {...\"\n                if expr_1\n                {\n                    /// @src 1:7017:7029  \"transactions\"\n                    let _368_slot := 0x00\n                    let expr_870_slot := _368_slot\n                    /// @src 1:7030:7043  \"transactionId\"\n                    let _2 := var_transactionId\n                    let expr_2 := _2\n                    /// @src 1:7017:7044  \"transactions[transactionId]\"\n                    let _3 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_870_slot, expr_2)\n                    let _371_slot := _3\n                    let expr_872_slot := _371_slot\n                    /// @src 1:6991:7044  \"Transaction storage txn = transactions[transactionId]\"\n                    let var_txn_slot := convert_struct_Transaction_storage_to_struct_Transaction_ptr(expr_872_slot)\n                    /// @src 1:7073:7077  \"true\"\n                    let expr_3 := 0x01\n                    /// @src 1:7058:7061  \"txn\"\n                    let _372_slot := var_txn_slot\n                    let expr_874_slot := _372_slot\n                    /// @src 1:7058:7070  \"txn.executed\"\n                    let _4 := add(expr_874_slot, 3)\n                    /// @src 1:7058:7077  \"txn.executed = true\"\n                    update_storage_value_offset_bool_to_bool(_4, expr_3)\n                    /// @src 1:7109:7112  \"txn\"\n                    let _374_slot := var_txn_slot\n                    let expr_881_slot := _374_slot\n                    /// @src 1:7109:7124  \"txn.destination\"\n                    let _5 := add(expr_881_slot, 0)\n                    let _6 := read_from_storage_split_offset_address(_5)\n                    let expr_4 := _6\n                    /// @src 1:7126:7129  \"txn\"\n                    let _377_slot := var_txn_slot\n                    let expr_883_slot := _377_slot\n                    /// @src 1:7126:7135  \"txn.value\"\n                    let _7 := add(expr_883_slot, 1)\n                    let _8 := read_from_storage_split_offset_uint256(_7)\n                    let expr_5 := _8\n                    /// @src 1:7137:7140  \"txn\"\n                    let _380_slot := var_txn_slot\n                    let expr_885_slot := _380_slot\n                    /// @src 1:7137:7145  \"txn.data\"\n                    let _9 := add(expr_885_slot, 2)\n                    let _382_slot := _9\n                    let expr_886_slot := _382_slot\n                    /// @src 1:7137:7152  \"txn.data.length\"\n                    let expr_6 := array_length_bytes_storage(expr_886_slot)\n                    /// @src 1:7154:7157  \"txn\"\n                    let _383_slot := var_txn_slot\n                    let expr_888_slot := _383_slot\n                    /// @src 1:7154:7162  \"txn.data\"\n                    let _10 := add(expr_888_slot, 2)\n                    let _385_slot := _10\n                    let expr_889_slot := _385_slot\n                    /// @src 1:7095:7163  \"external_call(txn.destination, txn.value, txn.data.length, txn.data)\"\n                    let _386_mpos := convert_array_bytes_storage_to_bytes(expr_889_slot)\n                    let expr_7 := fun_external_call(expr_4, expr_5, expr_6, _386_mpos)\n                    /// @src 1:7091:7336  \"if (external_call(txn.destination, txn.value, txn.data.length, txn.data))...\"\n                    switch expr_7\n                    case 0 {\n                        /// @src 1:7269:7282  \"transactionId\"\n                        let _11 := var_transactionId\n                        let expr_8 := _11\n                        /// @src 1:7252:7283  \"ExecutionFailure(transactionId)\"\n                        let _12 := 0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236\n                        let _13 := convert_uint256_to_uint256(expr_8)\n                        let _14 := allocate_unbounded()\n                        let _15 := abi_encode_tuple(_14)\n                        log2(_14, sub(_15, _14), _12, _13)\n                        /// @src 1:7316:7321  \"false\"\n                        let expr_9 := 0x00\n                        /// @src 1:7301:7304  \"txn\"\n                        let _392_slot := var_txn_slot\n                        let expr_899_slot := _392_slot\n                        /// @src 1:7301:7313  \"txn.executed\"\n                        let _16 := add(expr_899_slot, 3)\n                        /// @src 1:7301:7321  \"txn.executed = false\"\n                        update_storage_value_offset_bool_to_bool(_16, expr_9)\n                    }\n                    default /// @src 1:7091:7336  \"if (external_call(txn.destination, txn.value, txn.data.length, txn.data))...\"\n                    {\n                        /// @src 1:7196:7209  \"transactionId\"\n                        let _17 := var_transactionId\n                        let expr_10 := _17\n                        /// @src 1:7186:7210  \"Execution(transactionId)\"\n                        let _18 := 0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75\n                        let _19 := convert_uint256_to_uint256(expr_10)\n                        let _20 := allocate_unbounded()\n                        let _21 := abi_encode_tuple(_20)\n                        log2(_20, sub(_21, _20), _18, _19)\n                    }\n                }\n            }\n            /// @ast-id 910 @src 1:6756:7352  \"function executeTransaction(uint transactionId)...\"\n            function fun_executeTransaction(var_transactionId)\n            {\n                modifier_ownerExists_854(var_transactionId)\n            }\n            /// @ast-id 494 @src 1:2513:2623  \"receive() external payable {...\"\n            function fun()\n            {\n                /// @src 1:2554:2563  \"msg.value\"\n                let expr := callvalue()\n                /// @src 1:2566:2567  \"0\"\n                let expr_1 := 0x00\n                /// @src 1:2554:2567  \"msg.value > 0\"\n                let expr_2 := gt(cleanup_uint256(expr), convert_rational_0_by_1_to_uint256(expr_1))\n                /// @src 1:2550:2616  \"if (msg.value > 0)...\"\n                if expr_2\n                {\n                    /// @src 1:2594:2604  \"msg.sender\"\n                    let expr_3 := caller()\n                    /// @src 1:2606:2615  \"msg.value\"\n                    let expr_4 := callvalue()\n                    /// @src 1:2586:2616  \"Deposit(msg.sender, msg.value)\"\n                    let _1 := 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c\n                    let _2 := convert_address_to_address(expr_3)\n                    let _3 := allocate_unbounded()\n                    let _4 := abi_encode_uint256(_3, expr_4)\n                    log2(_3, sub(_4, _3), _1, _2)\n                }\n            }\n            /// @ast-id 451 @src 1:2126:2220  \"modifier notNull(address _address) {...\"\n            function modifier_notNull_987(var_transactionId, var_destination, var_value, var_data_mpos) -> _1\n            {\n                _1 := var_transactionId\n                /// @src 1:9602:9613  \"destination\"\n                let _2 := var_destination\n                let expr := _2\n                let _3 := expr\n                let var_address := _3\n                /// @src 1:2179:2187  \"_address\"\n                let _4 := var_address\n                let expr_1 := _4\n                /// @src 1:2199:2200  \"0\"\n                let expr_2 := 0x00\n                /// @src 1:2191:2201  \"address(0)\"\n                let expr_3 := convert_rational_by_to_address(expr_2)\n                /// @src 1:2179:2201  \"_address != address(0)\"\n                let expr_4 := iszero(eq(cleanup_address(expr_1), cleanup_address(expr_3)))\n                /// @src 1:2171:2202  \"require(_address != address(0))\"\n                require_helper(expr_4)\n                /// @src 1:2212:2213  \"_\"\n                _1 := fun_addTransaction_inner(var_transactionId, var_destination, var_value, var_data_mpos)\n            }\n            /// @src 1:218:13010  \"contract MultiSigWallet {...\"\n            function allocate_memory_struct_struct_Transaction_storage_ptr() -> memPtr\n            {\n                memPtr := allocate_memory(128)\n            }\n            function write_to_memory_bytes(memPtr, value)\n            { mstore(memPtr, value) }\n            function write_to_memory_bool(memPtr, value)\n            {\n                mstore(memPtr, cleanup_bool(value))\n            }\n            function update_byte_slice_20_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_20_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            function read_from_memoryt_bytes(memPtr) -> value\n            { value := mload(memPtr) }\n            function divide_by_ceil(value) -> result\n            {\n                result := div(add(value, 31), 32)\n            }\n            function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, not(0))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_uint256_to_uint256(slot, offset, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n            }\n            function storage_set_to_zero_uint256(slot, offset)\n            {\n                let zero := zero_value_for_split_uint256()\n                update_storage_value_uint256_to_uint256(slot, offset, zero)\n            }\n            function clear_storage_range_bytes1(start, end)\n            {\n                for { } lt(start, end) { start := add(start, 1) }\n                {\n                    storage_set_to_zero_uint256(start, 0)\n                }\n            }\n            function clean_up_bytearray_end_slots_bytes_storage(array, len, startIndex)\n            {\n                if gt(len, 31)\n                {\n                    let dataArea := array_dataslot_bytes_storage(array)\n                    let deleteStart := add(dataArea, divide_by_ceil(startIndex))\n                    if lt(startIndex, 32) { deleteStart := dataArea }\n                    clear_storage_range_bytes1(deleteStart, add(dataArea, divide_by_ceil(len)))\n                }\n            }\n            function mask_bytes_dynamic(data, bytes) -> result\n            {\n                let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n                result := and(data, mask)\n            }\n            function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n            {\n                data := mask_bytes_dynamic(data, len)\n                used := or(data, mul(2, len))\n            }\n            function copy_byte_array_to_storage_from_bytes_to_bytes(slot, src)\n            {\n                let newLen := array_length_bytes(src)\n                if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                let oldLen := extract_byte_array_length(sload(slot))\n                clean_up_bytearray_end_slots_bytes_storage(slot, oldLen, newLen)\n                let srcOffset := 0\n                srcOffset := 0x20\n                switch gt(newLen, 31)\n                case 1 {\n                    let loopEnd := and(newLen, not(0x1f))\n                    let dstPtr := array_dataslot_bytes_storage(slot)\n                    let i := 0\n                    for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                    {\n                        sstore(dstPtr, mload(add(src, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, 32)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(src, srcOffset))\n                        sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                    }\n                    sstore(slot, add(mul(newLen, 2), 1))\n                }\n                default {\n                    let value := 0\n                    if newLen\n                    {\n                        value := mload(add(src, srcOffset))\n                    }\n                    sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                }\n            }\n            function update_storage_value_offset_bytes_to_bytes(slot, value)\n            {\n                copy_byte_array_to_storage_from_bytes_to_bytes(slot, value)\n            }\n            function read_from_memoryt_bool(ptr) -> returnValue\n            {\n                let value := cleanup_bool(mload(ptr))\n                returnValue := value\n            }\n            function copy_struct_to_storage_from_struct_Transaction_to_struct_Transaction(slot, value)\n            {\n                let memberSlot := add(slot, 0)\n                let memberSrcPtr := add(value, 0)\n                let memberValue := read_from_memoryt_address(memberSrcPtr)\n                update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                let memberSlot_1 := add(slot, 1)\n                let memberSrcPtr_1 := add(value, 32)\n                let memberValue_1 := read_from_memoryt_uint256(memberSrcPtr_1)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_1, memberValue_1)\n                let memberSlot_2 := add(slot, 2)\n                let memberSrcPtr_2 := add(value, 64)\n                let memberValue_2 := read_from_memoryt_bytes(memberSrcPtr_2)\n                update_storage_value_offset_bytes_to_bytes(memberSlot_2, memberValue_2)\n                let memberSlot_3 := add(slot, 3)\n                let memberSrcPtr_3 := add(value, 96)\n                let memberValue_3 := read_from_memoryt_bool(memberSrcPtr_3)\n                update_storage_value_offset_bool_to_bool(memberSlot_3, memberValue_3)\n            }\n            function update_storage_value_offset_struct_Transaction_to_struct_Transaction(slot, value)\n            {\n                copy_struct_to_storage_from_struct_Transaction_to_struct_Transaction(slot, value)\n            }\n            /// @src 1:9493:9956  \"function addTransaction(address destination, uint value, bytes memory data)...\"\n            function fun_addTransaction_inner(_1, var_destination, var_value, var_data_mpos) -> var_transactionId\n            {\n                var_transactionId := _1\n                /// @src 1:9682:9698  \"transactionCount\"\n                let _2 := read_from_storage_split_offset_uint256(0x05)\n                let expr := _2\n                /// @src 1:9666:9698  \"transactionId = transactionCount\"\n                var_transactionId := expr\n                /// @src 1:9777:9788  \"destination\"\n                let _3 := var_destination\n                let expr_1 := _3\n                /// @src 1:9809:9814  \"value\"\n                let _4 := var_value\n                let expr_2 := _4\n                /// @src 1:9834:9838  \"data\"\n                let _412_mpos := var_data_mpos\n                let expr_1001_mpos := _412_mpos\n                /// @src 1:9862:9867  \"false\"\n                let expr_3 := 0x00\n                /// @src 1:9738:9878  \"Transaction({...\"\n                let expr_1003_mpos := allocate_memory_struct_struct_Transaction_storage_ptr()\n                write_to_memory_address(add(expr_1003_mpos, 0), expr_1)\n                write_to_memory_uint256(add(expr_1003_mpos, 32), expr_2)\n                write_to_memory_bytes(add(expr_1003_mpos, 64), expr_1001_mpos)\n                write_to_memory_bool(add(expr_1003_mpos, 96), expr_3)\n                /// @src 1:9708:9720  \"transactions\"\n                let _413_slot := 0x00\n                let expr_995_slot := _413_slot\n                /// @src 1:9721:9734  \"transactionId\"\n                let _5 := var_transactionId\n                let expr_4 := _5\n                /// @src 1:9708:9735  \"transactions[transactionId]\"\n                let _6 := mapping_index_access_mapping_uint256_struct_Transaction_storage_of_uint256(expr_995_slot, expr_4)\n                /// @src 1:9708:9878  \"transactions[transactionId] = Transaction({...\"\n                update_storage_value_offset_struct_Transaction_to_struct_Transaction(_6, expr_1003_mpos)\n                /// @src 1:9908:9909  \"1\"\n                let expr_5 := 0x01\n                /// @src 1:9888:9909  \"transactionCount += 1\"\n                let _7 := convert_t_rational_by_to_t_uint256(expr_5)\n                let _8 := read_from_storage_split_offset_uint256(0x05)\n                let expr_6 := checked_add_uint256(_8, _7)\n                update_storage_value_offset_uint256_to_uint256(0x05, expr_6)\n                /// @src 1:9935:9948  \"transactionId\"\n                let _9 := var_transactionId\n                let expr_7 := _9\n                /// @src 1:9924:9949  \"Submission(transactionId)\"\n                let _10 := 0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51\n                let _11 := convert_uint256_to_uint256(expr_7)\n                let _12 := allocate_unbounded()\n                let _13 := abi_encode_tuple(_12)\n                log2(_12, sub(_13, _12), _10, _11)\n            }\n            /// @ast-id 1015 @src 1:9493:9956  \"function addTransaction(address destination, uint value, bytes memory data)...\"\n            function fun_addTransaction(var_destination, var_value, var_data_mpos) -> var_transactionId\n            {\n                /// @src 1:9632:9650  \"uint transactionId\"\n                let zero_t_uint256 := zero_value_for_split_uint256()\n                var_transactionId := zero_t_uint256\n                var_transactionId := modifier_notNull_987(var_transactionId, var_destination, var_value, var_data_mpos)\n            }\n            /// @ast-id 930 @src 1:7529:8640  \"function external_call(address destination, uint value, uint dataLength, bytes memory data) private returns (bool) {...\"\n            function fun_external_call(var_destination, var_value, var_dataLength, var_data_918_mpos) -> var_\n            {\n                /// @src 1:7638:7642  \"bool\"\n                let zero_bool := zero_value_for_split_bool()\n                var_ := zero_bool\n                /// @src 1:7654:7665  \"bool result\"\n                let var_result\n                let zero_t_bool := zero_value_for_split_bool()\n                var_result := zero_t_bool\n                /// @src 1:7675:8611  \"assembly {...\"\n                let usr$x := mload(0x40)\n                let usr$d := add(var_data_918_mpos, 32)\n                var_result := call(sub(gas(), 34710), var_destination, var_value, usr$d, var_dataLength, usr$x, 0)\n                /// @src 1:8627:8633  \"result\"\n                let _1 := var_result\n                let expr := _1\n                /// @src 1:8620:8633  \"return result\"\n                var_ := expr\n                leave\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220c1e097ac6a04424b64b53ed30b41dbbd4192bb252a315851416c57f38579739464736f6c634300081c0033\"\n    }\n}\n",
					"hash": "efb43cdd260ef1f3af9e6d26e8bb98438a1d02f7bde54135d27981fa757bfb54",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"ReviveFactory.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "ReviveFactory.sol",
					"exportedSymbols": {
						"MultiSigFactory": [
							253
						],
						"MultiSigWallet": [
							1291
						]
					},
					"id": 254,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".28"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:0"
						},
						{
							"absolutePath": "ReviveMultisig.sol",
							"file": "./ReviveMultisig.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 254,
							"sourceUnit": 1292,
							"src": "58:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MultiSigFactory",
							"contractDependencies": [
								1291
							],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "90:213:0",
								"text": "@title  MultiSigFactory\n @notice A minimal factory that deploys new MultiSigWallets and keeps an on‐chain registry.\n @dev    Anyone can call createMultiSig; all addresses are stored in `allMultiSigs`."
							},
							"fullyImplemented": true,
							"id": 253,
							"linearizedBaseContracts": [
								253
							],
							"name": "MultiSigFactory",
							"nameLocation": "312:15:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 4,
										"nodeType": "StructuredDocumentation",
										"src": "334:324:0",
										"text": "@notice Emitted when a new MultiSigWallet is created.\n @param creator    The address that called createMultiSig.\n @param multisig   The newly deployed MultiSigWallet address.\n @param owners     The list of owners for this new multisig.\n @param required   The number of confirmations required."
									},
									"eventSelector": "4fe3daf9045507ccb3c1a8cdbf17e14118e023e81ac9ec77527e49853a355abd",
									"id": 15,
									"name": "MultiSigCreated",
									"nameLocation": "669:15:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 6,
												"indexed": true,
												"mutability": "mutable",
												"name": "creator",
												"nameLocation": "710:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "694:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 5,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "694:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 8,
												"indexed": true,
												"mutability": "mutable",
												"name": "multisig",
												"nameLocation": "743:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "727:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 7,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "727:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": false,
												"mutability": "mutable",
												"name": "owners",
												"nameLocation": "771:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "761:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 9,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "761:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 10,
													"nodeType": "ArrayTypeName",
													"src": "761:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 13,
												"indexed": false,
												"mutability": "mutable",
												"name": "required",
												"nameLocation": "795:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "787:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 12,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "787:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "684:125:0"
									},
									"src": "663:147:0"
								},
								{
									"constant": false,
									"documentation": {
										"id": 16,
										"nodeType": "StructuredDocumentation",
										"src": "816:57:0",
										"text": "@dev All multisig addresses deployed by this factory."
									},
									"functionSelector": "449092c8",
									"id": 19,
									"mutability": "mutable",
									"name": "allMultiSigs",
									"nameLocation": "895:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 253,
									"src": "878:29:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_address_$dyn_storage",
										"typeString": "address[]"
									},
									"typeName": {
										"baseType": {
											"id": 17,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "878:7:0",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"id": 18,
										"nodeType": "ArrayTypeName",
										"src": "878:9:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
											"typeString": "address[]"
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 20,
										"nodeType": "StructuredDocumentation",
										"src": "914:207:0",
										"text": "@notice Emitted when an existing MultiSigWallet is registered.\n @param registrant The address that called registerExistingMultisig.\n @param multisig   The multisig address being registered."
									},
									"eventSelector": "4efa4b67ce92db70034592f6523ffb5fd483a646da37c224dab34a1b0d247369",
									"id": 26,
									"name": "MultiSigRegistered",
									"nameLocation": "1132:18:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "registrant",
												"nameLocation": "1167:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "1151:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1151:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 24,
												"indexed": true,
												"mutability": "mutable",
												"name": "multisig",
												"nameLocation": "1195:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "1179:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 23,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1179:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1150:54:0"
									},
									"src": "1126:79:0"
								},
								{
									"body": {
										"id": 68,
										"nodeType": "Block",
										"src": "1647:469:0",
										"statements": [
											{
												"assignments": [
													39
												],
												"declarations": [
													{
														"constant": false,
														"id": 39,
														"mutability": "mutable",
														"name": "wallet",
														"nameLocation": "1851:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 68,
														"src": "1836:21:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
															"typeString": "contract MultiSigWallet"
														},
														"typeName": {
															"id": 38,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 37,
																"name": "MultiSigWallet",
																"nameLocations": [
																	"1836:14:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1291,
																"src": "1836:14:0"
															},
															"referencedDeclaration": 1291,
															"src": "1836:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																"typeString": "contract MultiSigWallet"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 46,
												"initialValue": {
													"arguments": [
														{
															"id": 43,
															"name": "owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 30,
															"src": "1879:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														{
															"id": 44,
															"name": "required",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 32,
															"src": "1887:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 42,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1860:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_creation_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$returns$_t_contract$_MultiSigWallet_$1291_$",
															"typeString": "function (address[] memory,uint256) returns (contract MultiSigWallet)"
														},
														"typeName": {
															"id": 41,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 40,
																"name": "MultiSigWallet",
																"nameLocations": [
																	"1864:14:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1291,
																"src": "1864:14:0"
															},
															"referencedDeclaration": 1291,
															"src": "1864:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																"typeString": "contract MultiSigWallet"
															}
														}
													},
													"id": 45,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1860:36:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
														"typeString": "contract MultiSigWallet"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1836:60:0"
											},
											{
												"expression": {
													"id": 52,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 47,
														"name": "multisig",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 35,
														"src": "1906:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 50,
																"name": "wallet",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 39,
																"src": "1925:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																	"typeString": "contract MultiSigWallet"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																	"typeString": "contract MultiSigWallet"
																}
															],
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1917:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 48,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1917:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 51,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1917:15:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1906:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 53,
												"nodeType": "ExpressionStatement",
												"src": "1906:26:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 57,
															"name": "multisig",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 35,
															"src": "1995:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 54,
															"name": "allMultiSigs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 19,
															"src": "1977:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 56,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1990:4:0",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "1977:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$",
															"typeString": "function (address[] storage pointer,address)"
														}
													},
													"id": 58,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1977:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 59,
												"nodeType": "ExpressionStatement",
												"src": "1977:27:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 61,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2070:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 62,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2074:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2070:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 63,
															"name": "multisig",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 35,
															"src": "2082:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 64,
															"name": "owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 30,
															"src": "2092:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														{
															"id": 65,
															"name": "required",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 32,
															"src": "2100:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 60,
														"name": "MultiSigCreated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 15,
														"src": "2054:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address[] memory,uint256)"
														}
													},
													"id": 66,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2054:55:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 67,
												"nodeType": "EmitStatement",
												"src": "2049:60:0"
											}
										]
									},
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "1211:308:0",
										"text": "@notice Deploy a new MultiSigWallet and register its address.\n @param owners    An array of owner addresses for the multisig.\n @param required  The number of confirmations required (must be >0 and <= owners.length).\n @return multisig The address of the newly deployed MultiSigWallet."
									},
									"functionSelector": "d46a09f1",
									"id": 69,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createMultiSig",
									"nameLocation": "1533:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "owners",
												"nameLocation": "1565:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 69,
												"src": "1548:23:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 28,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1548:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 29,
													"nodeType": "ArrayTypeName",
													"src": "1548:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "required",
												"nameLocation": "1581:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 69,
												"src": "1573:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1573:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1547:43:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "multisig",
												"nameLocation": "1633:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 69,
												"src": "1625:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1625:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1624:18:0"
									},
									"scope": 253,
									"src": "1524:592:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 134,
										"nodeType": "Block",
										"src": "2313:573:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 81,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 76,
																"name": "multisig",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 72,
																"src": "2331:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 79,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2351:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 78,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2343:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 77,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2343:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 80,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2343:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2331:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c6964206d756c74697369672061646472657373",
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2355:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0400d57d7dcb81c8d59b1b1298f680cdaf2a06192e4d8bd9f5639fdb0cc41c0b",
																"typeString": "literal_string \"Invalid multisig address\""
															},
															"value": "Invalid multisig address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0400d57d7dcb81c8d59b1b1298f680cdaf2a06192e4d8bd9f5639fdb0cc41c0b",
																"typeString": "literal_string \"Invalid multisig address\""
															}
														],
														"id": 75,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2323:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 83,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2323:59:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 84,
												"nodeType": "ExpressionStatement",
												"src": "2323:59:0"
											},
											{
												"assignments": [
													86
												],
												"declarations": [
													{
														"constant": false,
														"id": 86,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2545:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 134,
														"src": "2540:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 85,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2540:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 88,
												"initialValue": {
													"hexValue": "66616c7365",
													"id": 87,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2555:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "false"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2540:20:0"
											},
											{
												"clauses": [
													{
														"block": {
															"id": 108,
															"nodeType": "Block",
															"src": "2646:39:0",
															"statements": [
																{
																	"expression": {
																		"id": 106,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 104,
																			"name": "success",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 86,
																			"src": "2660:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"hexValue": "74727565",
																			"id": 105,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2670:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "true"
																		},
																		"src": "2660:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 107,
																	"nodeType": "ExpressionStatement",
																	"src": "2660:14:0"
																}
															]
														},
														"errorName": "",
														"id": 109,
														"nodeType": "TryCatchClause",
														"parameters": {
															"id": 103,
															"nodeType": "ParameterList",
															"parameters": [
																{
																	"constant": false,
																	"id": 102,
																	"mutability": "mutable",
																	"name": "",
																	"nameLocation": "-1:-1:-1",
																	"nodeType": "VariableDeclaration",
																	"scope": 109,
																	"src": "2640:4:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 101,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "2640:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"src": "2639:6:0"
														},
														"src": "2631:54:0"
													},
													{
														"block": {
															"id": 114,
															"nodeType": "Block",
															"src": "2692:40:0",
															"statements": [
																{
																	"expression": {
																		"id": 112,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 110,
																			"name": "success",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 86,
																			"src": "2706:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"hexValue": "66616c7365",
																			"id": 111,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2716:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "false"
																		},
																		"src": "2706:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 113,
																	"nodeType": "ExpressionStatement",
																	"src": "2706:15:0"
																}
															]
														},
														"errorName": "",
														"id": 115,
														"nodeType": "TryCatchClause",
														"src": "2686:46:0"
													}
												],
												"externalCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 98,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2624:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_MultiSigFactory_$253",
																		"typeString": "contract MultiSigFactory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_MultiSigFactory_$253",
																		"typeString": "contract MultiSigFactory"
																	}
																],
																"id": 97,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2616:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 96,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2616:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 99,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2616:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 92,
																			"name": "multisig",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 72,
																			"src": "2597:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 91,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2589:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_payable_$",
																			"typeString": "type(address payable)"
																		},
																		"typeName": {
																			"id": 90,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2589:8:0",
																			"stateMutability": "payable",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2589:17:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																],
																"id": 89,
																"name": "MultiSigWallet",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1291,
																"src": "2574:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_MultiSigWallet_$1291_$",
																	"typeString": "type(contract MultiSigWallet)"
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2574:33:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																"typeString": "contract MultiSigWallet"
															}
														},
														"id": 95,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2608:7:0",
														"memberName": "isOwner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 316,
														"src": "2574:41:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_bool_$",
															"typeString": "function (address) view external returns (bool)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2574:56:0",
													"tryCall": true,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 116,
												"nodeType": "TryStatement",
												"src": "2570:162:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 118,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "2749:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f7420612076616c6964204d756c746953696757616c6c6574",
															"id": 119,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2758:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9f2297d921856760af725dee02fd73c73aca1ade59d4b9f8975ef4fa9eab4ae3",
																"typeString": "literal_string \"Not a valid MultiSigWallet\""
															},
															"value": "Not a valid MultiSigWallet"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9f2297d921856760af725dee02fd73c73aca1ade59d4b9f8975ef4fa9eab4ae3",
																"typeString": "literal_string \"Not a valid MultiSigWallet\""
															}
														],
														"id": 117,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2741:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2741:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 121,
												"nodeType": "ExpressionStatement",
												"src": "2741:46:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 125,
															"name": "multisig",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 72,
															"src": "2815:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 122,
															"name": "allMultiSigs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 19,
															"src": "2797:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 124,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2810:4:0",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "2797:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$",
															"typeString": "function (address[] storage pointer,address)"
														}
													},
													"id": 126,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2797:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 127,
												"nodeType": "ExpressionStatement",
												"src": "2797:27:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 129,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2858:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 130,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2862:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2858:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 131,
															"name": "multisig",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 72,
															"src": "2870:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 128,
														"name": "MultiSigRegistered",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 26,
														"src": "2839:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2839:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 133,
												"nodeType": "EmitStatement",
												"src": "2834:45:0"
											}
										]
									},
									"documentation": {
										"id": 70,
										"nodeType": "StructuredDocumentation",
										"src": "2122:125:0",
										"text": "@notice Register a previously deployed multisig address.\n @param multisig The address of the multisig to register."
									},
									"functionSelector": "0daee90f",
									"id": 135,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "registerExistingMultisig",
									"nameLocation": "2261:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 72,
												"mutability": "mutable",
												"name": "multisig",
												"nameLocation": "2294:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "2286:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 71,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2286:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2285:18:0"
									},
									"returnParameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2313:0:0"
									},
									"scope": 253,
									"src": "2252:634:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 144,
										"nodeType": "Block",
										"src": "3108:36:0",
										"statements": [
											{
												"expression": {
													"id": 142,
													"name": "allMultiSigs",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 19,
													"src": "3125:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage",
														"typeString": "address[] storage ref"
													}
												},
												"functionReturnParameters": 141,
												"id": 143,
												"nodeType": "Return",
												"src": "3118:19:0"
											}
										]
									},
									"documentation": {
										"id": 136,
										"nodeType": "StructuredDocumentation",
										"src": "2892:143:0",
										"text": "@notice Returns the total list of multisig addresses ever created by this factory.\n @return An array of addresses for all multisigs."
									},
									"functionSelector": "8274bf68",
									"id": 145,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAllMultiSigs",
									"nameLocation": "3049:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3064:2:0"
									},
									"returnParameters": {
										"id": 141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "3090:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 138,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "3090:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 139,
													"nodeType": "ArrayTypeName",
													"src": "3090:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3089:18:0"
									},
									"scope": 253,
									"src": "3040:104:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 251,
										"nodeType": "Block",
										"src": "3498:866:0",
										"statements": [
											{
												"assignments": [
													155
												],
												"declarations": [
													{
														"constant": false,
														"id": 155,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "3516:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 251,
														"src": "3508:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 154,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3508:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 158,
												"initialValue": {
													"expression": {
														"id": 156,
														"name": "allMultiSigs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 19,
														"src": "3524:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"id": 157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3537:6:0",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "3524:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3508:35:0"
											},
											{
												"assignments": [
													160
												],
												"declarations": [
													{
														"constant": false,
														"id": 160,
														"mutability": "mutable",
														"name": "count",
														"nameLocation": "3641:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 251,
														"src": "3633:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 159,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3633:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 162,
												"initialValue": {
													"hexValue": "30",
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3649:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3633:17:0"
											},
											{
												"body": {
													"id": 194,
													"nodeType": "Block",
													"src": "3696:238:0",
													"statements": [
														{
															"assignments": [
																175
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 175,
																	"mutability": "mutable",
																	"name": "candidate",
																	"nameLocation": "3788:9:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 194,
																	"src": "3773:24:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																		"typeString": "contract MultiSigWallet"
																	},
																	"typeName": {
																		"id": 174,
																		"nodeType": "UserDefinedTypeName",
																		"pathNode": {
																			"id": 173,
																			"name": "MultiSigWallet",
																			"nameLocations": [
																				"3773:14:0"
																			],
																			"nodeType": "IdentifierPath",
																			"referencedDeclaration": 1291,
																			"src": "3773:14:0"
																		},
																		"referencedDeclaration": 1291,
																		"src": "3773:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																			"typeString": "contract MultiSigWallet"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 184,
															"initialValue": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"baseExpression": {
																					"id": 179,
																					"name": "allMultiSigs",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 19,
																					"src": "3823:12:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_address_$dyn_storage",
																						"typeString": "address[] storage ref"
																					}
																				},
																				"id": 181,
																				"indexExpression": {
																					"id": 180,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 164,
																					"src": "3836:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "3823:15:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 178,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3815:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_payable_$",
																				"typeString": "type(address payable)"
																			},
																			"typeName": {
																				"id": 177,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3815:8:0",
																				"stateMutability": "payable",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 182,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3815:24:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	],
																	"id": 176,
																	"name": "MultiSigWallet",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1291,
																	"src": "3800:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_MultiSigWallet_$1291_$",
																		"typeString": "type(contract MultiSigWallet)"
																	}
																},
																"id": 183,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3800:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																	"typeString": "contract MultiSigWallet"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3773:67:0"
														},
														{
															"condition": {
																"arguments": [
																	{
																		"id": 187,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 148,
																		"src": "3876:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 185,
																		"name": "candidate",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 175,
																		"src": "3858:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																			"typeString": "contract MultiSigWallet"
																		}
																	},
																	"id": 186,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3868:7:0",
																	"memberName": "isOwner",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 316,
																	"src": "3858:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_bool_$",
																		"typeString": "function (address) view external returns (bool)"
																	}
																},
																"id": 188,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3858:24:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 193,
															"nodeType": "IfStatement",
															"src": "3854:70:0",
															"trueBody": {
																"id": 192,
																"nodeType": "Block",
																"src": "3884:40:0",
																"statements": [
																	{
																		"expression": {
																			"id": 190,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "++",
																			"prefix": false,
																			"src": "3902:7:0",
																			"subExpression": {
																				"id": 189,
																				"name": "count",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 160,
																				"src": "3902:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 191,
																		"nodeType": "ExpressionStatement",
																		"src": "3902:7:0"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 169,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 167,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 164,
														"src": "3680:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 168,
														"name": "total",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 155,
														"src": "3684:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3680:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 195,
												"initializationExpression": {
													"assignments": [
														164
													],
													"declarations": [
														{
															"constant": false,
															"id": 164,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "3673:1:0",
															"nodeType": "VariableDeclaration",
															"scope": 195,
															"src": "3665:9:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 163,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "3665:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 166,
													"initialValue": {
														"hexValue": "30",
														"id": 165,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3677:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "3665:13:0"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 171,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "3691:3:0",
														"subExpression": {
															"id": 170,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 164,
															"src": "3691:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 172,
													"nodeType": "ExpressionStatement",
													"src": "3691:3:0"
												},
												"nodeType": "ForStatement",
												"src": "3660:274:0"
											},
											{
												"expression": {
													"id": 202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 196,
														"name": "myMultisigs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 152,
														"src": "4000:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 200,
																"name": "count",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 160,
																"src": "4028:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 199,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "NewExpression",
															"src": "4014:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
																"typeString": "function (uint256) pure returns (address[] memory)"
															},
															"typeName": {
																"baseType": {
																	"id": 197,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4018:7:0",
																	"stateMutability": "nonpayable",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 198,
																"nodeType": "ArrayTypeName",
																"src": "4018:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																	"typeString": "address[]"
																}
															}
														},
														"id": 201,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4014:20:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"src": "4000:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"id": 203,
												"nodeType": "ExpressionStatement",
												"src": "4000:34:0"
											},
											{
												"assignments": [
													205
												],
												"declarations": [
													{
														"constant": false,
														"id": 205,
														"mutability": "mutable",
														"name": "idx",
														"nameLocation": "4052:3:0",
														"nodeType": "VariableDeclaration",
														"scope": 251,
														"src": "4044:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 204,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4044:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 207,
												"initialValue": {
													"hexValue": "30",
													"id": 206,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4058:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4044:15:0"
											},
											{
												"body": {
													"id": 247,
													"nodeType": "Block",
													"src": "4105:225:0",
													"statements": [
														{
															"assignments": [
																220
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 220,
																	"mutability": "mutable",
																	"name": "candidate",
																	"nameLocation": "4134:9:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 247,
																	"src": "4119:24:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																		"typeString": "contract MultiSigWallet"
																	},
																	"typeName": {
																		"id": 219,
																		"nodeType": "UserDefinedTypeName",
																		"pathNode": {
																			"id": 218,
																			"name": "MultiSigWallet",
																			"nameLocations": [
																				"4119:14:0"
																			],
																			"nodeType": "IdentifierPath",
																			"referencedDeclaration": 1291,
																			"src": "4119:14:0"
																		},
																		"referencedDeclaration": 1291,
																		"src": "4119:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																			"typeString": "contract MultiSigWallet"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 229,
															"initialValue": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"baseExpression": {
																					"id": 224,
																					"name": "allMultiSigs",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 19,
																					"src": "4169:12:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_address_$dyn_storage",
																						"typeString": "address[] storage ref"
																					}
																				},
																				"id": 226,
																				"indexExpression": {
																					"id": 225,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 209,
																					"src": "4182:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "4169:15:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 223,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4161:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_payable_$",
																				"typeString": "type(address payable)"
																			},
																			"typeName": {
																				"id": 222,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "4161:8:0",
																				"stateMutability": "payable",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 227,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4161:24:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	],
																	"id": 221,
																	"name": "MultiSigWallet",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1291,
																	"src": "4146:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_MultiSigWallet_$1291_$",
																		"typeString": "type(contract MultiSigWallet)"
																	}
																},
																"id": 228,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4146:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																	"typeString": "contract MultiSigWallet"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4119:67:0"
														},
														{
															"condition": {
																"arguments": [
																	{
																		"id": 232,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 148,
																		"src": "4222:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 230,
																		"name": "candidate",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 220,
																		"src": "4204:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																			"typeString": "contract MultiSigWallet"
																		}
																	},
																	"id": 231,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4214:7:0",
																	"memberName": "isOwner",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 316,
																	"src": "4204:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_bool_$",
																		"typeString": "function (address) view external returns (bool)"
																	}
																},
																"id": 233,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4204:24:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 246,
															"nodeType": "IfStatement",
															"src": "4200:120:0",
															"trueBody": {
																"id": 245,
																"nodeType": "Block",
																"src": "4230:90:0",
																"statements": [
																	{
																		"expression": {
																			"id": 240,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"id": 234,
																					"name": "myMultisigs",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 152,
																					"src": "4248:11:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																						"typeString": "address[] memory"
																					}
																				},
																				"id": 236,
																				"indexExpression": {
																					"id": 235,
																					"name": "idx",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 205,
																					"src": "4260:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "4248:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"baseExpression": {
																					"id": 237,
																					"name": "allMultiSigs",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 19,
																					"src": "4267:12:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_address_$dyn_storage",
																						"typeString": "address[] storage ref"
																					}
																				},
																				"id": 239,
																				"indexExpression": {
																					"id": 238,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 209,
																					"src": "4280:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "4267:15:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"src": "4248:34:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 241,
																		"nodeType": "ExpressionStatement",
																		"src": "4248:34:0"
																	},
																	{
																		"expression": {
																			"id": 243,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "++",
																			"prefix": false,
																			"src": "4300:5:0",
																			"subExpression": {
																				"id": 242,
																				"name": "idx",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 205,
																				"src": "4300:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 244,
																		"nodeType": "ExpressionStatement",
																		"src": "4300:5:0"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 212,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 209,
														"src": "4089:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 213,
														"name": "total",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 155,
														"src": "4093:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4089:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 248,
												"initializationExpression": {
													"assignments": [
														209
													],
													"declarations": [
														{
															"constant": false,
															"id": 209,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4082:1:0",
															"nodeType": "VariableDeclaration",
															"scope": 248,
															"src": "4074:9:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 208,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4074:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 211,
													"initialValue": {
														"hexValue": "30",
														"id": 210,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4086:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "4074:13:0"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 216,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "4100:3:0",
														"subExpression": {
															"id": 215,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 209,
															"src": "4100:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 217,
													"nodeType": "ExpressionStatement",
													"src": "4100:3:0"
												},
												"nodeType": "ForStatement",
												"src": "4069:261:0"
											},
											{
												"expression": {
													"id": 249,
													"name": "myMultisigs",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 152,
													"src": "4346:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"functionReturnParameters": 153,
												"id": 250,
												"nodeType": "Return",
												"src": "4339:18:0"
											}
										]
									},
									"documentation": {
										"id": 146,
										"nodeType": "StructuredDocumentation",
										"src": "3150:223:0",
										"text": "@notice Returns only those multisigs where `owner` is in the owners[] array.\n @param owner The address to filter for.\n @return myMultisigs An array of multisig addresses for which `isOwner(owner) == true`."
									},
									"functionSelector": "382af14e",
									"id": 252,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMyMultiSigs",
									"nameLocation": "3387:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3410:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 252,
												"src": "3402:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 147,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3402:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3401:15:0"
									},
									"returnParameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "myMultisigs",
												"nameLocation": "3481:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 252,
												"src": "3464:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 150,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "3464:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 151,
													"nodeType": "ArrayTypeName",
													"src": "3464:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3463:30:0"
									},
									"scope": 253,
									"src": "3378:986:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 254,
							"src": "303:4063:0",
							"usedErrors": [],
							"usedEvents": [
								15,
								26
							]
						}
					],
					"src": "32:4334:0"
				}
			},
			"ReviveMultisig.sol": {
				"id": 1,
				"ast": {
					"absolutePath": "ReviveMultisig.sol",
					"exportedSymbols": {
						"MultiSigWallet": [
							1291
						]
					},
					"id": 1292,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 255,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".28"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MultiSigWallet",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 256,
								"nodeType": "StructuredDocumentation",
								"src": "58:160:1",
								"text": "@title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\n @author Stefan George - <stefan.george@consensys.net>"
							},
							"fullyImplemented": true,
							"id": 1291,
							"linearizedBaseContracts": [
								1291
							],
							"name": "MultiSigWallet",
							"nameLocation": "227:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef",
									"id": 262,
									"name": "Confirmation",
									"nameLocation": "285:12:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "314:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 262,
												"src": "298:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "298:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"indexed": true,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "335:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 262,
												"src": "322:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 259,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "322:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "297:52:1"
									},
									"src": "279:71:1"
								},
								{
									"anonymous": false,
									"eventSelector": "f6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9",
									"id": 268,
									"name": "Revocation",
									"nameLocation": "361:10:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 264,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "388:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "372:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "372:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 266,
												"indexed": true,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "409:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "396:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 265,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "396:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "371:52:1"
									},
									"src": "355:69:1"
								},
								{
									"anonymous": false,
									"eventSelector": "c0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51",
									"id": 272,
									"name": "Submission",
									"nameLocation": "435:10:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"indexed": true,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "459:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "446:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "446:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "445:28:1"
									},
									"src": "429:45:1"
								},
								{
									"anonymous": false,
									"eventSelector": "33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75",
									"id": 276,
									"name": "Execution",
									"nameLocation": "485:9:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"indexed": true,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "508:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "495:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 273,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "495:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "494:28:1"
									},
									"src": "479:44:1"
								},
								{
									"anonymous": false,
									"eventSelector": "526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236",
									"id": 280,
									"name": "ExecutionFailure",
									"nameLocation": "534:16:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 278,
												"indexed": true,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "564:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 280,
												"src": "551:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 277,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "551:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "550:28:1"
									},
									"src": "528:51:1"
								},
								{
									"anonymous": false,
									"eventSelector": "e1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c",
									"id": 286,
									"name": "Deposit",
									"nameLocation": "590:7:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "614:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "598:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "598:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "627:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "622:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 283,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "622:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "597:36:1"
									},
									"src": "584:50:1"
								},
								{
									"anonymous": false,
									"eventSelector": "f39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d",
									"id": 290,
									"name": "OwnerAddition",
									"nameLocation": "645:13:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "675:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 290,
												"src": "659:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 287,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "659:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "658:23:1"
									},
									"src": "639:43:1"
								},
								{
									"anonymous": false,
									"eventSelector": "8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90",
									"id": 294,
									"name": "OwnerRemoval",
									"nameLocation": "693:12:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 292,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "722:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "706:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "706:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "705:23:1"
									},
									"src": "687:42:1"
								},
								{
									"anonymous": false,
									"eventSelector": "a3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a",
									"id": 298,
									"name": "RequirementChange",
									"nameLocation": "740:17:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 296,
												"indexed": false,
												"mutability": "mutable",
												"name": "required",
												"nameLocation": "763:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "758:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 295,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "758:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "757:15:1"
									},
									"src": "734:39:1"
								},
								{
									"constant": true,
									"functionSelector": "d74f8edd",
									"id": 301,
									"mutability": "constant",
									"name": "MAX_OWNER_COUNT",
									"nameLocation": "833:15:1",
									"nodeType": "VariableDeclaration",
									"scope": 1291,
									"src": "812:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 299,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "812:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3530",
										"id": 300,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "851:2:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_50_by_1",
											"typeString": "int_const 50"
										},
										"value": "50"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "9ace38c2",
									"id": 306,
									"mutability": "mutable",
									"name": "transactions",
									"nameLocation": "928:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 1291,
									"src": "891:49:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Transaction_$332_storage_$",
										"typeString": "mapping(uint256 => struct MultiSigWallet.Transaction)"
									},
									"typeName": {
										"id": 305,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 302,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "900:4:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "891:29:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Transaction_$332_storage_$",
											"typeString": "mapping(uint256 => struct MultiSigWallet.Transaction)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 304,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 303,
												"name": "Transaction",
												"nameLocations": [
													"908:11:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 332,
												"src": "908:11:1"
											},
											"referencedDeclaration": 332,
											"src": "908:11:1",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Transaction_$332_storage_ptr",
												"typeString": "struct MultiSigWallet.Transaction"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "3411c81c",
									"id": 312,
									"mutability": "mutable",
									"name": "confirmations",
									"nameLocation": "997:13:1",
									"nodeType": "VariableDeclaration",
									"scope": 1291,
									"src": "946:64:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
										"typeString": "mapping(uint256 => mapping(address => bool))"
									},
									"typeName": {
										"id": 311,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 307,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "955:4:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "946:43:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
											"typeString": "mapping(uint256 => mapping(address => bool))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 310,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 308,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "972:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "963:25:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 309,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "983:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2f54bf6e",
									"id": 316,
									"mutability": "mutable",
									"name": "isOwner",
									"nameLocation": "1049:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 1291,
									"src": "1016:40:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 315,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 313,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1025:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1016:25:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 314,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "1036:4:1",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "025e7c27",
									"id": 319,
									"mutability": "mutable",
									"name": "owners",
									"nameLocation": "1079:6:1",
									"nodeType": "VariableDeclaration",
									"scope": 1291,
									"src": "1062:23:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_address_$dyn_storage",
										"typeString": "address[]"
									},
									"typeName": {
										"baseType": {
											"id": 317,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1062:7:1",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"id": 318,
										"nodeType": "ArrayTypeName",
										"src": "1062:9:1",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
											"typeString": "address[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "dc8452cd",
									"id": 321,
									"mutability": "mutable",
									"name": "required",
									"nameLocation": "1103:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 1291,
									"src": "1091:20:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 320,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "1091:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b77bf600",
									"id": 323,
									"mutability": "mutable",
									"name": "transactionCount",
									"nameLocation": "1129:16:1",
									"nodeType": "VariableDeclaration",
									"scope": 1291,
									"src": "1117:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 322,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "1117:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "MultiSigWallet.Transaction",
									"id": 332,
									"members": [
										{
											"constant": false,
											"id": 325,
											"mutability": "mutable",
											"name": "destination",
											"nameLocation": "1189:11:1",
											"nodeType": "VariableDeclaration",
											"scope": 332,
											"src": "1181:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 324,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1181:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 327,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1215:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 332,
											"src": "1210:10:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 326,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "1210:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 329,
											"mutability": "mutable",
											"name": "data",
											"nameLocation": "1236:4:1",
											"nodeType": "VariableDeclaration",
											"scope": 332,
											"src": "1230:10:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 328,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1230:5:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 331,
											"mutability": "mutable",
											"name": "executed",
											"nameLocation": "1255:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 332,
											"src": "1250:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 330,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1250:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Transaction",
									"nameLocation": "1159:11:1",
									"nodeType": "StructDefinition",
									"scope": 1291,
									"src": "1152:118:1",
									"visibility": "public"
								},
								{
									"body": {
										"id": 345,
										"nodeType": "Block",
										"src": "1331:64:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 335,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1349:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 336,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1353:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1349:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 339,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "1371:4:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																			"typeString": "contract MultiSigWallet"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_MultiSigWallet_$1291",
																			"typeString": "contract MultiSigWallet"
																		}
																	],
																	"id": 338,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1363:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 337,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1363:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 340,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1363:13:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1349:27:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 334,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1341:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1341:36:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 343,
												"nodeType": "ExpressionStatement",
												"src": "1341:36:1"
											},
											{
												"id": 344,
												"nodeType": "PlaceholderStatement",
												"src": "1387:1:1"
											}
										]
									},
									"id": 346,
									"name": "onlyWallet",
									"nameLocation": "1318:10:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1328:2:1"
									},
									"src": "1309:86:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 358,
										"nodeType": "Block",
										"src": "1443:52:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 354,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "1461:15:1",
															"subExpression": {
																"baseExpression": {
																	"id": 351,
																	"name": "isOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 316,
																	"src": "1462:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 353,
																"indexExpression": {
																	"id": 352,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 348,
																	"src": "1470:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1462:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 350,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1453:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 355,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1453:24:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 356,
												"nodeType": "ExpressionStatement",
												"src": "1453:24:1"
											},
											{
												"id": 357,
												"nodeType": "PlaceholderStatement",
												"src": "1487:1:1"
											}
										]
									},
									"id": 359,
									"name": "ownerDoesNotExist",
									"nameLocation": "1410:17:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 348,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1436:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "1428:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 347,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1428:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1427:15:1"
									},
									"src": "1401:94:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 370,
										"nodeType": "Block",
										"src": "1537:51:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"id": 364,
																"name": "isOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 316,
																"src": "1555:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																	"typeString": "mapping(address => bool)"
																}
															},
															"id": 366,
															"indexExpression": {
																"id": 365,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 361,
																"src": "1563:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1555:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 363,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1547:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1547:23:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 368,
												"nodeType": "ExpressionStatement",
												"src": "1547:23:1"
											},
											{
												"id": 369,
												"nodeType": "PlaceholderStatement",
												"src": "1580:1:1"
											}
										]
									},
									"id": 371,
									"name": "ownerExists",
									"nameLocation": "1510:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1530:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "1522:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 360,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1522:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1521:15:1"
									},
									"src": "1501:87:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 388,
										"nodeType": "Block",
										"src": "1641:90:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 384,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 376,
																		"name": "transactions",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 306,
																		"src": "1659:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Transaction_$332_storage_$",
																			"typeString": "mapping(uint256 => struct MultiSigWallet.Transaction storage ref)"
																		}
																	},
																	"id": 378,
																	"indexExpression": {
																		"id": 377,
																		"name": "transactionId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 373,
																		"src": "1672:13:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1659:27:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Transaction_$332_storage",
																		"typeString": "struct MultiSigWallet.Transaction storage ref"
																	}
																},
																"id": 379,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1687:11:1",
																"memberName": "destination",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 325,
																"src": "1659:39:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 382,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1710:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 381,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1702:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 380,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "1702:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 383,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1702:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1659:53:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 375,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1651:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 385,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1651:62:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 386,
												"nodeType": "ExpressionStatement",
												"src": "1651:62:1"
											},
											{
												"id": 387,
												"nodeType": "PlaceholderStatement",
												"src": "1723:1:1"
											}
										]
									},
									"id": 389,
									"name": "transactionExists",
									"nameLocation": "1603:17:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 373,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "1626:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "1621:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 372,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1621:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:20:1"
									},
									"src": "1594:137:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 404,
										"nodeType": "Block",
										"src": "1791:72:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"baseExpression": {
																	"id": 396,
																	"name": "confirmations",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 312,
																	"src": "1809:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
																		"typeString": "mapping(uint256 => mapping(address => bool))"
																	}
																},
																"id": 398,
																"indexExpression": {
																	"id": 397,
																	"name": "transactionId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 391,
																	"src": "1823:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1809:28:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																	"typeString": "mapping(address => bool)"
																}
															},
															"id": 400,
															"indexExpression": {
																"id": 399,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 393,
																"src": "1838:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1809:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 395,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1801:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1801:44:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 402,
												"nodeType": "ExpressionStatement",
												"src": "1801:44:1"
											},
											{
												"id": 403,
												"nodeType": "PlaceholderStatement",
												"src": "1855:1:1"
											}
										]
									},
									"id": 405,
									"name": "confirmed",
									"nameLocation": "1746:9:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 391,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "1761:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "1756:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 390,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1756:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1784:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "1776:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 392,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1776:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1755:35:1"
									},
									"src": "1737:126:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 421,
										"nodeType": "Block",
										"src": "1926:73:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "1944:36:1",
															"subExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 412,
																		"name": "confirmations",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 312,
																		"src": "1945:13:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
																			"typeString": "mapping(uint256 => mapping(address => bool))"
																		}
																	},
																	"id": 414,
																	"indexExpression": {
																		"id": 413,
																		"name": "transactionId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 407,
																		"src": "1959:13:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1945:28:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 416,
																"indexExpression": {
																	"id": 415,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 409,
																	"src": "1974:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1945:35:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 411,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1936:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1936:45:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 419,
												"nodeType": "ExpressionStatement",
												"src": "1936:45:1"
											},
											{
												"id": 420,
												"nodeType": "PlaceholderStatement",
												"src": "1991:1:1"
											}
										]
									},
									"id": 422,
									"name": "notConfirmed",
									"nameLocation": "1878:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "1896:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "1891:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 406,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1891:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1919:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "1911:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 408,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1911:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1890:35:1"
									},
									"src": "1869:130:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 435,
										"nodeType": "Block",
										"src": "2046:74:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 431,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "2064:37:1",
															"subExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 427,
																		"name": "transactions",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 306,
																		"src": "2065:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Transaction_$332_storage_$",
																			"typeString": "mapping(uint256 => struct MultiSigWallet.Transaction storage ref)"
																		}
																	},
																	"id": 429,
																	"indexExpression": {
																		"id": 428,
																		"name": "transactionId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 424,
																		"src": "2078:13:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2065:27:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Transaction_$332_storage",
																		"typeString": "struct MultiSigWallet.Transaction storage ref"
																	}
																},
																"id": 430,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2093:8:1",
																"memberName": "executed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 331,
																"src": "2065:36:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 426,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2056:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 432,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2056:46:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 433,
												"nodeType": "ExpressionStatement",
												"src": "2056:46:1"
											},
											{
												"id": 434,
												"nodeType": "PlaceholderStatement",
												"src": "2112:1:1"
											}
										]
									},
									"id": 436,
									"name": "notExecuted",
									"nameLocation": "2014:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 424,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "2031:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "2026:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 423,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2026:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2025:20:1"
									},
									"src": "2005:115:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 450,
										"nodeType": "Block",
										"src": "2161:59:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 446,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 441,
																"name": "_address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 438,
																"src": "2179:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 444,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2199:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 443,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2191:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 442,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2191:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 445,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2191:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2179:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 440,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2171:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 447,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2171:31:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 448,
												"nodeType": "ExpressionStatement",
												"src": "2171:31:1"
											},
											{
												"id": 449,
												"nodeType": "PlaceholderStatement",
												"src": "2212:1:1"
											}
										]
									},
									"id": 451,
									"name": "notNull",
									"nameLocation": "2135:7:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 438,
												"mutability": "mutable",
												"name": "_address",
												"nameLocation": "2151:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 451,
												"src": "2143:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 437,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2143:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2142:18:1"
									},
									"src": "2126:94:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 476,
										"nodeType": "Block",
										"src": "2285:166:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 472,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 468,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 464,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 460,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 458,
																			"name": "ownerCount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 453,
																			"src": "2303:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<=",
																		"rightExpression": {
																			"id": 459,
																			"name": "MAX_OWNER_COUNT",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 301,
																			"src": "2317:15:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2303:29:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "&&",
																	"rightExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 463,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 461,
																			"name": "_required",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 455,
																			"src": "2348:9:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<=",
																		"rightExpression": {
																			"id": 462,
																			"name": "ownerCount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 453,
																			"src": "2361:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "2348:23:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "2303:68:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 467,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 465,
																		"name": "_required",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 455,
																		"src": "2387:9:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "!=",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 466,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2400:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "2387:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "2303:98:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 471,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 469,
																	"name": "ownerCount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 453,
																	"src": "2417:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 470,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2431:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "2417:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2303:129:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 457,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2295:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2295:138:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 474,
												"nodeType": "ExpressionStatement",
												"src": "2295:138:1"
											},
											{
												"id": 475,
												"nodeType": "PlaceholderStatement",
												"src": "2443:1:1"
											}
										]
									},
									"id": 477,
									"name": "validRequirement",
									"nameLocation": "2235:16:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "ownerCount",
												"nameLocation": "2257:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 477,
												"src": "2252:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 452,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2252:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "_required",
												"nameLocation": "2274:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 477,
												"src": "2269:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 454,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2269:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2251:33:1"
									},
									"src": "2226:225:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 493,
										"nodeType": "Block",
										"src": "2540:83:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 484,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 481,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "2554:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 482,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2558:5:1",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"src": "2554:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 483,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2566:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2554:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 492,
												"nodeType": "IfStatement",
												"src": "2550:66:1",
												"trueBody": {
													"eventCall": {
														"arguments": [
															{
																"expression": {
																	"id": 486,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2594:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 487,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2598:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2594:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"expression": {
																	"id": 488,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2606:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 489,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2610:5:1",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "2606:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 485,
															"name": "Deposit",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 286,
															"src": "2586:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
																"typeString": "function (address,uint256)"
															}
														},
														"id": 490,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2586:30:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 491,
													"nodeType": "EmitStatement",
													"src": "2581:35:1"
												}
											}
										]
									},
									"documentation": {
										"id": 478,
										"nodeType": "StructuredDocumentation",
										"src": "2457:51:1",
										"text": "@dev Fallback function allows to deposit ether."
									},
									"id": 494,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2520:2:1"
									},
									"returnParameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2540:0:1"
									},
									"scope": 1291,
									"src": "2513:110:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 555,
										"nodeType": "Block",
										"src": "2976:232:1",
										"statements": [
											{
												"body": {
													"id": 545,
													"nodeType": "Block",
													"src": "3024:122:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 534,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 525,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "3046:20:1",
																			"subExpression": {
																				"baseExpression": {
																					"id": 520,
																					"name": "isOwner",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 316,
																					"src": "3047:7:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																						"typeString": "mapping(address => bool)"
																					}
																				},
																				"id": 524,
																				"indexExpression": {
																					"baseExpression": {
																						"id": 521,
																						"name": "_owners",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 498,
																						"src": "3055:7:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																							"typeString": "address[] memory"
																						}
																					},
																					"id": 523,
																					"indexExpression": {
																						"id": 522,
																						"name": "i",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 509,
																						"src": "3063:1:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "3055:10:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "3047:19:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			"id": 533,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"baseExpression": {
																					"id": 526,
																					"name": "_owners",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 498,
																					"src": "3070:7:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																						"typeString": "address[] memory"
																					}
																				},
																				"id": 528,
																				"indexExpression": {
																					"id": 527,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 509,
																					"src": "3078:1:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "3070:10:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "!=",
																			"rightExpression": {
																				"arguments": [
																					{
																						"hexValue": "30",
																						"id": 531,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3092:1:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						}
																					],
																					"id": 530,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "3084:7:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 529,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "3084:7:1",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 532,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3084:10:1",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"src": "3070:24:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3046:48:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 519,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3038:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 535,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3038:57:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 536,
															"nodeType": "ExpressionStatement",
															"src": "3038:57:1"
														},
														{
															"expression": {
																"id": 543,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 537,
																		"name": "isOwner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 316,
																		"src": "3109:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 541,
																	"indexExpression": {
																		"baseExpression": {
																			"id": 538,
																			"name": "_owners",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 498,
																			"src": "3117:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																				"typeString": "address[] memory"
																			}
																		},
																		"id": 540,
																		"indexExpression": {
																			"id": 539,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 509,
																			"src": "3125:1:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3117:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "3109:19:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 542,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3131:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3109:26:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 544,
															"nodeType": "ExpressionStatement",
															"src": "3109:26:1"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 512,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 509,
														"src": "3001:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 513,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 498,
															"src": "3003:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														"id": 514,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3011:6:1",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3003:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3001:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 546,
												"initializationExpression": {
													"assignments": [
														509
													],
													"declarations": [
														{
															"constant": false,
															"id": 509,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2996:1:1",
															"nodeType": "VariableDeclaration",
															"scope": 546,
															"src": "2991:6:1",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 508,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "2991:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 511,
													"initialValue": {
														"hexValue": "30",
														"id": 510,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2998:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2991:8:1"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 517,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "3019:3:1",
														"subExpression": {
															"id": 516,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 509,
															"src": "3019:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 518,
													"nodeType": "ExpressionStatement",
													"src": "3019:3:1"
												},
												"nodeType": "ForStatement",
												"src": "2986:160:1"
											},
											{
												"expression": {
													"id": 549,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 547,
														"name": "owners",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 319,
														"src": "3155:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 548,
														"name": "_owners",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 498,
														"src": "3164:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"src": "3155:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage",
														"typeString": "address[] storage ref"
													}
												},
												"id": 550,
												"nodeType": "ExpressionStatement",
												"src": "3155:16:1"
											},
											{
												"expression": {
													"id": 553,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 551,
														"name": "required",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 321,
														"src": "3181:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 552,
														"name": "_required",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 500,
														"src": "3192:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3181:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 554,
												"nodeType": "ExpressionStatement",
												"src": "3181:20:1"
											}
										]
									},
									"documentation": {
										"id": 495,
										"nodeType": "StructuredDocumentation",
										"src": "2668:193:1",
										"text": "@dev Contract constructor sets initial owners and required number of confirmations.\n @param _owners List of initial owners.\n @param _required Number of required confirmations."
									},
									"id": 556,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 503,
														"name": "_owners",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 498,
														"src": "2945:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2953:6:1",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "2945:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												{
													"id": 505,
													"name": "_required",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 500,
													"src": "2961:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 506,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 502,
												"name": "validRequirement",
												"nameLocations": [
													"2928:16:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 477,
												"src": "2928:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2928:43:1"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "_owners",
												"nameLocation": "2895:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "2878:24:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 496,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "2878:7:1",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 497,
													"nodeType": "ArrayTypeName",
													"src": "2878:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "_required",
												"nameLocation": "2909:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 556,
												"src": "2904:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 499,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2904:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2877:42:1"
									},
									"returnParameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2976:0:1"
									},
									"scope": 1291,
									"src": "2866:342:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 593,
										"nodeType": "Block",
										"src": "3516:101:1",
										"statements": [
											{
												"expression": {
													"id": 581,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 577,
															"name": "isOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 316,
															"src": "3526:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 579,
														"indexExpression": {
															"id": 578,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 559,
															"src": "3534:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3526:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 580,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3543:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3526:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 582,
												"nodeType": "ExpressionStatement",
												"src": "3526:21:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 586,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 559,
															"src": "3569:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 583,
															"name": "owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 319,
															"src": "3557:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 585,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3564:4:1",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "3557:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$",
															"typeString": "function (address[] storage pointer,address)"
														}
													},
													"id": 587,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3557:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 588,
												"nodeType": "ExpressionStatement",
												"src": "3557:18:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 590,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 559,
															"src": "3604:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 589,
														"name": "OwnerAddition",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 290,
														"src": "3590:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 591,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3590:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 592,
												"nodeType": "EmitStatement",
												"src": "3585:25:1"
											}
										]
									},
									"documentation": {
										"id": 557,
										"nodeType": "StructuredDocumentation",
										"src": "3214:116:1",
										"text": "@dev Allows to add a new owner. Transaction has to be sent by wallet.\n @param owner Address of new owner."
									},
									"functionSelector": "7065cb48",
									"id": 594,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 562,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 561,
												"name": "onlyWallet",
												"nameLocations": [
													"3391:10:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 346,
												"src": "3391:10:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "3391:10:1"
										},
										{
											"arguments": [
												{
													"id": 564,
													"name": "owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 559,
													"src": "3428:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 565,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 563,
												"name": "ownerDoesNotExist",
												"nameLocations": [
													"3410:17:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 359,
												"src": "3410:17:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "3410:24:1"
										},
										{
											"arguments": [
												{
													"id": 567,
													"name": "owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 559,
													"src": "3451:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 568,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 566,
												"name": "notNull",
												"nameLocations": [
													"3443:7:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 451,
												"src": "3443:7:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "3443:14:1"
										},
										{
											"arguments": [
												{
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 573,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 570,
															"name": "owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 319,
															"src": "3483:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 571,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3490:6:1",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3483:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"hexValue": "31",
														"id": 572,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3499:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3483:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												{
													"id": 574,
													"name": "required",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 321,
													"src": "3502:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 575,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 569,
												"name": "validRequirement",
												"nameLocations": [
													"3466:16:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 477,
												"src": "3466:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "3466:45:1"
										}
									],
									"name": "addOwner",
									"nameLocation": "3344:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3361:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "3353:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3353:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3352:15:1"
									},
									"returnParameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3516:0:1"
									},
									"scope": 1291,
									"src": "3335:282:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 663,
										"nodeType": "Block",
										"src": "3841:358:1",
										"statements": [
											{
												"expression": {
													"id": 609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 605,
															"name": "isOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 316,
															"src": "3851:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 607,
														"indexExpression": {
															"id": 606,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 597,
															"src": "3859:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3851:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 608,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3868:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "3851:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 610,
												"nodeType": "ExpressionStatement",
												"src": "3851:22:1"
											},
											{
												"body": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 628,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"baseExpression": {
																"id": 624,
																"name": "owners",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 319,
																"src": "3940:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_storage",
																	"typeString": "address[] storage ref"
																}
															},
															"id": 626,
															"indexExpression": {
																"id": 625,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 612,
																"src": "3947:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3940:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 627,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 597,
															"src": "3953:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "3940:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 642,
													"nodeType": "IfStatement",
													"src": "3936:117:1",
													"trueBody": {
														"id": 641,
														"nodeType": "Block",
														"src": "3960:93:1",
														"statements": [
															{
																"expression": {
																	"id": 638,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"baseExpression": {
																			"id": 629,
																			"name": "owners",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 319,
																			"src": "3978:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_storage",
																				"typeString": "address[] storage ref"
																			}
																		},
																		"id": 631,
																		"indexExpression": {
																			"id": 630,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 612,
																			"src": "3985:1:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": true,
																		"nodeType": "IndexAccess",
																		"src": "3978:9:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"baseExpression": {
																			"id": 632,
																			"name": "owners",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 319,
																			"src": "3990:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_storage",
																				"typeString": "address[] storage ref"
																			}
																		},
																		"id": 637,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 636,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 633,
																					"name": "owners",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 319,
																					"src": "3997:6:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_address_$dyn_storage",
																						"typeString": "address[] storage ref"
																					}
																				},
																				"id": 634,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4004:6:1",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "3997:13:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 635,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4013:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3997:17:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3990:25:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "3978:37:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 639,
																"nodeType": "ExpressionStatement",
																"src": "3978:37:1"
															},
															{
																"id": 640,
																"nodeType": "Break",
																"src": "4033:5:1"
															}
														]
													}
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 620,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 615,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 612,
														"src": "3898:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 619,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 616,
																"name": "owners",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 319,
																"src": "3900:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_storage",
																	"typeString": "address[] storage ref"
																}
															},
															"id": 617,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3907:6:1",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3900:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"hexValue": "31",
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3916:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3900:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3898:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 643,
												"initializationExpression": {
													"assignments": [
														612
													],
													"declarations": [
														{
															"constant": false,
															"id": 612,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "3893:1:1",
															"nodeType": "VariableDeclaration",
															"scope": 643,
															"src": "3888:6:1",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 611,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "3888:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 614,
													"initialValue": {
														"hexValue": "30",
														"id": 613,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3895:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "3888:8:1"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 622,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "3919:3:1",
														"subExpression": {
															"id": 621,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 612,
															"src": "3919:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 623,
													"nodeType": "ExpressionStatement",
													"src": "3919:3:1"
												},
												"nodeType": "ForStatement",
												"src": "3883:170:1"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 644,
															"name": "owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 319,
															"src": "4062:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4069:3:1",
														"memberName": "pop",
														"nodeType": "MemberAccess",
														"src": "4062:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypop_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$",
															"typeString": "function (address[] storage pointer)"
														}
													},
													"id": 647,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4062:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 648,
												"nodeType": "ExpressionStatement",
												"src": "4062:12:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 649,
														"name": "required",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 321,
														"src": "4088:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 650,
															"name": "owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 319,
															"src": "4099:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 651,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4106:6:1",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4099:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4088:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 658,
												"nodeType": "IfStatement",
												"src": "4084:74:1",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"expression": {
																	"id": 654,
																	"name": "owners",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 319,
																	"src": "4144:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_storage",
																		"typeString": "address[] storage ref"
																	}
																},
																"id": 655,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4151:6:1",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4144:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 653,
															"name": "changeRequirement",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 749,
															"src": "4126:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
																"typeString": "function (uint256)"
															}
														},
														"id": 656,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4126:32:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 657,
													"nodeType": "ExpressionStatement",
													"src": "4126:32:1"
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 660,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 597,
															"src": "4186:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 659,
														"name": "OwnerRemoval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 294,
														"src": "4173:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 661,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4173:19:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 662,
												"nodeType": "EmitStatement",
												"src": "4168:24:1"
											}
										]
									},
									"documentation": {
										"id": 595,
										"nodeType": "StructuredDocumentation",
										"src": "3623:112:1",
										"text": "@dev Allows to remove an owner. Transaction has to be sent by wallet.\n @param owner Address of owner."
									},
									"functionSelector": "173825d9",
									"id": 664,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 600,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 599,
												"name": "onlyWallet",
												"nameLocations": [
													"3799:10:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 346,
												"src": "3799:10:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "3799:10:1"
										},
										{
											"arguments": [
												{
													"id": 602,
													"name": "owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 597,
													"src": "3830:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 603,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 601,
												"name": "ownerExists",
												"nameLocations": [
													"3818:11:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 371,
												"src": "3818:11:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "3818:18:1"
										}
									],
									"name": "removeOwner",
									"nameLocation": "3749:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 598,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 597,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3769:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "3761:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 596,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3761:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3760:15:1"
									},
									"returnParameters": {
										"id": 604,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3841:0:1"
									},
									"scope": 1291,
									"src": "3740:459:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 726,
										"nodeType": "Block",
										"src": "4557:303:1",
										"statements": [
											{
												"body": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 695,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"baseExpression": {
																"id": 691,
																"name": "owners",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 319,
																"src": "4620:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_storage",
																	"typeString": "address[] storage ref"
																}
															},
															"id": 693,
															"indexExpression": {
																"id": 692,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 681,
																"src": "4627:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4620:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 694,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "4633:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "4620:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 704,
													"nodeType": "IfStatement",
													"src": "4616:100:1",
													"trueBody": {
														"id": 703,
														"nodeType": "Block",
														"src": "4640:76:1",
														"statements": [
															{
																"expression": {
																	"id": 700,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"baseExpression": {
																			"id": 696,
																			"name": "owners",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 319,
																			"src": "4658:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_storage",
																				"typeString": "address[] storage ref"
																			}
																		},
																		"id": 698,
																		"indexExpression": {
																			"id": 697,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 681,
																			"src": "4665:1:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": true,
																		"nodeType": "IndexAccess",
																		"src": "4658:9:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"id": 699,
																		"name": "newOwner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 669,
																		"src": "4670:8:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "4658:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 701,
																"nodeType": "ExpressionStatement",
																"src": "4658:20:1"
															},
															{
																"id": 702,
																"nodeType": "Break",
																"src": "4696:5:1"
															}
														]
													}
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 684,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 681,
														"src": "4582:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 685,
															"name": "owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 319,
															"src": "4584:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 686,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4591:6:1",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4584:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4582:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 705,
												"initializationExpression": {
													"assignments": [
														681
													],
													"declarations": [
														{
															"constant": false,
															"id": 681,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4577:1:1",
															"nodeType": "VariableDeclaration",
															"scope": 705,
															"src": "4572:6:1",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 680,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "4572:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 683,
													"initialValue": {
														"hexValue": "30",
														"id": 682,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4579:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "4572:8:1"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 689,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "4599:3:1",
														"subExpression": {
															"id": 688,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 681,
															"src": "4599:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 690,
													"nodeType": "ExpressionStatement",
													"src": "4599:3:1"
												},
												"nodeType": "ForStatement",
												"src": "4567:149:1"
											},
											{
												"expression": {
													"id": 710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 706,
															"name": "isOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 316,
															"src": "4725:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 708,
														"indexExpression": {
															"id": 707,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "4733:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4725:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 709,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4742:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "4725:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 711,
												"nodeType": "ExpressionStatement",
												"src": "4725:22:1"
											},
											{
												"expression": {
													"id": 716,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 712,
															"name": "isOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 316,
															"src": "4757:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 714,
														"indexExpression": {
															"id": 713,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 669,
															"src": "4765:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4757:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 715,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4777:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "4757:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 717,
												"nodeType": "ExpressionStatement",
												"src": "4757:24:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 719,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "4809:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 718,
														"name": "OwnerRemoval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 294,
														"src": "4796:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 720,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4796:19:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 721,
												"nodeType": "EmitStatement",
												"src": "4791:24:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 723,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 669,
															"src": "4844:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 722,
														"name": "OwnerAddition",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 290,
														"src": "4830:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4830:23:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 725,
												"nodeType": "EmitStatement",
												"src": "4825:28:1"
											}
										]
									},
									"documentation": {
										"id": 665,
										"nodeType": "StructuredDocumentation",
										"src": "4205:191:1",
										"text": "@dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n @param owner Address of owner to be replaced.\n @param newOwner Address of new owner."
									},
									"functionSelector": "e20056e6",
									"id": 727,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 672,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 671,
												"name": "onlyWallet",
												"nameLocations": [
													"4479:10:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 346,
												"src": "4479:10:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "4479:10:1"
										},
										{
											"arguments": [
												{
													"id": 674,
													"name": "owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 667,
													"src": "4510:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 675,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 673,
												"name": "ownerExists",
												"nameLocations": [
													"4498:11:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 371,
												"src": "4498:11:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "4498:18:1"
										},
										{
											"arguments": [
												{
													"id": 677,
													"name": "newOwner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 669,
													"src": "4543:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 678,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 676,
												"name": "ownerDoesNotExist",
												"nameLocations": [
													"4525:17:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 359,
												"src": "4525:17:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "4525:27:1"
										}
									],
									"name": "replaceOwner",
									"nameLocation": "4410:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4431:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 727,
												"src": "4423:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4423:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "4446:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 727,
												"src": "4438:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 668,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4438:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4422:33:1"
									},
									"returnParameters": {
										"id": 679,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4557:0:1"
									},
									"scope": 1291,
									"src": "4401:459:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 748,
										"nodeType": "Block",
										"src": "5163:80:1",
										"statements": [
											{
												"expression": {
													"id": 742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 740,
														"name": "required",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 321,
														"src": "5173:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 741,
														"name": "_required",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 730,
														"src": "5184:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5173:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 743,
												"nodeType": "ExpressionStatement",
												"src": "5173:20:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 745,
															"name": "_required",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 730,
															"src": "5226:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 744,
														"name": "RequirementChange",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 298,
														"src": "5208:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5208:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 747,
												"nodeType": "EmitStatement",
												"src": "5203:33:1"
											}
										]
									},
									"documentation": {
										"id": 728,
										"nodeType": "StructuredDocumentation",
										"src": "4866:160:1",
										"text": "@dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n @param _required Number of required confirmations."
									},
									"functionSelector": "ba51a6df",
									"id": 749,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 733,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 732,
												"name": "onlyWallet",
												"nameLocations": [
													"5097:10:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 346,
												"src": "5097:10:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "5097:10:1"
										},
										{
											"arguments": [
												{
													"expression": {
														"id": 735,
														"name": "owners",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 319,
														"src": "5133:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_storage",
															"typeString": "address[] storage ref"
														}
													},
													"id": 736,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5140:6:1",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "5133:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												{
													"id": 737,
													"name": "_required",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 730,
													"src": "5148:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 738,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 734,
												"name": "validRequirement",
												"nameLocations": [
													"5116:16:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 477,
												"src": "5116:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "5116:42:1"
										}
									],
									"name": "changeRequirement",
									"nameLocation": "5040:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 731,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 730,
												"mutability": "mutable",
												"name": "_required",
												"nameLocation": "5063:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 749,
												"src": "5058:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 729,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "5058:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5057:16:1"
									},
									"returnParameters": {
										"id": 739,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5163:0:1"
									},
									"scope": 1291,
									"src": "5031:212:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 773,
										"nodeType": "Block",
										"src": "5651:116:1",
										"statements": [
											{
												"expression": {
													"id": 767,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 761,
														"name": "transactionId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 759,
														"src": "5661:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 763,
																"name": "destination",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 752,
																"src": "5692:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 764,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 754,
																"src": "5705:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 765,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 756,
																"src": "5712:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 762,
															"name": "addTransaction",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1015,
															"src": "5677:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_uint256_$",
																"typeString": "function (address,uint256,bytes memory) returns (uint256)"
															}
														},
														"id": 766,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5677:40:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5661:56:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 768,
												"nodeType": "ExpressionStatement",
												"src": "5661:56:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 770,
															"name": "transactionId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "5746:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 769,
														"name": "confirmTransaction",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 812,
														"src": "5727:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 771,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5727:33:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 772,
												"nodeType": "ExpressionStatement",
												"src": "5727:33:1"
											}
										]
									},
									"documentation": {
										"id": 750,
										"nodeType": "StructuredDocumentation",
										"src": "5249:262:1",
										"text": "@dev Allows an owner to submit and confirm a transaction.\n @param destination Transaction target address.\n @param value Transaction ether value.\n @param data Transaction data payload.\n @return transactionId Returns transaction ID."
									},
									"functionSelector": "c6427474",
									"id": 774,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "submitTransaction",
									"nameLocation": "5525:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "destination",
												"nameLocation": "5551:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "5543:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 751,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5543:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5569:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "5564:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 753,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "5564:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5589:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "5576:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 755,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5576:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5542:52:1"
									},
									"returnParameters": {
										"id": 760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "5632:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "5627:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 758,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "5627:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5626:20:1"
									},
									"scope": 1291,
									"src": "5516:251:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 811,
										"nodeType": "Block",
										"src": "6061:161:1",
										"statements": [
											{
												"expression": {
													"id": 799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 792,
																"name": "confirmations",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 312,
																"src": "6071:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(uint256 => mapping(address => bool))"
																}
															},
															"id": 796,
															"indexExpression": {
																"id": 793,
																"name": "transactionId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 777,
																"src": "6085:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6071:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 797,
														"indexExpression": {
															"expression": {
																"id": 794,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6100:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 795,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6104:6:1",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6100:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6071:40:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 798,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6114:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "6071:47:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 800,
												"nodeType": "ExpressionStatement",
												"src": "6071:47:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 802,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6146:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 803,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6150:6:1",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6146:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 804,
															"name": "transactionId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 777,
															"src": "6158:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 801,
														"name": "Confirmation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 262,
														"src": "6133:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6133:39:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 806,
												"nodeType": "EmitStatement",
												"src": "6128:44:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 808,
															"name": "transactionId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 777,
															"src": "6201:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 807,
														"name": "executeTransaction",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 910,
														"src": "6182:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 809,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6182:33:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 810,
												"nodeType": "ExpressionStatement",
												"src": "6182:33:1"
											}
										]
									},
									"documentation": {
										"id": 775,
										"nodeType": "StructuredDocumentation",
										"src": "5773:95:1",
										"text": "@dev Allows an owner to confirm a transaction.\n @param transactionId Transaction ID."
									},
									"functionSelector": "c01a8c84",
									"id": 812,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 780,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "5956:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 781,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5960:6:1",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "5956:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 782,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 779,
												"name": "ownerExists",
												"nameLocations": [
													"5944:11:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 371,
												"src": "5944:11:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "5944:23:1"
										},
										{
											"arguments": [
												{
													"id": 784,
													"name": "transactionId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 777,
													"src": "5994:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 785,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 783,
												"name": "transactionExists",
												"nameLocations": [
													"5976:17:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 389,
												"src": "5976:17:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "5976:32:1"
										},
										{
											"arguments": [
												{
													"id": 787,
													"name": "transactionId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 777,
													"src": "6030:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												{
													"expression": {
														"id": 788,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "6045:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 789,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "6049:6:1",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "6045:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 790,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 786,
												"name": "notConfirmed",
												"nameLocations": [
													"6017:12:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 422,
												"src": "6017:12:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "6017:39:1"
										}
									],
									"name": "confirmTransaction",
									"nameLocation": "5882:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 778,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "5906:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 812,
												"src": "5901:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 776,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "5901:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5900:20:1"
									},
									"returnParameters": {
										"id": 791,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6061:0:1"
									},
									"scope": 1291,
									"src": "5873:349:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 845,
										"nodeType": "Block",
										"src": "6525:117:1",
										"statements": [
											{
												"expression": {
													"id": 837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 830,
																"name": "confirmations",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 312,
																"src": "6535:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(uint256 => mapping(address => bool))"
																}
															},
															"id": 834,
															"indexExpression": {
																"id": 831,
																"name": "transactionId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 815,
																"src": "6549:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6535:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 835,
														"indexExpression": {
															"expression": {
																"id": 832,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6564:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 833,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6568:6:1",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6564:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6535:40:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 836,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6578:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "6535:48:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 838,
												"nodeType": "ExpressionStatement",
												"src": "6535:48:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 840,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6609:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 841,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6613:6:1",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6609:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 842,
															"name": "transactionId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "6621:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 839,
														"name": "Revocation",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 268,
														"src": "6598:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 843,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6598:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 844,
												"nodeType": "EmitStatement",
												"src": "6593:42:1"
											}
										]
									},
									"documentation": {
										"id": 813,
										"nodeType": "StructuredDocumentation",
										"src": "6228:113:1",
										"text": "@dev Allows an owner to revoke a confirmation for a transaction.\n @param transactionId Transaction ID."
									},
									"functionSelector": "20ea8d86",
									"id": 846,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 818,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "6429:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "6433:6:1",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "6429:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 820,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 817,
												"name": "ownerExists",
												"nameLocations": [
													"6417:11:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 371,
												"src": "6417:11:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "6417:23:1"
										},
										{
											"arguments": [
												{
													"id": 822,
													"name": "transactionId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 815,
													"src": "6459:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												{
													"expression": {
														"id": 823,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "6474:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 824,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "6478:6:1",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "6474:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 825,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 821,
												"name": "confirmed",
												"nameLocations": [
													"6449:9:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 405,
												"src": "6449:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "6449:36:1"
										},
										{
											"arguments": [
												{
													"id": 827,
													"name": "transactionId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 815,
													"src": "6506:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 828,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 826,
												"name": "notExecuted",
												"nameLocations": [
													"6494:11:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 436,
												"src": "6494:11:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "6494:26:1"
										}
									],
									"name": "revokeConfirmation",
									"nameLocation": "6355:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 816,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 815,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "6379:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "6374:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 814,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6374:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6373:20:1"
									},
									"returnParameters": {
										"id": 829,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6525:0:1"
									},
									"scope": 1291,
									"src": "6346:296:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 909,
										"nodeType": "Block",
										"src": "6935:417:1",
										"statements": [
											{
												"condition": {
													"arguments": [
														{
															"id": 865,
															"name": "transactionId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 849,
															"src": "6961:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 864,
														"name": "isConfirmed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 976,
														"src": "6949:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (uint256) view returns (bool)"
														}
													},
													"id": 866,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6949:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 908,
												"nodeType": "IfStatement",
												"src": "6945:401:1",
												"trueBody": {
													"id": 907,
													"nodeType": "Block",
													"src": "6977:369:1",
													"statements": [
														{
															"assignments": [
																869
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 869,
																	"mutability": "mutable",
																	"name": "txn",
																	"nameLocation": "7011:3:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 907,
																	"src": "6991:23:1",
																	"stateVariable": false,
																	"storageLocation": "storage",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Transaction_$332_storage_ptr",
																		"typeString": "struct MultiSigWallet.Transaction"
																	},
																	"typeName": {
																		"id": 868,
																		"nodeType": "UserDefinedTypeName",
																		"pathNode": {
																			"id": 867,
																			"name": "Transaction",
																			"nameLocations": [
																				"6991:11:1"
																			],
																			"nodeType": "IdentifierPath",
																			"referencedDeclaration": 332,
																			"src": "6991:11:1"
																		},
																		"referencedDeclaration": 332,
																		"src": "6991:11:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Transaction_$332_storage_ptr",
																			"typeString": "struct MultiSigWallet.Transaction"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 873,
															"initialValue": {
																"baseExpression": {
																	"id": 870,
																	"name": "transactions",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 306,
																	"src": "7017:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Transaction_$332_storage_$",
																		"typeString": "mapping(uint256 => struct MultiSigWallet.Transaction storage ref)"
																	}
																},
																"id": 872,
																"indexExpression": {
																	"id": 871,
																	"name": "transactionId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 849,
																	"src": "7030:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7017:27:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Transaction_$332_storage",
																	"typeString": "struct MultiSigWallet.Transaction storage ref"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6991:53:1"
														},
														{
															"expression": {
																"id": 878,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 874,
																		"name": "txn",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 869,
																		"src": "7058:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Transaction_$332_storage_ptr",
																			"typeString": "struct MultiSigWallet.Transaction storage pointer"
																		}
																	},
																	"id": 876,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "7062:8:1",
																	"memberName": "executed",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 331,
																	"src": "7058:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 877,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7073:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "7058:19:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 879,
															"nodeType": "ExpressionStatement",
															"src": "7058:19:1"
														},
														{
															"condition": {
																"arguments": [
																	{
																		"expression": {
																			"id": 881,
																			"name": "txn",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 869,
																			"src": "7109:3:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Transaction_$332_storage_ptr",
																				"typeString": "struct MultiSigWallet.Transaction storage pointer"
																			}
																		},
																		"id": 882,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7113:11:1",
																		"memberName": "destination",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 325,
																		"src": "7109:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 883,
																			"name": "txn",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 869,
																			"src": "7126:3:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Transaction_$332_storage_ptr",
																				"typeString": "struct MultiSigWallet.Transaction storage pointer"
																			}
																		},
																		"id": 884,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7130:5:1",
																		"memberName": "value",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 327,
																		"src": "7126:9:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"expression": {
																			"expression": {
																				"id": 885,
																				"name": "txn",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 869,
																				"src": "7137:3:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Transaction_$332_storage_ptr",
																					"typeString": "struct MultiSigWallet.Transaction storage pointer"
																				}
																			},
																			"id": 886,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "7141:4:1",
																			"memberName": "data",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 329,
																			"src": "7137:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_storage",
																				"typeString": "bytes storage ref"
																			}
																		},
																		"id": 887,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7146:6:1",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "7137:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"expression": {
																			"id": 888,
																			"name": "txn",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 869,
																			"src": "7154:3:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Transaction_$332_storage_ptr",
																				"typeString": "struct MultiSigWallet.Transaction storage pointer"
																			}
																		},
																		"id": 889,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7158:4:1",
																		"memberName": "data",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 329,
																		"src": "7154:8:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage",
																			"typeString": "bytes storage ref"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_bytes_storage",
																			"typeString": "bytes storage ref"
																		}
																	],
																	"id": 880,
																	"name": "external_call",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 930,
																	"src": "7095:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																		"typeString": "function (address,uint256,uint256,bytes memory) returns (bool)"
																	}
																},
																"id": 890,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7095:68:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 905,
																"nodeType": "Block",
																"src": "7229:107:1",
																"statements": [
																	{
																		"eventCall": {
																			"arguments": [
																				{
																					"id": 896,
																					"name": "transactionId",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 849,
																					"src": "7269:13:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 895,
																				"name": "ExecutionFailure",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 280,
																				"src": "7252:16:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
																					"typeString": "function (uint256)"
																				}
																			},
																			"id": 897,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7252:31:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 898,
																		"nodeType": "EmitStatement",
																		"src": "7247:36:1"
																	},
																	{
																		"expression": {
																			"id": 903,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"expression": {
																					"id": 899,
																					"name": "txn",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 869,
																					"src": "7301:3:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Transaction_$332_storage_ptr",
																						"typeString": "struct MultiSigWallet.Transaction storage pointer"
																					}
																				},
																				"id": 901,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"memberLocation": "7305:8:1",
																				"memberName": "executed",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 331,
																				"src": "7301:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"hexValue": "66616c7365",
																				"id": 902,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7316:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			},
																			"src": "7301:20:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 904,
																		"nodeType": "ExpressionStatement",
																		"src": "7301:20:1"
																	}
																]
															},
															"id": 906,
															"nodeType": "IfStatement",
															"src": "7091:245:1",
															"trueBody": {
																"eventCall": {
																	"arguments": [
																		{
																			"id": 892,
																			"name": "transactionId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 849,
																			"src": "7196:13:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 891,
																		"name": "Execution",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 276,
																		"src": "7186:9:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
																			"typeString": "function (uint256)"
																		}
																	},
																	"id": 893,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7186:24:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 894,
																"nodeType": "EmitStatement",
																"src": "7181:29:1"
															}
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 847,
										"nodeType": "StructuredDocumentation",
										"src": "6648:103:1",
										"text": "@dev Allows anyone to execute a confirmed transaction.\n @param transactionId Transaction ID."
									},
									"functionSelector": "ee22610b",
									"id": 910,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 852,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "6839:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "6843:6:1",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "6839:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 854,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 851,
												"name": "ownerExists",
												"nameLocations": [
													"6827:11:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 371,
												"src": "6827:11:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "6827:23:1"
										},
										{
											"arguments": [
												{
													"id": 856,
													"name": "transactionId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 849,
													"src": "6869:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												{
													"expression": {
														"id": 857,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "6884:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 858,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "6888:6:1",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "6884:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 859,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 855,
												"name": "confirmed",
												"nameLocations": [
													"6859:9:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 405,
												"src": "6859:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "6859:36:1"
										},
										{
											"arguments": [
												{
													"id": 861,
													"name": "transactionId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 849,
													"src": "6916:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 862,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 860,
												"name": "notExecuted",
												"nameLocations": [
													"6904:11:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 436,
												"src": "6904:11:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "6904:26:1"
										}
									],
									"name": "executeTransaction",
									"nameLocation": "6765:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "6789:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 910,
												"src": "6784:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 848,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6784:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6783:20:1"
									},
									"returnParameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6935:0:1"
									},
									"scope": 1291,
									"src": "6756:596:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 929,
										"nodeType": "Block",
										"src": "7644:996:1",
										"statements": [
											{
												"assignments": [
													924
												],
												"declarations": [
													{
														"constant": false,
														"id": 924,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7659:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 929,
														"src": "7654:11:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 923,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7654:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 925,
												"nodeType": "VariableDeclarationStatement",
												"src": "7654:11:1"
											},
											{
												"AST": {
													"nativeSrc": "7684:927:1",
													"nodeType": "YulBlock",
													"src": "7684:927:1",
													"statements": [
														{
															"nativeSrc": "7698:20:1",
															"nodeType": "YulVariableDeclaration",
															"src": "7698:20:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "7713:4:1",
																		"nodeType": "YulLiteral",
																		"src": "7713:4:1",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "7707:5:1",
																	"nodeType": "YulIdentifier",
																	"src": "7707:5:1"
																},
																"nativeSrc": "7707:11:1",
																"nodeType": "YulFunctionCall",
																"src": "7707:11:1"
															},
															"variables": [
																{
																	"name": "x",
																	"nativeSrc": "7702:1:1",
																	"nodeType": "YulTypedName",
																	"src": "7702:1:1",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "7827:22:1",
															"nodeType": "YulVariableDeclaration",
															"src": "7827:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "7840:4:1",
																		"nodeType": "YulIdentifier",
																		"src": "7840:4:1"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7846:2:1",
																		"nodeType": "YulLiteral",
																		"src": "7846:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7836:3:1",
																	"nodeType": "YulIdentifier",
																	"src": "7836:3:1"
																},
																"nativeSrc": "7836:13:1",
																"nodeType": "YulFunctionCall",
																"src": "7836:13:1"
															},
															"variables": [
																{
																	"name": "d",
																	"nativeSrc": "7831:1:1",
																	"nodeType": "YulTypedName",
																	"src": "7831:1:1",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "7927:674:1",
															"nodeType": "YulAssignment",
															"src": "7927:674:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"functionName": {
																					"name": "gas",
																					"nativeSrc": "7963:3:1",
																					"nodeType": "YulIdentifier",
																					"src": "7963:3:1"
																				},
																				"nativeSrc": "7963:5:1",
																				"nodeType": "YulFunctionCall",
																				"src": "7963:5:1"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7970:5:1",
																				"nodeType": "YulLiteral",
																				"src": "7970:5:1",
																				"type": "",
																				"value": "34710"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "7959:3:1",
																			"nodeType": "YulIdentifier",
																			"src": "7959:3:1"
																		},
																		"nativeSrc": "7959:17:1",
																		"nodeType": "YulFunctionCall",
																		"src": "7959:17:1"
																	},
																	{
																		"name": "destination",
																		"nativeSrc": "8315:11:1",
																		"nodeType": "YulIdentifier",
																		"src": "8315:11:1"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "8344:5:1",
																		"nodeType": "YulIdentifier",
																		"src": "8344:5:1"
																	},
																	{
																		"name": "d",
																		"nativeSrc": "8367:1:1",
																		"nodeType": "YulIdentifier",
																		"src": "8367:1:1"
																	},
																	{
																		"name": "dataLength",
																		"nativeSrc": "8386:10:1",
																		"nodeType": "YulIdentifier",
																		"src": "8386:10:1"
																	},
																	{
																		"name": "x",
																		"nativeSrc": "8494:1:1",
																		"nodeType": "YulIdentifier",
																		"src": "8494:1:1"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8513:1:1",
																		"nodeType": "YulLiteral",
																		"src": "8513:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nativeSrc": "7937:4:1",
																	"nodeType": "YulIdentifier",
																	"src": "7937:4:1"
																},
																"nativeSrc": "7937:664:1",
																"nodeType": "YulFunctionCall",
																"src": "7937:664:1"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "7927:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "7927:6:1"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 918,
														"isOffset": false,
														"isSlot": false,
														"src": "7840:4:1",
														"valueSize": 1
													},
													{
														"declaration": 916,
														"isOffset": false,
														"isSlot": false,
														"src": "8386:10:1",
														"valueSize": 1
													},
													{
														"declaration": 912,
														"isOffset": false,
														"isSlot": false,
														"src": "8315:11:1",
														"valueSize": 1
													},
													{
														"declaration": 924,
														"isOffset": false,
														"isSlot": false,
														"src": "7927:6:1",
														"valueSize": 1
													},
													{
														"declaration": 914,
														"isOffset": false,
														"isSlot": false,
														"src": "8344:5:1",
														"valueSize": 1
													}
												],
												"id": 926,
												"nodeType": "InlineAssembly",
												"src": "7675:936:1"
											},
											{
												"expression": {
													"id": 927,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 924,
													"src": "8627:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 922,
												"id": 928,
												"nodeType": "Return",
												"src": "8620:13:1"
											}
										]
									},
									"id": 930,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "external_call",
									"nameLocation": "7538:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 912,
												"mutability": "mutable",
												"name": "destination",
												"nameLocation": "7560:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "7552:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 911,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7552:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 914,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7578:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "7573:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 913,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "7573:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 916,
												"mutability": "mutable",
												"name": "dataLength",
												"nameLocation": "7590:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "7585:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 915,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "7585:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 918,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7615:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "7602:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 917,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7602:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7551:69:1"
									},
									"returnParameters": {
										"id": 922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "7638:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 920,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7638:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7637:6:1"
									},
									"scope": 1291,
									"src": "7529:1111:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 975,
										"nodeType": "Block",
										"src": "8887:259:1",
										"statements": [
											{
												"assignments": [
													939
												],
												"declarations": [
													{
														"constant": false,
														"id": 939,
														"mutability": "mutable",
														"name": "count",
														"nameLocation": "8902:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 975,
														"src": "8897:10:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 938,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "8897:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 941,
												"initialValue": {
													"hexValue": "30",
													"id": 940,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "8910:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8897:14:1"
											},
											{
												"body": {
													"id": 971,
													"nodeType": "Block",
													"src": "8958:160:1",
													"statements": [
														{
															"condition": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 953,
																		"name": "confirmations",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 312,
																		"src": "8976:13:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
																			"typeString": "mapping(uint256 => mapping(address => bool))"
																		}
																	},
																	"id": 955,
																	"indexExpression": {
																		"id": 954,
																		"name": "transactionId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 933,
																		"src": "8990:13:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "8976:28:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 959,
																"indexExpression": {
																	"baseExpression": {
																		"id": 956,
																		"name": "owners",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 319,
																		"src": "9005:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_storage",
																			"typeString": "address[] storage ref"
																		}
																	},
																	"id": 958,
																	"indexExpression": {
																		"id": 957,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 943,
																		"src": "9012:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "9005:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8976:39:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 964,
															"nodeType": "IfStatement",
															"src": "8972:71:1",
															"trueBody": {
																"expression": {
																	"id": 962,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 960,
																		"name": "count",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 939,
																		"src": "9033:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "+=",
																	"rightHandSide": {
																		"hexValue": "31",
																		"id": 961,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9042:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "9033:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 963,
																"nodeType": "ExpressionStatement",
																"src": "9033:10:1"
															}
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 967,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 965,
																	"name": "count",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 939,
																	"src": "9061:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 966,
																	"name": "required",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 321,
																	"src": "9070:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9061:17:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 970,
															"nodeType": "IfStatement",
															"src": "9057:50:1",
															"trueBody": {
																"expression": {
																	"hexValue": "74727565",
																	"id": 968,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9103:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"functionReturnParameters": 937,
																"id": 969,
																"nodeType": "Return",
																"src": "9096:11:1"
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 946,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 943,
														"src": "8936:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 947,
															"name": "owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 319,
															"src": "8938:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 948,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8945:6:1",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8938:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8936:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 972,
												"initializationExpression": {
													"assignments": [
														943
													],
													"declarations": [
														{
															"constant": false,
															"id": 943,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "8931:1:1",
															"nodeType": "VariableDeclaration",
															"scope": 972,
															"src": "8926:6:1",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 942,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "8926:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 945,
													"initialValue": {
														"hexValue": "30",
														"id": 944,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8933:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "8926:8:1"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 951,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "8953:3:1",
														"subExpression": {
															"id": 950,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 943,
															"src": "8953:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 952,
													"nodeType": "ExpressionStatement",
													"src": "8953:3:1"
												},
												"nodeType": "ForStatement",
												"src": "8921:197:1"
											},
											{
												"expression": {
													"hexValue": "66616c7365",
													"id": 973,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "9134:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "false"
												},
												"functionReturnParameters": 937,
												"id": 974,
												"nodeType": "Return",
												"src": "9127:12:1"
											}
										]
									},
									"documentation": {
										"id": 931,
										"nodeType": "StructuredDocumentation",
										"src": "8646:140:1",
										"text": "@dev Returns the confirmation status of a transaction.\n @param transactionId Transaction ID.\n @return Confirmation status."
									},
									"functionSelector": "784547a7",
									"id": 976,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isConfirmed",
									"nameLocation": "8800:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "8817:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 976,
												"src": "8812:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 932,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "8812:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8811:20:1"
									},
									"returnParameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 976,
												"src": "8877:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 935,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8877:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8876:6:1"
									},
									"scope": 1291,
									"src": "8791:355:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1014,
										"nodeType": "Block",
										"src": "9656:300:1",
										"statements": [
											{
												"expression": {
													"id": 993,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 991,
														"name": "transactionId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 989,
														"src": "9666:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 992,
														"name": "transactionCount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 323,
														"src": "9682:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9666:32:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 994,
												"nodeType": "ExpressionStatement",
												"src": "9666:32:1"
											},
											{
												"expression": {
													"id": 1004,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 995,
															"name": "transactions",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 306,
															"src": "9708:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Transaction_$332_storage_$",
																"typeString": "mapping(uint256 => struct MultiSigWallet.Transaction storage ref)"
															}
														},
														"id": 997,
														"indexExpression": {
															"id": 996,
															"name": "transactionId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 989,
															"src": "9721:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9708:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Transaction_$332_storage",
															"typeString": "struct MultiSigWallet.Transaction storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 999,
																"name": "destination",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 979,
																"src": "9777:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1000,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 981,
																"src": "9809:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1001,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 983,
																"src": "9834:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															{
																"hexValue": "66616c7365",
																"id": 1002,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9862:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 998,
															"name": "Transaction",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 332,
															"src": "9738:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Transaction_$332_storage_ptr_$",
																"typeString": "type(struct MultiSigWallet.Transaction storage pointer)"
															}
														},
														"id": 1003,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"nameLocations": [
															"9764:11:1",
															"9802:5:1",
															"9828:4:1",
															"9852:8:1"
														],
														"names": [
															"destination",
															"value",
															"data",
															"executed"
														],
														"nodeType": "FunctionCall",
														"src": "9738:140:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Transaction_$332_memory_ptr",
															"typeString": "struct MultiSigWallet.Transaction memory"
														}
													},
													"src": "9708:170:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Transaction_$332_storage",
														"typeString": "struct MultiSigWallet.Transaction storage ref"
													}
												},
												"id": 1005,
												"nodeType": "ExpressionStatement",
												"src": "9708:170:1"
											},
											{
												"expression": {
													"id": 1008,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1006,
														"name": "transactionCount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 323,
														"src": "9888:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1007,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9908:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "9888:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1009,
												"nodeType": "ExpressionStatement",
												"src": "9888:21:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1011,
															"name": "transactionId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 989,
															"src": "9935:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1010,
														"name": "Submission",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 272,
														"src": "9924:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1012,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9924:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1013,
												"nodeType": "EmitStatement",
												"src": "9919:30:1"
											}
										]
									},
									"documentation": {
										"id": 977,
										"nodeType": "StructuredDocumentation",
										"src": "9193:295:1",
										"text": "@dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n @param destination Transaction target address.\n @param value Transaction ether value.\n @param data Transaction data payload.\n @return transactionId Returns transaction ID."
									},
									"id": 1015,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 986,
													"name": "destination",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 979,
													"src": "9602:11:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 987,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 985,
												"name": "notNull",
												"nameLocations": [
													"9594:7:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 451,
												"src": "9594:7:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "9594:20:1"
										}
									],
									"name": "addTransaction",
									"nameLocation": "9502:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 979,
												"mutability": "mutable",
												"name": "destination",
												"nameLocation": "9525:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "9517:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 978,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9517:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 981,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9543:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "9538:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 980,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "9538:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9563:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "9550:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 982,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9550:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9516:52:1"
									},
									"returnParameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "9637:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "9632:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 988,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "9632:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9631:20:1"
									},
									"scope": 1291,
									"src": "9493:463:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1047,
										"nodeType": "Block",
										"src": "10270:137:1",
										"statements": [
											{
												"body": {
													"condition": {
														"baseExpression": {
															"baseExpression": {
																"id": 1034,
																"name": "confirmations",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 312,
																"src": "10333:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(uint256 => mapping(address => bool))"
																}
															},
															"id": 1036,
															"indexExpression": {
																"id": 1035,
																"name": "transactionId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1018,
																"src": "10347:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10333:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1040,
														"indexExpression": {
															"baseExpression": {
																"id": 1037,
																"name": "owners",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 319,
																"src": "10362:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_storage",
																	"typeString": "address[] storage ref"
																}
															},
															"id": 1039,
															"indexExpression": {
																"id": 1038,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1024,
																"src": "10369:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10362:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "10333:39:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1045,
													"nodeType": "IfStatement",
													"src": "10329:71:1",
													"trueBody": {
														"expression": {
															"id": 1043,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1041,
																"name": "count",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1021,
																"src": "10390:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 1042,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10399:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10390:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1044,
														"nodeType": "ExpressionStatement",
														"src": "10390:10:1"
													}
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1027,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1024,
														"src": "10295:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1028,
															"name": "owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 319,
															"src": "10297:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 1029,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10304:6:1",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "10297:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10295:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1046,
												"initializationExpression": {
													"assignments": [
														1024
													],
													"declarations": [
														{
															"constant": false,
															"id": 1024,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "10290:1:1",
															"nodeType": "VariableDeclaration",
															"scope": 1046,
															"src": "10285:6:1",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1023,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "10285:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1026,
													"initialValue": {
														"hexValue": "30",
														"id": 1025,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10292:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "10285:8:1"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1032,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "10312:3:1",
														"subExpression": {
															"id": 1031,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1024,
															"src": "10312:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1033,
													"nodeType": "ExpressionStatement",
													"src": "10312:3:1"
												},
												"nodeType": "ForStatement",
												"src": "10280:120:1"
											}
										]
									},
									"documentation": {
										"id": 1016,
										"nodeType": "StructuredDocumentation",
										"src": "10004:150:1",
										"text": "@dev Returns number of confirmations of a transaction.\n @param transactionId Transaction ID.\n @return count Number of confirmations."
									},
									"functionSelector": "8b51d13f",
									"id": 1048,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getConfirmationCount",
									"nameLocation": "10168:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1018,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "10194:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 1048,
												"src": "10189:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1017,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "10189:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10188:20:1"
									},
									"returnParameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "count",
												"nameLocation": "10259:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 1048,
												"src": "10254:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1020,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "10254:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10253:12:1"
									},
									"scope": 1291,
									"src": "10159:248:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1088,
										"nodeType": "Block",
										"src": "10794:196:1",
										"statements": [
											{
												"body": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1081,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1074,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1068,
																"name": "pending",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1051,
																"src": "10863:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"id": 1073,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "10874:25:1",
																"subExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1069,
																			"name": "transactions",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 306,
																			"src": "10875:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Transaction_$332_storage_$",
																				"typeString": "mapping(uint256 => struct MultiSigWallet.Transaction storage ref)"
																			}
																		},
																		"id": 1071,
																		"indexExpression": {
																			"id": 1070,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1059,
																			"src": "10888:1:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "10875:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Transaction_$332_storage",
																			"typeString": "struct MultiSigWallet.Transaction storage ref"
																		}
																	},
																	"id": 1072,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10891:8:1",
																	"memberName": "executed",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 331,
																	"src": "10875:24:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "10863:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "||",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1080,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1075,
																"name": "executed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1053,
																"src": "10919:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1076,
																		"name": "transactions",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 306,
																		"src": "10931:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Transaction_$332_storage_$",
																			"typeString": "mapping(uint256 => struct MultiSigWallet.Transaction storage ref)"
																		}
																	},
																	"id": 1078,
																	"indexExpression": {
																		"id": 1077,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1059,
																		"src": "10944:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10931:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Transaction_$332_storage",
																		"typeString": "struct MultiSigWallet.Transaction storage ref"
																	}
																},
																"id": 1079,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "10947:8:1",
																"memberName": "executed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 331,
																"src": "10931:24:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "10919:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "10863:92:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1086,
													"nodeType": "IfStatement",
													"src": "10856:127:1",
													"trueBody": {
														"expression": {
															"id": 1084,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1082,
																"name": "count",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1056,
																"src": "10973:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 1083,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10982:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10973:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1085,
														"nodeType": "ExpressionStatement",
														"src": "10973:10:1"
													}
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1064,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1062,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1059,
														"src": "10819:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1063,
														"name": "transactionCount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 323,
														"src": "10821:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10819:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1087,
												"initializationExpression": {
													"assignments": [
														1059
													],
													"declarations": [
														{
															"constant": false,
															"id": 1059,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "10814:1:1",
															"nodeType": "VariableDeclaration",
															"scope": 1087,
															"src": "10809:6:1",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1058,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "10809:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1061,
													"initialValue": {
														"hexValue": "30",
														"id": 1060,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10816:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "10809:8:1"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1066,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "10839:3:1",
														"subExpression": {
															"id": 1065,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1059,
															"src": "10839:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1067,
													"nodeType": "ExpressionStatement",
													"src": "10839:3:1"
												},
												"nodeType": "ForStatement",
												"src": "10804:179:1"
											}
										]
									},
									"documentation": {
										"id": 1049,
										"nodeType": "StructuredDocumentation",
										"src": "10413:257:1",
										"text": "@dev Returns total number of transactions after filers are applied.\n @param pending Include pending transactions.\n @param executed Include executed transactions.\n @return count Total number of transactions after filters are applied."
									},
									"functionSelector": "54741525",
									"id": 1089,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTransactionCount",
									"nameLocation": "10684:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1054,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1051,
												"mutability": "mutable",
												"name": "pending",
												"nameLocation": "10709:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1089,
												"src": "10704:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1050,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10704:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1053,
												"mutability": "mutable",
												"name": "executed",
												"nameLocation": "10723:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 1089,
												"src": "10718:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1052,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10718:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10703:29:1"
									},
									"returnParameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1056,
												"mutability": "mutable",
												"name": "count",
												"nameLocation": "10783:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 1089,
												"src": "10778:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1055,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "10778:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10777:12:1"
									},
									"scope": 1291,
									"src": "10675:315:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1098,
										"nodeType": "Block",
										"src": "11162:30:1",
										"statements": [
											{
												"expression": {
													"id": 1096,
													"name": "owners",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 319,
													"src": "11179:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage",
														"typeString": "address[] storage ref"
													}
												},
												"functionReturnParameters": 1095,
												"id": 1097,
												"nodeType": "Return",
												"src": "11172:13:1"
											}
										]
									},
									"documentation": {
										"id": 1090,
										"nodeType": "StructuredDocumentation",
										"src": "10996:73:1",
										"text": "@dev Returns list of owners.\n @return List of owner addresses."
									},
									"functionSelector": "a0e67e2b",
									"id": 1099,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getOwners",
									"nameLocation": "11083:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1091,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11092:2:1"
									},
									"returnParameters": {
										"id": 1095,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1094,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1099,
												"src": "11140:16:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1092,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11140:7:1",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1093,
													"nodeType": "ArrayTypeName",
													"src": "11140:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11139:18:1"
									},
									"scope": 1291,
									"src": "11074:118:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1187,
										"nodeType": "Block",
										"src": "11514:450:1",
										"statements": [
											{
												"assignments": [
													1112
												],
												"declarations": [
													{
														"constant": false,
														"id": 1112,
														"mutability": "mutable",
														"name": "confirmationsTemp",
														"nameLocation": "11541:17:1",
														"nodeType": "VariableDeclaration",
														"scope": 1187,
														"src": "11524:34:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[]"
														},
														"typeName": {
															"baseType": {
																"id": 1110,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11524:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1111,
															"nodeType": "ArrayTypeName",
															"src": "11524:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																"typeString": "address[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1119,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1116,
																"name": "owners",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 319,
																"src": "11575:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_storage",
																	"typeString": "address[] storage ref"
																}
															},
															"id": 1117,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "11582:6:1",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "11575:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1115,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "11561:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (address[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1113,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11565:7:1",
																"stateMutability": "nonpayable",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1114,
															"nodeType": "ArrayTypeName",
															"src": "11565:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																"typeString": "address[]"
															}
														}
													},
													"id": 1118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11561:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11524:65:1"
											},
											{
												"assignments": [
													1121
												],
												"declarations": [
													{
														"constant": false,
														"id": 1121,
														"mutability": "mutable",
														"name": "count",
														"nameLocation": "11604:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 1187,
														"src": "11599:10:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1120,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "11599:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1123,
												"initialValue": {
													"hexValue": "30",
													"id": 1122,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11612:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11599:14:1"
											},
											{
												"assignments": [
													1125
												],
												"declarations": [
													{
														"constant": false,
														"id": 1125,
														"mutability": "mutable",
														"name": "i",
														"nameLocation": "11628:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 1187,
														"src": "11623:6:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1124,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "11623:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1126,
												"nodeType": "VariableDeclarationStatement",
												"src": "11623:6:1"
											},
											{
												"body": {
													"condition": {
														"baseExpression": {
															"baseExpression": {
																"id": 1138,
																"name": "confirmations",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 312,
																"src": "11687:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(uint256 => mapping(address => bool))"
																}
															},
															"id": 1140,
															"indexExpression": {
																"id": 1139,
																"name": "transactionId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1102,
																"src": "11701:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11687:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1144,
														"indexExpression": {
															"baseExpression": {
																"id": 1141,
																"name": "owners",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 319,
																"src": "11716:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_storage",
																	"typeString": "address[] storage ref"
																}
															},
															"id": 1143,
															"indexExpression": {
																"id": 1142,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1125,
																"src": "11723:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11716:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "11687:39:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1158,
													"nodeType": "IfStatement",
													"src": "11683:142:1",
													"trueBody": {
														"id": 1157,
														"nodeType": "Block",
														"src": "11728:97:1",
														"statements": [
															{
																"expression": {
																	"id": 1151,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"baseExpression": {
																			"id": 1145,
																			"name": "confirmationsTemp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1112,
																			"src": "11746:17:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																				"typeString": "address[] memory"
																			}
																		},
																		"id": 1147,
																		"indexExpression": {
																			"id": 1146,
																			"name": "count",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1121,
																			"src": "11764:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": true,
																		"nodeType": "IndexAccess",
																		"src": "11746:24:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"baseExpression": {
																			"id": 1148,
																			"name": "owners",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 319,
																			"src": "11773:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_storage",
																				"typeString": "address[] storage ref"
																			}
																		},
																		"id": 1150,
																		"indexExpression": {
																			"id": 1149,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1125,
																			"src": "11780:1:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "11773:9:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "11746:36:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1152,
																"nodeType": "ExpressionStatement",
																"src": "11746:36:1"
															},
															{
																"expression": {
																	"id": 1155,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 1153,
																		"name": "count",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1121,
																		"src": "11800:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "+=",
																	"rightHandSide": {
																		"hexValue": "31",
																		"id": 1154,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11809:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "11800:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1156,
																"nodeType": "ExpressionStatement",
																"src": "11800:10:1"
															}
														]
													}
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1131,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1125,
														"src": "11649:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1132,
															"name": "owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 319,
															"src": "11651:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 1133,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "11658:6:1",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "11651:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11649:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1159,
												"initializationExpression": {
													"expression": {
														"id": 1129,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1127,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1125,
															"src": "11644:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"hexValue": "30",
															"id": 1128,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11646:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "11644:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1130,
													"nodeType": "ExpressionStatement",
													"src": "11644:3:1"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1136,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "11666:3:1",
														"subExpression": {
															"id": 1135,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1125,
															"src": "11666:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1137,
													"nodeType": "ExpressionStatement",
													"src": "11666:3:1"
												},
												"nodeType": "ForStatement",
												"src": "11639:186:1"
											},
											{
												"expression": {
													"id": 1166,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1160,
														"name": "_confirmations",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1106,
														"src": "11834:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1164,
																"name": "count",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1121,
																"src": "11865:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1163,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "NewExpression",
															"src": "11851:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
																"typeString": "function (uint256) pure returns (address[] memory)"
															},
															"typeName": {
																"baseType": {
																	"id": 1161,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11855:7:1",
																	"stateMutability": "nonpayable",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1162,
																"nodeType": "ArrayTypeName",
																"src": "11855:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																	"typeString": "address[]"
																}
															}
														},
														"id": 1165,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11851:20:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"src": "11834:37:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"id": 1167,
												"nodeType": "ExpressionStatement",
												"src": "11834:37:1"
											},
											{
												"body": {
													"expression": {
														"id": 1184,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"baseExpression": {
																"id": 1178,
																"name": "_confirmations",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1106,
																"src": "11917:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																	"typeString": "address[] memory"
																}
															},
															"id": 1180,
															"indexExpression": {
																"id": 1179,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1125,
																"src": "11932:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "IndexAccess",
															"src": "11917:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"baseExpression": {
																"id": 1181,
																"name": "confirmationsTemp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1112,
																"src": "11937:17:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																	"typeString": "address[] memory"
																}
															},
															"id": 1183,
															"indexExpression": {
																"id": 1182,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1125,
																"src": "11955:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11937:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "11917:40:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1185,
													"nodeType": "ExpressionStatement",
													"src": "11917:40:1"
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1172,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1125,
														"src": "11891:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1173,
														"name": "count",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1121,
														"src": "11893:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11891:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1186,
												"initializationExpression": {
													"expression": {
														"id": 1170,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1168,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1125,
															"src": "11886:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"hexValue": "30",
															"id": 1169,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11888:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "11886:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1171,
													"nodeType": "ExpressionStatement",
													"src": "11886:3:1"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1176,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "11900:3:1",
														"subExpression": {
															"id": 1175,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1125,
															"src": "11900:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1177,
													"nodeType": "ExpressionStatement",
													"src": "11900:3:1"
												},
												"nodeType": "ForStatement",
												"src": "11881:76:1"
											}
										]
									},
									"documentation": {
										"id": 1100,
										"nodeType": "StructuredDocumentation",
										"src": "11198:183:1",
										"text": "@dev Returns array with owner addresses, which confirmed transaction.\n @param transactionId Transaction ID.\n @return _confirmations Returns array of owner addresses."
									},
									"functionSelector": "b5dc40c3",
									"id": 1188,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getConfirmations",
									"nameLocation": "11395:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1102,
												"mutability": "mutable",
												"name": "transactionId",
												"nameLocation": "11417:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "11412:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1101,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "11412:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11411:20:1"
									},
									"returnParameters": {
										"id": 1107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1106,
												"mutability": "mutable",
												"name": "_confirmations",
												"nameLocation": "11494:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "11477:31:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1104,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "11477:7:1",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1105,
													"nodeType": "ArrayTypeName",
													"src": "11477:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11476:33:1"
									},
									"scope": 1291,
									"src": "11386:578:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1289,
										"nodeType": "Block",
										"src": "12485:523:1",
										"statements": [
											{
												"assignments": [
													1207
												],
												"declarations": [
													{
														"constant": false,
														"id": 1207,
														"mutability": "mutable",
														"name": "transactionIdsTemp",
														"nameLocation": "12509:18:1",
														"nodeType": "VariableDeclaration",
														"scope": 1289,
														"src": "12495:32:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 1205,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "12495:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1206,
															"nodeType": "ArrayTypeName",
															"src": "12495:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1213,
												"initialValue": {
													"arguments": [
														{
															"id": 1211,
															"name": "transactionCount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 323,
															"src": "12541:16:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1210,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "12530:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (uint256[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1208,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "12534:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1209,
															"nodeType": "ArrayTypeName",
															"src": "12534:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														}
													},
													"id": 1212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12530:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12495:63:1"
											},
											{
												"assignments": [
													1215
												],
												"declarations": [
													{
														"constant": false,
														"id": 1215,
														"mutability": "mutable",
														"name": "count",
														"nameLocation": "12573:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 1289,
														"src": "12568:10:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1214,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "12568:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1217,
												"initialValue": {
													"hexValue": "30",
													"id": 1216,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12581:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12568:14:1"
											},
											{
												"assignments": [
													1219
												],
												"declarations": [
													{
														"constant": false,
														"id": 1219,
														"mutability": "mutable",
														"name": "i",
														"nameLocation": "12597:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 1289,
														"src": "12592:6:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1218,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "12592:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1220,
												"nodeType": "VariableDeclarationStatement",
												"src": "12592:6:1"
											},
											{
												"body": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1244,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1237,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1231,
																"name": "pending",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1195,
																"src": "12662:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"id": 1236,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "12673:25:1",
																"subExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 1232,
																			"name": "transactions",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 306,
																			"src": "12674:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Transaction_$332_storage_$",
																				"typeString": "mapping(uint256 => struct MultiSigWallet.Transaction storage ref)"
																			}
																		},
																		"id": 1234,
																		"indexExpression": {
																			"id": 1233,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1219,
																			"src": "12687:1:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "12674:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Transaction_$332_storage",
																			"typeString": "struct MultiSigWallet.Transaction storage ref"
																		}
																	},
																	"id": 1235,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "12690:8:1",
																	"memberName": "executed",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 331,
																	"src": "12674:24:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "12662:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "||",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1243,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1238,
																"name": "executed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1197,
																"src": "12718:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1239,
																		"name": "transactions",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 306,
																		"src": "12730:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Transaction_$332_storage_$",
																			"typeString": "mapping(uint256 => struct MultiSigWallet.Transaction storage ref)"
																		}
																	},
																	"id": 1241,
																	"indexExpression": {
																		"id": 1240,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1219,
																		"src": "12743:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "12730:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Transaction_$332_storage",
																		"typeString": "struct MultiSigWallet.Transaction storage ref"
																	}
																},
																"id": 1242,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "12746:8:1",
																"memberName": "executed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 331,
																"src": "12730:24:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "12718:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "12662:92:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1256,
													"nodeType": "IfStatement",
													"src": "12655:203:1",
													"trueBody": {
														"id": 1255,
														"nodeType": "Block",
														"src": "12768:90:1",
														"statements": [
															{
																"expression": {
																	"id": 1249,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"baseExpression": {
																			"id": 1245,
																			"name": "transactionIdsTemp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1207,
																			"src": "12786:18:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																				"typeString": "uint256[] memory"
																			}
																		},
																		"id": 1247,
																		"indexExpression": {
																			"id": 1246,
																			"name": "count",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1215,
																			"src": "12805:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": true,
																		"nodeType": "IndexAccess",
																		"src": "12786:25:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"id": 1248,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1219,
																		"src": "12814:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "12786:29:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1250,
																"nodeType": "ExpressionStatement",
																"src": "12786:29:1"
															},
															{
																"expression": {
																	"id": 1253,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 1251,
																		"name": "count",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1215,
																		"src": "12833:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "+=",
																	"rightHandSide": {
																		"hexValue": "31",
																		"id": 1252,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "12842:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "12833:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1254,
																"nodeType": "ExpressionStatement",
																"src": "12833:10:1"
															}
														]
													}
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1225,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1219,
														"src": "12618:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1226,
														"name": "transactionCount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 323,
														"src": "12620:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12618:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1257,
												"initializationExpression": {
													"expression": {
														"id": 1223,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1221,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1219,
															"src": "12613:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"hexValue": "30",
															"id": 1222,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12615:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "12613:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1224,
													"nodeType": "ExpressionStatement",
													"src": "12613:3:1"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1229,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "12638:3:1",
														"subExpression": {
															"id": 1228,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1219,
															"src": "12638:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1230,
													"nodeType": "ExpressionStatement",
													"src": "12638:3:1"
												},
												"nodeType": "ForStatement",
												"src": "12608:250:1"
											},
											{
												"expression": {
													"id": 1266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1258,
														"name": "_transactionIds",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1201,
														"src": "12867:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1264,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1262,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1193,
																	"src": "12896:2:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1263,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1191,
																	"src": "12901:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "12896:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1261,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "NewExpression",
															"src": "12885:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
																"typeString": "function (uint256) pure returns (uint256[] memory)"
															},
															"typeName": {
																"baseType": {
																	"id": 1259,
																	"name": "uint",
																	"nodeType": "ElementaryTypeName",
																	"src": "12889:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1260,
																"nodeType": "ArrayTypeName",
																"src": "12889:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																	"typeString": "uint256[]"
																}
															}
														},
														"id": 1265,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12885:21:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[] memory"
														}
													},
													"src": "12867:39:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"id": 1267,
												"nodeType": "ExpressionStatement",
												"src": "12867:39:1"
											},
											{
												"body": {
													"expression": {
														"id": 1286,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"baseExpression": {
																"id": 1278,
																"name": "_transactionIds",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1201,
																"src": "12952:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																	"typeString": "uint256[] memory"
																}
															},
															"id": 1282,
															"indexExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1281,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1279,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1219,
																	"src": "12968:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1280,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1191,
																	"src": "12972:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "12968:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "IndexAccess",
															"src": "12952:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"baseExpression": {
																"id": 1283,
																"name": "transactionIdsTemp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1207,
																"src": "12980:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																	"typeString": "uint256[] memory"
																}
															},
															"id": 1285,
															"indexExpression": {
																"id": 1284,
																"name": "i",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1219,
																"src": "12999:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "12980:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "12952:49:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1287,
													"nodeType": "ExpressionStatement",
													"src": "12952:49:1"
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1272,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1219,
														"src": "12929:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1273,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1193,
														"src": "12931:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12929:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1288,
												"initializationExpression": {
													"expression": {
														"id": 1270,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1268,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1219,
															"src": "12921:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"id": 1269,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1191,
															"src": "12923:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "12921:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1271,
													"nodeType": "ExpressionStatement",
													"src": "12921:6:1"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1276,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "12935:3:1",
														"subExpression": {
															"id": 1275,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1219,
															"src": "12935:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1277,
													"nodeType": "ExpressionStatement",
													"src": "12935:3:1"
												},
												"nodeType": "ForStatement",
												"src": "12916:85:1"
											}
										]
									},
									"documentation": {
										"id": 1189,
										"nodeType": "StructuredDocumentation",
										"src": "11970:354:1",
										"text": "@dev Returns list of transaction IDs in defined range.\n @param from Index start position of transaction array.\n @param to Index end position of transaction array.\n @param pending Include pending transactions.\n @param executed Include executed transactions.\n @return _transactionIds Returns array of transaction IDs."
									},
									"functionSelector": "a8abe69a",
									"id": 1290,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTransactionIds",
									"nameLocation": "12338:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1191,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12361:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "12356:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1190,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "12356:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12372:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "12367:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1192,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "12367:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "pending",
												"nameLocation": "12381:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "12376:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1194,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12376:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1197,
												"mutability": "mutable",
												"name": "executed",
												"nameLocation": "12395:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "12390:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1196,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12390:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12355:49:1"
									},
									"returnParameters": {
										"id": 1202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1201,
												"mutability": "mutable",
												"name": "_transactionIds",
												"nameLocation": "12464:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 1290,
												"src": "12450:29:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1199,
														"name": "uint",
														"nodeType": "ElementaryTypeName",
														"src": "12450:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1200,
													"nodeType": "ArrayTypeName",
													"src": "12450:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12449:31:1"
									},
									"scope": 1291,
									"src": "12329:679:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1292,
							"src": "218:12792:1",
							"usedErrors": [],
							"usedEvents": [
								262,
								268,
								272,
								276,
								280,
								286,
								290,
								294,
								298
							]
						}
					],
					"src": "32:12978:1"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}